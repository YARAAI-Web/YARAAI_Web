{
  "c_code": [
    "#include \"3c94abe7-6c08-4259-8afd-362edc544e52.h\"",
    "",
    "BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)",
    "{",
    "  BOOL result; // eax",
    "",
    "  hInstance = hinstDLL;",
    "  result = 1;",
    "  if ( !dword_10009904 )",
    "    dword_10009904 = 1;",
    "  return result;",
    "}",
    "",
    "",
    "void *__cdecl LibClassDesc(int a1)",
    "{",
    "  if ( a1 )",
    "    return 0;",
    "  else",
    "    return &unk_10009A08;",
    "}",
    "",
    "",
    "int LibVersion()",
    "{",
    "  return 1;",
    "}",
    "",
    "",
    "int LibDescription()",
    "{",
    "  return sub_10001040(1);",
    "}",
    "",
    "",
    "_DWORD *__thiscall sub_100012D0(_DWORD *Block, char a2)",
    "{",
    "  *Block = &off_10007118;",
    "  if ( (a2 & 1) != 0 )",
    "    j__free(Block);",
    "  return Block;",
    "}",
    "",
    "",
    "void *__thiscall sub_10001640(void *Block, char a2)",
    "{",
    "  sub_10001330();",
    "  if ( (a2 & 1) != 0 )",
    "    j__free(Block);",
    "  return Block;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void __cdecl j__free(void *Block)",
    "{",
    "}int __onexitinit()",
    "{",
    "  _DWORD *v0; // eax",
    "",
    "  v0 = malloc(0x80u);",
    "  dword_1000A268 = (int)v0;",
    "  if ( !v0 )",
    "    return 24;",
    "  *v0 = 0;",
    "  dword_1000A264 = dword_1000A268;",
    "  return 0;",
    "}",
    "",
    "",
    "int __stdcall sub_1000226D(int a1, int a2, int a3)",
    "{",
    "  void *v3; // esp",
    "  DWORD *v4; // eax",
    "  DWORD *v5; // esi",
    "  BOOL v6; // eax",
    "  DWORD CurrentThreadId; // eax",
    "  struct _OSVERSIONINFOA v9; // [esp-94h] [ebp-98h] BYREF",
    "",
    "  if ( a2 == 1 )",
    "  {",
    "    v3 = alloca(148);",
    "    v9.dwOSVersionInfoSize = 148;",
    "    if ( !GetVersionExA(&v9) )",
    "      return 0;",
    "    dword_10009C34 = v9.dwPlatformId;",
    "    dword_10009C40 = v9.dwMajorVersion;",
    "    dword_10009C44 = v9.dwMinorVersion;",
    "    dword_10009C38 = v9.dwBuildNumber & 0x7FFF;",
    "    if ( v9.dwPlatformId != 2 )",
    "      dword_10009C38 = v9.dwBuildNumber & 0x7FFF | 0x8000;",
    "    dword_10009C3C = v9.dwMinorVersion + (v9.dwMajorVersion << 8);",
    "    if ( !_heap_init(1) )",
    "      return 0;",
    "    if ( !sub_100038A1() )",
    "      goto LABEL_7;",
    "    sub_1000400C();",
    "    dword_1000A298 = (int)GetCommandLineA();",
    "    Block = (char *)__crtGetEnvironmentStringsA();",
    "    if ( _ioinit() >= 0 )",
    "    {",
    "      if ( sub_10003E48() >= 0 && _setenvp() >= 0 && !sub_100034C6() )",
    "      {",
    "        ++dword_10009AC0;",
    "        return 1;",
    "      }",
    "      _ioterm();",
    "    }",
    "    _mtterm();",
    "LABEL_7:",
    "    _heap_term();",
    "    return 0;",
    "  }",
    "  if ( a2 )",
    "  {",
    "    if ( a2 == 2 )",
    "    {",
    "      v4 = (DWORD *)sub_10003910(1, 136);",
    "      v5 = v4;",
    "      if ( !v4 )",
    "        return 0;",
    "      v6 = TlsSetValue(dwTlsIndex, v4);",
    "      *(_DWORD *)&v9.szCSDVersion[124] = v5;",
    "      if ( !v6 )",
    "      {",
    "        free(*(void **)&v9.szCSDVersion[124]);",
    "        return 0;",
    "      }",
    "      _initptd(*(_DWORD *)&v9.szCSDVersion[124]);",
    "      CurrentThreadId = GetCurrentThreadId();",
    "      v5[1] = -1;",
    "      *v5 = CurrentThreadId;",
    "    }",
    "    else if ( a2 == 3 )",
    "    {",
    "      sub_10003736(0);",
    "    }",
    "  }",
    "  else",
    "  {",
    "    if ( dword_10009AC0 <= 0 )",
    "      return 0;",
    "    --dword_10009AC0;",
    "    if ( !dword_10009C70 )",
    "      _cexit();",
    "    _ioterm();",
    "    _mtterm();",
    "    _heap_term();",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)",
    "{",
    "  bool v4; // zf",
    "  BOOL v6; // eax",
    "  DWORD fdwReasona; // [esp+18h] [ebp+Ch]",
    "",
    "  if ( fdwReason )",
    "  {",
    "    if ( fdwReason != 1 && fdwReason != 2 )",
    "      goto LABEL_10;",
    "    if ( dword_1000A29C && !dword_1000A29C(hinstDLL, fdwReason, lpReserved) )",
    "      return 0;",
    "    v4 = sub_1000226D((int)hinstDLL, fdwReason, (int)lpReserved) == 0;",
    "  }",
    "  else",
    "  {",
    "    v4 = dword_10009AC0 == 0;",
    "  }",
    "  if ( v4 )",
    "    return 0;",
    "LABEL_10:",
    "  v6 = DllMain(hinstDLL, fdwReason, lpReserved);",
    "  fdwReasona = v6;",
    "  if ( fdwReason != 1 )",
    "  {",
    "LABEL_13:",
    "    if ( !fdwReason || fdwReason == 3 )",
    "    {",
    "      if ( !sub_1000226D((int)hinstDLL, fdwReason, (int)lpReserved) )",
    "        fdwReasona = 0;",
    "      if ( fdwReasona )",
    "      {",
    "        if ( dword_1000A29C )",
    "          return dword_1000A29C(hinstDLL, fdwReason, lpReserved);",
    "      }",
    "    }",
    "    return fdwReasona;",
    "  }",
    "  if ( !v6 )",
    "  {",
    "    sub_1000226D((int)hinstDLL, 0, (int)lpReserved);",
    "    goto LABEL_13;",
    "  }",
    "  return fdwReasona;",
    "}",
    "",
    "",
    "_DWORD *__cdecl _SEH_prolog(int a1, int a2)",
    "{",
    "  void *v4; // esp",
    "  _DWORD v6[2]; // [esp-8h] [ebp-8h] BYREF",
    "  int v7; // [esp+4h] [ebp+4h]",
    "",
    "  v6[1] = _except_handler3;",
    "  v6[0] = NtCurrentTeb()->NtTib.ExceptionList;",
    "  v4 = alloca(a2);",
    "  v7 = -1;",
    "  return v6;",
    "}",
    "",
    "",
    "// positive sp value has been detected, the output may be wrong!",
    "void _SEH_epilog()",
    "{",
    "}int __cdecl _initptd(int a1)",
    "{",
    "  int result; // eax",
    "",
    "  result = a1;",
    "  *(_DWORD *)(a1 + 84) = &unk_10009390;",
    "  *(_DWORD *)(a1 + 20) = 1;",
    "  return result;",
    "}",
    "",
    "",
    "void __usercall sub_1000400C(int a1@<ebp>)",
    "{",
    "  void (*v1)(void); // eax",
    "",
    "  for ( *(_DWORD *)(a1 - 28) = &unk_10007F40; *(_DWORD *)(a1 - 28) < (unsigned int)&unk_10007F40; *(_DWORD *)(a1 - 28) += 4 )",
    "  {",
    "    *(_DWORD *)(a1 - 4) = 0;",
    "    v1 = **(void (***)(void))(a1 - 28);",
    "    if ( v1 )",
    "      v1();",
    "    *(_DWORD *)(a1 - 4) = -1;",
    "  }",
    "}",
    "",
    "",
    "int __cdecl _except_handler3(int a1, int a2, int a3, int a4)",
    "{",
    "  _DWORD **v4; // ebp",
    "  int v5; // ebx",
    "  _DWORD *v6; // esi",
    "  int v7; // edi",
    "  int v8; // eax",
    "  int v9; // edi",
    "  int v10; // ecx",
    "  int v12; // [esp+14h] [ebp-4h] BYREF",
    "  int savedregs; // [esp+18h] [ebp+0h]",
    "  _DWORD *retaddr; // [esp+1Ch] [ebp+4h] BYREF",
    "",
    "  v4 = &retaddr;",
    "  v5 = a3;",
    "  if ( (*(_DWORD *)(a2 + 4) & 6) != 0 )",
    "  {",
    "    savedregs = a3;",
    "    sub_100055A6();",
    "    return 1;",
    "  }",
    "  else",
    "  {",
    "    v12 = a2;",
    "    savedregs = a4;",
    "    *(_DWORD *)(a3 - 4) = &v12;",
    "    v6 = *(_DWORD **)(a3 + 12);",
    "    v7 = *(_DWORD *)(a3 + 8);",
    "    while ( v6 != (_DWORD *)-1 )",
    "    {",
    "      if ( *(_DWORD *)(v7 + 12 * (_DWORD)v6 + 4) )",
    "      {",
    "        savedregs = (int)v4;",
    "        v8 = (*(int (**)(void))(v7 + 12 * (_DWORD)v6 + 4))();",
    "        v4 = (_DWORD **)retaddr;",
    "        v6 = retaddr;",
    "        v5 = retaddr[3];",
    "        if ( v8 )",
    "        {",
    "          if ( v8 < 0 )",
    "            return 0;",
    "          v9 = *(_DWORD *)(v5 + 8);",
    "          sub_10005564();",
    "          v4 = (_DWORD **)(v5 + 16);",
    "          sub_100055A6();",
    "          savedregs = 1;",
    "          _NLG_Notify();",
    "          *(_DWORD *)(v5 + 12) = *(_DWORD *)(v9 + 4 * v10);",
    "          (*(void (**)(void))(v9 + 4 * v10 + 8))();",
    "        }",
    "      }",
    "      v7 = *(_DWORD *)(v5 + 8);",
    "      v6 = *(_DWORD **)(v7 + 12 * (_DWORD)v6);",
    "    }",
    "    return 1;",
    "  }",
    "}",
    "",
    "",
    "int sub_100050DB()",
    "{",
    "  return _unlock(13);",
    "}",
    "",
    "",
    "void  report_failure()",
    "{",
    "  sub_10006112(1, 0);",
    "  ExitProcess(3u);",
    "}",
    "",
    "",
    "int __cdecl sub_100055A6(int a1, int __return_address, int a3, int a4, int a5, int a6, int a7, int a8, int a9)",
    "{",
    "  int result; // eax",
    "  int v10; // ebx",
    "  int v11; // esi",
    "  int v12; // esi",
    "",
    "  while ( 1 )",
    "  {",
    "    result = a8;",
    "    v10 = *(_DWORD *)(a8 + 8);",
    "    v11 = *(_DWORD *)(a8 + 12);",
    "    if ( v11 == -1 || v11 == a9 )",
    "      break;",
    "    v12 = 3 * v11;",
    "    *(_DWORD *)(a8 + 12) = *(_DWORD *)(v10 + 4 * v12);",
    "    if ( !*(_DWORD *)(v10 + 4 * v12 + 4) )",
    "    {",
    "      _NLG_Notify();",
    "      (*(void (**)(void))(v10 + 4 * v12 + 8))();",
    "    }",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "int __usercall _NLG_Notify@<eax>(int result@<eax>, int a2@<ebp>)",
    "{",
    "  unk_100096BC = *(_DWORD *)(a2 + 8);",
    "  unk_100096B8 = result;",
    "  unk_100096C0 = a2;",
    "  return result;",
    "}",
    "",
    "",
    "int sub_100068D0()",
    "{",
    "  sub_100012F0(268474888);",
    "  return atexit((void (__cdecl *)())sub_100068F0);",
    "}",
    "",
    "",
    "// Microsoft VisualC 2-14/net runtime",
    "int sub_100068F0()",
    "{",
    "}"
  ],
  "h_code": [
    "#include <windows.h>",
    "#include <stdint.h>",
    "#include <stdio.h>",
    "",
    "#include \"defs.h\"",
    "",
    "void JUMPOUT(int a) {",
    "}",
    "",
    "unsigned int _bss_start__ = 0;",
    "unsigned int __cxa_finalize = 0;",
    "BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);",
    "void *__cdecl LibClassDesc(int a1);",
    "int LibVersion();",
    "int LibDescription();",
    "_DWORD *__thiscall sub_100012D0(_DWORD *Block, char a2);",
    "void *__thiscall sub_10001640(void *Block, char a2);",
    "// attributes: thunk",
    "void __cdecl j__free(void *Block);",
    "int __onexitinit();",
    "int __stdcall sub_1000226D(int a1, int a2, int a3);",
    "BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);",
    "_DWORD *__cdecl _SEH_prolog(int a1, int a2);",
    "// positive sp value has been detected, the output may be wrong!",
    "void _SEH_epilog();",
    "int __cdecl _initptd(int a1);",
    "void __usercall sub_1000400C(int a1@<ebp>);",
    "int __cdecl _except_handler3(int a1, int a2, int a3, int a4);",
    "int sub_100050DB();",
    "void  report_failure();",
    "int __cdecl sub_100055A6(int a1, int __return_address, int a3, int a4, int a5, int a6, int a7, int a8, int a9);",
    "int __usercall _NLG_Notify@<eax>(int result@<eax>, int a2@<ebp>);",
    "int sub_100068D0();",
    "// Microsoft VisualC 2-14/net runtime",
    "int sub_100068F0();"
  ],
  "virustotal": {
    "sha256": "e947ad89a87b431798a1511e5ad479810cff8293ee727fe6b3f42df69d6f710a",
    "type_tag": "pedll",
    "popular_threat_name": null,
    "tags": [
      "pedll"
    ]
  }
}