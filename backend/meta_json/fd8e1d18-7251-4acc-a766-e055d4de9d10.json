{
  "get_metadata": {
    "path": "D:\\Whitehat\\web\\YARRAI_Web\\backend\\uploads\\fd8e1d18-7251-4acc-a766-e055d4de9d10.exe",
    "module": "fd8e1d18-7251-4acc-a766-e055d4de9d10.exe",
    "base": "0x140000000",
    "size": "0x1d000",
    "md5": "845e7763ffb4246b3f294b418b0d9b9c",
    "sha256": "0d4e423cb2ba20b3e48bb4b1a93cce4e7e49cb955b6dae20a06b64363d54fb3c",
    "crc32": "0x3c54d050",
    "filesize": "0x19200"
  },
  "get_current_address": "0x140003a70",
  "get_current_function": "0x140003a70",
  "get_entry_points": [
    {
      "address": "0x140002d50",
      "name": "start",
      "size": "0x12"
    }
  ],
  "file_entropy": 6.6386842039241944,
  "string_stats": {
    "string_count": 152,
    "avg_str_len": 0.0,
    "max_str_len": 0
  },
  "pe_headers": {
    "file_name": "fd8e1d18-7251-4acc-a766-e055d4de9d10.exe",
    "machine": "0x8664",
    "number_of_sections": 6,
    "time_date_stamp": "0x63f5a7ce",
    "pointer_to_symbol_table": "0x0",
    "number_of_symbols": 0,
    "size_of_optional_header": 240,
    "characteristics": "0x22",
    "entry_point": "0x2d50",
    "image_base": "0x140000000",
    "section_alignment": "0x1000",
    "file_alignment": "0x200",
    "subsystem": "0x2",
    "dll_characteristics": "0x8160",
    "sections": [
      {
        "name": ".text",
        "virtual_address": "0x1000",
        "virtual_size": "0x2d5c",
        "raw_size": "0x2e00",
        "characteristics": "0x60000020"
      },
      {
        "name": ".rdata",
        "virtual_address": "0x4000",
        "virtual_size": "0x3d84",
        "raw_size": "0x3e00",
        "characteristics": "0x40000040"
      },
      {
        "name": ".data",
        "virtual_address": "0x8000",
        "virtual_size": "0xb88",
        "raw_size": "0x400",
        "characteristics": "0xc0000040"
      },
      {
        "name": ".pdata",
        "virtual_address": "0x9000",
        "virtual_size": "0x3f0",
        "raw_size": "0x400",
        "characteristics": "0x40000040"
      },
      {
        "name": ".rsrc",
        "virtual_address": "0xa000",
        "virtual_size": "0x115b0",
        "raw_size": "0x11600",
        "characteristics": "0x40000040"
      },
      {
        "name": ".reloc",
        "virtual_address": "0x1c000",
        "virtual_size": "0x398",
        "raw_size": "0x400",
        "characteristics": "0x42000040"
      }
    ]
  },
  "virustotal": {
    "sha256": "0d4e423cb2ba20b3e48bb4b1a93cce4e7e49cb955b6dae20a06b64363d54fb3c",
    "type_tag": "peexe",
    "popular_threat_name": null,
    "tags": [
      "peexe",
      "assembly",
      "detect-debug-environment",
      "idle",
      "checks-user-input",
      "64bits"
    ]
  },
  "c_code": [
    "#include \"fd8e1d18-7251-4acc-a766-e055d4de9d10.h\"",
    "",
    "int sub_140001000()",
    "{",
    "  CWinApp::CWinApp((CWinApp *)qword_140008A00, 0);",
    "  dword_140008B4C = 1;",
    "  qword_140008A00[0] = (__int64)&CbabycmpcppApp::`vftable';",
    "  return atexit(sub_140003D40);",
    "}",
    "",
    "",
    "int sub_14000103C()",
    "{",
    "  sub_1400038C0(&unk_140008990);",
    "  return atexit(sub_140003D50);",
    "}",
    "",
    "",
    "__int64 sub_14000105C()",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = sub_140003A44(0, 3584);",
    "  byte_1400089F4 = result;",
    "  return result;",
    "}",
    "",
    "",
    "CWinApp *__fastcall sub_140001090(CWinApp *a1, char a2)",
    "{",
    "  CWinApp::~CWinApp(a1);",
    "  if ( (a2 & 1) == 0 || (a2 & 4) != 0 )",
    "    return a1;",
    "  operator delete(a1);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1400010E0(CWinApp *a1)",
    "{",
    "  CShellManager *v2; // rax",
    "  CShellManager *v3; // rbx",
    "  struct CRuntimeClass *ThisClass; // rax",
    "  HINSTANCE ResourceHandle; // rax",
    "  _QWORD v7[40]; // [rsp+20h] [rbp-268h] BYREF",
    "  void **v8; // [rsp+160h] [rbp-128h] BYREF",
    "  _BYTE v9[24]; // [rsp+178h] [rbp-110h] BYREF",
    "  HICON IconW; // [rsp+190h] [rbp-F8h]",
    "  _QWORD v11[30]; // [rsp+198h] [rbp-F0h] BYREF",
    "  INITCOMMONCONTROLSEX v12; // [rsp+290h] [rbp+8h] BYREF",
    "  CShellManager *v13; // [rsp+298h] [rbp+10h]",
    "",
    "  v12.dwSize = 8;",
    "  v12.dwICC = 255;",
    "  InitCommonControlsEx(&v12);",
    "  CWinApp::InitInstance(a1);",
    "  AfxEnableControlContainer(0);",
    "  v2 = (CShellManager *)operator new(0x18u);",
    "  v13 = v2;",
    "  if ( v2 )",
    "    v3 = CShellManager::CShellManager(v2);",
    "  else",
    "    v3 = 0;",
    "  ThisClass = (struct CRuntimeClass *)CMFCVisualManagerWindows::GetThisClass();",
    "  CMFCVisualManager::SetDefaultManager(ThisClass);",
    "  CWinApp::SetRegistryKey(a1, word_140004A78);",
    "  CDialogEx::CDialogEx((CDialogEx *)v7, 0x66u, 0);",
    "  v7[0] = &CbabycmpcppDlg::`vftable';",
    "  CWnd::CWnd((CWnd *)v11);",
    "  v11[0] = &CEdit::`vftable';",
    "  AfxGetModuleState();",
    "  ResourceHandle = AfxFindResourceHandle((const wchar_t *)0x80, (const wchar_t *)0xE);",
    "  IconW = LoadIconW(ResourceHandle, (LPCWSTR)0x80);",
    "  *((_QWORD *)a1 + 8) = v7;",
    "  CDialog::DoModal((CDialog *)v7);",
    "  if ( v3 )",
    "    (*(void (__fastcall **)(CShellManager *, __int64))(*(_QWORD *)v3 + 8LL))(v3, 1);",
    "  CEdit::~CEdit((CEdit *)v11);",
    "  CDialogImpl::~CDialogImpl((CDialogImpl *)v9);",
    "  v8 = &CBrush::`vftable';",
    "  sub_140001420(&v8);",
    "  CDialog::~CDialog((CDialog *)v7);",
    "  return 0;",
    "}",
    "",
    "",
    "void __fastcall sub_140001250(_QWORD *a1)",
    "{",
    "  CEdit::~CEdit((CEdit *)(a1 + 47));",
    "  CDialogImpl::~CDialogImpl((CDialogImpl *)(a1 + 43));",
    "  a1[40] = &CBrush::`vftable';",
    "  sub_140001420(a1 + 40);",
    "  CDialog::~CDialog((CDialog *)a1);",
    "}",
    "",
    "",
    "void __fastcall sub_1400012A0(_QWORD *a1)",
    "{",
    "  CDialogImpl::~CDialogImpl((CDialogImpl *)(a1 + 43));",
    "  a1[40] = &CBrush::`vftable';",
    "  sub_140001420(a1 + 40);",
    "  CDialog::~CDialog((CDialog *)a1);",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_140001370(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &CBrush::`vftable';",
    "  sub_140001420(a1);",
    "  if ( (a2 & 1) == 0 || (a2 & 4) != 0 )",
    "    return a1;",
    "  operator delete(a1);",
    "  return a1;",
    "}",
    "",
    "",
    "void *__fastcall sub_1400013D0(void *a1, char a2)",
    "{",
    "  sub_140001420(a1);",
    "  if ( (a2 & 1) == 0 || (a2 & 4) != 0 )",
    "    return a1;",
    "  operator delete(a1);",
    "  return a1;",
    "}",
    "",
    "",
    "int __fastcall sub_140001420(CGdiObject *a1)",
    "{",
    "  *(_QWORD *)a1 = &CGdiObject::`vftable';",
    "  return CGdiObject::DeleteObject(a1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_140001480(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &std::exception::`vftable';",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  _std_exception_copy(a2 + 8);",
    "  return a1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_1400014E0(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &std::exception::`vftable';",
    "  _std_exception_destroy(a1 + 1);",
    "  if ( (a2 & 1) != 0 )",
    "    operator delete(a1);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_140001560(_QWORD *a1)",
    "{",
    "  *a1 = &std::exception::`vftable';",
    "  return _std_exception_destroy(a1 + 1);",
    "}",
    "",
    "",
    "void  sub_140001580()",
    "{",
    "  _BYTE pExceptionObject[40]; // [rsp+20h] [rbp-28h] BYREF",
    "",
    "  sub_140001530(pExceptionObject);",
    "  throw (std::bad_array_new_length *)pExceptionObject;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1400015A0(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &std::exception::`vftable';",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  _std_exception_copy(a2 + 8);",
    "  *(_QWORD *)a1 = &std::bad_array_new_length::`vftable';",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1400015E0(__int64 a1, __int64 a2)",
    "{",
    "  *(_QWORD *)a1 = &std::exception::`vftable';",
    "  *(_OWORD *)(a1 + 8) = 0;",
    "  _std_exception_copy(a2 + 8);",
    "  *(_QWORD *)a1 = &std::bad_alloc::`vftable';",
    "  return a1;",
    "}",
    "",
    "",
    "void  sub_140001620()",
    "{",
    "  std::_Xlength_error(\"string too long\");",
    "}",
    "",
    "",
    "__int64 __fastcall sub_140001640(__int64 a1, char a2)",
    "{",
    "  CDialogImpl::~CDialogImpl((CDialogImpl *)(a1 + 344));",
    "  *(_QWORD *)(a1 + 320) = &CBrush::`vftable';",
    "  sub_140001420((CGdiObject *)(a1 + 320));",
    "  CDialog::~CDialog((CDialog *)a1);",
    "  if ( (a2 & 1) == 0 || (a2 & 4) != 0 )",
    "    return a1;",
    "  operator delete((void *)a1);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1400016D0(__int64 a1, char a2)",
    "{",
    "  CEdit::~CEdit((CEdit *)(a1 + 376));",
    "  CDialogImpl::~CDialogImpl((CDialogImpl *)(a1 + 344));",
    "  *(_QWORD *)(a1 + 320) = &CBrush::`vftable';",
    "  sub_140001420((CGdiObject *)(a1 + 320));",
    "  CDialog::~CDialog((CDialog *)a1);",
    "  if ( (a2 & 1) == 0 || (a2 & 4) != 0 )",
    "    return a1;",
    "  operator delete((void *)a1);",
    "  return a1;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_140001790(__int64 a1)",
    "{",
    "  HMENU SystemMenu; // rax",
    "  struct CMenu *v3; // rdi",
    "  LPCWSTR lpNewItem; // [rsp+30h] [rbp+8h] BYREF",
    "",
    "  CDialog::OnInitDialog((CDialog *)a1);",
    "  SystemMenu = GetSystemMenu(*(HWND *)(a1 + 64), 0);",
    "  v3 = CMenu::FromHandle(SystemMenu);",
    "  if ( v3 )",
    "  {",
    "    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(&lpNewItem);",
    "    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::LoadStringW(&lpNewItem, 101);",
    "    if ( *((_DWORD *)lpNewItem - 4) )",
    "    {",
    "      AppendMenuW(*((HMENU *)v3 + 1), 0x800u, 0, 0);",
    "      AppendMenuW(*((HMENU *)v3 + 1), 0, 0x10u, lpNewItem);",
    "    }",
    "    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::~CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(&lpNewItem);",
    "  }",
    "  SendMessageW(*(HWND *)(a1 + 64), 0x80u, 1u, *(_QWORD *)(a1 + 368));",
    "  SendMessageW(*(HWND *)(a1 + 64), 0x80u, 0, *(_QWORD *)(a1 + 368));",
    "  return 1;",
    "}",
    "",
    "",
    "void __fastcall sub_140001860(CWnd *a1, __int16 a2)",
    "{",
    "  _QWORD v2[40]; // [rsp+20h] [rbp-178h] BYREF",
    "  void **v3; // [rsp+160h] [rbp-38h] BYREF",
    "  _BYTE v4[32]; // [rsp+178h] [rbp-20h] BYREF",
    "",
    "  if ( (a2 & 0xFFF0) == 0x10 )",
    "  {",
    "    CDialogEx::CDialogEx((CDialogEx *)v2, 0x64u, 0);",
    "    v2[0] = &CAboutDlg::`vftable';",
    "    CDialog::DoModal((CDialog *)v2);",
    "    CDialogImpl::~CDialogImpl((CDialogImpl *)v4);",
    "    v3 = &CBrush::`vftable';",
    "    sub_140001420((CGdiObject *)&v3);",
    "    CDialog::~CDialog((CDialog *)v2);",
    "  }",
    "  else",
    "  {",
    "    CWnd::Default(a1);",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_1400018F0(__int64 a1)",
    "{",
    "  int SystemMetrics; // edi",
    "  int v3; // eax",
    "  HWND v4; // rcx",
    "  int v5; // ebx",
    "  struct tagRECT Rect; // [rsp+20h] [rbp-98h] BYREF",
    "  _BYTE v7[8]; // [rsp+30h] [rbp-88h] BYREF",
    "  HDC wParam; // [rsp+38h] [rbp-80h]",
    "",
    "  if ( IsIconic(*(HWND *)(a1 + 64)) )",
    "  {",
    "    CPaintDC::CPaintDC((CPaintDC *)v7, (struct CWnd *)a1);",
    "    SendMessageW(*(HWND *)(a1 + 64), 0x27u, (WPARAM)wParam, 0);",
    "    SystemMetrics = GetSystemMetrics(11);",
    "    v3 = GetSystemMetrics(12);",
    "    v4 = *(HWND *)(a1 + 64);",
    "    v5 = v3;",
    "    Rect = 0;",
    "    GetClientRect(v4, &Rect);",
    "    DrawIcon(",
    "      wParam,",
    "      (Rect.right - Rect.left - SystemMetrics + 1) / 2,",
    "      (Rect.bottom - Rect.top - v5 + 1) / 2,",
    "      *(HICON *)(a1 + 368));",
    "    CPaintDC::~CPaintDC((CPaintDC *)v7);",
    "  }",
    "  else",
    "  {",
    "    CDialog::OnPaint((CDialog *)a1);",
    "  }",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_140001A10(_QWORD *a1, _QWORD *a2, __int64 a3)",
    "{",
    "  unsigned __int64 v5; // r14",
    "  unsigned __int64 v6; // r14",
    "  unsigned __int64 v7; // rcx",
    "  void *v8; // rax",
    "  _QWORD *v9; // rcx",
    "  char *v10; // rbx",
    "  int v11; // edx",
    "  __int64 v12; // r9",
    "  _QWORD *v13; // r8",
    "  unsigned __int64 v14; // rdx",
    "  _QWORD *v15; // rcx",
    "  char v17[16]; // [rsp+38h] [rbp-40h] BYREF",
    "  __int64 v18; // [rsp+48h] [rbp-30h]",
    "  __int64 v19; // [rsp+50h] [rbp-28h]",
    "",
    "  v5 = a2[2];",
    "  *a1 = 0;",
    "  a1[1] = 0;",
    "  a1[2] = 0;",
    "  if ( v5 )",
    "  {",
    "    if ( v5 > 0x3FFFFFFFFFFFFFFFLL )",
    "      sub_140002690(a1, a2, a3);",
    "    v6 = 4 * v5;",
    "    if ( v6 < 0x1000 )",
    "    {",
    "      if ( v6 )",
    "        v9 = operator new(v6);",
    "      else",
    "        v9 = 0;",
    "    }",
    "    else",
    "    {",
    "      v7 = v6 + 39;",
    "      if ( v6 + 39 < v6 )",
    "        sub_140001580(v7, a2, a3);",
    "      v8 = operator new(v7);",
    "      if ( !v8 )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v9 = (_QWORD *)(((unsigned __int64)v8 + 39) & 0xFFFFFFFFFFFFFFE0uLL);",
    "      *(v9 - 1) = v8;",
    "    }",
    "    *a1 = v9;",
    "    a1[2] = (char *)v9 + v6;",
    "    v10 = (char *)v9 + v6;",
    "    memset(v9, 0, v6);",
    "    a1[1] = v10;",
    "  }",
    "  v19 = 15;",
    "  v18 = 8;",
    "  strcpy(v17, \"neko_hat\");",
    "  v11 = 0;",
    "  if ( a2[2] )",
    "  {",
    "    v12 = 0;",
    "    do",
    "    {",
    "      v13 = a2;",
    "      if ( a2[3] >= 0x10u )",
    "        v13 = (_QWORD *)*a2;",
    "      *(_DWORD *)(*a1 + 4 * v12) = *((char *)v13 + v12);",
    "      *(_DWORD *)(*a1 + 4 * v12) = __ROR4__(*(_DWORD *)(*a1 + 4 * v12), 4);",
    "      *(_DWORD *)(*a1 + 4 * v12) ^= v17[v11 % 8];",
    "      *(_DWORD *)(*a1 + 4 * v12) += v17[v11 % 4];",
    "      *(_DWORD *)(*a1 + 4 * v12) += 30000;",
    "      ++v11;",
    "      ++v12;",
    "    }",
    "    while ( (unsigned __int64)v11 < a2[2] );",
    "  }",
    "  v14 = a2[3];",
    "  if ( v14 >= 0x10 )",
    "  {",
    "    v15 = (_QWORD *)*a2;",
    "    if ( v14 + 1 >= 0x1000 )",
    "    {",
    "      if ( (unsigned __int64)v15 - *(v15 - 1) - 8 > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v15 = (_QWORD *)*(v15 - 1);",
    "    }",
    "    operator delete(v15);",
    "  }",
    "  a2[2] = 0;",
    "  a2[3] = 15;",
    "  *(_BYTE *)a2 = 0;",
    "  return a1;",
    "}",
    "",
    "",
    "char __fastcall sub_140001C30(_QWORD *a1)",
    "{",
    "  unsigned __int64 v2; // rdx",
    "  _QWORD *v3; // rcx",
    "  int v4; // edx",
    "  unsigned __int64 v5; // r9",
    "  __int64 v6; // rcx",
    "  _QWORD *v7; // r8",
    "  _QWORD *v8; // rax",
    "  unsigned __int64 v9; // rcx",
    "  bool v10; // cf",
    "  _QWORD *v11; // r14",
    "  __int64 v12; // r8",
    "  struct CException **v13; // rcx",
    "  void *v14; // r8",
    "  unsigned __int64 v15; // rdx",
    "  _QWORD *v16; // rcx",
    "  char result; // al",
    "  __int128 v18; // [rsp+20h] [rbp-39h] BYREF",
    "  __int64 v19; // [rsp+30h] [rbp-29h]",
    "  void *v20; // [rsp+38h] [rbp-21h] BYREF",
    "  __int64 v21; // [rsp+48h] [rbp-11h]",
    "  __int64 v22; // [rsp+50h] [rbp-9h]",
    "  _QWORD *v23; // [rsp+60h] [rbp+7h]",
    "  _QWORD v24[4]; // [rsp+68h] [rbp+Fh] BYREF",
    "",
    "  v23 = a1;",
    "  v24[3] = 15;",
    "  v24[2] = 3;",
    "  v24[0] = 8079428;",
    "  if ( a1[2] != 24 )",
    "  {",
    "    v2 = a1[3];",
    "    if ( v2 >= 0x10 )",
    "    {",
    "      v3 = (_QWORD *)*a1;",
    "LABEL_37:",
    "      if ( v2 + 1 < 0x1000 )",
    "      {",
    "LABEL_40:",
    "        operator delete(v3);",
    "        goto LABEL_41;",
    "      }",
    "      if ( (unsigned __int64)v3 - *(v3 - 1) - 8 <= 0x1F )",
    "      {",
    "        v3 = (_QWORD *)*(v3 - 1);",
    "        goto LABEL_40;",
    "      }",
    "LABEL_43:",
    "      invalid_parameter_noinfo_noreturn();",
    "    }",
    "    goto LABEL_41;",
    "  }",
    "  v4 = 0;",
    "  v5 = a1[3];",
    "  v6 = 0;",
    "  do",
    "  {",
    "    v7 = a1;",
    "    if ( v5 >= 0x10 )",
    "      v7 = (_QWORD *)*a1;",
    "    if ( *((_BYTE *)v7 + v6) != *((_BYTE *)v24 + v6) )",
    "      goto LABEL_34;",
    "    ++v4;",
    "    ++v6;",
    "  }",
    "  while ( (unsigned __int64)v4 < 3 );",
    "  v8 = a1;",
    "  v9 = a1[3];",
    "  if ( v9 >= 0x10 )",
    "    v8 = (_QWORD *)*a1;",
    "  if ( *((_BYTE *)v8 + 23) != 125 )",
    "  {",
    "    v2 = a1[3];",
    "    v10 = v9 < 0x10;",
    "    goto LABEL_35;",
    "  }",
    "  v20 = 0;",
    "  v21 = 0;",
    "  v22 = 0;",
    "  if ( v9 < 0x10 )",
    "    v11 = a1;",
    "  else",
    "    v11 = (_QWORD *)*a1;",
    "  v20 = operator new(0x20u);",
    "  memcpy(v20, v11, 0x19u);",
    "  v21 = 24;",
    "  v22 = 31;",
    "  sub_140001A10(&v18, &v20, v12);",
    "  v13 = (struct CException **)&unk_140008050;",
    "  v14 = (void *)v18;",
    "  do",
    "  {",
    "    if ( *(struct CException **)((char *)v13 + v18 - (_QWORD)&unk_140008050) != *v13 )",
    "    {",
    "      if ( (_QWORD)v18 )",
    "      {",
    "        if ( (unsigned __int64)(4 * ((v19 - (__int64)v18) >> 2)) >= 0x1000 )",
    "        {",
    "          v14 = *(void **)(v18 - 8);",
    "          if ( (unsigned __int64)(v18 - (_QWORD)v14 - 8) > 0x1F )",
    "            goto LABEL_32;",
    "        }",
    "        operator delete(v14);",
    "        v18 = 0;",
    "        v19 = 0;",
    "      }",
    "LABEL_34:",
    "      v2 = a1[3];",
    "      v10 = v2 < 0x10;",
    "LABEL_35:",
    "      if ( !v10 )",
    "      {",
    "        v3 = (_QWORD *)*a1;",
    "        goto LABEL_37;",
    "      }",
    "LABEL_41:",
    "      result = 0;",
    "      goto LABEL_42;",
    "    }",
    "    ++v13;",
    "  }",
    "  while ( (__int64)v13 < (__int64)&CException * `RTTI Type Descriptor' );",
    "  if ( !(_QWORD)v18 )",
    "    goto LABEL_23;",
    "  if ( (unsigned __int64)(4 * ((v19 - (__int64)v18) >> 2)) >= 0x1000 )",
    "  {",
    "    v14 = *(void **)(v18 - 8);",
    "    if ( (unsigned __int64)(v18 - (_QWORD)v14 - 8) > 0x1F )",
    "LABEL_32:",
    "      invalid_parameter_noinfo_noreturn();",
    "  }",
    "  operator delete(v14);",
    "  v18 = 0;",
    "  v19 = 0;",
    "LABEL_23:",
    "  v15 = a1[3];",
    "  if ( v15 < 0x10 )",
    "    goto LABEL_28;",
    "  v16 = (_QWORD *)*a1;",
    "  if ( v15 + 1 < 0x1000 )",
    "    goto LABEL_27;",
    "  if ( (unsigned __int64)v16 - *(v16 - 1) - 8 > 0x1F )",
    "    goto LABEL_43;",
    "  v16 = (_QWORD *)*(v16 - 1);",
    "LABEL_27:",
    "  operator delete(v16);",
    "LABEL_28:",
    "  result = 1;",
    "LABEL_42:",
    "  a1[2] = 0;",
    "  a1[3] = 15;",
    "  *(_BYTE *)a1 = 0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_140001F60(CWnd *a1)",
    "{",
    "  _QWORD *v2; // rbx",
    "  __int64 v3; // rsi",
    "  size_t v4; // r8",
    "  __int64 v5; // rdx",
    "  __int64 v6; // r8",
    "  void **v7; // r14",
    "  char *v8; // rdi",
    "  unsigned __int64 v9; // r15",
    "  unsigned __int64 v10; // r13",
    "  unsigned __int64 v11; // rcx",
    "  void *v12; // rax",
    "  const wchar_t *v13; // r8",
    "  const wchar_t *v14; // rdx",
    "  char *v15; // rax",
    "  __int64 v17; // [rsp+20h] [rbp-E0h] BYREF",
    "  __int128 v18; // [rsp+28h] [rbp-D8h] BYREF",
    "  unsigned __int64 v19; // [rsp+38h] [rbp-C8h]",
    "  __int64 v20; // [rsp+40h] [rbp-C0h]",
    "  void *Src[2]; // [rsp+50h] [rbp-B0h] BYREF",
    "  unsigned __int64 v22; // [rsp+60h] [rbp-A0h]",
    "  unsigned __int64 v23; // [rsp+68h] [rbp-98h]",
    "  void *Block; // [rsp+70h] [rbp-90h] BYREF",
    "  _BYTE v25[136]; // [rsp+78h] [rbp-88h] BYREF",
    "",
    "  ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(&v17);",
    "  CWnd::GetWindowTextW((char *)a1 + 376, &v17);",
    "  Block = v25;",
    "  sub_1400022B0(&Block, v17, 3);",
    "  v2 = 0;",
    "  Src[0] = 0;",
    "  v22 = 0;",
    "  v3 = 15;",
    "  v23 = 15;",
    "  v4 = -1;",
    "  do",
    "    ++v4;",
    "  while ( *((_BYTE *)Block + v4) );",
    "  sub_140002510(Src, Block, v4);",
    "  if ( Block != v25 )",
    "    free(Block);",
    "  *(_QWORD *)&v18 = 0;",
    "  v19 = 0;",
    "  v20 = 0;",
    "  v7 = Src;",
    "  v8 = (char *)Src[0];",
    "  v9 = v23;",
    "  if ( v23 >= 0x10 )",
    "    v7 = (void **)Src[0];",
    "  v10 = v22;",
    "  if ( v22 >= 0x10 )",
    "  {",
    "    v3 = v22 | 0xF;",
    "    if ( (v22 | 0xF) > 0x7FFFFFFFFFFFFFFFLL )",
    "      v3 = 0x7FFFFFFFFFFFFFFFLL;",
    "    v11 = v3 + 1;",
    "    if ( (unsigned __int64)(v3 + 1) < 0x1000 )",
    "    {",
    "      if ( v3 != -1 )",
    "        v2 = operator new(v11);",
    "    }",
    "    else",
    "    {",
    "      if ( v3 + 40 < (unsigned __int64)(v3 + 1) )",
    "        sub_140001580(v11, v5, v6);",
    "      v12 = operator new(v3 + 40);",
    "      if ( !v12 )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v2 = (_QWORD *)(((unsigned __int64)v12 + 39) & 0xFFFFFFFFFFFFFFE0uLL);",
    "      *(v2 - 1) = v12;",
    "    }",
    "    *(_QWORD *)&v18 = v2;",
    "    memcpy(v2, v7, v10 + 1);",
    "  }",
    "  else",
    "  {",
    "    v18 = *(_OWORD *)v7;",
    "  }",
    "  v19 = v10;",
    "  v20 = v3;",
    "  if ( sub_140001C30(&v18) )",
    "  {",
    "    v13 = L\"GOT IT!\";",
    "    v14 = L\"Congraturations!\";",
    "  }",
    "  else",
    "  {",
    "    v13 = L\"failed\";",
    "    v14 = L\"opps! try again!\";",
    "  }",
    "  CWnd::MessageBoxW(a1, v14, v13, 0);",
    "  if ( v9 >= 0x10 )",
    "  {",
    "    v15 = v8;",
    "    if ( v9 + 1 >= 0x1000 )",
    "    {",
    "      v8 = (char *)*((_QWORD *)v8 - 1);",
    "      if ( (unsigned __int64)(v15 - v8 - 8) > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "    }",
    "    operator delete(v8);",
    "  }",
    "  return ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::~CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(&v17);",
    "}",
    "",
    "",
    "int __fastcall sub_1400021A0(CDialogEx *a1, struct tagMSG *a2)",
    "{",
    "  if ( a2->message != 256 || a2->wParam != 13 )",
    "    return CDialogEx::PreTranslateMessage(a1, a2);",
    "  sub_140001F60(a1);",
    "  return 1;",
    "}",
    "",
    "",
    "void __fastcall sub_1400021D0(void **a1)",
    "{",
    "  if ( *a1 != a1 + 1 )",
    "    free(*a1);",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1400021F0(__int64 a1)",
    "{",
    "  _QWORD *v2; // rcx",
    "  __int64 result; // rax",
    "",
    "  v2 = *(_QWORD **)a1;",
    "  if ( v2 )",
    "  {",
    "    if ( ((*(_QWORD *)(a1 + 16) - (_QWORD)v2) & 0xFFFFFFFFFFFFFFFCuLL) >= 0x1000 )",
    "    {",
    "      if ( (unsigned __int64)v2 - *(v2 - 1) - 8 > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v2 = (_QWORD *)*(v2 - 1);",
    "    }",
    "    operator delete(v2);",
    "    result = 0;",
    "    *(_QWORD *)a1 = 0;",
    "    *(_QWORD *)(a1 + 8) = 0;",
    "    *(_QWORD *)(a1 + 16) = 0;",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "void __fastcall sub_140002250(__int64 a1)",
    "{",
    "  unsigned __int64 v1; // rdx",
    "  _QWORD *v3; // rcx",
    "",
    "  v1 = *(_QWORD *)(a1 + 24);",
    "  if ( v1 >= 0x10 )",
    "  {",
    "    v3 = *(_QWORD **)a1;",
    "    if ( v1 + 1 >= 0x1000 )",
    "    {",
    "      if ( (unsigned __int64)v3 - *(v3 - 1) - 8 > 0x1F )",
    "        invalid_parameter_noinfo_noreturn();",
    "      v3 = (_QWORD *)*(v3 - 1);",
    "    }",
    "    operator delete(v3);",
    "  }",
    "  *(_QWORD *)(a1 + 16) = 0;",
    "  *(_QWORD *)(a1 + 24) = 15;",
    "  *(_BYTE *)a1 = 0;",
    "}",
    "",
    "",
    "void __fastcall sub_1400022B0(CHAR **a1, const WCHAR *a2, UINT a3)",
    "{",
    "  __int64 v6; // rbx",
    "  int v7; // ebx",
    "  CHAR *v8; // rdi",
    "  int v9; // r15d",
    "  CHAR *v10; // rcx",
    "  CHAR *lpMultiByteStr; // rax",
    "  CHAR **v12; // r12",
    "  int v13; // eax",
    "  BOOL v14; // r15d",
    "  int v15; // eax",
    "  int cbMultiByte; // r15d",
    "  CHAR *v17; // rcx",
    "  CHAR *v18; // rax",
    "",
    "  if ( !a2 )",
    "  {",
    "    *a1 = 0;",
    "    return;",
    "  }",
    "  v6 = -1;",
    "  do",
    "    ++v6;",
    "  while ( a2[v6] );",
    "  v7 = v6 + 1;",
    "  v8 = (CHAR *)(a1 + 1);",
    "  v9 = 4 * v7;",
    "  if ( !a1 || (v7 & 0x20000000) != 0 || a1 == (CHAR **)-8LL )",
    "    sub_140002750(2147942487LL);",
    "  v10 = *a1;",
    "  if ( v10 != v8 )",
    "  {",
    "    if ( v9 <= 128 )",
    "    {",
    "      free(v10);",
    "      lpMultiByteStr = v8;",
    "    }",
    "    else",
    "    {",
    "      lpMultiByteStr = (CHAR *)recalloc(v10, v9, 1u);",
    "      if ( !lpMultiByteStr )",
    "        sub_140002750(2147942414LL);",
    "    }",
    "    *a1 = lpMultiByteStr;",
    "    goto LABEL_18;",
    "  }",
    "  if ( v9 <= 128 )",
    "  {",
    "    *a1 = v8;",
    "    lpMultiByteStr = v8;",
    "LABEL_18:",
    "    v12 = a1;",
    "    goto LABEL_19;",
    "  }",
    "  lpMultiByteStr = (CHAR *)calloc(v9, 1u);",
    "  *a1 = lpMultiByteStr;",
    "  v12 = a1;",
    "  if ( !lpMultiByteStr )",
    "    goto LABEL_37;",
    "LABEL_19:",
    "  v13 = WideCharToMultiByte(a3, 0, a2, v7, lpMultiByteStr, 4 * v7, 0, 0);",
    "  v14 = v13 == 0;",
    "  if ( v13 || GetLastError() != 122 )",
    "    goto LABEL_33;",
    "  v15 = WideCharToMultiByte(a3, 0, a2, v7, 0, 0, 0, 0);",
    "  cbMultiByte = v15;",
    "  if ( v15 < 0 )",
    "    sub_140002750(2147942487LL);",
    "  v17 = *a1;",
    "  if ( *a1 == v8 )",
    "  {",
    "    if ( v15 <= 128 )",
    "    {",
    "      *v12 = v8;",
    "      v18 = v8;",
    "    }",
    "    else",
    "    {",
    "      v18 = (CHAR *)calloc(v15, 1u);",
    "      *v12 = v18;",
    "      if ( !v18 )",
    "        sub_140002750(2147942414LL);",
    "    }",
    "    goto LABEL_32;",
    "  }",
    "  if ( v15 > 128 )",
    "  {",
    "    v18 = (CHAR *)recalloc(v17, v15, 1u);",
    "    if ( v18 )",
    "      goto LABEL_27;",
    "LABEL_37:",
    "    sub_140002750(2147942414LL);",
    "  }",
    "  free(v17);",
    "  v18 = v8;",
    "LABEL_27:",
    "  *v12 = v18;",
    "LABEL_32:",
    "  v14 = WideCharToMultiByte(a3, 0, a2, v7, v18, cbMultiByte, 0, 0) == 0;",
    "LABEL_33:",
    "  if ( v14 )",
    "  {",
    "    sub_140002680(*a1, v8);",
    "    sub_1400026C0();",
    "  }",
    "}",
    "",
    "",
    "void **__fastcall sub_140002510(void **a1, void *Src, size_t Size)",
    "{",
    "  unsigned __int64 v3; // rbp",
    "  void *v7; // rdi",
    "  size_t v8; // rdi",
    "  __int64 v9; // rdx",
    "  unsigned __int64 v10; // rcx",
    "  void *v11; // rax",
    "  _QWORD *v12; // r14",
    "  void *v13; // rcx",
    "",
    "  v3 = (unsigned __int64)a1[3];",
    "  if ( Size > v3 )",
    "  {",
    "    v8 = 0x7FFFFFFFFFFFFFFFLL;",
    "    if ( Size > 0x7FFFFFFFFFFFFFFFLL )",
    "      sub_140001620();",
    "    if ( (Size | 0xF) > 0x7FFFFFFFFFFFFFFFLL || (v9 = v3 >> 1, v3 > 0x7FFFFFFFFFFFFFFFLL - (v3 >> 1)) )",
    "    {",
    "      v10 = 0x8000000000000027uLL;",
    "    }",
    "    else",
    "    {",
    "      v8 = Size | 0xF;",
    "      if ( (Size | 0xF) < v9 + v3 )",
    "        v8 = v9 + v3;",
    "      if ( v8 + 1 < 0x1000 )",
    "      {",
    "        if ( v8 == -1 )",
    "          v12 = 0;",
    "        else",
    "          v12 = operator new(v8 + 1);",
    "        goto LABEL_19;",
    "      }",
    "      v10 = v8 + 40;",
    "      if ( v8 + 40 < v8 + 1 )",
    "        sub_140001580(v10, v9, Size);",
    "    }",
    "    v11 = operator new(v10);",
    "    if ( !v11 )",
    "      goto LABEL_26;",
    "    v12 = (_QWORD *)(((unsigned __int64)v11 + 39) & 0xFFFFFFFFFFFFFFE0uLL);",
    "    *(v12 - 1) = v11;",
    "LABEL_19:",
    "    a1[2] = (void *)Size;",
    "    a1[3] = (void *)v8;",
    "    memcpy(v12, Src, Size);",
    "    *((_BYTE *)v12 + Size) = 0;",
    "    if ( v3 < 0x10 )",
    "    {",
    "LABEL_24:",
    "      *a1 = v12;",
    "      return a1;",
    "    }",
    "    v13 = *a1;",
    "    if ( v3 + 1 < 0x1000 )",
    "    {",
    "LABEL_23:",
    "      operator delete(v13);",
    "      goto LABEL_24;",
    "    }",
    "    if ( (unsigned __int64)v13 - *((_QWORD *)v13 - 1) - 8 <= 0x1F )",
    "    {",
    "      v13 = (void *)*((_QWORD *)v13 - 1);",
    "      goto LABEL_23;",
    "    }",
    "LABEL_26:",
    "    invalid_parameter_noinfo_noreturn();",
    "  }",
    "  v7 = a1;",
    "  if ( v3 >= 0x10 )",
    "    v7 = *a1;",
    "  a1[2] = (void *)Size;",
    "  memmove(v7, Src, Size);",
    "  *((_BYTE *)v7 + Size) = 0;",
    "  return a1;",
    "}",
    "",
    "",
    "void __fastcall sub_140002680(void *a1, void *a2)",
    "{",
    "  if ( a1 != a2 )",
    "    free(a1);",
    "}",
    "",
    "",
    "void  sub_140002690()",
    "{",
    "  std::_Xlength_error(\"vector too long\");",
    "}",
    "",
    "",
    "void  sub_1400026C0()",
    "{",
    "  signed int LastError; // eax",
    "",
    "  LastError = GetLastError();",
    "  if ( LastError > 0 )",
    "    LastError = (unsigned __int16)LastError | 0x80070000;",
    "  sub_140002750((unsigned int)LastError);",
    "}",
    "",
    "",
    "CEdit *__fastcall sub_1400026E0(CEdit *a1, char a2)",
    "{",
    "  CEdit::~CEdit(a1);",
    "  if ( (a2 & 1) == 0 || (a2 & 4) != 0 )",
    "    return a1;",
    "  operator delete(a1);",
    "  return a1;",
    "}",
    "",
    "",
    "void __fastcall  sub_140002750(int a1)",
    "{",
    "  if ( a1 == -2147024882 )",
    "    AfxThrowMemoryException();",
    "  AfxThrowOleException(a1);",
    "}",
    "",
    "",
    "int pre_c_initialization()",
    "{",
    "  int startup_file_mode; // eax",
    "  struct _exception *v1; // rcx",
    "  int v2; // ebx",
    "  charNode *v3; // rcx",
    "  _crt_argv_mode v4; // eax",
    "  struct _exception *v5; // rcx",
    "  int v6; // eax",
    "  struct _exception *v7; // rcx",
    "  struct _exception *v8; // rcx",
    "  int result; // eax",
    "",
    "  set_app_type(_crt_gui_app);",
    "  startup_file_mode = get_startup_file_mode();",
    "  set_fmode(startup_file_mode);",
    "  v2 = UserMathErrorFunction(v1);",
    "  *_p__commode() = v2;",
    "  if ( !(unsigned __int8)_scrt_initialize_onexit_tables(1) )",
    "    goto LABEL_8;",
    "  sub_14000348C();",
    "  atexit(sub_1400034C8);",
    "  v4 = charNode::raw_length(v3);",
    "  if ( configure_wide_argv(v4) )",
    "    goto LABEL_8;",
    "  sub_1400031D8();",
    "  if ( (unsigned int)_scrt_is_user_matherr_present() )",
    "    _setusermatherr(UserMathErrorFunction);",
    "  v6 = UserMathErrorFunction(v5);",
    "  configthreadlocale(v6);",
    "  if ( (unsigned __int8)sub_1400031E8() )",
    "    initialize_wide_environment();",
    "  UserMathErrorFunction(v7);",
    "  result = j_UserMathErrorFunction(v8);",
    "  if ( result )",
    "  {",
    "LABEL_8:",
    "    _scrt_fastfail(7);",
    "    JUMPOUT(0x140002BADLL);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 post_pgo_initialization()",
    "{",
    "  _scrt_initialize_default_local_stdio_options();",
    "  return 0;",
    "}",
    "",
    "",
    "void pre_cpp_initialization()",
    "{",
    "  struct _exception *v0; // rcx",
    "",
    "  _scrt_set_unhandled_exception_filter();",
    "  UserMathErrorFunction(v0);",
    "  JUMPOUT(0x140003A20LL);",
    "}",
    "",
    "",
    "__int64 __fastcall __scrt_common_main_seh()",
    "{",
    "  unsigned int v0; // ebx",
    "  __int64 v1; // rcx",
    "  char v2; // di",
    "  __int64 v3; // rcx",
    "  __int64 v5; // rcx",
    "  _QWORD *v6; // rax",
    "  __int64 v7; // rcx",
    "  void (__fastcall **v8)(_QWORD, __int64); // rbx",
    "  _tls_callback_type *v9; // rax",
    "  __int64 v10; // rcx",
    "  _tls_callback_type *v11; // rbx",
    "  int show_window_mode; // ebx",
    "  CHAR *wide_winmain_command_line; // rax",
    "  __int64 v14; // rcx",
    "  __int64 v15; // rcx",
    "",
    "  if ( !(unsigned __int8)_scrt_initialize_crt(1) )",
    "  {",
    "    _scrt_fastfail(7);",
    "    goto LABEL_19;",
    "  }",
    "  v2 = 0;",
    "  LOBYTE(v0) = _scrt_acquire_startup_lock(v1);",
    "  v3 = (unsigned int)dword_140008348;",
    "  if ( dword_140008348 == 1 )",
    "  {",
    "LABEL_19:",
    "    _scrt_fastfail(7);",
    "    goto LABEL_20;",
    "  }",
    "  if ( dword_140008348 )",
    "  {",
    "    v2 = 1;",
    "  }",
    "  else",
    "  {",
    "    dword_140008348 = 1;",
    "    if ( initterm_e((_PIFV *)&First, (_PIFV *)&Last) )",
    "      return 255;",
    "    initterm((_PVFV *)&qword_140004870, (_PVFV *)&qword_140004898);",
    "    dword_140008348 = 2;",
    "  }",
    "  LOBYTE(v3) = v0;",
    "  _scrt_release_startup_lock(v3);",
    "  v6 = (_QWORD *)sub_140003224(v5);",
    "  v8 = (void (__fastcall **)(_QWORD, __int64))v6;",
    "  if ( *v6 && (unsigned __int8)_scrt_is_nonwritable_in_current_image(v6) )",
    "    (*v8)(0, 2);",
    "  v9 = (_tls_callback_type *)sub_14000322C(v7);",
    "  v11 = v9;",
    "  if ( *v9 && (unsigned __int8)_scrt_is_nonwritable_in_current_image(v9) )",
    "    register_thread_local_exe_atexit_callback(*v11);",
    "  show_window_mode = (unsigned __int16)_scrt_get_show_window_mode(v10);",
    "  wide_winmain_command_line = (CHAR *)get_wide_winmain_command_line();",
    "  v0 = WinMain((HINSTANCE)0x140000000LL, 0, wide_winmain_command_line, show_window_mode);",
    "  if ( !(unsigned __int8)_scrt_is_managed_app(v14) )",
    "LABEL_20:",
    "    exit(v0);",
    "  if ( !v2 )",
    "    cexit();",
    "  LOBYTE(v15) = 1;",
    "  _scrt_uninitialize_crt(v15, 0);",
    "  return v0;",
    "}",
    "",
    "",
    "__int64 start()",
    "{",
    "  _security_init_cookie();",
    "  return __scrt_common_main_seh();",
    "}",
    "",
    "",
    "char _scrt_acquire_startup_lock()",
    "{",
    "  PVOID StackBase; // rcx",
    "  signed __int64 v1; // rax",
    "",
    "  if ( (unsigned int)_scrt_is_ucrt_dll_in_use() )",
    "  {",
    "    StackBase = NtCurrentTeb()->NtTib.StackBase;",
    "    while ( 1 )",
    "    {",
    "      v1 = _InterlockedCompareExchange64(&qword_140008350, (signed __int64)StackBase, 0);",
    "      if ( !v1 )",
    "        break;",
    "      if ( StackBase == (PVOID)v1 )",
    "        return 1;",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "char __fastcall _scrt_initialize_crt(int a1)",
    "{",
    "  char v1; // al",
    "",
    "  v1 = byte_140008358;",
    "  if ( !a1 )",
    "    v1 = 1;",
    "  byte_140008358 = v1;",
    "  _isa_available_init();",
    "  if ( !(unsigned __int8)((__int64 (*)(void))sub_1400031E8)() )",
    "    return 0;",
    "  if ( !(unsigned __int8)((__int64 (*)(void))sub_1400031E8)() )",
    "  {",
    "    sub_1400031E8(0);",
    "    return 0;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "char __fastcall _scrt_initialize_onexit_tables(unsigned int a1)",
    "{",
    "  if ( !byte_140008359 )",
    "  {",
    "    if ( a1 > 1 )",
    "    {",
    "      _scrt_fastfail(5);",
    "      JUMPOUT(0x140002EB2LL);",
    "    }",
    "    if ( !(unsigned int)_scrt_is_ucrt_dll_in_use() || a1 )",
    "    {",
    "      *(__m128i *)&Table._first = _mm_load_si128((const __m128i *)&xmmword_140004900);",
    "      Table._end = (_PVFV *)-1LL;",
    "      *(_OWORD *)&stru_140008378._first = *(_OWORD *)&Table._first;",
    "      stru_140008378._end = (_PVFV *)-1LL;",
    "    }",
    "    else if ( initialize_onexit_table(&Table) || initialize_onexit_table(&stru_140008378) )",
    "    {",
    "      return 0;",
    "    }",
    "    byte_140008359 = 1;",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "bool __fastcall _scrt_is_nonwritable_in_current_image(__int64 a1)",
    "{",
    "  _DWORD *v2; // rcx",
    "  unsigned __int64 v3; // r8",
    "  _DWORD *v4; // rdx",
    "  _DWORD *v5; // r9",
    "  unsigned __int64 v6; // rcx",
    "",
    "  if ( LOWORD(MEMORY[0x140000000].unused) != 23117 )",
    "    return 0;",
    "  v2 = (_DWORD *)(0x140000000LL + MEMORY[0x14000003C]);",
    "  if ( *v2 != 17744 || *(_WORD *)(0x140000018LL + MEMORY[0x14000003C]) != 523 )",
    "    return 0;",
    "  v3 = a1 - 0x140000000LL;",
    "  v4 = (_DWORD *)((char *)v2 + *(unsigned __int16 *)(0x140000014LL + MEMORY[0x14000003C]) + 24);",
    "  v5 = &v4[10 * *(unsigned __int16 *)(0x140000006LL + MEMORY[0x14000003C])];",
    "  while ( v4 != v5 )",
    "  {",
    "    v6 = (unsigned int)v4[3];",
    "    if ( v3 >= v6 && v3 < (unsigned int)(v6 + v4[2]) )",
    "      return v4 && v4[9] >= 0;",
    "    v4 += 10;",
    "  }",
    "  v4 = 0;",
    "  return v4 && v4[9] >= 0;",
    "}",
    "",
    "",
    "__int64 __fastcall _scrt_release_startup_lock(char a1)",
    "{",
    "  __int64 result; // rax",
    "",
    "  result = _scrt_is_ucrt_dll_in_use();",
    "  if ( (_DWORD)result )",
    "  {",
    "    if ( !a1 )",
    "      _InterlockedExchange64(&qword_140008350, 0);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "char __fastcall _scrt_uninitialize_crt(__int64 a1, char a2)",
    "{",
    "  char v2; // bl",
    "  __int64 v3; // rcx",
    "",
    "  v2 = a1;",
    "  if ( !byte_140008358 || !a2 )",
    "  {",
    "    sub_1400031E8(a1);",
    "    LOBYTE(v3) = v2;",
    "    sub_1400031E8(v3);",
    "  }",
    "  return 1;",
    "}",
    "",
    "",
    "_onexit_t __cdecl onexit(_onexit_t Func)",
    "{",
    "  int v2; // eax",
    "  int (__cdecl *v3)(); // rdx",
    "",
    "  if ( Table._first == (_PVFV *)-1LL )",
    "    v2 = crt_atexit((_PVFV)Func);",
    "  else",
    "    v2 = register_onexit_function(&Table, Func);",
    "  v3 = 0;",
    "  if ( !v2 )",
    "    return Func;",
    "  return v3;",
    "}",
    "",
    "",
    "int __cdecl atexit(void (__cdecl *a1)())",
    "{",
    "  return (onexit((_onexit_t)a1) != 0) - 1;",
    "}",
    "",
    "",
    "_QWORD *__fastcall sub_140002FF0(_QWORD *a1, char a2)",
    "{",
    "  *a1 = &type_info::`vftable';",
    "  if ( (a2 & 1) != 0 )",
    "    operator delete(a1);",
    "  return a1;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void __fastcall operator delete(void *a1)",
    "{",
    "}__int64 __scrt_initialize_thread_safe_statics()",
    "{",
    "  HMODULE ModuleHandleW; // rbx",
    "  BOOL (__stdcall *SleepConditionVariableCS)(PCONDITION_VARIABLE, PCRITICAL_SECTION, DWORD); // rdi",
    "  void (__stdcall *WakeAllConditionVariable)(PCONDITION_VARIABLE); // rax",
    "",
    "  InitializeCriticalSectionAndSpinCount(&CriticalSection, 0xFA0u);",
    "  ModuleHandleW = GetModuleHandleW((LPCWSTR)L\"api-ms-win-core-synch-l1-2-0.dll\");",
    "  if ( !ModuleHandleW )",
    "  {",
    "    ModuleHandleW = GetModuleHandleW((LPCWSTR)L\"kernel32.dll\");",
    "    if ( !ModuleHandleW )",
    "      goto LABEL_9;",
    "  }",
    "  SleepConditionVariableCS = (BOOL (__stdcall *)(PCONDITION_VARIABLE, PCRITICAL_SECTION, DWORD))GetProcAddress(",
    "                                                                                                  ModuleHandleW,",
    "                                                                                                  \"SleepConditionVariableCS\");",
    "  WakeAllConditionVariable = (void (__stdcall *)(PCONDITION_VARIABLE))GetProcAddress(",
    "                                                                        ModuleHandleW,",
    "                                                                        \"WakeAllConditionVariable\");",
    "  if ( SleepConditionVariableCS && WakeAllConditionVariable )",
    "  {",
    "    qword_1400083C8 = (__int64)SleepConditionVariableCS;",
    "    qword_1400083D0 = (__int64)WakeAllConditionVariable;",
    "  }",
    "  else",
    "  {",
    "    hObject = CreateEventW(0, 1, 0, 0);",
    "    if ( !hObject )",
    "      goto LABEL_9;",
    "  }",
    "  if ( !_scrt_initialize_onexit_tables(0) )",
    "  {",
    "LABEL_9:",
    "    _scrt_fastfail(7);",
    "    __debugbreak();",
    "  }",
    "  atexit(__scrt_uninitialize_thread_safe_statics);",
    "  return 0;",
    "}",
    "",
    "",
    "void __fastcall __scrt_uninitialize_thread_safe_statics()",
    "{",
    "  DeleteCriticalSection(&CriticalSection);",
    "  if ( hObject )",
    "    CloseHandle(hObject);",
    "}",
    "",
    "",
    "__int64 _security_init_cookie()",
    "{",
    "  uintptr_t v0; // rax",
    "  __int64 result; // rax",
    "  _FILETIME v2; // [rsp+30h] [rbp+10h] BYREF",
    "  _FILETIME SystemTimeAsFileTime; // [rsp+38h] [rbp+18h] BYREF",
    "  LARGE_INTEGER PerformanceCount; // [rsp+40h] [rbp+20h] BYREF",
    "",
    "  v0 = _security_cookie;",
    "  if ( _security_cookie == 0x2B992DDFA232LL )",
    "  {",
    "    SystemTimeAsFileTime = 0;",
    "    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);",
    "    v2 = SystemTimeAsFileTime;",
    "    v2 = (_FILETIME)(GetCurrentThreadId() ^ *(unsigned __int64 *)&v2);",
    "    v2 = (_FILETIME)(GetCurrentProcessId() ^ *(unsigned __int64 *)&v2);",
    "    QueryPerformanceCounter(&PerformanceCount);",
    "    v0 = ((unsigned __int64)&v2",
    "        ^ *(_QWORD *)&v2",
    "        ^ PerformanceCount.QuadPart",
    "        ^ ((unsigned __int64)PerformanceCount.LowPart << 32))",
    "       & 0xFFFFFFFFFFFFLL;",
    "    if ( v0 == 0x2B992DDFA232LL )",
    "      v0 = 0x2B992DDFA233LL;",
    "    _security_cookie = v0;",
    "  }",
    "  result = ~v0;",
    "  qword_140008010 = result;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall charNode::raw_length(charNode *this)",
    "{",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 get_startup_file_mode()",
    "{",
    "  return 0x4000;",
    "}",
    "",
    "",
    "void sub_1400031D8()",
    "{",
    "  InitializeSListHead(&stru_1400083E0);",
    "}",
    "",
    "",
    "char sub_1400031E8()",
    "{",
    "  return 1;",
    "}",
    "",
    "",
    "_QWORD *_scrt_initialize_default_local_stdio_options()",
    "{",
    "  _QWORD *v0; // rax",
    "  _QWORD *result; // rax",
    "",
    "  v0 = (_QWORD *)sub_1400031EC();",
    "  *v0 |= 0x24uLL;",
    "  result = (_QWORD *)sub_1400031F4();",
    "  *result |= 2uLL;",
    "  return result;",
    "}",
    "",
    "",
    "_BOOL8 _scrt_is_user_matherr_present()",
    "{",
    "  return dword_140008018 == 0;",
    "}",
    "",
    "",
    "void *sub_140003224()",
    "{",
    "  return &unk_140008B80;",
    "}",
    "",
    "",
    "void *sub_14000322C()",
    "{",
    "  return &unk_140008B78;",
    "}",
    "",
    "",
    "LONG __fastcall _scrt_fastfail(unsigned int a1)",
    "{",
    "  ULONG64 Rip; // rbx",
    "  struct _IMAGE_RUNTIME_FUNCTION_ENTRY *v3; // rax",
    "  bool v4; // bl",
    "  LONG result; // eax",
    "  _EXCEPTION_POINTERS ExceptionInfo; // [rsp+40h] [rbp-C0h] BYREF",
    "  _QWORD v7[20]; // [rsp+50h] [rbp-B0h] BYREF",
    "  _CONTEXT ContextRecord; // [rsp+F0h] [rbp-10h] BYREF",
    "  DWORD64 retaddr; // [rsp+5C8h] [rbp+4C8h]",
    "  __int64 v10; // [rsp+5D0h] [rbp+4D0h] BYREF",
    "  unsigned __int64 ImageBase; // [rsp+5D8h] [rbp+4D8h] BYREF",
    "  unsigned __int64 EstablisherFrame; // [rsp+5E0h] [rbp+4E0h] BYREF",
    "  PVOID HandlerData; // [rsp+5E8h] [rbp+4E8h] BYREF",
    "",
    "  if ( IsProcessorFeaturePresent(0x17u) )",
    "    __fastfail(a1);",
    "  sub_140003234(3);",
    "  memset(&ContextRecord, 0, sizeof(ContextRecord));",
    "  RtlCaptureContext(&ContextRecord);",
    "  Rip = ContextRecord.Rip;",
    "  v3 = RtlLookupFunctionEntry(ContextRecord.Rip, &ImageBase, 0);",
    "  if ( v3 )",
    "    RtlVirtualUnwind(0, ImageBase, Rip, v3, &ContextRecord, &HandlerData, &EstablisherFrame, 0);",
    "  ContextRecord.Rip = retaddr;",
    "  ContextRecord.Rsp = (DWORD64)&v10;",
    "  memset(v7, 0, 0x98u);",
    "  v7[2] = retaddr;",
    "  v7[0] = 0x140000015LL;",
    "  ExceptionInfo.ExceptionRecord = (PEXCEPTION_RECORD)v7;",
    "  v4 = IsDebuggerPresent();",
    "  ExceptionInfo.ContextRecord = &ContextRecord;",
    "  SetUnhandledExceptionFilter(0);",
    "  result = UnhandledExceptionFilter(&ExceptionInfo);",
    "  if ( !result && !v4 )",
    "    return sub_140003234(3);",
    "  return result;",
    "}",
    "",
    "",
    "WORD _scrt_get_show_window_mode()",
    "{",
    "  WORD result; // ax",
    "  _STARTUPINFOW StartupInfo; // [rsp+20h] [rbp-78h] BYREF",
    "",
    "  memset(&StartupInfo, 0, sizeof(StartupInfo));",
    "  GetStartupInfoW(&StartupInfo);",
    "  result = 10;",
    "  if ( (StartupInfo.dwFlags & 1) != 0 )",
    "    return StartupInfo.wShowWindow;",
    "  return result;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "int __fastcall j_UserMathErrorFunction(struct _exception *a1)",
    "{",
    "}bool _scrt_is_managed_app()",
    "{",
    "  HMODULE ModuleHandleW; // rax",
    "  char *v1; // rcx",
    "  bool result; // al",
    "",
    "  ModuleHandleW = GetModuleHandleW(0);",
    "  result = ModuleHandleW",
    "        && *(_WORD *)ModuleHandleW == 23117",
    "        && (v1 = (char *)ModuleHandleW + *((int *)ModuleHandleW + 15), *(_DWORD *)v1 == 17744)",
    "        && *((_WORD *)v1 + 12) == 523",
    "        && *((_DWORD *)v1 + 33) > 0xEu",
    "        && *((_DWORD *)v1 + 62) != 0;",
    "  return result;",
    "}",
    "",
    "",
    "LPTOP_LEVEL_EXCEPTION_FILTER _scrt_set_unhandled_exception_filter()",
    "{",
    "  return SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)_scrt_unhandled_exception_filter);",
    "}",
    "",
    "",
    "__int64 __fastcall _scrt_unhandled_exception_filter(_QWORD *a1)",
    "{",
    "  _DWORD *v1; // rbx",
    "  int v3; // edx",
    "  __int64 v5; // rbx",
    "",
    "  v1 = (_DWORD *)*a1;",
    "  if ( *(_DWORD *)*a1 == -529697949 && v1[6] == 4 )",
    "  {",
    "    v3 = v1[8];",
    "    if ( (unsigned int)(v3 - 429065504) <= 2 || v3 == 26820608 )",
    "    {",
    "      *(_QWORD *)_current_exception() = v1;",
    "      v5 = a1[1];",
    "      *(_QWORD *)_current_exception_context() = v5;",
    "      terminate();",
    "      JUMPOUT(0x14000348ALL);",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "void sub_14000348C()",
    "{",
    "  void (**i)(void); // rbx",
    "",
    "  for ( i = qword_1400068C8; i < qword_1400068C8; ++i )",
    "  {",
    "    if ( *i )",
    "      (*i)();",
    "  }",
    "}",
    "",
    "",
    "void __fastcall sub_1400034C8()",
    "{",
    "  void (**i)(void); // rbx",
    "",
    "  for ( i = &qword_1400068D8; i < &qword_1400068D8; ++i )",
    "  {",
    "    if ( *i )",
    "      (*i)();",
    "  }",
    "}",
    "",
    "",
    "BOOL __fastcall _raise_securityfailure(struct _EXCEPTION_POINTERS *ExceptionInfo)",
    "{",
    "  HANDLE CurrentProcess; // rax",
    "",
    "  SetUnhandledExceptionFilter(0);",
    "  UnhandledExceptionFilter(ExceptionInfo);",
    "  CurrentProcess = GetCurrentProcess();",
    "  return TerminateProcess(CurrentProcess, 0xC0000409);",
    "}",
    "",
    "",
    "BOOL __fastcall _report_gsfailure(__int64 a1)",
    "{",
    "  __int64 retaddr; // [rsp+38h] [rbp+0h]",
    "  __int64 v3; // [rsp+40h] [rbp+8h] BYREF",
    "",
    "  v3 = a1;",
    "  if ( IsProcessorFeaturePresent(0x17u) )",
    "    __fastfail(2u);",
    "  capture_previous_context((PCONTEXT)&unk_1400084B0);",
    "  qword_1400085A8 = retaddr;",
    "  qword_140008548 = (__int64)&v3;",
    "  qword_140008420 = retaddr;",
    "  qword_140008530 = v3;",
    "  dword_140008410 = -1073740791;",
    "  dword_140008414 = 1;",
    "  dword_140008428 = 1;",
    "  unk_140008430 = 2;",
    "  return _raise_securityfailure((struct _EXCEPTION_POINTERS *)&off_1400049C8);",
    "}",
    "",
    "",
    "struct _IMAGE_RUNTIME_FUNCTION_ENTRY *__fastcall capture_previous_context(PCONTEXT ContextRecord)",
    "{",
    "  ULONG64 Rip; // rsi",
    "  int i; // edi",
    "  struct _IMAGE_RUNTIME_FUNCTION_ENTRY *result; // rax",
    "  unsigned __int64 ImageBase; // [rsp+60h] [rbp+8h] BYREF",
    "  unsigned __int64 EstablisherFrame; // [rsp+68h] [rbp+10h] BYREF",
    "  PVOID HandlerData; // [rsp+70h] [rbp+18h] BYREF",
    "",
    "  RtlCaptureContext(ContextRecord);",
    "  Rip = ContextRecord->Rip;",
    "  for ( i = 0; i < 2; ++i )",
    "  {",
    "    result = RtlLookupFunctionEntry(Rip, &ImageBase, 0);",
    "    if ( !result )",
    "      break;",
    "    result = (struct _IMAGE_RUNTIME_FUNCTION_ENTRY *)RtlVirtualUnwind(",
    "                                                       0,",
    "                                                       ImageBase,",
    "                                                       Rip,",
    "                                                       result,",
    "                                                       ContextRecord,",
    "                                                       &HandlerData,",
    "                                                       &EstablisherFrame,",
    "                                                       0);",
    "  }",
    "  return result;",
    "}",
    "",
    "",
    "__int64 _isa_available_init()",
    "{",
    "  int v5; // r11d",
    "  int v6; // r9d",
    "  int v7; // esi",
    "  int v9; // r10d",
    "  int v14; // edi",
    "  int v15; // eax",
    "  unsigned __int64 v16; // rax",
    "  __int64 v17; // rcx",
    "  int v18; // r8d",
    "  int v23; // eax",
    "  char v25; // [rsp+20h] [rbp+8h]",
    "",
    "  _RAX = 0;",
    "  __asm { cpuid }",
    "  v5 = 0;",
    "  v6 = _RBX;",
    "  v7 = _RAX;",
    "  _RAX = 1;",
    "  v9 = _RCX ^ 0x6C65746E | _RDX ^ 0x49656E69;",
    "  __asm { cpuid }",
    "  v14 = _RCX;",
    "  if ( !(v6 ^ 0x756E6547 | v9)",
    "    && ((qword_140008030 = -1, v15 = _RAX & 0xFFF3FF0, qword_140008028 = 0x8000, v15 == 67264)",
    "     || v15 == 132704",
    "     || v15 == 132720",
    "     || (v16 = (unsigned int)(v15 - 198224), (unsigned int)v16 <= 0x20) && (v17 = 0x100010001LL, _bittest64(&v17, v16))) )",
    "  {",
    "    v18 = dword_140008980 | 1;",
    "    dword_140008980 |= 1u;",
    "  }",
    "  else",
    "  {",
    "    v18 = dword_140008980;",
    "  }",
    "  _RAX = 7;",
    "  if ( v7 >= 7 )",
    "  {",
    "    __asm { cpuid }",
    "    v5 = _RBX;",
    "    if ( (_RBX & 0x200) != 0 )",
    "      dword_140008980 = v18 | 2;",
    "  }",
    "  dword_140008020 = 1;",
    "  dword_140008024 = 2;",
    "  if ( (v14 & 0x100000) != 0 )",
    "  {",
    "    dword_140008020 = 2;",
    "    dword_140008024 = 6;",
    "    if ( (v14 & 0x8000000) != 0 && (v14 & 0x10000000) != 0 )",
    "    {",
    "      __asm { xgetbv }",
    "      v25 = _RAX;",
    "      if ( (_RAX & 6) == 6 )",
    "      {",
    "        v23 = dword_140008024 | 8;",
    "        dword_140008020 = 3;",
    "        dword_140008024 |= 8u;",
    "        if ( (v5 & 0x20) != 0 )",
    "        {",
    "          dword_140008020 = 5;",
    "          dword_140008024 = v23 | 0x20;",
    "          if ( (v5 & 0xD0030000) == 0xD0030000 && (v25 & 0xE0) == 0xE0 )",
    "          {",
    "            dword_140008024 |= 0x40u;",
    "            dword_140008020 = 6;",
    "          }",
    "        }",
    "      }",
    "    }",
    "  }",
    "  return 0;",
    "}",
    "",
    "",
    "_BOOL8 _scrt_is_ucrt_dll_in_use()",
    "{",
    "  return dword_140008040 != 0;",
    "}",
    "",
    "",
    "__int64 __fastcall _GSHandlerCheck(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  _GSHandlerCheckCommon(a2, a4, *(_QWORD *)(a4 + 56));",
    "  return 1;",
    "}",
    "",
    "",
    "__int64 __fastcall _GSHandlerCheckCommon(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v2; // rcx",
    "  __int64 result; // rax",
    "",
    "  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 8LL);",
    "  result = *(_QWORD *)(a2 + 8);",
    "  if ( (*(_BYTE *)(v2 + result + 3) & 0xF) != 0 )",
    "    return *(_BYTE *)(v2 + result + 3) & 0xF0;",
    "  return result;",
    "}",
    "",
    "",
    "__int64 __fastcall sub_1400038C0(__int64 a1)",
    "{",
    "  signed int LastError; // eax",
    "  signed int v3; // ecx",
    "",
    "  memset((void *)(a1 + 40), 0, 0x28u);",
    "  *(_QWORD *)(a1 + 80) = 0;",
    "  *(_DWORD *)(a1 + 88) = 0;",
    "  *(_DWORD *)(a1 + 92) = 0;",
    "  *(_QWORD *)(a1 + 16) = 0x140000000uLL;",
    "  *(_QWORD *)(a1 + 8) = 0x140000000uLL;",
    "  *(_QWORD *)(a1 + 32) = &unk_1400049D8;",
    "  *(_DWORD *)a1 = 96;",
    "  *(_DWORD *)(a1 + 24) = 3584;",
    "  if ( !InitializeCriticalSectionEx((LPCRITICAL_SECTION)(a1 + 40), 0, 0) )",
    "  {",
    "    LastError = GetLastError();",
    "    v3 = (unsigned __int16)LastError | 0x80070000;",
    "    if ( LastError <= 0 )",
    "      v3 = LastError;",
    "    if ( v3 < 0 )",
    "    {",
    "      if ( IsDebuggerPresent() )",
    "        OutputDebugStringW((LPCWSTR)L\"ERROR : Unable to initialize critical section in CAtlBaseModule\\n\");",
    "      byte_1400089FC = 1;",
    "    }",
    "  }",
    "  return a1;",
    "}",
    "",
    "",
    "void __fastcall sub_140003968(struct _RTL_CRITICAL_SECTION *a1)",
    "{",
    "  PRTL_CRITICAL_SECTION_DEBUG DebugInfo; // rcx",
    "",
    "  DeleteCriticalSection(a1 + 1);",
    "  DebugInfo = a1[2].DebugInfo;",
    "  if ( DebugInfo )",
    "  {",
    "    free(DebugInfo);",
    "    a1[2].DebugInfo = 0;",
    "  }",
    "  a1[2].LockCount = 0;",
    "  a1[2].RecursionCount = 0;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void *__cdecl memset(void *a1, int Val, size_t Size)",
    "{",
    "}// attributes: thunk",
    "__int64 _current_exception(void)",
    "{",
    "}// attributes: thunk",
    "__int64 _current_exception_context(void)",
    "{",
    "}// attributes: thunk",
    "void *__cdecl memmove(void *a1, const void *Src, size_t Size)",
    "{",
    "}// attributes: thunk",
    "void __cdecl free(void *Block)",
    "{",
    "}// attributes: thunk",
    "void __cdecl set_app_type(_crt_app_type Type)",
    "{",
    "}// attributes: thunk",
    "void __cdecl _setusermatherr(_UserMathErrorFunctionPointer UserMathErrorFunction)",
    "{",
    "}// attributes: thunk",
    "errno_t __cdecl configure_wide_argv(_crt_argv_mode mode)",
    "{",
    "}// attributes: thunk",
    "int __cdecl initialize_wide_environment()",
    "{",
    "}// attributes: thunk",
    "wchar_t *__cdecl get_wide_winmain_command_line()",
    "{",
    "}// attributes: thunk",
    "void __cdecl initterm(_PVFV *First, _PVFV *Last)",
    "{",
    "}// attributes: thunk",
    "int __cdecl initterm_e(_PIFV *First, _PIFV *Last)",
    "{",
    "}// attributes: thunk",
    "void __cdecl  exit(int Code)",
    "{",
    "}// attributes: thunk",
    "errno_t __cdecl set_fmode(int Mode)",
    "{",
    "}// attributes: thunk",
    "void __cdecl cexit()",
    "{",
    "}// attributes: thunk",
    "void __cdecl register_thread_local_exe_atexit_callback(_tls_callback_type Callback)",
    "{",
    "}// attributes: thunk",
    "int __cdecl configthreadlocale(int Flag)",
    "{",
    "}// attributes: thunk",
    "int *__cdecl _p__commode()",
    "{",
    "}// attributes: thunk",
    "int __cdecl initialize_onexit_table(_onexit_table_t *Table)",
    "{",
    "}// attributes: thunk",
    "int __cdecl register_onexit_function(_onexit_table_t *Table, _onexit_t Function)",
    "{",
    "}// attributes: thunk",
    "int __cdecl crt_atexit(_PVFV Function)",
    "{",
    "}// attributes: thunk",
    "void  terminate(void)",
    "{",
    "}__int64 __fastcall sub_140003A44(char a1, int a2)",
    "{",
    "  struct AFX_MODULE_STATE *ModuleState; // rax",
    "",
    "  ModuleState = AfxGetModuleState();",
    "  *((_BYTE *)ModuleState + 40) = a1;",
    "  *((_DWORD *)ModuleState + 30) = a2;",
    "  return 1;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)",
    "{",
    "}__int64 __fastcall _GSHandlerCheck_EH4(__int64 a1, __int64 a2, __int64 a3, __int64 a4)",
    "{",
    "  __int64 v4; // rbx",
    "  __int64 result; // rax",
    "",
    "  v4 = *(_QWORD *)(a4 + 56);",
    "  _GSHandlerCheckCommon(a2, a4);",
    "  result = 1;",
    "  if ( ((((*(_DWORD *)(a1 + 4) & 0x66) != 0) + 1) & *(_DWORD *)(v4 + 4)) != 0 )",
    "    return _CxxFrameHandler4(a1, a2, a3, a4);",
    "  return result;",
    "}",
    "",
    "",
    "// attributes: thunk",
    "void *__cdecl memcpy(void *a1, const void *Src, size_t Size)",
    "{",
    "}void __fastcall sub_140003B68(__int64 a1, __int64 a2)",
    "{",
    "  CEdit::~CEdit((CEdit *)(a2 + 408));",
    "}",
    "",
    "",
    "__int64 __fastcall sub_140003B90(__int64 a1, __int64 a2)",
    "{",
    "  __int64 v3; // rbx",
    "  int v4; // eax",
    "  __int64 v5; // rcx",
    "",
    "  ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(a2 + 48);",
    "  v3 = *(_QWORD *)(a2 + 56);",
    "  v4 = (*(__int64 (__fastcall **)(__int64, __int64, __int64, _QWORD))(*(_QWORD *)v3 + 40LL))(v3, a2 + 64, 512, 0);",
    "  v5 = a2 + 48;",
    "  if ( v4 )",
    "    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::Format(",
    "      v5,",
    "      L\"%Ts (%Ts:%d)\\n%Ts\",",
    "      L\"Exception thrown in destructor\",",
    "      L\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.32.31326\\\\atlmfc\\\\include\\\\afxwin1.inl\",",
    "      77,",
    "      a2 + 64);",
    "  else",
    "    ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::Format(",
    "      v5,",
    "      L\"%Ts (%Ts:%d)\",",
    "      L\"Exception thrown in destructor\",",
    "      L\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.32.31326\\\\atlmfc\\\\include\\\\afxwin1.inl\",",
    "      77);",
    "  AfxMessageBox(*(const wchar_t **)(a2 + 48), 0, 0);",
    "  ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::~CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(a2 + 48);",
    "  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v3 + 8LL))(v3, 1);",
    "  return 0;",
    "}",
    "",
    "",
    "// MFC 7-14 64bit",
    "__int64 __fastcall unknown_libname_2(__int64 a1, __int64 a2)",
    "{",
    "}void __fastcall sub_140003D40()",
    "{",
    "  CWinApp::~CWinApp((CWinApp *)qword_140008A00);",
    "}",
    "",
    "",
    "void __fastcall sub_140003D50()",
    "{",
    "  sub_140003968((struct _RTL_CRITICAL_SECTION *)&unk_140008990);",
    "}",
    "",
    ""
  ],
  "h_code": [
    "#include <windows.h>",
    "#include <stdint.h>",
    "#include <stdio.h>",
    "",
    "#include \"defs.h\"",
    "",
    "void JUMPOUT(int a) {",
    "}",
    "",
    "unsigned int _bss_start__ = 0;",
    "unsigned int __cxa_finalize = 0;",
    "int sub_140001000();",
    "int sub_14000103C();",
    "__int64 sub_14000105C();",
    "CWinApp *__fastcall sub_140001090(CWinApp *a1, char a2);",
    "__int64 __fastcall sub_1400010E0(CWinApp *a1);",
    "void __fastcall sub_140001250(_QWORD *a1);",
    "void __fastcall sub_1400012A0(_QWORD *a1);",
    "_QWORD *__fastcall sub_140001370(_QWORD *a1, char a2);",
    "void *__fastcall sub_1400013D0(void *a1, char a2);",
    "int __fastcall sub_140001420(CGdiObject *a1);",
    "__int64 __fastcall sub_140001480(__int64 a1, __int64 a2);",
    "_QWORD *__fastcall sub_1400014E0(_QWORD *a1, char a2);",
    "__int64 __fastcall sub_140001560(_QWORD *a1);",
    "void  sub_140001580();",
    "__int64 __fastcall sub_1400015A0(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1400015E0(__int64 a1, __int64 a2);",
    "void  sub_140001620();",
    "__int64 __fastcall sub_140001640(__int64 a1, char a2);",
    "__int64 __fastcall sub_1400016D0(__int64 a1, char a2);",
    "__int64 __fastcall sub_140001790(__int64 a1);",
    "void __fastcall sub_140001860(CWnd *a1, __int16 a2);",
    "void __fastcall sub_1400018F0(__int64 a1);",
    "_QWORD *__fastcall sub_140001A10(_QWORD *a1, _QWORD *a2, __int64 a3);",
    "char __fastcall sub_140001C30(_QWORD *a1);",
    "__int64 __fastcall sub_140001F60(CWnd *a1);",
    "int __fastcall sub_1400021A0(CDialogEx *a1, struct tagMSG *a2);",
    "void __fastcall sub_1400021D0(void **a1);",
    "__int64 __fastcall sub_1400021F0(__int64 a1);",
    "void __fastcall sub_140002250(__int64 a1);",
    "void __fastcall sub_1400022B0(CHAR **a1, const WCHAR *a2, UINT a3);",
    "void **__fastcall sub_140002510(void **a1, void *Src, size_t Size);",
    "void __fastcall sub_140002680(void *a1, void *a2);",
    "void  sub_140002690();",
    "void  sub_1400026C0();",
    "CEdit *__fastcall sub_1400026E0(CEdit *a1, char a2);",
    "void __fastcall  sub_140002750(int a1);",
    "int pre_c_initialization();",
    "__int64 post_pgo_initialization();",
    "void pre_cpp_initialization();",
    "__int64 __fastcall __scrt_common_main_seh();",
    "__int64 start();",
    "char _scrt_acquire_startup_lock();",
    "char __fastcall _scrt_initialize_crt(int a1);",
    "char __fastcall _scrt_initialize_onexit_tables(unsigned int a1);",
    "bool __fastcall _scrt_is_nonwritable_in_current_image(__int64 a1);",
    "__int64 __fastcall _scrt_release_startup_lock(char a1);",
    "char __fastcall _scrt_uninitialize_crt(__int64 a1, char a2);",
    "_onexit_t __cdecl onexit(_onexit_t Func);",
    "int __cdecl atexit(void (__cdecl *a1)());",
    "_QWORD *__fastcall sub_140002FF0(_QWORD *a1, char a2);",
    "// attributes: thunk",
    "void __fastcall operator delete(void *a1);",
    "__int64 __scrt_initialize_thread_safe_statics();",
    "void __fastcall __scrt_uninitialize_thread_safe_statics();",
    "__int64 _security_init_cookie();",
    "__int64 __fastcall charNode::raw_length(charNode *this);",
    "__int64 get_startup_file_mode();",
    "void sub_1400031D8();",
    "char sub_1400031E8();",
    "_QWORD *_scrt_initialize_default_local_stdio_options();",
    "_BOOL8 _scrt_is_user_matherr_present();",
    "void *sub_140003224();",
    "void *sub_14000322C();",
    "LONG __fastcall _scrt_fastfail(unsigned int a1);",
    "WORD _scrt_get_show_window_mode();",
    "// attributes: thunk",
    "int __fastcall j_UserMathErrorFunction(struct _exception *a1);",
    "bool _scrt_is_managed_app();",
    "LPTOP_LEVEL_EXCEPTION_FILTER _scrt_set_unhandled_exception_filter();",
    "__int64 __fastcall _scrt_unhandled_exception_filter(_QWORD *a1);",
    "void sub_14000348C();",
    "void __fastcall sub_1400034C8();",
    "BOOL __fastcall _raise_securityfailure(struct _EXCEPTION_POINTERS *ExceptionInfo);",
    "BOOL __fastcall _report_gsfailure(__int64 a1);",
    "struct _IMAGE_RUNTIME_FUNCTION_ENTRY *__fastcall capture_previous_context(PCONTEXT ContextRecord);",
    "__int64 _isa_available_init();",
    "_BOOL8 _scrt_is_ucrt_dll_in_use();",
    "__int64 __fastcall _GSHandlerCheck(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "__int64 __fastcall _GSHandlerCheckCommon(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_1400038C0(__int64 a1);",
    "void __fastcall sub_140003968(struct _RTL_CRITICAL_SECTION *a1);",
    "// attributes: thunk",
    "void *__cdecl memset(void *a1, int Val, size_t Size);",
    "// attributes: thunk",
    "__int64 _current_exception(void);",
    "// attributes: thunk",
    "__int64 _current_exception_context(void);",
    "// attributes: thunk",
    "void *__cdecl memmove(void *a1, const void *Src, size_t Size);",
    "// attributes: thunk",
    "void __cdecl free(void *Block);",
    "// attributes: thunk",
    "void __cdecl set_app_type(_crt_app_type Type);",
    "// attributes: thunk",
    "void __cdecl _setusermatherr(_UserMathErrorFunctionPointer UserMathErrorFunction);",
    "// attributes: thunk",
    "errno_t __cdecl configure_wide_argv(_crt_argv_mode mode);",
    "// attributes: thunk",
    "int __cdecl initialize_wide_environment();",
    "// attributes: thunk",
    "wchar_t *__cdecl get_wide_winmain_command_line();",
    "// attributes: thunk",
    "void __cdecl initterm(_PVFV *First, _PVFV *Last);",
    "// attributes: thunk",
    "int __cdecl initterm_e(_PIFV *First, _PIFV *Last);",
    "// attributes: thunk",
    "void __cdecl  exit(int Code);",
    "// attributes: thunk",
    "errno_t __cdecl set_fmode(int Mode);",
    "// attributes: thunk",
    "void __cdecl cexit();",
    "// attributes: thunk",
    "void __cdecl register_thread_local_exe_atexit_callback(_tls_callback_type Callback);",
    "// attributes: thunk",
    "int __cdecl configthreadlocale(int Flag);",
    "// attributes: thunk",
    "int *__cdecl _p__commode();",
    "// attributes: thunk",
    "int __cdecl initialize_onexit_table(_onexit_table_t *Table);",
    "// attributes: thunk",
    "int __cdecl register_onexit_function(_onexit_table_t *Table, _onexit_t Function);",
    "// attributes: thunk",
    "int __cdecl crt_atexit(_PVFV Function);",
    "// attributes: thunk",
    "void  terminate(void);",
    "__int64 __fastcall sub_140003A44(char a1, int a2);",
    "// attributes: thunk",
    "int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);",
    "__int64 __fastcall _GSHandlerCheck_EH4(__int64 a1, __int64 a2, __int64 a3, __int64 a4);",
    "// attributes: thunk",
    "void *__cdecl memcpy(void *a1, const void *Src, size_t Size);",
    "void __fastcall sub_140003B68(__int64 a1, __int64 a2);",
    "__int64 __fastcall sub_140003B90(__int64 a1, __int64 a2);",
    "// MFC 7-14 64bit",
    "__int64 __fastcall unknown_libname_2(__int64 a1, __int64 a2);",
    "void __fastcall sub_140003D40();",
    "void __fastcall sub_140003D50();"
  ],
  "summary": [],
  "yara_rules": "",
  "capa_rules": {
    "meta": {
      "timestamp": "2025-07-08T02:25:03.910936",
      "version": "9.2.1",
      "argv": [
        "-r",
        "D:\\Whitehat\\web\\YARRAI_Web\\backend\\services\\CAPA\\capa-rules",
        "-s",
        "D:\\Whitehat\\web\\YARRAI_Web\\backend\\services\\CAPA\\capa-sigs",
        "--json",
        "D:\\Whitehat\\web\\YARRAI_Web\\backend\\uploads\\fd8e1d18-7251-4acc-a766-e055d4de9d10.exe"
      ],
      "sample": {
        "md5": "845e7763ffb4246b3f294b418b0d9b9c",
        "sha1": "93b859cc45aacca9277b7d42b2254a2bdeb76465",
        "sha256": "0d4e423cb2ba20b3e48bb4b1a93cce4e7e49cb955b6dae20a06b64363d54fb3c",
        "path": "D:/Whitehat/web/YARRAI_Web/backend/uploads/fd8e1d18-7251-4acc-a766-e055d4de9d10.exe"
      },
      "flavor": "static",
      "analysis": {
        "format": "pe",
        "arch": "amd64",
        "os": "windows",
        "extractor": "VivisectFeatureExtractor",
        "rules": [
          "D:/Whitehat/web/YARRAI_Web/backend/services/CAPA/capa-rules"
        ],
        "base_address": {
          "type": "absolute",
          "value": 5368709120
        },
        "layout": {
          "functions": [
            {
              "address": {
                "type": "absolute",
                "value": 5368713216
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713216
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368721368
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713276
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713276
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368721368
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713360
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713396
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713426
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713440
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713440
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713712
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713808
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713808
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713888
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368713888
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714096
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714141
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714171
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714192
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714227
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714257
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714272
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714272
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714368
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714464
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714464
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714517
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714656
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714656
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714720
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714720
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714816
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714890
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714920
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714960
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368714960
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715047
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715077
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715152
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715293
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715360
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715360
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715378
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715481
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715504
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715749
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715792
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368715792
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716064
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716161
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716201
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716226
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716255
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368716336
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716336
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716455
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716477
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716530
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716679
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716781
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716795
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716826
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716871
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716896
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716941
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368716972
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717020
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717045
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717076
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368717152
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717152
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717621
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368717728
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717728
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717748
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368717763
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368718000
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718025
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718495
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368718608
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718608
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718713
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718771
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718836
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718885
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368718922
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368719072
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368719108
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368719138
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368719184
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368719184
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368721368
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722380
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368722407
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368722422
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368722456
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722572
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368722612
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368722621
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722632
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368722672
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368722681
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723072
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368723072
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368723206
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368723482
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723816
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368723816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368723854
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724092
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368724092
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368724192
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724368
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368724494
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724742
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368724742
                  }
                }
              ]
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724816
              },
              "matched_basic_blocks": [
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368723816
                  }
                },
                {
                  "address": {
                    "type": "absolute",
                    "value": 5368723854
                  }
                }
              ]
            }
          ]
        },
        "feature_counts": {
          "file": 1265,
          "functions": [
            {
              "address": {
                "type": "absolute",
                "value": 5368713216
              },
              "count": 30
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713276
              },
              "count": 23
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713344
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713360
              },
              "count": 32
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713440
              },
              "count": 98
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713808
              },
              "count": 39
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713888
              },
              "count": 34
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713952
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368713984
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714096
              },
              "count": 37
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714192
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714272
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714368
              },
              "count": 29
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714464
              },
              "count": 38
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714656
              },
              "count": 30
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714720
              },
              "count": 30
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714784
              },
              "count": 15
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714816
              },
              "count": 47
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714944
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368714960
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715136
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715152
              },
              "count": 68
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715360
              },
              "count": 50
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715504
              },
              "count": 75
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368715792
              },
              "count": 124
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368716336
              },
              "count": 124
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368717152
              },
              "count": 125
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368717728
              },
              "count": 31
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368718000
              },
              "count": 86
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368718608
              },
              "count": 87
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368718976
              },
              "count": 12
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368718992
              },
              "count": 15
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368719040
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368719072
              },
              "count": 32
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368719184
              },
              "count": 19
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368719216
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368720021
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721436
              },
              "count": 9
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721880
              },
              "count": 10
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721896
              },
              "count": 9
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721900
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721908
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721944
              },
              "count": 11
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721956
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721964
              },
              "count": 7
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368721972
              },
              "count": 9
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722372
              },
              "count": 9
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722380
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722464
              },
              "count": 11
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722572
              },
              "count": 35
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368722632
              },
              "count": 34
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723072
              },
              "count": 113
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723868
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723874
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723886
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723892
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723898
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723904
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723910
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723916
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723922
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723928
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723934
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723940
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723946
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723952
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723958
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723970
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723976
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723988
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368723994
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724006
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724012
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724018
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724024
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724030
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724080
              },
              "count": 9
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724092
              },
              "count": 52
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724219
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724225
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724288
              },
              "count": 8
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724368
              },
              "count": 50
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724742
              },
              "count": 20
            },
            {
              "address": {
                "type": "absolute",
                "value": 5368724816
              },
              "count": 37
            }
          ]
        },
        "library_functions": [
          {
            "address": {
              "type": "absolute",
              "value": 5368713308
            },
            "name": "??__E_afxInitAppState@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368713968
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714000
            },
            "name": "?RestoreAutosavedFilesAtRestart@CWinApp@@UEBAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714016
            },
            "name": "?ReopenPreviousFilesAtRestart@CWinApp@@UEBAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714032
            },
            "name": "?SupportsAutosaveAtInterval@CWinApp@@UEBAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714048
            },
            "name": "?SupportsAutosaveAtRestart@CWinApp@@UEBAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714064
            },
            "name": "?SupportsApplicationRecovery@CWinApp@@UEBAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714080
            },
            "name": "?SupportsRestartManager@CWinApp@@UEBAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714432
            },
            "name": "?what@exception@std@@UEBAPEBDXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714544
            },
            "name": "??0bad_array_new_length@std@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368714624
            },
            "name": "?_Throw_bad_array_new_length@std@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368715776
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368717808
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368717904
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720120
            },
            "name": "?pre_c_initialization@@YAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720304
            },
            "name": "?post_pgo_initialization@@YAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720320
            },
            "name": "?pre_cpp_initialization@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720348
            },
            "name": "?__scrt_common_main_seh@@YAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720720
            },
            "name": "mainCRTStartup"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720768
            },
            "name": "__security_check_cookie"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720800
            },
            "name": "__scrt_acquire_startup_lock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720860
            },
            "name": "__scrt_initialize_crt"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368720936
            },
            "name": "__scrt_initialize_onexit_tables"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721076
            },
            "name": "__scrt_is_nonwritable_in_current_image"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721228
            },
            "name": "__scrt_release_startup_lock"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721264
            },
            "name": "__scrt_uninitialize_crt"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721308
            },
            "name": "_onexit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721368
            },
            "name": "atexit"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721392
            },
            "name": "??_Gtype_info@@UEAAPEAXI@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721444
            },
            "name": "?__scrt_initialize_thread_safe_statics@@YAHXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721652
            },
            "name": "?__scrt_uninitialize_thread_safe_statics@@YAXXZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721692
            },
            "name": "__security_init_cookie"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721864
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721872
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721916
            },
            "name": "__scrt_initialize_default_local_stdio_options"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368721980
            },
            "name": "__scrt_fastfail"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368722312
            },
            "name": "__scrt_get_show_window_mode"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368722480
            },
            "name": "__scrt_unhandled_exception_filter"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368722692
            },
            "name": "__raise_securityfailure"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368722744
            },
            "name": "__report_gsfailure"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368722956
            },
            "name": "capture_previous_context"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368723500
            },
            "name": "_Curl_tls_keylog_enabled"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368723512
            },
            "name": "__GSHandlerCheck"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368723544
            },
            "name": "__GSHandlerCheckCommon"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368723648
            },
            "name": "??0CAtlBaseModule@ATL@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368723816
            },
            "name": "??1CAtlBaseModule@ATL@@QEAA@XZ"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368724036
            },
            "name": "?AfxInitialize@@YAHHK@Z"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368724256
            },
            "name": "_guard_dispatch_icall_nop"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368724620
            },
            "name": "?"
          },
          {
            "address": {
              "type": "absolute",
              "value": 5368724772
            },
            "name": "__scrt_is_nonwritable_in_current_image$filt$0"
          }
        ]
      }
    },
    "rules": {
      "contain loop": {
        "meta": {
          "name": "contain loop",
          "authors": [
            "moritz.raabe@mandiant.com"
          ],
          "scopes": {
            "static": "function"
          },
          "attack": [],
          "mbc": [],
          "references": [],
          "examples": [
            "08AC667C65D36D6542917655571E61C8:0x406EAA"
          ],
          "description": "",
          "lib": true,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: contain loop\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n    lib: true\r\n    scopes:\r\n      static: function\r\n      dynamic: unsupported  # requires characteristic features\r\n    examples:\r\n      - 08AC667C65D36D6542917655571E61C8:0x406EAA\r\n  features:\r\n    - or:\r\n      - characteristic: loop\r\n      - characteristic: tight loop\r\n      - characteristic: recursive call\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 5368715792
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 5368715792
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 5368716336
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 5368716336
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 5368717152
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 5368717312
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 5368718000
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 5368718064
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 5368722572
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 5368722572
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ],
          [
            {
              "type": "absolute",
              "value": 5368722632
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "loop"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "absolute",
                      "value": 5368722632
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "tight loop"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "characteristic",
                      "characteristic": "recursive call"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "parse PE header": {
        "meta": {
          "name": "parse PE header",
          "namespace": "load-code/pe",
          "authors": [
            "moritz.raabe@mandiant.com"
          ],
          "scopes": {
            "static": "function"
          },
          "attack": [
            {
              "parts": [
                "Execution",
                "Shared Modules"
              ],
              "tactic": "Execution",
              "technique": "Shared Modules",
              "subtechnique": "",
              "id": "T1129"
            }
          ],
          "mbc": [],
          "references": [],
          "examples": [
            "9324D1A8AE37A36AE560C37448C9705A:0x403DD0"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: parse PE header\r\n    namespace: load-code/pe\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n    scopes:\r\n      static: function\r\n      dynamic: unsupported  # requires mnemonic, operand[1].offset features\r\n    att&ck:\r\n      - Execution::Shared Modules [T1129]\r\n    examples:\r\n      - 9324D1A8AE37A36AE560C37448C9705A:0x403DD0\r\n  features:\r\n    - and:\r\n      - os: windows\r\n      - and:\r\n        - mnemonic: cmp\r\n        - or:\r\n          - number: 0x4550 = IMAGE_NT_SIGNATURE (PE)\r\n          - and:\r\n            - number: 0x50\r\n            - number: 0x45\r\n        - or:\r\n          - number: 0x5A4D = IMAGE_DOS_SIGNATURE (MZ)\r\n          - and:\r\n            - number: 0x4D\r\n            - number: 0x5A\r\n        - optional:\r\n          - and:\r\n            - operand[1].offset: 0x3C = IMAGE_DOS_HEADER.e_lfanew\r\n            - or:\r\n              - and:\r\n                - arch: i386\r\n                - operand[1].offset: 0x50 = IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage\r\n                - operand[1].offset: 0x34 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase\r\n              - and:\r\n                - arch: amd64\r\n                - operand[1].offset: 0x50 = IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage\r\n                - operand[1].offset: 0x30 = IMAGE_NT_HEADERS64.OptionalHeader.ImageBase\r\n          - basic block:\r\n            - and:\r\n              - operand[1].offset: 0x3C = IMAGE_DOS_HEADER.e_lfanew\r\n              - 3 or more:\r\n                - operand[1].offset: 0x4 = IMAGE_NT_HEADERS.FileHeader.Machine\r\n                - operand[1].offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections\r\n                - operand[1].offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader\r\n                - operand[1].offset: 0x16 = IMAGE_NT_HEADERS.FileHeader.Characteristics\r\n                - operand[1].offset: 0x28 = IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint  # for 32 and 64 bit\r\n                - or:\r\n                  - and:\r\n                    - arch: i386\r\n                    - operand[1].offset: 0x34 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase\r\n                    - operand[1].offset: 0x50 = IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage\r\n                  - and:\r\n                    - arch: amd64\r\n                    - operand[1].offset: 0x30 = IMAGE_NT_HEADERS.OptionalHeader.ImageBase\r\n                    - operand[1].offset: 0x50 = IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage\r\n",
        "matches": [
          [
            {
              "type": "absolute",
              "value": 5368722380
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "and"
                }
              },
              "children": [
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "os",
                      "os": "windows"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "no address"
                    }
                  ],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "statement",
                    "statement": {
                      "type": "and"
                    }
                  },
                  "children": [
                    {
                      "success": true,
                      "node": {
                        "type": "feature",
                        "feature": {
                          "type": "mnemonic",
                          "mnemonic": "cmp"
                        }
                      },
                      "children": [],
                      "locations": [
                        {
                          "type": "absolute",
                          "value": 5368722433
                        },
                        {
                          "type": "absolute",
                          "value": 5368722402
                        },
                        {
                          "type": "absolute",
                          "value": 5368722442
                        },
                        {
                          "type": "absolute",
                          "value": 5368722427
                        },
                        {
                          "type": "absolute",
                          "value": 5368722414
                        }
                      ],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "number",
                              "number": 17744,
                              "description": "IMAGE_NT_SIGNATURE (PE)"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 5368722414
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 80
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 69
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "or"
                        }
                      },
                      "children": [
                        {
                          "success": true,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "number",
                              "number": 23117,
                              "description": "IMAGE_DOS_SIGNATURE (MZ)"
                            }
                          },
                          "children": [],
                          "locations": [
                            {
                              "type": "absolute",
                              "value": 5368722397
                            }
                          ],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 77
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "number",
                                  "number": 90
                                }
                              },
                              "children": [],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    },
                    {
                      "success": true,
                      "node": {
                        "type": "statement",
                        "statement": {
                          "type": "optional"
                        }
                      },
                      "children": [
                        {
                          "success": false,
                          "node": {
                            "type": "statement",
                            "statement": {
                              "type": "and"
                            }
                          },
                          "children": [
                            {
                              "success": true,
                              "node": {
                                "type": "feature",
                                "feature": {
                                  "type": "operand offset",
                                  "index": 1,
                                  "operand_offset": 60,
                                  "description": "IMAGE_DOS_HEADER.e_lfanew"
                                }
                              },
                              "children": [],
                              "locations": [
                                {
                                  "type": "absolute",
                                  "value": 5368722407
                                }
                              ],
                              "captures": {}
                            },
                            {
                              "success": false,
                              "node": {
                                "type": "statement",
                                "statement": {
                                  "type": "or"
                                }
                              },
                              "children": [
                                {
                                  "success": false,
                                  "node": {
                                    "type": "statement",
                                    "statement": {
                                      "type": "and"
                                    }
                                  },
                                  "children": [
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "arch",
                                          "arch": "i386"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 80,
                                          "description": "IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 52,
                                          "description": "IMAGE_NT_HEADERS.OptionalHeader.ImageBase"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    }
                                  ],
                                  "locations": [],
                                  "captures": {}
                                },
                                {
                                  "success": false,
                                  "node": {
                                    "type": "statement",
                                    "statement": {
                                      "type": "and"
                                    }
                                  },
                                  "children": [
                                    {
                                      "success": true,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "arch",
                                          "arch": "amd64"
                                        }
                                      },
                                      "children": [],
                                      "locations": [
                                        {
                                          "type": "no address"
                                        }
                                      ],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 80,
                                          "description": "IMAGE_NT_HEADERS64.OptionalHeader.SizeOfImage"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    },
                                    {
                                      "success": false,
                                      "node": {
                                        "type": "feature",
                                        "feature": {
                                          "type": "operand offset",
                                          "index": 1,
                                          "operand_offset": 48,
                                          "description": "IMAGE_NT_HEADERS64.OptionalHeader.ImageBase"
                                        }
                                      },
                                      "children": [],
                                      "locations": [],
                                      "captures": {}
                                    }
                                  ],
                                  "locations": [],
                                  "captures": {}
                                }
                              ],
                              "locations": [],
                              "captures": {}
                            }
                          ],
                          "locations": [],
                          "captures": {}
                        },
                        {
                          "success": false,
                          "node": {
                            "type": "feature",
                            "feature": {
                              "type": "match",
                              "match": "parse PE header/3a0d016707f44fa5b41262f634a21c96"
                            }
                          },
                          "children": [],
                          "locations": [],
                          "captures": {}
                        }
                      ],
                      "locations": [],
                      "captures": {}
                    }
                  ],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      },
      "contains PDB path": {
        "meta": {
          "name": "contains PDB path",
          "namespace": "executable/pe/pdb",
          "authors": [
            "moritz.raabe@mandiant.com"
          ],
          "scopes": {
            "static": "file",
            "dynamic": "file"
          },
          "attack": [],
          "mbc": [],
          "references": [],
          "examples": [
            "464EF2CA59782CE697BC329713698CCC"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: contains PDB path\r\n    namespace: executable/pe/pdb\r\n    authors:\r\n      - moritz.raabe@mandiant.com\r\n    scopes:\r\n      static: file\r\n      dynamic: file\r\n    examples:\r\n      - 464EF2CA59782CE697BC329713698CCC  # level32.exe\r\n  features:\r\n    - string: /:\\\\.*\\.pdb/\r\n",
        "matches": [
          [
            {
              "type": "no address"
            },
            {
              "success": true,
              "node": {
                "type": "feature",
                "feature": {
                  "type": "regex",
                  "regex": "/:\\\\.*\\.pdb/"
                }
              },
              "children": [],
              "locations": [
                {
                  "type": "file",
                  "value": 22216
                }
              ],
              "captures": {
                "C:\\Users\\user\\OneDrive\\Desktop\\babycmp\\x64\\Release\\babycmp.pdb": [
                  {
                    "type": "file",
                    "value": 22216
                  }
                ]
              }
            }
          ]
        ]
      },
      "reference analysis tools strings": {
        "meta": {
          "name": "reference analysis tools strings",
          "namespace": "anti-analysis",
          "authors": [
            "michael.hunhoff@mandiant.com"
          ],
          "scopes": {
            "static": "file",
            "dynamic": "file"
          },
          "attack": [],
          "mbc": [
            {
              "parts": [
                "Discovery",
                "Analysis Tool Discovery",
                "Process detection"
              ],
              "objective": "Discovery",
              "behavior": "Analysis Tool Discovery",
              "method": "Process detection",
              "id": "B0013.001"
            }
          ],
          "references": [
            "https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiAnalysis/process.cpp"
          ],
          "examples": [
            "al-khaser_x86.exe_"
          ],
          "description": "",
          "lib": false,
          "is_subscope_rule": false,
          "maec": {}
        },
        "source": "rule:\r\n  meta:\r\n    name: reference analysis tools strings\r\n    namespace: anti-analysis\r\n    authors:\r\n      - michael.hunhoff@mandiant.com\r\n    scopes:\r\n      static: file\r\n      dynamic: file\r\n    mbc:\r\n      - Discovery::Analysis Tool Discovery::Process detection [B0013.001]\r\n    references:\r\n      - https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiAnalysis/process.cpp\r\n    examples:\r\n      - al-khaser_x86.exe_\r\n  features:\r\n    - or:\r\n      - string: /ollydbg(\\.exe)?/i\r\n      - string: /ProcessHacker(\\.exe)?/i\r\n      - string: /tcpview(\\.exe)?/i\r\n      - string: /autoruns(\\.exe)?/i\r\n      - string: /autorunsc(\\.exe)?/i\r\n      - string: /filemon(\\.exe)?/i\r\n      - string: /procmon(\\.exe)?/i\r\n      - string: /regmon(\\.exe)?/i\r\n      - string: /procexp(\\.exe)?/i\r\n      - string: /(?<!\\w)ida[gqtuw]?(\\.exe)?$/i\r\n      - string: /ida[gqtuw]?64(\\.exe)?$/i\r\n      - string: /ImmunityDebugger(\\.exe)?/i\r\n      - string: /Wireshark(\\.exe)?/i\r\n      - string: /dumpcap(\\.exe)?/i\r\n      - string: /HookExplorer(\\.exe)?/i\r\n      - string: /ImportREC(\\.exe)?/i\r\n      - string: /PETools(\\.exe)?/i\r\n      - string: /LordPE(\\.exe)?/i\r\n      - string: /SysInspector(\\.exe)?/i\r\n      - string: /proc_analyzer(\\.exe)?/i\r\n      - string: /sysAnalyzer(\\.exe)?/i\r\n      - string: /sniff_hit(\\.exe)?/i\r\n      - string: /windbg(\\.exe)?/i\r\n      - string: /joeboxcontrol(\\.exe)?/i\r\n      - string: /joeboxserver(\\.exe)?/i\r\n      - string: /ResourceHacker(\\.exe)?/i\r\n      - string: /x32dbg(\\.exe)?/i\r\n      - string: /x64dbg(\\.exe)?/i\r\n      - string: /Fiddler(\\.exe)?/i\r\n      - string: /httpdebugger(\\.exe)?/i\r\n      - string: /fakenet(\\.exe)?/i\r\n      - string: /netmon(\\.exe)?/i\r\n      - string: /WPE PRO(\\.exe)?/i\r\n      - string: /decompile(\\.exe)?/i\r\n      - string: /scylla/i\r\n      - string: /megadumper/i\r\n",
        "matches": [
          [
            {
              "type": "no address"
            },
            {
              "success": true,
              "node": {
                "type": "statement",
                "statement": {
                  "type": "or"
                }
              },
              "children": [
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/ollydbg(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/ProcessHacker(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/tcpview(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/autoruns(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/autorunsc(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/filemon(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/procmon(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/regmon(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/procexp(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": true,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/(?<!\\w)ida[gqtuw]?(\\.exe)?$/i"
                    }
                  },
                  "children": [],
                  "locations": [
                    {
                      "type": "file",
                      "value": 52401
                    },
                    {
                      "type": "file",
                      "value": 60605
                    }
                  ],
                  "captures": {
                    "IDAT": [
                      {
                        "type": "file",
                        "value": 52401
                      },
                      {
                        "type": "file",
                        "value": 60605
                      }
                    ]
                  }
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/ida[gqtuw]?64(\\.exe)?$/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/ImmunityDebugger(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/Wireshark(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/dumpcap(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/HookExplorer(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/ImportREC(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/PETools(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/LordPE(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/SysInspector(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/proc_analyzer(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/sysAnalyzer(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/sniff_hit(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/windbg(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/joeboxcontrol(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/joeboxserver(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/ResourceHacker(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/x32dbg(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/x64dbg(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/Fiddler(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/httpdebugger(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/fakenet(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/netmon(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/WPE PRO(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/decompile(\\.exe)?/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/scylla/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                },
                {
                  "success": false,
                  "node": {
                    "type": "feature",
                    "feature": {
                      "type": "regex",
                      "regex": "/megadumper/i"
                    }
                  },
                  "children": [],
                  "locations": [],
                  "captures": {}
                }
              ],
              "locations": [],
              "captures": {}
            }
          ]
        ]
      }
    }
  },
  "MITRE ATT&CK": [
    "T1129"
  ]
}